interactions:
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents
  response:
    content: '[{"name":".github","path":".github","sha":"338665452bc262a4500b18b4dd65ef52a70241ff","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/.github?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/.github","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/338665452bc262a4500b18b4dd65ef52a70241ff","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/.github?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/338665452bc262a4500b18b4dd65ef52a70241ff","html":"https://github.com/eidolon-ai/eidolon/tree/main/.github"}},{"name":".gitignore","path":".gitignore","sha":"6254fcde5a2dc05935e4745485a8090d01e01f61","size":3292,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/.gitignore?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/.gitignore","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/6254fcde5a2dc05935e4745485a8090d01e01f61","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/.gitignore","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/.gitignore?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/6254fcde5a2dc05935e4745485a8090d01e01f61","html":"https://github.com/eidolon-ai/eidolon/blob/main/.gitignore"}},{"name":".idea","path":".idea","sha":"783abf540666e259bbf0bc51e10568db1274fd48","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/.idea?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/.idea","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/783abf540666e259bbf0bc51e10568db1274fd48","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/.idea?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/783abf540666e259bbf0bc51e10568db1274fd48","html":"https://github.com/eidolon-ai/eidolon/tree/main/.idea"}},{"name":"LICENSE","path":"LICENSE","sha":"261eeb9e9f8b2b4b0d119366dda99c6fd7d35c64","size":11357,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/LICENSE?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/LICENSE","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/261eeb9e9f8b2b4b0d119366dda99c6fd7d35c64","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/LICENSE","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/LICENSE?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/261eeb9e9f8b2b4b0d119366dda99c6fd7d35c64","html":"https://github.com/eidolon-ai/eidolon/blob/main/LICENSE"}},{"name":"README.md","path":"README.md","sha":"01966ef9a979a5a42c1988349f5ca5bbb186d432","size":2840,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/README.md?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/README.md","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/01966ef9a979a5a42c1988349f5ca5bbb186d432","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/README.md","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/README.md?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/01966ef9a979a5a42c1988349f5ca5bbb186d432","html":"https://github.com/eidolon-ai/eidolon/blob/main/README.md"}},{"name":"cli","path":"cli","sha":"4a527a2be1f96986b75f883d26e7503555c7b0a3","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/cli?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/cli","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/4a527a2be1f96986b75f883d26e7503555c7b0a3","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/cli?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/4a527a2be1f96986b75f883d26e7503555c7b0a3","html":"https://github.com/eidolon-ai/eidolon/tree/main/cli"}},{"name":"docs","path":"docs","sha":"c4991c33e8585a6bb57d538fb031706d872d982b","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/docs","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/c4991c33e8585a6bb57d538fb031706d872d982b","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/c4991c33e8585a6bb57d538fb031706d872d982b","html":"https://github.com/eidolon-ai/eidolon/tree/main/docs"}},{"name":"eidolon.iml","path":"eidolon.iml","sha":"d35235ca8ce5ab539b1984aea0d7c12982467e12","size":848,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/eidolon.iml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/eidolon.iml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/d35235ca8ce5ab539b1984aea0d7c12982467e12","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/eidolon.iml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/eidolon.iml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/d35235ca8ce5ab539b1984aea0d7c12982467e12","html":"https://github.com/eidolon-ai/eidolon/blob/main/eidolon.iml"}},{"name":"examples","path":"examples","sha":"359bc16be5e6f1cb3e75f2bfd33ec8fdff9f8d99","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/examples","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/359bc16be5e6f1cb3e75f2bfd33ec8fdff9f8d99","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/359bc16be5e6f1cb3e75f2bfd33ec8fdff9f8d99","html":"https://github.com/eidolon-ai/eidolon/tree/main/examples"}},{"name":"sdk","path":"sdk","sha":"5207a0f717f0fa614ed8c120c61c75e6a65070a9","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/sdk","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/5207a0f717f0fa614ed8c120c61c75e6a65070a9","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/5207a0f717f0fa614ed8c120c61c75e6a65070a9","html":"https://github.com/eidolon-ai/eidolon/tree/main/sdk"}},{"name":"webui","path":"webui","sha":"cbddc0d24c33dad3567395f1faf1823ed2bd7f48","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/webui","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/cbddc0d24c33dad3567395f1faf1823ed2bd7f48","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/cbddc0d24c33dad3567395f1faf1823ed2bd7f48","html":"https://github.com/eidolon-ai/eidolon/tree/main/webui"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:29:18 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E4A7:251C83:14F685:1E5D1A:65D519AD
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4792'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '208'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/docs?ref=main
  response:
    content: '[{"name":".gitignore","path":"docs/.gitignore","sha":"6240da8b10bfc3ab9dc4564c4169453cf143db7f","size":229,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/.gitignore?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/docs/.gitignore","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/6240da8b10bfc3ab9dc4564c4169453cf143db7f","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/docs/.gitignore","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/.gitignore?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/6240da8b10bfc3ab9dc4564c4169453cf143db7f","html":"https://github.com/eidolon-ai/eidolon/blob/main/docs/.gitignore"}},{"name":".vscode","path":"docs/.vscode","sha":"0c33c7c3c06928c95be8c68f9f15a508c844a3dc","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/.vscode?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/docs/.vscode","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/0c33c7c3c06928c95be8c68f9f15a508c844a3dc","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/.vscode?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/0c33c7c3c06928c95be8c68f9f15a508c844a3dc","html":"https://github.com/eidolon-ai/eidolon/tree/main/docs/.vscode"}},{"name":"README.md","path":"docs/README.md","sha":"b51abaabcd439b9f24bb332de9e368717bbfc2a2","size":2466,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/README.md?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/docs/README.md","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/b51abaabcd439b9f24bb332de9e368717bbfc2a2","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/docs/README.md","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/README.md?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/b51abaabcd439b9f24bb332de9e368717bbfc2a2","html":"https://github.com/eidolon-ai/eidolon/blob/main/docs/README.md"}},{"name":"astro.config.mjs","path":"docs/astro.config.mjs","sha":"b6e8456702e4ccc77c0845f27c974381d9c11258","size":1827,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/astro.config.mjs?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/docs/astro.config.mjs","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/b6e8456702e4ccc77c0845f27c974381d9c11258","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/docs/astro.config.mjs","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/astro.config.mjs?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/b6e8456702e4ccc77c0845f27c974381d9c11258","html":"https://github.com/eidolon-ai/eidolon/blob/main/docs/astro.config.mjs"}},{"name":"package-lock.json","path":"docs/package-lock.json","sha":"54cae8fcbe73285a9198892dd546308b8af63277","size":312899,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/package-lock.json?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/docs/package-lock.json","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/54cae8fcbe73285a9198892dd546308b8af63277","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/docs/package-lock.json","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/package-lock.json?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/54cae8fcbe73285a9198892dd546308b8af63277","html":"https://github.com/eidolon-ai/eidolon/blob/main/docs/package-lock.json"}},{"name":"package.json","path":"docs/package.json","sha":"d6fef9e19403726372b25914896e85de2e01b311","size":396,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/package.json?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/docs/package.json","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/d6fef9e19403726372b25914896e85de2e01b311","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/docs/package.json","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/package.json?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/d6fef9e19403726372b25914896e85de2e01b311","html":"https://github.com/eidolon-ai/eidolon/blob/main/docs/package.json"}},{"name":"public","path":"docs/public","sha":"07c05f1012124dc6fcfa11ca440196bb32e1efe2","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/public?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/docs/public","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/07c05f1012124dc6fcfa11ca440196bb32e1efe2","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/public?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/07c05f1012124dc6fcfa11ca440196bb32e1efe2","html":"https://github.com/eidolon-ai/eidolon/tree/main/docs/public"}},{"name":"src","path":"docs/src","sha":"cc00789fc494dc2abe7ebe63190b054c79b7519d","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/docs/src","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/cc00789fc494dc2abe7ebe63190b054c79b7519d","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/cc00789fc494dc2abe7ebe63190b054c79b7519d","html":"https://github.com/eidolon-ai/eidolon/tree/main/docs/src"}},{"name":"tsconfig.json","path":"docs/tsconfig.json","sha":"77da9dd00982b7abcda3abef70ffba6a4078cf37","size":41,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/tsconfig.json?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/docs/tsconfig.json","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/77da9dd00982b7abcda3abef70ffba6a4078cf37","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/docs/tsconfig.json","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/tsconfig.json?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/77da9dd00982b7abcda3abef70ffba6a4078cf37","html":"https://github.com/eidolon-ai/eidolon/blob/main/docs/tsconfig.json"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:29:18 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E4AA:254441:15355A:1E9C2A:65D519AE
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4788'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '212'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/cli?ref=main
  response:
    content: '[{"name":".DS_Store","path":"cli/.DS_Store","sha":"8cc0d1d2ce4da2c5ef8dbff704490c37ef8431cc","size":6148,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/cli/.DS_Store?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/cli/.DS_Store","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/8cc0d1d2ce4da2c5ef8dbff704490c37ef8431cc","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/cli/.DS_Store","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/cli/.DS_Store?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/8cc0d1d2ce4da2c5ef8dbff704490c37ef8431cc","html":"https://github.com/eidolon-ai/eidolon/blob/main/cli/.DS_Store"}},{"name":"README.md","path":"cli/README.md","sha":"e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/cli/README.md?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/cli/README.md","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/cli/README.md","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/cli/README.md?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","html":"https://github.com/eidolon-ai/eidolon/blob/main/cli/README.md"}},{"name":"cli.iml","path":"cli/cli.iml","sha":"f0a03691a348e5c18c62340198acf5851e3a38f5","size":685,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/cli/cli.iml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/cli/cli.iml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/f0a03691a348e5c18c62340198acf5851e3a38f5","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/cli/cli.iml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/cli/cli.iml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/f0a03691a348e5c18c62340198acf5851e3a38f5","html":"https://github.com/eidolon-ai/eidolon/blob/main/cli/cli.iml"}},{"name":"eidolon_ai_cli","path":"cli/eidolon_ai_cli","sha":"cbef9e3439f1c8cc94accf072aae0e51bbedf1ef","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/cli/eidolon_ai_cli?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/cli/eidolon_ai_cli","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/cbef9e3439f1c8cc94accf072aae0e51bbedf1ef","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/cli/eidolon_ai_cli?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/cbef9e3439f1c8cc94accf072aae0e51bbedf1ef","html":"https://github.com/eidolon-ai/eidolon/tree/main/cli/eidolon_ai_cli"}},{"name":"poetry.lock","path":"cli/poetry.lock","sha":"d58d99d9bf7234ecba8877de2e8b139268297988","size":33066,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/cli/poetry.lock?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/cli/poetry.lock","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/d58d99d9bf7234ecba8877de2e8b139268297988","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/cli/poetry.lock","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/cli/poetry.lock?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/d58d99d9bf7234ecba8877de2e8b139268297988","html":"https://github.com/eidolon-ai/eidolon/blob/main/cli/poetry.lock"}},{"name":"pyproject.toml","path":"cli/pyproject.toml","sha":"8445951f4885e0e2a5ac29e3ba01912d38047ff1","size":704,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/cli/pyproject.toml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/cli/pyproject.toml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/8445951f4885e0e2a5ac29e3ba01912d38047ff1","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/cli/pyproject.toml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/cli/pyproject.toml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/8445951f4885e0e2a5ac29e3ba01912d38047ff1","html":"https://github.com/eidolon-ai/eidolon/blob/main/cli/pyproject.toml"}},{"name":"tests","path":"cli/tests","sha":"88f131881951471c312deb15eda79bf2926c7a61","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/cli/tests?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/cli/tests","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/88f131881951471c312deb15eda79bf2926c7a61","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/cli/tests?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/88f131881951471c312deb15eda79bf2926c7a61","html":"https://github.com/eidolon-ai/eidolon/tree/main/cli/tests"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:29:18 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E4A9:30EE94:36F72:48401:65D519AE
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4789'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '211'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/examples?ref=main
  response:
    content: '[{"name":".pylintrc","path":"examples/.pylintrc","sha":"c512f3bfe2a09f680d124da5d43bb9bc1f40942d","size":21342,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/.pylintrc?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/.pylintrc","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/c512f3bfe2a09f680d124da5d43bb9bc1f40942d","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/.pylintrc","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/.pylintrc?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/c512f3bfe2a09f680d124da5d43bb9bc1f40942d","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/.pylintrc"}},{"name":"Dockerfile.code_search","path":"examples/Dockerfile.code_search","sha":"af7452e89d0a5db85aab55c78eb4ed76c232dfc3","size":283,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/Dockerfile.code_search?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/Dockerfile.code_search","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/af7452e89d0a5db85aab55c78eb4ed76c232dfc3","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/Dockerfile.code_search","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/Dockerfile.code_search?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/af7452e89d0a5db85aab55c78eb4ed76c232dfc3","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/Dockerfile.code_search"}},{"name":"Makefile","path":"examples/Makefile","sha":"19471b570aea103db9f889913fc37e0501163767","size":714,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/Makefile?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/Makefile","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/19471b570aea103db9f889913fc37e0501163767","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/Makefile","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/Makefile?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/19471b570aea103db9f889913fc37e0501163767","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/Makefile"}},{"name":"README.md","path":"examples/README.md","sha":"e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/README.md?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/README.md","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/README.md","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/README.md?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/README.md"}},{"name":"eidolon_examples","path":"examples/eidolon_examples","sha":"fd9d746910f1c6ee0b07c643e87e9ea3eb645ca6","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/examples/eidolon_examples","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/fd9d746910f1c6ee0b07c643e87e9ea3eb645ca6","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/fd9d746910f1c6ee0b07c643e87e9ea3eb645ca6","html":"https://github.com/eidolon-ai/eidolon/tree/main/examples/eidolon_examples"}},{"name":"examples.iml","path":"examples/examples.iml","sha":"071bba9f942ded630fdfd720796975d4a41eb37f","size":517,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/examples.iml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/examples.iml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/071bba9f942ded630fdfd720796975d4a41eb37f","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/examples.iml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/examples.iml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/071bba9f942ded630fdfd720796975d4a41eb37f","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/examples.iml"}},{"name":"poetry.lock","path":"examples/poetry.lock","sha":"b13b9a5e264d083ffafb04854609818903854225","size":421135,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/poetry.lock?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/poetry.lock","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/b13b9a5e264d083ffafb04854609818903854225","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/poetry.lock","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/poetry.lock?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/b13b9a5e264d083ffafb04854609818903854225","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/poetry.lock"}},{"name":"pyproject.toml","path":"examples/pyproject.toml","sha":"75b22f6432cd6c6c57e8b118830074f94de01d92","size":681,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/pyproject.toml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/pyproject.toml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/75b22f6432cd6c6c57e8b118830074f94de01d92","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/pyproject.toml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/pyproject.toml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/75b22f6432cd6c6c57e8b118830074f94de01d92","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/pyproject.toml"}},{"name":"tests","path":"examples/tests","sha":"eb8787edb39b1f058f129cd5ab509597f35ef647","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/tests?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/examples/tests","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/eb8787edb39b1f058f129cd5ab509597f35ef647","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/tests?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/eb8787edb39b1f058f129cd5ab509597f35ef647","html":"https://github.com/eidolon-ai/eidolon/tree/main/examples/tests"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:29:18 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E4AB:2511E0:14F64B:1E5D32:65D519AE
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4790'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '210'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/.idea?ref=main
  response:
    content: '[{"name":".gitignore","path":".idea/.gitignore","sha":"a7c382ed390c36f2fc3f162f89fd69a696aa4665","size":14,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/.idea/.gitignore?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/.idea/.gitignore","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/a7c382ed390c36f2fc3f162f89fd69a696aa4665","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/.idea/.gitignore","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/.idea/.gitignore?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/a7c382ed390c36f2fc3f162f89fd69a696aa4665","html":"https://github.com/eidolon-ai/eidolon/blob/main/.idea/.gitignore"}},{"name":"dataSources.xml","path":".idea/dataSources.xml","sha":"e2f17be487adaebb6b8eb5fd3ba7fb74ced16de8","size":519,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/.idea/dataSources.xml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/.idea/dataSources.xml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e2f17be487adaebb6b8eb5fd3ba7fb74ced16de8","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/.idea/dataSources.xml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/.idea/dataSources.xml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e2f17be487adaebb6b8eb5fd3ba7fb74ced16de8","html":"https://github.com/eidolon-ai/eidolon/blob/main/.idea/dataSources.xml"}},{"name":"eidolon.iml","path":".idea/eidolon.iml","sha":"7cd1e7b163b48e98514ca5b0f00ee56ed0885343","size":528,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/.idea/eidolon.iml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/.idea/eidolon.iml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/7cd1e7b163b48e98514ca5b0f00ee56ed0885343","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/.idea/eidolon.iml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/.idea/eidolon.iml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/7cd1e7b163b48e98514ca5b0f00ee56ed0885343","html":"https://github.com/eidolon-ai/eidolon/blob/main/.idea/eidolon.iml"}},{"name":"inspectionProfiles","path":".idea/inspectionProfiles","sha":"b720fd4a48e839f5b989853cf379ea1639db199e","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/.idea/inspectionProfiles?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/.idea/inspectionProfiles","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/b720fd4a48e839f5b989853cf379ea1639db199e","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/.idea/inspectionProfiles?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/b720fd4a48e839f5b989853cf379ea1639db199e","html":"https://github.com/eidolon-ai/eidolon/tree/main/.idea/inspectionProfiles"}},{"name":"misc.xml","path":".idea/misc.xml","sha":"32978c10c18507b24c427a9d05f80584d8b1d12d","size":396,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/.idea/misc.xml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/.idea/misc.xml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/32978c10c18507b24c427a9d05f80584d8b1d12d","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/.idea/misc.xml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/.idea/misc.xml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/32978c10c18507b24c427a9d05f80584d8b1d12d","html":"https://github.com/eidolon-ai/eidolon/blob/main/.idea/misc.xml"}},{"name":"modules.xml","path":".idea/modules.xml","sha":"6a998d59b87192a2c7621256e309e5b9193eaee0","size":565,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/.idea/modules.xml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/.idea/modules.xml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/6a998d59b87192a2c7621256e309e5b9193eaee0","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/.idea/modules.xml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/.idea/modules.xml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/6a998d59b87192a2c7621256e309e5b9193eaee0","html":"https://github.com/eidolon-ai/eidolon/blob/main/.idea/modules.xml"}},{"name":"runConfigurations","path":".idea/runConfigurations","sha":"f75b9f5378199884a97decef774cc62fc8e67240","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/.idea/runConfigurations?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/.idea/runConfigurations","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/f75b9f5378199884a97decef774cc62fc8e67240","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/.idea/runConfigurations?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/f75b9f5378199884a97decef774cc62fc8e67240","html":"https://github.com/eidolon-ai/eidolon/tree/main/.idea/runConfigurations"}},{"name":"vcs.xml","path":".idea/vcs.xml","sha":"35eb1ddfbbc029bcab630581847471d7f238ec53","size":167,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/.idea/vcs.xml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/.idea/vcs.xml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/35eb1ddfbbc029bcab630581847471d7f238ec53","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/.idea/vcs.xml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/.idea/vcs.xml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/35eb1ddfbbc029bcab630581847471d7f238ec53","html":"https://github.com/eidolon-ai/eidolon/blob/main/.idea/vcs.xml"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:29:18 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E4A8:2567E0:14F800:1E5E56:65D519AE
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4787'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '213'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/.github?ref=main
  response:
    content: '[{"name":"dependabot.yml","path":".github/dependabot.yml","sha":"bf113201affde08ee26bec20225472a44ff510a6","size":503,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/.github/dependabot.yml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/.github/dependabot.yml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/bf113201affde08ee26bec20225472a44ff510a6","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/.github/dependabot.yml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/.github/dependabot.yml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/bf113201affde08ee26bec20225472a44ff510a6","html":"https://github.com/eidolon-ai/eidolon/blob/main/.github/dependabot.yml"}},{"name":"workflows","path":".github/workflows","sha":"814658dc147b028faf1dabbf0638aa3e8afd82e8","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/.github/workflows?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/.github/workflows","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/814658dc147b028faf1dabbf0638aa3e8afd82e8","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/.github/workflows?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/814658dc147b028faf1dabbf0638aa3e8afd82e8","html":"https://github.com/eidolon-ai/eidolon/tree/main/.github/workflows"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:29:18 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E4A7:251C83:14F692:1E5D2B:65D519AE
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4791'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '209'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/.github/workflows?ref=main
  response:
    content: '[{"name":"docs.yml","path":".github/workflows/docs.yml","sha":"f1dd1dca7ced1440db8daaa7f82742bb1feb9481","size":1379,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/.github/workflows/docs.yml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/.github/workflows/docs.yml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/f1dd1dca7ced1440db8daaa7f82742bb1feb9481","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/.github/workflows/docs.yml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/.github/workflows/docs.yml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/f1dd1dca7ced1440db8daaa7f82742bb1feb9481","html":"https://github.com/eidolon-ai/eidolon/blob/main/.github/workflows/docs.yml"}},{"name":"publish_docker.yml","path":".github/workflows/publish_docker.yml","sha":"edca961ecb7a952ee9b83807e14adba4f990c8ff","size":756,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/.github/workflows/publish_docker.yml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/.github/workflows/publish_docker.yml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/edca961ecb7a952ee9b83807e14adba4f990c8ff","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/.github/workflows/publish_docker.yml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/.github/workflows/publish_docker.yml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/edca961ecb7a952ee9b83807e14adba4f990c8ff","html":"https://github.com/eidolon-ai/eidolon/blob/main/.github/workflows/publish_docker.yml"}},{"name":"publish_sdk.yml","path":".github/workflows/publish_sdk.yml","sha":"22b86d93c7336fa2bcdadf0333a56d729e374412","size":687,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/.github/workflows/publish_sdk.yml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/.github/workflows/publish_sdk.yml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/22b86d93c7336fa2bcdadf0333a56d729e374412","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/.github/workflows/publish_sdk.yml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/.github/workflows/publish_sdk.yml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/22b86d93c7336fa2bcdadf0333a56d729e374412","html":"https://github.com/eidolon-ai/eidolon/blob/main/.github/workflows/publish_sdk.yml"}},{"name":"test.yml","path":".github/workflows/test.yml","sha":"a9cb93e693cf010f6b70b80daf06c6619bd7d8cb","size":3438,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/.github/workflows/test.yml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/.github/workflows/test.yml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/a9cb93e693cf010f6b70b80daf06c6619bd7d8cb","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/.github/workflows/test.yml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/.github/workflows/test.yml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/a9cb93e693cf010f6b70b80daf06c6619bd7d8cb","html":"https://github.com/eidolon-ai/eidolon/blob/main/.github/workflows/test.yml"}},{"name":"version_sdk.yml","path":".github/workflows/version_sdk.yml","sha":"4ae82acb56058ee6a6a6ea3f32ae027ec06e06cd","size":705,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/.github/workflows/version_sdk.yml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/.github/workflows/version_sdk.yml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/4ae82acb56058ee6a6a6ea3f32ae027ec06e06cd","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/.github/workflows/version_sdk.yml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/.github/workflows/version_sdk.yml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/4ae82acb56058ee6a6a6ea3f32ae027ec06e06cd","html":"https://github.com/eidolon-ai/eidolon/blob/main/.github/workflows/version_sdk.yml"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:29:19 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E4AB:2511E0:14F658:1E5D45:65D519AE
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4786'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '214'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/.idea/runConfigurations?ref=main
  response:
    content: '[{"name":"code_search.xml","path":".idea/runConfigurations/code_search.xml","sha":"bc6c39f0174871ff6fc077ae3bae6eb52ff0909d","size":1305,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/.idea/runConfigurations/code_search.xml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/.idea/runConfigurations/code_search.xml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/bc6c39f0174871ff6fc077ae3bae6eb52ff0909d","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/.idea/runConfigurations/code_search.xml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/.idea/runConfigurations/code_search.xml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/bc6c39f0174871ff6fc077ae3bae6eb52ff0909d","html":"https://github.com/eidolon-ai/eidolon/blob/main/.idea/runConfigurations/code_search.xml"}},{"name":"getting_started_1.xml","path":".idea/runConfigurations/getting_started_1.xml","sha":"dd963aa48f7ae675d919815e148a748a7f7cf523","size":1327,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/.idea/runConfigurations/getting_started_1.xml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/.idea/runConfigurations/getting_started_1.xml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/dd963aa48f7ae675d919815e148a748a7f7cf523","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/.idea/runConfigurations/getting_started_1.xml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/.idea/runConfigurations/getting_started_1.xml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/dd963aa48f7ae675d919815e148a748a7f7cf523","html":"https://github.com/eidolon-ai/eidolon/blob/main/.idea/runConfigurations/getting_started_1.xml"}},{"name":"getting_started_2.xml","path":".idea/runConfigurations/getting_started_2.xml","sha":"4aa44fbe68fd1d6bfd02b23029cc2ccb7b34b1b9","size":1321,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/.idea/runConfigurations/getting_started_2.xml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/.idea/runConfigurations/getting_started_2.xml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/4aa44fbe68fd1d6bfd02b23029cc2ccb7b34b1b9","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/.idea/runConfigurations/getting_started_2.xml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/.idea/runConfigurations/getting_started_2.xml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/4aa44fbe68fd1d6bfd02b23029cc2ccb7b34b1b9","html":"https://github.com/eidolon-ai/eidolon/blob/main/.idea/runConfigurations/getting_started_2.xml"}},{"name":"getting_started_3.xml","path":".idea/runConfigurations/getting_started_3.xml","sha":"20e5bd824dd33931c35c61b98e82706336a92514","size":1327,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/.idea/runConfigurations/getting_started_3.xml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/.idea/runConfigurations/getting_started_3.xml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/20e5bd824dd33931c35c61b98e82706336a92514","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/.idea/runConfigurations/getting_started_3.xml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/.idea/runConfigurations/getting_started_3.xml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/20e5bd824dd33931c35c61b98e82706336a92514","html":"https://github.com/eidolon-ai/eidolon/blob/main/.idea/runConfigurations/getting_started_3.xml"}},{"name":"getting_started_4.xml","path":".idea/runConfigurations/getting_started_4.xml","sha":"420ec6c50690ec181d112d7bf0d0b3a78d4c7ca1","size":1326,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/.idea/runConfigurations/getting_started_4.xml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/.idea/runConfigurations/getting_started_4.xml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/420ec6c50690ec181d112d7bf0d0b3a78d4c7ca1","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/.idea/runConfigurations/getting_started_4.xml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/.idea/runConfigurations/getting_started_4.xml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/420ec6c50690ec181d112d7bf0d0b3a78d4c7ca1","html":"https://github.com/eidolon-ai/eidolon/blob/main/.idea/runConfigurations/getting_started_4.xml"}},{"name":"hello_world.xml","path":".idea/runConfigurations/hello_world.xml","sha":"b476c771e80a380421b3784a71954027a04c345a","size":1273,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/.idea/runConfigurations/hello_world.xml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/.idea/runConfigurations/hello_world.xml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/b476c771e80a380421b3784a71954027a04c345a","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/.idea/runConfigurations/hello_world.xml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/.idea/runConfigurations/hello_world.xml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/b476c771e80a380421b3784a71954027a04c345a","html":"https://github.com/eidolon-ai/eidolon/blob/main/.idea/runConfigurations/hello_world.xml"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:29:19 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E4A7:251C83:14F6A1:1E5D4F:65D519AE
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4784'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '216'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/.idea/inspectionProfiles?ref=main
  response:
    content: '[{"name":"Project_Default.xml","path":".idea/inspectionProfiles/Project_Default.xml","sha":"97cfbefa49e9a7226bf39a225c1775c31dbc458e","size":1508,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/.idea/inspectionProfiles/Project_Default.xml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/.idea/inspectionProfiles/Project_Default.xml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/97cfbefa49e9a7226bf39a225c1775c31dbc458e","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/.idea/inspectionProfiles/Project_Default.xml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/.idea/inspectionProfiles/Project_Default.xml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/97cfbefa49e9a7226bf39a225c1775c31dbc458e","html":"https://github.com/eidolon-ai/eidolon/blob/main/.idea/inspectionProfiles/Project_Default.xml"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:29:19 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E4A9:30EE94:36F83:48416:65D519AE
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4783'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '217'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/cli/eidolon_ai_cli?ref=main
  response:
    content: '[{"name":"StreamProcessor.py","path":"cli/eidolon_ai_cli/StreamProcessor.py","sha":"5784ea2a9ec662798a8a622ecca81666fa66ce5f","size":4719,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/cli/eidolon_ai_cli/StreamProcessor.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/cli/eidolon_ai_cli/StreamProcessor.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/5784ea2a9ec662798a8a622ecca81666fa66ce5f","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/cli/eidolon_ai_cli/StreamProcessor.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/cli/eidolon_ai_cli/StreamProcessor.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/5784ea2a9ec662798a8a622ecca81666fa66ce5f","html":"https://github.com/eidolon-ai/eidolon/blob/main/cli/eidolon_ai_cli/StreamProcessor.py"}},{"name":"__init__.py","path":"cli/eidolon_ai_cli/__init__.py","sha":"e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/cli/eidolon_ai_cli/__init__.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/cli/eidolon_ai_cli/__init__.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/cli/eidolon_ai_cli/__init__.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/cli/eidolon_ai_cli/__init__.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","html":"https://github.com/eidolon-ai/eidolon/blob/main/cli/eidolon_ai_cli/__init__.py"}},{"name":"auth_web_server.py","path":"cli/eidolon_ai_cli/auth_web_server.py","sha":"dabdad5523aa0351492e833dbc938ec51be87f49","size":1531,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/cli/eidolon_ai_cli/auth_web_server.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/cli/eidolon_ai_cli/auth_web_server.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/dabdad5523aa0351492e833dbc938ec51be87f49","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/cli/eidolon_ai_cli/auth_web_server.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/cli/eidolon_ai_cli/auth_web_server.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/dabdad5523aa0351492e833dbc938ec51be87f49","html":"https://github.com/eidolon-ai/eidolon/blob/main/cli/eidolon_ai_cli/auth_web_server.py"}},{"name":"client.py","path":"cli/eidolon_ai_cli/client.py","sha":"80ad992f96c769d3c1440a2abf89528657da3e6a","size":8860,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/cli/eidolon_ai_cli/client.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/cli/eidolon_ai_cli/client.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/80ad992f96c769d3c1440a2abf89528657da3e6a","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/cli/eidolon_ai_cli/client.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/cli/eidolon_ai_cli/client.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/80ad992f96c769d3c1440a2abf89528657da3e6a","html":"https://github.com/eidolon-ai/eidolon/blob/main/cli/eidolon_ai_cli/client.py"}},{"name":"live_console.py","path":"cli/eidolon_ai_cli/live_console.py","sha":"ed69e78d7faef0f9f7c799bd6a750d0bde354883","size":4008,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/cli/eidolon_ai_cli/live_console.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/cli/eidolon_ai_cli/live_console.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/ed69e78d7faef0f9f7c799bd6a750d0bde354883","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/cli/eidolon_ai_cli/live_console.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/cli/eidolon_ai_cli/live_console.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/ed69e78d7faef0f9f7c799bd6a750d0bde354883","html":"https://github.com/eidolon-ai/eidolon/blob/main/cli/eidolon_ai_cli/live_console.py"}},{"name":"main.py","path":"cli/eidolon_ai_cli/main.py","sha":"3763a0ace275c1740216648d3ae9dfd096f51ca2","size":2964,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/cli/eidolon_ai_cli/main.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/cli/eidolon_ai_cli/main.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/3763a0ace275c1740216648d3ae9dfd096f51ca2","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/cli/eidolon_ai_cli/main.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/cli/eidolon_ai_cli/main.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/3763a0ace275c1740216648d3ae9dfd096f51ca2","html":"https://github.com/eidolon-ai/eidolon/blob/main/cli/eidolon_ai_cli/main.py"}},{"name":"markdown.py","path":"cli/eidolon_ai_cli/markdown.py","sha":"c256021352af3b8f5467c6b8da33a5d8d7feb224","size":23673,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/cli/eidolon_ai_cli/markdown.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/cli/eidolon_ai_cli/markdown.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/c256021352af3b8f5467c6b8da33a5d8d7feb224","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/cli/eidolon_ai_cli/markdown.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/cli/eidolon_ai_cli/markdown.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/c256021352af3b8f5467c6b8da33a5d8d7feb224","html":"https://github.com/eidolon-ai/eidolon/blob/main/cli/eidolon_ai_cli/markdown.py"}},{"name":"schema.py","path":"cli/eidolon_ai_cli/schema.py","sha":"1b1b9cca0db4cd64d4045d9080cb3fc75bd52a9a","size":12296,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/cli/eidolon_ai_cli/schema.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/cli/eidolon_ai_cli/schema.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/1b1b9cca0db4cd64d4045d9080cb3fc75bd52a9a","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/cli/eidolon_ai_cli/schema.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/cli/eidolon_ai_cli/schema.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/1b1b9cca0db4cd64d4045d9080cb3fc75bd52a9a","html":"https://github.com/eidolon-ai/eidolon/blob/main/cli/eidolon_ai_cli/schema.py"}},{"name":"security.py","path":"cli/eidolon_ai_cli/security.py","sha":"11015ec30cad57ae40dd30a8c7b77251ec8e7cc8","size":5188,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/cli/eidolon_ai_cli/security.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/cli/eidolon_ai_cli/security.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/11015ec30cad57ae40dd30a8c7b77251ec8e7cc8","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/cli/eidolon_ai_cli/security.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/cli/eidolon_ai_cli/security.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/11015ec30cad57ae40dd30a8c7b77251ec8e7cc8","html":"https://github.com/eidolon-ai/eidolon/blob/main/cli/eidolon_ai_cli/security.py"}},{"name":"terminal2.py","path":"cli/eidolon_ai_cli/terminal2.py","sha":"36324c7fb9b69e96aa25df6ba99f2bec8a409ed4","size":9278,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/cli/eidolon_ai_cli/terminal2.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/cli/eidolon_ai_cli/terminal2.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/36324c7fb9b69e96aa25df6ba99f2bec8a409ed4","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/cli/eidolon_ai_cli/terminal2.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/cli/eidolon_ai_cli/terminal2.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/36324c7fb9b69e96aa25df6ba99f2bec8a409ed4","html":"https://github.com/eidolon-ai/eidolon/blob/main/cli/eidolon_ai_cli/terminal2.py"}},{"name":"util.py","path":"cli/eidolon_ai_cli/util.py","sha":"d82f35c68fde39162e0e4bdd4cb6b65fa154075b","size":2669,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/cli/eidolon_ai_cli/util.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/cli/eidolon_ai_cli/util.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/d82f35c68fde39162e0e4bdd4cb6b65fa154075b","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/cli/eidolon_ai_cli/util.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/cli/eidolon_ai_cli/util.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/d82f35c68fde39162e0e4bdd4cb6b65fa154075b","html":"https://github.com/eidolon-ai/eidolon/blob/main/cli/eidolon_ai_cli/util.py"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:29:19 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E4AA:254441:153564:1E9C3B:65D519AE
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4782'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '218'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/.vscode?ref=main
  response:
    content: '[{"name":"extensions.json","path":"docs/.vscode/extensions.json","sha":"22a15055d638988eb33bb61536d27f623df92e4a","size":87,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/.vscode/extensions.json?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/docs/.vscode/extensions.json","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/22a15055d638988eb33bb61536d27f623df92e4a","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/docs/.vscode/extensions.json","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/.vscode/extensions.json?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/22a15055d638988eb33bb61536d27f623df92e4a","html":"https://github.com/eidolon-ai/eidolon/blob/main/docs/.vscode/extensions.json"}},{"name":"launch.json","path":"docs/.vscode/launch.json","sha":"d6422097621fd7c1b1ccc6daa670c46aed7ef5b7","size":207,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/.vscode/launch.json?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/docs/.vscode/launch.json","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/d6422097621fd7c1b1ccc6daa670c46aed7ef5b7","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/docs/.vscode/launch.json","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/.vscode/launch.json?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/d6422097621fd7c1b1ccc6daa670c46aed7ef5b7","html":"https://github.com/eidolon-ai/eidolon/blob/main/docs/.vscode/launch.json"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:29:19 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E4A8:2567E0:14F80D:1E5E65:65D519AE
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4781'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '219'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk?ref=main
  response:
    content: '[{"name":".pylintrc","path":"sdk/.pylintrc","sha":"c512f3bfe2a09f680d124da5d43bb9bc1f40942d","size":21342,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/.pylintrc?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/.pylintrc","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/c512f3bfe2a09f680d124da5d43bb9bc1f40942d","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/.pylintrc","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/.pylintrc?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/c512f3bfe2a09f680d124da5d43bb9bc1f40942d","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/.pylintrc"}},{"name":"Dockerfile","path":"sdk/Dockerfile","sha":"22ca9e360119cfbaefc38a757606cd28a17b6cab","size":472,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/Dockerfile?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/Dockerfile","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/22ca9e360119cfbaefc38a757606cd28a17b6cab","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/Dockerfile","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/Dockerfile?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/22ca9e360119cfbaefc38a757606cd28a17b6cab","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/Dockerfile"}},{"name":"Makefile","path":"sdk/Makefile","sha":"d58ff56b85391696b6567658e9e76642246d6c21","size":687,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/Makefile?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/Makefile","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/d58ff56b85391696b6567658e9e76642246d6c21","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/Makefile","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/Makefile?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/d58ff56b85391696b6567658e9e76642246d6c21","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/Makefile"}},{"name":"README.md","path":"sdk/README.md","sha":"23faca2171a6888afae0c0a9c26290da492009ea","size":2247,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/README.md?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/README.md","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/23faca2171a6888afae0c0a9c26290da492009ea","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/README.md","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/README.md?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/23faca2171a6888afae0c0a9c26290da492009ea","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/README.md"}},{"name":"eidolon_ai_sdk","path":"sdk/eidolon_ai_sdk","sha":"ff5b2bcc12125aa95d80bb3c5ee363c523b624ba","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/sdk/eidolon_ai_sdk","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/ff5b2bcc12125aa95d80bb3c5ee363c523b624ba","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/ff5b2bcc12125aa95d80bb3c5ee363c523b624ba","html":"https://github.com/eidolon-ai/eidolon/tree/main/sdk/eidolon_ai_sdk"}},{"name":"eidos_server","path":"sdk/eidos_server","sha":"eb5e82f64781deb783cc44bccc97d5b924398b4f","size":86,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidos_server?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidos_server","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/eb5e82f64781deb783cc44bccc97d5b924398b4f","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidos_server","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidos_server?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/eb5e82f64781deb783cc44bccc97d5b924398b4f","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidos_server"}},{"name":"logging.conf","path":"sdk/logging.conf","sha":"470fb385257d3f2eb2e608022174828b8ed6e6bb","size":587,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/logging.conf?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/logging.conf","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/470fb385257d3f2eb2e608022174828b8ed6e6bb","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/logging.conf","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/logging.conf?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/470fb385257d3f2eb2e608022174828b8ed6e6bb","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/logging.conf"}},{"name":"poetry.lock","path":"sdk/poetry.lock","sha":"01fb895b36e9428ba69c7a40b7447f717a48321e","size":416146,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/poetry.lock?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/poetry.lock","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/01fb895b36e9428ba69c7a40b7447f717a48321e","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/poetry.lock","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/poetry.lock?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/01fb895b36e9428ba69c7a40b7447f717a48321e","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/poetry.lock"}},{"name":"pyproject.toml","path":"sdk/pyproject.toml","sha":"46476e6457a316b47ff79caf830fd82c2d1104d5","size":1520,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/pyproject.toml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/pyproject.toml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/46476e6457a316b47ff79caf830fd82c2d1104d5","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/pyproject.toml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/pyproject.toml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/46476e6457a316b47ff79caf830fd82c2d1104d5","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/pyproject.toml"}},{"name":"pytest.ini","path":"sdk/pytest.ini","sha":"2f4c80e307508cb30bd6635716963f88f6796738","size":29,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/pytest.ini?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/pytest.ini","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/2f4c80e307508cb30bd6635716963f88f6796738","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/pytest.ini","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/pytest.ini?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/2f4c80e307508cb30bd6635716963f88f6796738","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/pytest.ini"}},{"name":"sdk.iml","path":"sdk/sdk.iml","sha":"cef17e9b9d4cf681d3a0a009e434ad7aa937256f","size":685,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/sdk.iml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/sdk.iml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/cef17e9b9d4cf681d3a0a009e434ad7aa937256f","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/sdk.iml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/sdk.iml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/cef17e9b9d4cf681d3a0a009e434ad7aa937256f","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/sdk.iml"}},{"name":"tests","path":"sdk/tests","sha":"6026b3c82749e61ec97cee71709bc49c7c9336ec","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/sdk/tests","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/6026b3c82749e61ec97cee71709bc49c7c9336ec","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/6026b3c82749e61ec97cee71709bc49c7c9336ec","html":"https://github.com/eidolon-ai/eidolon/tree/main/sdk/tests"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:29:19 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E4AC:260C59:13811D:1C4598:65D519AE
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4780'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '220'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/webui?ref=main
  response:
    content: '[{"name":".eslintrc.json","path":"webui/.eslintrc.json","sha":"07a4090464f92ca6c2815f94673d68e9f76479ac","size":552,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/.eslintrc.json?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/webui/.eslintrc.json","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/07a4090464f92ca6c2815f94673d68e9f76479ac","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/webui/.eslintrc.json","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/.eslintrc.json?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/07a4090464f92ca6c2815f94673d68e9f76479ac","html":"https://github.com/eidolon-ai/eidolon/blob/main/webui/.eslintrc.json"}},{"name":"README.md","path":"webui/README.md","sha":"4897b47522f43a7e36a502edd968361824bf4378","size":1538,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/README.md?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/webui/README.md","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/4897b47522f43a7e36a502edd968361824bf4378","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/webui/README.md","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/README.md?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/4897b47522f43a7e36a502edd968361824bf4378","html":"https://github.com/eidolon-ai/eidolon/blob/main/webui/README.md"}},{"name":"app","path":"webui/app","sha":"be4beee7cb6d38c135074a18ad6df14b1d0b5cb2","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/app?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/webui/app","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/be4beee7cb6d38c135074a18ad6df14b1d0b5cb2","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/app?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/be4beee7cb6d38c135074a18ad6df14b1d0b5cb2","html":"https://github.com/eidolon-ai/eidolon/tree/main/webui/app"}},{"name":"assets","path":"webui/assets","sha":"b125010bd41c33a655bdb66ec4de2c964be630dd","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/assets?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/webui/assets","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/b125010bd41c33a655bdb66ec4de2c964be630dd","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/assets?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/b125010bd41c33a655bdb66ec4de2c964be630dd","html":"https://github.com/eidolon-ai/eidolon/tree/main/webui/assets"}},{"name":"components","path":"webui/components","sha":"a4a80e376ad8afbb656f657990efb0b6daf4886b","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/components?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/webui/components","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/a4a80e376ad8afbb656f657990efb0b6daf4886b","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/components?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/a4a80e376ad8afbb656f657990efb0b6daf4886b","html":"https://github.com/eidolon-ai/eidolon/tree/main/webui/components"}},{"name":"jest.config.ts","path":"webui/jest.config.ts","sha":"bc455217aa0dd13e044e1a967bc700fafe775069","size":828,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/jest.config.ts?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/webui/jest.config.ts","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/bc455217aa0dd13e044e1a967bc700fafe775069","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/webui/jest.config.ts","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/jest.config.ts?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/bc455217aa0dd13e044e1a967bc700fafe775069","html":"https://github.com/eidolon-ai/eidolon/blob/main/webui/jest.config.ts"}},{"name":"jest.setup.ts","path":"webui/jest.setup.ts","sha":"46888661767b0c944948b5545d2d5acf160bb7ee","size":223,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/jest.setup.ts?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/webui/jest.setup.ts","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/46888661767b0c944948b5545d2d5acf160bb7ee","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/webui/jest.setup.ts","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/jest.setup.ts?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/46888661767b0c944948b5545d2d5acf160bb7ee","html":"https://github.com/eidolon-ai/eidolon/blob/main/webui/jest.setup.ts"}},{"name":"lib","path":"webui/lib","sha":"1c4470ac211e7db33dadac4ca6fa0ea7291debd3","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/lib?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/webui/lib","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/1c4470ac211e7db33dadac4ca6fa0ea7291debd3","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/lib?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/1c4470ac211e7db33dadac4ca6fa0ea7291debd3","html":"https://github.com/eidolon-ai/eidolon/tree/main/webui/lib"}},{"name":"next-env.d.ts","path":"webui/next-env.d.ts","sha":"4f11a03dc6cc37f2b5105c08f2e7b24c603ab2f4","size":201,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/next-env.d.ts?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/webui/next-env.d.ts","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/4f11a03dc6cc37f2b5105c08f2e7b24c603ab2f4","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/webui/next-env.d.ts","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/next-env.d.ts?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/4f11a03dc6cc37f2b5105c08f2e7b24c603ab2f4","html":"https://github.com/eidolon-ai/eidolon/blob/main/webui/next-env.d.ts"}},{"name":"next.config.js","path":"webui/next.config.js","sha":"72ac83d8d3bd1315272f07d67eb9561e747ac4f7","size":447,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/next.config.js?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/webui/next.config.js","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/72ac83d8d3bd1315272f07d67eb9561e747ac4f7","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/webui/next.config.js","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/next.config.js?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/72ac83d8d3bd1315272f07d67eb9561e747ac4f7","html":"https://github.com/eidolon-ai/eidolon/blob/main/webui/next.config.js"}},{"name":"package.json","path":"webui/package.json","sha":"bef94428e29bbd9f6aaef3b2b03a283b3bc9493c","size":2750,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/package.json?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/webui/package.json","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/bef94428e29bbd9f6aaef3b2b03a283b3bc9493c","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/webui/package.json","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/package.json?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/bef94428e29bbd9f6aaef3b2b03a283b3bc9493c","html":"https://github.com/eidolon-ai/eidolon/blob/main/webui/package.json"}},{"name":"pnpm-lock.yaml","path":"webui/pnpm-lock.yaml","sha":"89d59693397cc45790ee3efc70afe34784a74a31","size":260851,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/pnpm-lock.yaml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/webui/pnpm-lock.yaml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/89d59693397cc45790ee3efc70afe34784a74a31","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/webui/pnpm-lock.yaml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/pnpm-lock.yaml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/89d59693397cc45790ee3efc70afe34784a74a31","html":"https://github.com/eidolon-ai/eidolon/blob/main/webui/pnpm-lock.yaml"}},{"name":"postcss.config.js","path":"webui/postcss.config.js","sha":"fef1b2256d61e21330bc8de1cb6978cfac54a9a9","size":94,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/postcss.config.js?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/webui/postcss.config.js","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/fef1b2256d61e21330bc8de1cb6978cfac54a9a9","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/webui/postcss.config.js","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/postcss.config.js?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/fef1b2256d61e21330bc8de1cb6978cfac54a9a9","html":"https://github.com/eidolon-ai/eidolon/blob/main/webui/postcss.config.js"}},{"name":"prettier.config.cjs","path":"webui/prettier.config.cjs","sha":"687e1053d63ae700d2a9a085baacad928d6fe481","size":928,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/prettier.config.cjs?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/webui/prettier.config.cjs","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/687e1053d63ae700d2a9a085baacad928d6fe481","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/webui/prettier.config.cjs","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/prettier.config.cjs?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/687e1053d63ae700d2a9a085baacad928d6fe481","html":"https://github.com/eidolon-ai/eidolon/blob/main/webui/prettier.config.cjs"}},{"name":"public","path":"webui/public","sha":"d8b90f336ce1e236463865833924563b2526c667","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/public?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/webui/public","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/d8b90f336ce1e236463865833924563b2526c667","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/public?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/d8b90f336ce1e236463865833924563b2526c667","html":"https://github.com/eidolon-ai/eidolon/tree/main/webui/public"}},{"name":"tailwind.config.js","path":"webui/tailwind.config.js","sha":"13d4e6aefd4369e1d6c604a8b4e669a992d8c6af","size":3740,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/tailwind.config.js?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/webui/tailwind.config.js","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/13d4e6aefd4369e1d6c604a8b4e669a992d8c6af","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/webui/tailwind.config.js","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/tailwind.config.js?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/13d4e6aefd4369e1d6c604a8b4e669a992d8c6af","html":"https://github.com/eidolon-ai/eidolon/blob/main/webui/tailwind.config.js"}},{"name":"template.env","path":"webui/template.env","sha":"55456d9f70a068b015b0d22de0967c5adf92b029","size":1799,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/template.env?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/webui/template.env","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/55456d9f70a068b015b0d22de0967c5adf92b029","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/webui/template.env","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/template.env?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/55456d9f70a068b015b0d22de0967c5adf92b029","html":"https://github.com/eidolon-ai/eidolon/blob/main/webui/template.env"}},{"name":"tsconfig.json","path":"webui/tsconfig.json","sha":"d357c3e7f7e296734ecb37f842630e2be7a9190d","size":797,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/tsconfig.json?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/webui/tsconfig.json","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/d357c3e7f7e296734ecb37f842630e2be7a9190d","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/webui/tsconfig.json","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/tsconfig.json?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/d357c3e7f7e296734ecb37f842630e2be7a9190d","html":"https://github.com/eidolon-ai/eidolon/blob/main/webui/tsconfig.json"}},{"name":"tsconfig.test.json","path":"webui/tsconfig.test.json","sha":"6883588123d20457e0812faac5c592cd8213faa9","size":947,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/tsconfig.test.json?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/webui/tsconfig.test.json","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/6883588123d20457e0812faac5c592cd8213faa9","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/webui/tsconfig.test.json","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/tsconfig.test.json?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/6883588123d20457e0812faac5c592cd8213faa9","html":"https://github.com/eidolon-ai/eidolon/blob/main/webui/tsconfig.test.json"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:29:19 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E4AD:25360F:14C65D:1E2CB2:65D519AE
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4785'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '215'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples?ref=main
  response:
    content: '[{"name":"__init__.py","path":"examples/eidolon_examples/__init__.py","sha":"e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/__init__.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/__init__.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/eidolon_examples/__init__.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/__init__.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/__init__.py"}},{"name":"code_search","path":"examples/eidolon_examples/code_search","sha":"792d41e614ace3ed0587a3bcc8c3433cb60f4e17","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/code_search?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/examples/eidolon_examples/code_search","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/792d41e614ace3ed0587a3bcc8c3433cb60f4e17","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/code_search?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/792d41e614ace3ed0587a3bcc8c3433cb60f4e17","html":"https://github.com/eidolon-ai/eidolon/tree/main/examples/eidolon_examples/code_search"}},{"name":"game_of_24","path":"examples/eidolon_examples/game_of_24","sha":"62222ee04b2ee04cfd766a566271d3eb80c27e3d","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/game_of_24?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/examples/eidolon_examples/game_of_24","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/62222ee04b2ee04cfd766a566271d3eb80c27e3d","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/game_of_24?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/62222ee04b2ee04cfd766a566271d3eb80c27e3d","html":"https://github.com/eidolon-ai/eidolon/tree/main/examples/eidolon_examples/game_of_24"}},{"name":"getting_started","path":"examples/eidolon_examples/getting_started","sha":"b2fb3ee8a4cde6cdaa34b7f3bf03c51ecfa39741","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/getting_started?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/examples/eidolon_examples/getting_started","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/b2fb3ee8a4cde6cdaa34b7f3bf03c51ecfa39741","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/getting_started?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/b2fb3ee8a4cde6cdaa34b7f3bf03c51ecfa39741","html":"https://github.com/eidolon-ai/eidolon/tree/main/examples/eidolon_examples/getting_started"}},{"name":"group_conversation","path":"examples/eidolon_examples/group_conversation","sha":"154f52f1a3391142e06a498668beebc50d25f547","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/group_conversation?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/examples/eidolon_examples/group_conversation","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/154f52f1a3391142e06a498668beebc50d25f547","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/group_conversation?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/154f52f1a3391142e06a498668beebc50d25f547","html":"https://github.com/eidolon-ai/eidolon/tree/main/examples/eidolon_examples/group_conversation"}},{"name":"hello_world","path":"examples/eidolon_examples/hello_world","sha":"7e087bf4a5c83a8336185b5d748580b30247c7ff","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/hello_world?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/examples/eidolon_examples/hello_world","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/7e087bf4a5c83a8336185b5d748580b30247c7ff","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/hello_world?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/7e087bf4a5c83a8336185b5d748580b30247c7ff","html":"https://github.com/eidolon-ai/eidolon/tree/main/examples/eidolon_examples/hello_world"}},{"name":"k8_monitor","path":"examples/eidolon_examples/k8_monitor","sha":"f0490021bbb4788db87baea8ab2bf82de437375a","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/k8_monitor?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/examples/eidolon_examples/k8_monitor","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/f0490021bbb4788db87baea8ab2bf82de437375a","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/k8_monitor?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/f0490021bbb4788db87baea8ab2bf82de437375a","html":"https://github.com/eidolon-ai/eidolon/tree/main/examples/eidolon_examples/k8_monitor"}},{"name":"quickstart","path":"examples/eidolon_examples/quickstart","sha":"8ffb5b0f945a50268a30913d5b78420b403d3578","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/quickstart?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/examples/eidolon_examples/quickstart","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/8ffb5b0f945a50268a30913d5b78420b403d3578","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/quickstart?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/8ffb5b0f945a50268a30913d5b78420b403d3578","html":"https://github.com/eidolon-ai/eidolon/tree/main/examples/eidolon_examples/quickstart"}},{"name":"swifties","path":"examples/eidolon_examples/swifties","sha":"fd354ea01852a4fd47b72e873095a8a0459aa230","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/swifties?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/examples/eidolon_examples/swifties","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/fd354ea01852a4fd47b72e873095a8a0459aa230","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/swifties?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/fd354ea01852a4fd47b72e873095a8a0459aa230","html":"https://github.com/eidolon-ai/eidolon/tree/main/examples/eidolon_examples/swifties"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:29:19 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E4AF:257FF1:161732:1F7DA5:65D519AF
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4779'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '221'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/public?ref=main
  response:
    content: '[{"name":"CNAME","path":"docs/public/CNAME","sha":"247629a581887a7e4aea37ccbcd411b5855e2520","size":18,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/public/CNAME?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/docs/public/CNAME","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/247629a581887a7e4aea37ccbcd411b5855e2520","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/docs/public/CNAME","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/public/CNAME?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/247629a581887a7e4aea37ccbcd411b5855e2520","html":"https://github.com/eidolon-ai/eidolon/blob/main/docs/public/CNAME"}},{"name":"favicon.ico","path":"docs/public/favicon.ico","sha":"36d1b6d2ae8dec009c608e0ec83cf261a455f285","size":1150,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/public/favicon.ico?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/docs/public/favicon.ico","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/36d1b6d2ae8dec009c608e0ec83cf261a455f285","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/docs/public/favicon.ico","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/public/favicon.ico?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/36d1b6d2ae8dec009c608e0ec83cf261a455f285","html":"https://github.com/eidolon-ai/eidolon/blob/main/docs/public/favicon.ico"}},{"name":"favicon.svg","path":"docs/public/favicon.svg","sha":"cba5ac140a25951a20704b481a65514838f0f4b6","size":696,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/public/favicon.svg?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/docs/public/favicon.svg","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/cba5ac140a25951a20704b481a65514838f0f4b6","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/docs/public/favicon.svg","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/public/favicon.svg?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/cba5ac140a25951a20704b481a65514838f0f4b6","html":"https://github.com/eidolon-ai/eidolon/blob/main/docs/public/favicon.svg"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:29:19 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E4B1:25923F:1DAD12:271373:65D519AF
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4777'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '223'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/cli/tests?ref=main
  response:
    content: '[{"name":"__init__.py","path":"cli/tests/__init__.py","sha":"e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/cli/tests/__init__.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/cli/tests/__init__.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/cli/tests/__init__.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/cli/tests/__init__.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","html":"https://github.com/eidolon-ai/eidolon/blob/main/cli/tests/__init__.py"}},{"name":"test_cli.py","path":"cli/tests/test_cli.py","sha":"09bd641141f6b81eeb4feb2d8385e4d6f440b6ed","size":103,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/cli/tests/test_cli.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/cli/tests/test_cli.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/09bd641141f6b81eeb4feb2d8385e4d6f440b6ed","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/cli/tests/test_cli.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/cli/tests/test_cli.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/09bd641141f6b81eeb4feb2d8385e4d6f440b6ed","html":"https://github.com/eidolon-ai/eidolon/blob/main/cli/tests/test_cli.py"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:29:19 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E4B2:25626D:15564B:1EBCA2:65D519AF
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4778'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '222'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/tests?ref=main
  response:
    content: '[{"name":"conftest.py","path":"examples/tests/conftest.py","sha":"e073c8d86ec45794bd792e6f7075b8daed9e9113","size":2310,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/tests/conftest.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/tests/conftest.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e073c8d86ec45794bd792e6f7075b8daed9e9113","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/tests/conftest.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/tests/conftest.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e073c8d86ec45794bd792e6f7075b8daed9e9113","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/tests/conftest.py"}},{"name":"test_code_search.py","path":"examples/tests/test_code_search.py","sha":"a662cd135b8b4a768fd232c0b200715e0371b11c","size":497,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/tests/test_code_search.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/tests/test_code_search.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/a662cd135b8b4a768fd232c0b200715e0371b11c","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/tests/test_code_search.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/tests/test_code_search.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/a662cd135b8b4a768fd232c0b200715e0371b11c","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/tests/test_code_search.py"}},{"name":"test_getting_started.py","path":"examples/tests/test_getting_started.py","sha":"ba058d885ea73ea4e7b3de77a6f0ca3aca99e9e3","size":2033,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/tests/test_getting_started.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/tests/test_getting_started.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/ba058d885ea73ea4e7b3de77a6f0ca3aca99e9e3","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/tests/test_getting_started.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/tests/test_getting_started.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/ba058d885ea73ea4e7b3de77a6f0ca3aca99e9e3","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/tests/test_getting_started.py"}},{"name":"test_hello_world.py","path":"examples/tests/test_hello_world.py","sha":"87a0f8c307413fc198c2ec219fb26ea49d3d71ed","size":1446,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/tests/test_hello_world.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/tests/test_hello_world.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/87a0f8c307413fc198c2ec219fb26ea49d3d71ed","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/tests/test_hello_world.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/tests/test_hello_world.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/87a0f8c307413fc198c2ec219fb26ea49d3d71ed","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/tests/test_hello_world.py"}},{"name":"test_k8_logic_unit.py","path":"examples/tests/test_k8_logic_unit.py","sha":"7c15618bf04eeee06c571af5a83baa2fba14a243","size":1799,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/tests/test_k8_logic_unit.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/tests/test_k8_logic_unit.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/7c15618bf04eeee06c571af5a83baa2fba14a243","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/tests/test_k8_logic_unit.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/tests/test_k8_logic_unit.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/7c15618bf04eeee06c571af5a83baa2fba14a243","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/tests/test_k8_logic_unit.py"}},{"name":"test_quickstart.py","path":"examples/tests/test_quickstart.py","sha":"49612afbb16ddc49c4060bf26576facded589c3a","size":497,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/tests/test_quickstart.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/tests/test_quickstart.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/49612afbb16ddc49c4060bf26576facded589c3a","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/tests/test_quickstart.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/tests/test_quickstart.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/49612afbb16ddc49c4060bf26576facded589c3a","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/tests/test_quickstart.py"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:29:19 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E4B0:24F1D0:15C58A:1F2C69:65D519AF
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4776'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '224'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src?ref=main
  response:
    content: '[{"name":"assets","path":"docs/src/assets","sha":"1a4b7fd47c7e285f3737dff49d93b91f95e1c605","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/assets?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/docs/src/assets","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/1a4b7fd47c7e285f3737dff49d93b91f95e1c605","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/assets?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/1a4b7fd47c7e285f3737dff49d93b91f95e1c605","html":"https://github.com/eidolon-ai/eidolon/tree/main/docs/src/assets"}},{"name":"components","path":"docs/src/components","sha":"12eefd49f15b78a7896d1f07d75f0a928c80a470","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/components?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/docs/src/components","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/12eefd49f15b78a7896d1f07d75f0a928c80a470","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/components?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/12eefd49f15b78a7896d1f07d75f0a928c80a470","html":"https://github.com/eidolon-ai/eidolon/tree/main/docs/src/components"}},{"name":"content","path":"docs/src/content","sha":"b4199a7090b8a4fe4d04165c05b0dc0ee50e70e3","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/content?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/docs/src/content","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/b4199a7090b8a4fe4d04165c05b0dc0ee50e70e3","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/content?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/b4199a7090b8a4fe4d04165c05b0dc0ee50e70e3","html":"https://github.com/eidolon-ai/eidolon/tree/main/docs/src/content"}},{"name":"env.d.ts","path":"docs/src/env.d.ts","sha":"acef35f175aae528d22fdc6b91e819aa52837fd9","size":85,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/env.d.ts?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/docs/src/env.d.ts","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/acef35f175aae528d22fdc6b91e819aa52837fd9","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/docs/src/env.d.ts","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/env.d.ts?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/acef35f175aae528d22fdc6b91e819aa52837fd9","html":"https://github.com/eidolon-ai/eidolon/blob/main/docs/src/env.d.ts"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:29:19 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E4AE:25382C:1531B0:1E9802:65D519AF
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4775'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '225'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk?ref=main
  response:
    content: '[{"name":"__init__.py","path":"sdk/eidolon_ai_sdk/__init__.py","sha":"e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/__init__.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/__init__.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/__init__.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/__init__.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/__init__.py"}},{"name":"agent","path":"sdk/eidolon_ai_sdk/agent","sha":"92155b89509f1fb5306d068507adc6369f5ac8ad","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/sdk/eidolon_ai_sdk/agent","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/92155b89509f1fb5306d068507adc6369f5ac8ad","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/92155b89509f1fb5306d068507adc6369f5ac8ad","html":"https://github.com/eidolon-ai/eidolon/tree/main/sdk/eidolon_ai_sdk/agent"}},{"name":"agent_os.py","path":"sdk/eidolon_ai_sdk/agent_os.py","sha":"f1188e1d46bbd907424753a815ba2470ed864a1f","size":4316,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent_os.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent_os.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/f1188e1d46bbd907424753a815ba2470ed864a1f","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/agent_os.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent_os.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/f1188e1d46bbd907424753a815ba2470ed864a1f","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent_os.py"}},{"name":"bin","path":"sdk/eidolon_ai_sdk/bin","sha":"d9ec668deb54ede8721c414c22e1b1d45012c6b0","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/bin?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/sdk/eidolon_ai_sdk/bin","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/d9ec668deb54ede8721c414c22e1b1d45012c6b0","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/bin?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/d9ec668deb54ede8721c414c22e1b1d45012c6b0","html":"https://github.com/eidolon-ai/eidolon/tree/main/sdk/eidolon_ai_sdk/bin"}},{"name":"builtins","path":"sdk/eidolon_ai_sdk/builtins","sha":"c55b8ed99aac05633caed033bed80b5075d8a8f3","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/builtins?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/sdk/eidolon_ai_sdk/builtins","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/c55b8ed99aac05633caed033bed80b5075d8a8f3","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/builtins?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/c55b8ed99aac05633caed033bed80b5075d8a8f3","html":"https://github.com/eidolon-ai/eidolon/tree/main/sdk/eidolon_ai_sdk/builtins"}},{"name":"cpu","path":"sdk/eidolon_ai_sdk/cpu","sha":"5b21e32c978cdbbdbbf63ea97be809d59c592087","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/cpu?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/sdk/eidolon_ai_sdk/cpu","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/5b21e32c978cdbbdbbf63ea97be809d59c592087","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/cpu?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/5b21e32c978cdbbdbbf63ea97be809d59c592087","html":"https://github.com/eidolon-ai/eidolon/tree/main/sdk/eidolon_ai_sdk/cpu"}},{"name":"io","path":"sdk/eidolon_ai_sdk/io","sha":"038c182bd7121514546d09b19fccabd4e277a744","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/io?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/sdk/eidolon_ai_sdk/io","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/038c182bd7121514546d09b19fccabd4e277a744","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/io?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/038c182bd7121514546d09b19fccabd4e277a744","html":"https://github.com/eidolon-ai/eidolon/tree/main/sdk/eidolon_ai_sdk/io"}},{"name":"memory","path":"sdk/eidolon_ai_sdk/memory","sha":"4cee40d502d643951aab9b7ff787bbedff46c0ec","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/memory?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/sdk/eidolon_ai_sdk/memory","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/4cee40d502d643951aab9b7ff787bbedff46c0ec","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/memory?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/4cee40d502d643951aab9b7ff787bbedff46c0ec","html":"https://github.com/eidolon-ai/eidolon/tree/main/sdk/eidolon_ai_sdk/memory"}},{"name":"security","path":"sdk/eidolon_ai_sdk/security","sha":"2e294df973b3224c7a6426140e923c025f00b13c","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/security?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/sdk/eidolon_ai_sdk/security","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/2e294df973b3224c7a6426140e923c025f00b13c","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/security?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/2e294df973b3224c7a6426140e923c025f00b13c","html":"https://github.com/eidolon-ai/eidolon/tree/main/sdk/eidolon_ai_sdk/security"}},{"name":"system","path":"sdk/eidolon_ai_sdk/system","sha":"7790493743b3f54be55d1cd2feca331cd2c6aab1","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/system?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/sdk/eidolon_ai_sdk/system","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/7790493743b3f54be55d1cd2feca331cd2c6aab1","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/system?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/7790493743b3f54be55d1cd2feca331cd2c6aab1","html":"https://github.com/eidolon-ai/eidolon/tree/main/sdk/eidolon_ai_sdk/system"}},{"name":"util","path":"sdk/eidolon_ai_sdk/util","sha":"1f403676c6a53342829e1f4582a04286c7c8165b","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/util?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/sdk/eidolon_ai_sdk/util","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/1f403676c6a53342829e1f4582a04286c7c8165b","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/util?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/1f403676c6a53342829e1f4582a04286c7c8165b","html":"https://github.com/eidolon-ai/eidolon/tree/main/sdk/eidolon_ai_sdk/util"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:29:19 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E4B2:25626D:15564F:1EBCA4:65D519AF
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4774'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '226'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/assets?ref=main
  response:
    content: '[{"name":"main_images","path":"docs/src/assets/main_images","sha":"6002f20de21f3133a8662e8d9b375159b0069b45","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/assets/main_images?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/docs/src/assets/main_images","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/6002f20de21f3133a8662e8d9b375159b0069b45","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/assets/main_images?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/6002f20de21f3133a8662e8d9b375159b0069b45","html":"https://github.com/eidolon-ai/eidolon/tree/main/docs/src/assets/main_images"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:29:19 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E4A7:251C83:14F6A8:1E5D58:65D519AF
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4773'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '227'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/app?ref=main
  response:
    content: '[{"name":"api","path":"webui/app/api","sha":"10f5c4fe51b44f42aec3562c54f6a32745f84d85","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/app/api?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/webui/app/api","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/10f5c4fe51b44f42aec3562c54f6a32745f84d85","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/app/api?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/10f5c4fe51b44f42aec3562c54f6a32745f84d85","html":"https://github.com/eidolon-ai/eidolon/tree/main/webui/app/api"}},{"name":"chat","path":"webui/app/chat","sha":"6355abae405366a2ef4e1a63a18efbebb55d0478","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/app/chat?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/webui/app/chat","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/6355abae405366a2ef4e1a63a18efbebb55d0478","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/app/chat?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/6355abae405366a2ef4e1a63a18efbebb55d0478","html":"https://github.com/eidolon-ai/eidolon/tree/main/webui/app/chat"}},{"name":"globals.css","path":"webui/app/globals.css","sha":"affab4890a72c51eeea4ba27ebb3111c624e2836","size":2170,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/app/globals.css?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/webui/app/globals.css","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/affab4890a72c51eeea4ba27ebb3111c624e2836","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/webui/app/globals.css","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/app/globals.css?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/affab4890a72c51eeea4ba27ebb3111c624e2836","html":"https://github.com/eidolon-ai/eidolon/blob/main/webui/app/globals.css"}},{"name":"layout-style.css","path":"webui/app/layout-style.css","sha":"3844baa4043ff79b704bad651ba9522f446b90e4","size":589,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/app/layout-style.css?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/webui/app/layout-style.css","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/3844baa4043ff79b704bad651ba9522f446b90e4","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/webui/app/layout-style.css","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/app/layout-style.css?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/3844baa4043ff79b704bad651ba9522f446b90e4","html":"https://github.com/eidolon-ai/eidolon/blob/main/webui/app/layout-style.css"}},{"name":"layout.tsx","path":"webui/app/layout.tsx","sha":"f3722db0475c0d5ce64676fb048e8afccfde4a22","size":1422,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/app/layout.tsx?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/webui/app/layout.tsx","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/f3722db0475c0d5ce64676fb048e8afccfde4a22","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/webui/app/layout.tsx","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/app/layout.tsx?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/f3722db0475c0d5ce64676fb048e8afccfde4a22","html":"https://github.com/eidolon-ai/eidolon/blob/main/webui/app/layout.tsx"}},{"name":"page.tsx","path":"webui/app/page.tsx","sha":"bbdd69ebea44d3f5f22dd88e71d1ffe2dfae4c36","size":293,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/app/page.tsx?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/webui/app/page.tsx","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/bbdd69ebea44d3f5f22dd88e71d1ffe2dfae4c36","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/webui/app/page.tsx","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/app/page.tsx?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/bbdd69ebea44d3f5f22dd88e71d1ffe2dfae4c36","html":"https://github.com/eidolon-ai/eidolon/blob/main/webui/app/page.tsx"}},{"name":"sign-in","path":"webui/app/sign-in","sha":"940716ab5aa0cb4670b52efc75a9e079bf6eef00","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/app/sign-in?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/webui/app/sign-in","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/940716ab5aa0cb4670b52efc75a9e079bf6eef00","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/app/sign-in?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/940716ab5aa0cb4670b52efc75a9e079bf6eef00","html":"https://github.com/eidolon-ai/eidolon/tree/main/webui/app/sign-in"}},{"name":"theme.tsx","path":"webui/app/theme.tsx","sha":"965dc929a99054044ff67d65ae129917f05973fa","size":1922,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/app/theme.tsx?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/webui/app/theme.tsx","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/965dc929a99054044ff67d65ae129917f05973fa","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/webui/app/theme.tsx","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/app/theme.tsx?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/965dc929a99054044ff67d65ae129917f05973fa","html":"https://github.com/eidolon-ai/eidolon/blob/main/webui/app/theme.tsx"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:29:19 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E4AE:25382C:1531B6:1E980A:65D519AF
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4771'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '229'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests?ref=main
  response:
    content: '[{"name":"__init__.py","path":"sdk/tests/__init__.py","sha":"e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/__init__.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/__init__.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/__init__.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/__init__.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/__init__.py"}},{"name":"agent","path":"sdk/tests/agent","sha":"2d23fed62f35dbf40a67d894349c35571cf0a952","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/agent?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/sdk/tests/agent","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/2d23fed62f35dbf40a67d894349c35571cf0a952","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/agent?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/2d23fed62f35dbf40a67d894349c35571cf0a952","html":"https://github.com/eidolon-ai/eidolon/tree/main/sdk/tests/agent"}},{"name":"conftest.py","path":"sdk/tests/conftest.py","sha":"d3cc014532d5bc85a92adc586c16a621fd58e112","size":12065,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/conftest.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/conftest.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/d3cc014532d5bc85a92adc586c16a621fd58e112","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/conftest.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/conftest.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/d3cc014532d5bc85a92adc586c16a621fd58e112","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/conftest.py"}},{"name":"cpu","path":"sdk/tests/cpu","sha":"1820090a3a9c5df18879bdf11018d99a16f2c088","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/cpu?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/sdk/tests/cpu","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/1820090a3a9c5df18879bdf11018d99a16f2c088","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/cpu?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/1820090a3a9c5df18879bdf11018d99a16f2c088","html":"https://github.com/eidolon-ai/eidolon/tree/main/sdk/tests/cpu"}},{"name":"images","path":"sdk/tests/images","sha":"e1574fb7e93ec022ca1d71379e4a83bea512e62c","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/images?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/sdk/tests/images","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/e1574fb7e93ec022ca1d71379e4a83bea512e62c","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/images?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/e1574fb7e93ec022ca1d71379e4a83bea512e62c","html":"https://github.com/eidolon-ai/eidolon/tree/main/sdk/tests/images"}},{"name":"impl","path":"sdk/tests/impl","sha":"d13bd29f9c0f0b0e15e1816dd50024b90a9e7aba","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/impl?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/sdk/tests/impl","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/d13bd29f9c0f0b0e15e1816dd50024b90a9e7aba","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/impl?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/d13bd29f9c0f0b0e15e1816dd50024b90a9e7aba","html":"https://github.com/eidolon-ai/eidolon/tree/main/sdk/tests/impl"}},{"name":"system","path":"sdk/tests/system","sha":"7f2688cb21f7d668d5c6ec0e24e7f7139dbb82b6","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/system?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/sdk/tests/system","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/7f2688cb21f7d668d5c6ec0e24e7f7139dbb82b6","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/system?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/7f2688cb21f7d668d5c6ec0e24e7f7139dbb82b6","html":"https://github.com/eidolon-ai/eidolon/tree/main/sdk/tests/system"}},{"name":"test_events.py","path":"sdk/tests/test_events.py","sha":"5419ee6b388499f622c0ac4b2c2b9d14a6e755c1","size":150,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/test_events.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/test_events.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/5419ee6b388499f622c0ac4b2c2b9d14a6e755c1","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/test_events.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/test_events.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/5419ee6b388499f622c0ac4b2c2b9d14a6e755c1","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/test_events.py"}},{"name":"test_replay.py","path":"sdk/tests/test_replay.py","sha":"0334b5b41494d1fb8fac63feec93ebf6af099d47","size":4786,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/test_replay.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/test_replay.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/0334b5b41494d1fb8fac63feec93ebf6af099d47","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/test_replay.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/test_replay.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/0334b5b41494d1fb8fac63feec93ebf6af099d47","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/test_replay.py"}},{"name":"test_request_context.py","path":"sdk/tests/test_request_context.py","sha":"e251c5b5215122612c1e19fb8fa61035316ba7a5","size":514,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/test_request_context.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/test_request_context.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e251c5b5215122612c1e19fb8fa61035316ba7a5","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/test_request_context.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/test_request_context.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e251c5b5215122612c1e19fb8fa61035316ba7a5","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/test_request_context.py"}},{"name":"test_stream_collector.py","path":"sdk/tests/test_stream_collector.py","sha":"796a163e53d4985fed2539c5755ae7d2add0408c","size":1804,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/test_stream_collector.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/test_stream_collector.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/796a163e53d4985fed2539c5755ae7d2add0408c","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/test_stream_collector.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/test_stream_collector.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/796a163e53d4985fed2539c5755ae7d2add0408c","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/test_stream_collector.py"}},{"name":"test_web_search.py","path":"sdk/tests/test_web_search.py","sha":"6aa963043456c34f6a4642a977833205bc65ee64","size":519,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/test_web_search.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/test_web_search.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/6aa963043456c34f6a4642a977833205bc65ee64","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/test_web_search.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/test_web_search.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/6aa963043456c34f6a4642a977833205bc65ee64","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/test_web_search.py"}},{"name":"util","path":"sdk/tests/util","sha":"7cb4c95fef61cc0672d672a3f225ec433cb4aa87","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/util?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/sdk/tests/util","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/7cb4c95fef61cc0672d672a3f225ec433cb4aa87","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/util?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/7cb4c95fef61cc0672d672a3f225ec433cb4aa87","html":"https://github.com/eidolon-ai/eidolon/tree/main/sdk/tests/util"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:29:19 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E4B1:25923F:1DAD1C:27137D:65D519AF
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4770'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '230'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/quickstart?ref=main
  response:
    content: '[{"name":"hello_world_agent.yaml","path":"examples/eidolon_examples/quickstart/hello_world_agent.yaml","sha":"4db5266e90ef70484619af811f1b8063909ded42","size":401,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/quickstart/hello_world_agent.yaml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/quickstart/hello_world_agent.yaml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/4db5266e90ef70484619af811f1b8063909ded42","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/eidolon_examples/quickstart/hello_world_agent.yaml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/quickstart/hello_world_agent.yaml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/4db5266e90ef70484619af811f1b8063909ded42","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/quickstart/hello_world_agent.yaml"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:29:19 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E4AD:25360F:14C661:1E2CBD:65D519AF
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4769'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '231'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/assets?ref=main
  response:
    content: '[{"name":"fonts","path":"webui/assets/fonts","sha":"ce36890c138d71d6c5f60cf63caae172ffd45f96","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/assets/fonts?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/webui/assets/fonts","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/ce36890c138d71d6c5f60cf63caae172ffd45f96","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/assets/fonts?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/ce36890c138d71d6c5f60cf63caae172ffd45f96","html":"https://github.com/eidolon-ai/eidolon/tree/main/webui/assets/fonts"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:29:19 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E4AF:257FF1:161737:1F7DAB:65D519AF
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4768'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '232'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/hello_world?ref=main
  response:
    content: '[{"name":"AutonomousAgent.py","path":"examples/eidolon_examples/hello_world/AutonomousAgent.py","sha":"d25907605aeb8f8647885e161e89676a4f0f6946","size":1349,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/hello_world/AutonomousAgent.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/hello_world/AutonomousAgent.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/d25907605aeb8f8647885e161e89676a4f0f6946","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/eidolon_examples/hello_world/AutonomousAgent.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/hello_world/AutonomousAgent.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/d25907605aeb8f8647885e161e89676a4f0f6946","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/hello_world/AutonomousAgent.py"}},{"name":"AutonomousSpeechAgent.py","path":"examples/eidolon_examples/hello_world/AutonomousSpeechAgent.py","sha":"211173e7806902ba3b7ccf166948f9001d74bce4","size":2077,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/hello_world/AutonomousSpeechAgent.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/hello_world/AutonomousSpeechAgent.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/211173e7806902ba3b7ccf166948f9001d74bce4","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/eidolon_examples/hello_world/AutonomousSpeechAgent.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/hello_world/AutonomousSpeechAgent.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/211173e7806902ba3b7ccf166948f9001d74bce4","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/hello_world/AutonomousSpeechAgent.py"}},{"name":"HelloWorld.py","path":"examples/eidolon_examples/hello_world/HelloWorld.py","sha":"dbffac592b133e551353750cfbf59c2f5e1ef6b8","size":3130,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/hello_world/HelloWorld.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/hello_world/HelloWorld.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/dbffac592b133e551353750cfbf59c2f5e1ef6b8","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/eidolon_examples/hello_world/HelloWorld.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/hello_world/HelloWorld.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/dbffac592b133e551353750cfbf59c2f5e1ef6b8","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/hello_world/HelloWorld.py"}},{"name":"SimpleTool.py","path":"examples/eidolon_examples/hello_world/SimpleTool.py","sha":"c0530fe662cc770b2bedaf3428ffc8adc54ecc3e","size":1268,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/hello_world/SimpleTool.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/hello_world/SimpleTool.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/c0530fe662cc770b2bedaf3428ffc8adc54ecc3e","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/eidolon_examples/hello_world/SimpleTool.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/hello_world/SimpleTool.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/c0530fe662cc770b2bedaf3428ffc8adc54ecc3e","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/hello_world/SimpleTool.py"}},{"name":"StateMachine.py","path":"examples/eidolon_examples/hello_world/StateMachine.py","sha":"986f5307282d3a12d198b2b5a22f4528e32df776","size":1377,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/hello_world/StateMachine.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/hello_world/StateMachine.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/986f5307282d3a12d198b2b5a22f4528e32df776","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/eidolon_examples/hello_world/StateMachine.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/hello_world/StateMachine.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/986f5307282d3a12d198b2b5a22f4528e32df776","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/hello_world/StateMachine.py"}},{"name":"StreamingTest.py","path":"examples/eidolon_examples/hello_world/StreamingTest.py","sha":"c24c9b26ac9c99ec40dfad715291b179e5bb8820","size":771,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/hello_world/StreamingTest.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/hello_world/StreamingTest.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/c24c9b26ac9c99ec40dfad715291b179e5bb8820","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/eidolon_examples/hello_world/StreamingTest.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/hello_world/StreamingTest.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/c24c9b26ac9c99ec40dfad715291b179e5bb8820","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/hello_world/StreamingTest.py"}},{"name":"__init__.py","path":"examples/eidolon_examples/hello_world/__init__.py","sha":"e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/hello_world/__init__.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/hello_world/__init__.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/eidolon_examples/hello_world/__init__.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/hello_world/__init__.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/hello_world/__init__.py"}},{"name":"resources","path":"examples/eidolon_examples/hello_world/resources","sha":"1a77af2e692bccae87c299a3795e4f358777ed31","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/hello_world/resources?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/examples/eidolon_examples/hello_world/resources","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/1a77af2e692bccae87c299a3795e4f358777ed31","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/hello_world/resources?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/1a77af2e692bccae87c299a3795e4f358777ed31","html":"https://github.com/eidolon-ai/eidolon/tree/main/examples/eidolon_examples/hello_world/resources"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:29:19 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E4A9:30EE94:36F8D:48420:65D519AF
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4772'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '228'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/getting_started?ref=main
  response:
    content: '[{"name":"1_agent_communication","path":"examples/eidolon_examples/getting_started/1_agent_communication","sha":"011abdb2b84458a8dd4aa8873db53a1c6fbb8c1f","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/getting_started/1_agent_communication?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/examples/eidolon_examples/getting_started/1_agent_communication","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/011abdb2b84458a8dd4aa8873db53a1c6fbb8c1f","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/getting_started/1_agent_communication?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/011abdb2b84458a8dd4aa8873db53a1c6fbb8c1f","html":"https://github.com/eidolon-ai/eidolon/tree/main/examples/eidolon_examples/getting_started/1_agent_communication"}},{"name":"2_custom_agents","path":"examples/eidolon_examples/getting_started/2_custom_agents","sha":"bfd2b96f4f848cfeb705a0592a528827093a23b8","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/getting_started/2_custom_agents?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/examples/eidolon_examples/getting_started/2_custom_agents","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/bfd2b96f4f848cfeb705a0592a528827093a23b8","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/getting_started/2_custom_agents?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/bfd2b96f4f848cfeb705a0592a528827093a23b8","html":"https://github.com/eidolon-ai/eidolon/tree/main/examples/eidolon_examples/getting_started/2_custom_agents"}},{"name":"3_pluggable_resources","path":"examples/eidolon_examples/getting_started/3_pluggable_resources","sha":"c1654bd744b2f910e5c8c477037cf9340d13f916","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/getting_started/3_pluggable_resources?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/examples/eidolon_examples/getting_started/3_pluggable_resources","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/c1654bd744b2f910e5c8c477037cf9340d13f916","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/getting_started/3_pluggable_resources?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/c1654bd744b2f910e5c8c477037cf9340d13f916","html":"https://github.com/eidolon-ai/eidolon/tree/main/examples/eidolon_examples/getting_started/3_pluggable_resources"}},{"name":"4_defining_a_machine","path":"examples/eidolon_examples/getting_started/4_defining_a_machine","sha":"b5e7a04a6528a06a2fed6ac73fa55767a0ec8d39","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/getting_started/4_defining_a_machine?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/examples/eidolon_examples/getting_started/4_defining_a_machine","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/b5e7a04a6528a06a2fed6ac73fa55767a0ec8d39","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/getting_started/4_defining_a_machine?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/b5e7a04a6528a06a2fed6ac73fa55767a0ec8d39","html":"https://github.com/eidolon-ai/eidolon/tree/main/examples/eidolon_examples/getting_started/4_defining_a_machine"}},{"name":"__init__.py","path":"examples/eidolon_examples/getting_started/__init__.py","sha":"e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/getting_started/__init__.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/getting_started/__init__.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/eidolon_examples/getting_started/__init__.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/getting_started/__init__.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/getting_started/__init__.py"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:29:19 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E4AA:254441:15356C:1E9C41:65D519AF
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4767'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '233'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/code_search?ref=main
  response:
    content: '[{"name":"Readme.md","path":"examples/eidolon_examples/code_search/Readme.md","sha":"66fd7163a127e3ea14365b8bc28213b24d24ff80","size":3740,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/code_search/Readme.md?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/code_search/Readme.md","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/66fd7163a127e3ea14365b8bc28213b24d24ff80","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/eidolon_examples/code_search/Readme.md","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/code_search/Readme.md?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/66fd7163a127e3ea14365b8bc28213b24d24ff80","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/code_search/Readme.md"}},{"name":"__init__.py","path":"examples/eidolon_examples/code_search/__init__.py","sha":"e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/code_search/__init__.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/code_search/__init__.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/eidolon_examples/code_search/__init__.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/code_search/__init__.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/code_search/__init__.py"}},{"name":"resources","path":"examples/eidolon_examples/code_search/resources","sha":"fad23fce14b099d9ec8a696ba2a0c91f759508d1","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/code_search/resources?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/examples/eidolon_examples/code_search/resources","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/fad23fce14b099d9ec8a696ba2a0c91f759508d1","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/code_search/resources?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/fad23fce14b099d9ec8a696ba2a0c91f759508d1","html":"https://github.com/eidolon-ai/eidolon/tree/main/examples/eidolon_examples/code_search/resources"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:29:19 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E4B0:24F1D0:15C58E:1F2C6F:65D519AF
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4764'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '236'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/components?ref=main
  response:
    content: '[{"name":"Resizable.tsx","path":"webui/components/Resizable.tsx","sha":"d1f794e6281d21e69250cbc33527427d8cf5047c","size":2614,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/components/Resizable.tsx?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/webui/components/Resizable.tsx","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/d1f794e6281d21e69250cbc33527427d8cf5047c","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/webui/components/Resizable.tsx","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/components/Resizable.tsx?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/d1f794e6281d21e69250cbc33527427d8cf5047c","html":"https://github.com/eidolon-ai/eidolon/blob/main/webui/components/Resizable.tsx"}},{"name":"agent-input","path":"webui/components/agent-input","sha":"766b01dcc66859c51ef5818ec91bcb6506b4daae","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/components/agent-input?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/webui/components/agent-input","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/766b01dcc66859c51ef5818ec91bcb6506b4daae","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/components/agent-input?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/766b01dcc66859c51ef5818ec91bcb6506b4daae","html":"https://github.com/eidolon-ai/eidolon/tree/main/webui/components/agent-input"}},{"name":"button-scroll-to-bottom.tsx","path":"webui/components/button-scroll-to-bottom.tsx","sha":"572cd94a461c3e5d6ef011e489c6ef34bf3867a8","size":799,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/components/button-scroll-to-bottom.tsx?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/webui/components/button-scroll-to-bottom.tsx","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/572cd94a461c3e5d6ef011e489c6ef34bf3867a8","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/webui/components/button-scroll-to-bottom.tsx","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/components/button-scroll-to-bottom.tsx?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/572cd94a461c3e5d6ef011e489c6ef34bf3867a8","html":"https://github.com/eidolon-ai/eidolon/blob/main/webui/components/button-scroll-to-bottom.tsx"}},{"name":"chat-events.css","path":"webui/components/chat-events.css","sha":"0448071cc440465e47cdf69ac395fcf60984e626","size":421,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/components/chat-events.css?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/webui/components/chat-events.css","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/0448071cc440465e47cdf69ac395fcf60984e626","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/webui/components/chat-events.css","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/components/chat-events.css?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/0448071cc440465e47cdf69ac395fcf60984e626","html":"https://github.com/eidolon-ai/eidolon/blob/main/webui/components/chat-events.css"}},{"name":"chat-events.tsx","path":"webui/components/chat-events.tsx","sha":"9f624d4fed2b47007358dc3e747f937b66bd1a09","size":9878,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/components/chat-events.tsx?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/webui/components/chat-events.tsx","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/9f624d4fed2b47007358dc3e747f937b66bd1a09","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/webui/components/chat-events.tsx","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/components/chat-events.tsx?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/9f624d4fed2b47007358dc3e747f937b66bd1a09","html":"https://github.com/eidolon-ai/eidolon/blob/main/webui/components/chat-events.tsx"}},{"name":"chat-scroll-anchor.tsx","path":"webui/components/chat-scroll-anchor.tsx","sha":"65d27344c9b8fab9c304a0a6512c53e895b7a05c","size":727,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/components/chat-scroll-anchor.tsx?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/webui/components/chat-scroll-anchor.tsx","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/65d27344c9b8fab9c304a0a6512c53e895b7a05c","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/webui/components/chat-scroll-anchor.tsx","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/components/chat-scroll-anchor.tsx?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/65d27344c9b8fab9c304a0a6512c53e895b7a05c","html":"https://github.com/eidolon-ai/eidolon/blob/main/webui/components/chat-scroll-anchor.tsx"}},{"name":"chat.css","path":"webui/components/chat.css","sha":"2b660f00cc4cf41de171e7e7aad7aa618735f32b","size":143,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/components/chat.css?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/webui/components/chat.css","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/2b660f00cc4cf41de171e7e7aad7aa618735f32b","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/webui/components/chat.css","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/components/chat.css?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/2b660f00cc4cf41de171e7e7aad7aa618735f32b","html":"https://github.com/eidolon-ai/eidolon/blob/main/webui/components/chat.css"}},{"name":"eidolon-markdown.css","path":"webui/components/eidolon-markdown.css","sha":"0118b51578b1c34135322dd9c7462d5177903369","size":1134,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/components/eidolon-markdown.css?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/webui/components/eidolon-markdown.css","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/0118b51578b1c34135322dd9c7462d5177903369","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/webui/components/eidolon-markdown.css","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/components/eidolon-markdown.css?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/0118b51578b1c34135322dd9c7462d5177903369","html":"https://github.com/eidolon-ai/eidolon/blob/main/webui/components/eidolon-markdown.css"}},{"name":"eidolon-markdown.tsx","path":"webui/components/eidolon-markdown.tsx","sha":"e5df8e26c7e2014911d410300e929e7fb3aa8dad","size":1319,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/components/eidolon-markdown.tsx?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/webui/components/eidolon-markdown.tsx","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e5df8e26c7e2014911d410300e929e7fb3aa8dad","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/webui/components/eidolon-markdown.tsx","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/components/eidolon-markdown.tsx?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e5df8e26c7e2014911d410300e929e7fb3aa8dad","html":"https://github.com/eidolon-ai/eidolon/blob/main/webui/components/eidolon-markdown.tsx"}},{"name":"header.tsx","path":"webui/components/header.tsx","sha":"8b63b6c6ba05dfa93e4354cac538f5c8c5739f79","size":2257,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/components/header.tsx?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/webui/components/header.tsx","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/8b63b6c6ba05dfa93e4354cac538f5c8c5739f79","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/webui/components/header.tsx","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/components/header.tsx?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/8b63b6c6ba05dfa93e4354cac538f5c8c5739f79","html":"https://github.com/eidolon-ai/eidolon/blob/main/webui/components/header.tsx"}},{"name":"session-wrapper.tsx","path":"webui/components/session-wrapper.tsx","sha":"761404d156493297b57b3a6069e0aad29e8447d0","size":288,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/components/session-wrapper.tsx?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/webui/components/session-wrapper.tsx","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/761404d156493297b57b3a6069e0aad29e8447d0","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/webui/components/session-wrapper.tsx","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/components/session-wrapper.tsx?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/761404d156493297b57b3a6069e0aad29e8447d0","html":"https://github.com/eidolon-ai/eidolon/blob/main/webui/components/session-wrapper.tsx"}},{"name":"sidebar-item.tsx","path":"webui/components/sidebar-item.tsx","sha":"8cf1f3410aebe99ee204426e40691bb84efbc87a","size":2085,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/components/sidebar-item.tsx?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/webui/components/sidebar-item.tsx","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/8cf1f3410aebe99ee204426e40691bb84efbc87a","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/webui/components/sidebar-item.tsx","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/components/sidebar-item.tsx?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/8cf1f3410aebe99ee204426e40691bb84efbc87a","html":"https://github.com/eidolon-ai/eidolon/blob/main/webui/components/sidebar-item.tsx"}},{"name":"sidebar-list.tsx","path":"webui/components/sidebar-list.tsx","sha":"a90a9097a4a8b39dc06bacabae246acb53dd010e","size":3385,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/components/sidebar-list.tsx?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/webui/components/sidebar-list.tsx","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/a90a9097a4a8b39dc06bacabae246acb53dd010e","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/webui/components/sidebar-list.tsx","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/components/sidebar-list.tsx?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/a90a9097a4a8b39dc06bacabae246acb53dd010e","html":"https://github.com/eidolon-ai/eidolon/blob/main/webui/components/sidebar-list.tsx"}},{"name":"toaster.tsx","path":"webui/components/toaster.tsx","sha":"d422c1aa87187c2372944a9b3c555f5711272cd8","size":54,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/components/toaster.tsx?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/webui/components/toaster.tsx","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/d422c1aa87187c2372944a9b3c555f5711272cd8","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/webui/components/toaster.tsx","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/components/toaster.tsx?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/d422c1aa87187c2372944a9b3c555f5711272cd8","html":"https://github.com/eidolon-ai/eidolon/blob/main/webui/components/toaster.tsx"}},{"name":"tool-call-element.tsx","path":"webui/components/tool-call-element.tsx","sha":"f20e2a40fac89ba02339ae0bfac733ea9deb2a26","size":2826,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/components/tool-call-element.tsx?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/webui/components/tool-call-element.tsx","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/f20e2a40fac89ba02339ae0bfac733ea9deb2a26","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/webui/components/tool-call-element.tsx","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/components/tool-call-element.tsx?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/f20e2a40fac89ba02339ae0bfac733ea9deb2a26","html":"https://github.com/eidolon-ai/eidolon/blob/main/webui/components/tool-call-element.tsx"}},{"name":"ui","path":"webui/components/ui","sha":"05fd459289b52992286485412d58d53b06fdb790","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/components/ui?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/webui/components/ui","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/05fd459289b52992286485412d58d53b06fdb790","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/components/ui?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/05fd459289b52992286485412d58d53b06fdb790","html":"https://github.com/eidolon-ai/eidolon/tree/main/webui/components/ui"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:29:19 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E4A8:2567E0:14F816:1E5E70:65D519AF
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4766'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '234'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/swifties?ref=main
  response:
    content: '[{"name":"__init__.py","path":"examples/eidolon_examples/swifties/__init__.py","sha":"e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/swifties/__init__.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/swifties/__init__.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/eidolon_examples/swifties/__init__.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/swifties/__init__.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/swifties/__init__.py"}},{"name":"resources","path":"examples/eidolon_examples/swifties/resources","sha":"9166b89e6a0d2c9f04ad4f45050843819cd139e7","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/swifties/resources?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/examples/eidolon_examples/swifties/resources","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/9166b89e6a0d2c9f04ad4f45050843819cd139e7","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/swifties/resources?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/9166b89e6a0d2c9f04ad4f45050843819cd139e7","html":"https://github.com/eidolon-ai/eidolon/tree/main/examples/eidolon_examples/swifties/resources"}},{"name":"validating_cpu.py","path":"examples/eidolon_examples/swifties/validating_cpu.py","sha":"0f92da16978b3938a7c4d44a41b99ada88742bf8","size":6621,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/swifties/validating_cpu.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/swifties/validating_cpu.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/0f92da16978b3938a7c4d44a41b99ada88742bf8","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/eidolon_examples/swifties/validating_cpu.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/swifties/validating_cpu.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/0f92da16978b3938a7c4d44a41b99ada88742bf8","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/swifties/validating_cpu.py"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:29:19 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E4AC:260C59:138127:1C45A1:65D519AF
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4765'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '235'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/k8_monitor?ref=main
  response:
    content: '[{"name":"__init__.py","path":"examples/eidolon_examples/k8_monitor/__init__.py","sha":"e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/k8_monitor/__init__.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/k8_monitor/__init__.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/eidolon_examples/k8_monitor/__init__.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/k8_monitor/__init__.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/k8_monitor/__init__.py"}},{"name":"k8_logic_unit.py","path":"examples/eidolon_examples/k8_monitor/k8_logic_unit.py","sha":"8920ec972815be4596a5c6c0a63bf2566d64e3d5","size":6729,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/k8_monitor/k8_logic_unit.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/k8_monitor/k8_logic_unit.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/8920ec972815be4596a5c6c0a63bf2566d64e3d5","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/eidolon_examples/k8_monitor/k8_logic_unit.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/k8_monitor/k8_logic_unit.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/8920ec972815be4596a5c6c0a63bf2566d64e3d5","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/k8_monitor/k8_logic_unit.py"}},{"name":"resources","path":"examples/eidolon_examples/k8_monitor/resources","sha":"d5eb743610196d989f83c057117b470226075580","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/k8_monitor/resources?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/examples/eidolon_examples/k8_monitor/resources","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/d5eb743610196d989f83c057117b470226075580","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/k8_monitor/resources?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/d5eb743610196d989f83c057117b470226075580","html":"https://github.com/eidolon-ai/eidolon/tree/main/examples/eidolon_examples/k8_monitor/resources"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:29:19 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E4AB:2511E0:14F660:1E5D4D:65D519AF
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4763'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '237'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/components?ref=main
  response:
    content: '[{"name":"NewHero.astro","path":"docs/src/components/NewHero.astro","sha":"5f9541f7b17df7d152bd057b070eea7511e82785","size":2703,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/components/NewHero.astro?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/docs/src/components/NewHero.astro","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/5f9541f7b17df7d152bd057b070eea7511e82785","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/docs/src/components/NewHero.astro","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/components/NewHero.astro?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/5f9541f7b17df7d152bd057b070eea7511e82785","html":"https://github.com/eidolon-ai/eidolon/blob/main/docs/src/components/NewHero.astro"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:29:19 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E4B4:255256:166397:1FCA50:65D519AF
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4761'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '239'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/lib?ref=main
  response:
    content: '[{"name":"display-elements.ts","path":"webui/lib/display-elements.ts","sha":"e3fe5ad002fa4bbd86b496fad4d7c63e7b83bc02","size":2869,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/lib/display-elements.ts?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/webui/lib/display-elements.ts","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e3fe5ad002fa4bbd86b496fad4d7c63e7b83bc02","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/webui/lib/display-elements.ts","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/lib/display-elements.ts?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e3fe5ad002fa4bbd86b496fad4d7c63e7b83bc02","html":"https://github.com/eidolon-ai/eidolon/blob/main/webui/lib/display-elements.ts"}},{"name":"fonts.ts","path":"webui/lib/fonts.ts","sha":"2485ab7c7a16212b705a5bc397b362aab751ba59","size":253,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/lib/fonts.ts?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/webui/lib/fonts.ts","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/2485ab7c7a16212b705a5bc397b362aab751ba59","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/webui/lib/fonts.ts","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/lib/fonts.ts?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/2485ab7c7a16212b705a5bc397b362aab751ba59","html":"https://github.com/eidolon-ai/eidolon/blob/main/webui/lib/fonts.ts"}},{"name":"hooks","path":"webui/lib/hooks","sha":"a9851fb571d8e1657a3e580d223cc1c3322c92e2","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/lib/hooks?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/webui/lib/hooks","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/a9851fb571d8e1657a3e580d223cc1c3322c92e2","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/lib/hooks?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/a9851fb571d8e1657a3e580d223cc1c3322c92e2","html":"https://github.com/eidolon-ai/eidolon/tree/main/webui/lib/hooks"}},{"name":"types.ts","path":"webui/lib/types.ts","sha":"fdb82ec0b7a1888c882ae2d8927c8841c13a6445","size":3432,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/lib/types.ts?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/webui/lib/types.ts","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/fdb82ec0b7a1888c882ae2d8927c8841c13a6445","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/webui/lib/types.ts","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/lib/types.ts?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/fdb82ec0b7a1888c882ae2d8927c8841c13a6445","html":"https://github.com/eidolon-ai/eidolon/blob/main/webui/lib/types.ts"}},{"name":"utils.ts","path":"webui/lib/utils.ts","sha":"b8b0948ad83974ce341ee3a626cafe9d02f722f7","size":162,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/lib/utils.ts?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/webui/lib/utils.ts","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/b8b0948ad83974ce341ee3a626cafe9d02f722f7","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/webui/lib/utils.ts","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/lib/utils.ts?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/b8b0948ad83974ce341ee3a626cafe9d02f722f7","html":"https://github.com/eidolon-ai/eidolon/blob/main/webui/lib/utils.ts"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:29:19 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E4B5:256B07:153573:1E9BFC:65D519AF
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4760'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '240'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/public?ref=main
  response:
    content: '[{"name":"apple-touch-icon.png","path":"webui/public/apple-touch-icon.png","sha":"0eb831fd3f83deadb29cb4fc846e9feb919a61c2","size":10423,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/public/apple-touch-icon.png?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/webui/public/apple-touch-icon.png","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/0eb831fd3f83deadb29cb4fc846e9feb919a61c2","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/webui/public/apple-touch-icon.png","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/public/apple-touch-icon.png?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/0eb831fd3f83deadb29cb4fc846e9feb919a61c2","html":"https://github.com/eidolon-ai/eidolon/blob/main/webui/public/apple-touch-icon.png"}},{"name":"eidolon_with_gradient.png","path":"webui/public/eidolon_with_gradient.png","sha":"628035ba81d58a773e7b87a2242beba102eb75b2","size":2245999,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/public/eidolon_with_gradient.png?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/webui/public/eidolon_with_gradient.png","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/628035ba81d58a773e7b87a2242beba102eb75b2","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/webui/public/eidolon_with_gradient.png","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/public/eidolon_with_gradient.png?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/628035ba81d58a773e7b87a2242beba102eb75b2","html":"https://github.com/eidolon-ai/eidolon/blob/main/webui/public/eidolon_with_gradient.png"}},{"name":"favicon-16x16.png","path":"webui/public/favicon-16x16.png","sha":"620c7d81f90b455bd9a8ee5a37d4d4f335443076","size":539,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/public/favicon-16x16.png?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/webui/public/favicon-16x16.png","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/620c7d81f90b455bd9a8ee5a37d4d4f335443076","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/webui/public/favicon-16x16.png","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/public/favicon-16x16.png?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/620c7d81f90b455bd9a8ee5a37d4d4f335443076","html":"https://github.com/eidolon-ai/eidolon/blob/main/webui/public/favicon-16x16.png"}},{"name":"favicon.ico","path":"webui/public/favicon.ico","sha":"7452b5dc69b2a634c86779ee4cd4c13319549b43","size":15406,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/public/favicon.ico?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/webui/public/favicon.ico","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/7452b5dc69b2a634c86779ee4cd4c13319549b43","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/webui/public/favicon.ico","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/public/favicon.ico?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/7452b5dc69b2a634c86779ee4cd4c13319549b43","html":"https://github.com/eidolon-ai/eidolon/blob/main/webui/public/favicon.ico"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:29:19 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E4B3:2535CB:18D907:223FDB:65D519AF
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4762'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '238'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/group_conversation?ref=main
  response:
    content: '[{"name":"__init__.py","path":"examples/eidolon_examples/group_conversation/__init__.py","sha":"e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/group_conversation/__init__.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/group_conversation/__init__.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/eidolon_examples/group_conversation/__init__.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/group_conversation/__init__.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/group_conversation/__init__.py"}},{"name":"base_conversation_coordinator.py","path":"examples/eidolon_examples/group_conversation/base_conversation_coordinator.py","sha":"cecfa34d58e956d8c7b170f09e9ea71316c335cc","size":9413,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/group_conversation/base_conversation_coordinator.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/group_conversation/base_conversation_coordinator.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/cecfa34d58e956d8c7b170f09e9ea71316c335cc","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/eidolon_examples/group_conversation/base_conversation_coordinator.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/group_conversation/base_conversation_coordinator.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/cecfa34d58e956d8c7b170f09e9ea71316c335cc","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/group_conversation/base_conversation_coordinator.py"}},{"name":"conversation_agent.py","path":"examples/eidolon_examples/group_conversation/conversation_agent.py","sha":"fb0c2bbbf43894f95d77b40007e510715cd1e073","size":7483,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/group_conversation/conversation_agent.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/group_conversation/conversation_agent.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/fb0c2bbbf43894f95d77b40007e510715cd1e073","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/eidolon_examples/group_conversation/conversation_agent.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/group_conversation/conversation_agent.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/fb0c2bbbf43894f95d77b40007e510715cd1e073","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/group_conversation/conversation_agent.py"}},{"name":"conversation_coordinator.py","path":"examples/eidolon_examples/group_conversation/conversation_coordinator.py","sha":"061f72c591cb899470bc89a06be7c817fde3225f","size":9306,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/group_conversation/conversation_coordinator.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/group_conversation/conversation_coordinator.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/061f72c591cb899470bc89a06be7c817fde3225f","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/eidolon_examples/group_conversation/conversation_coordinator.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/group_conversation/conversation_coordinator.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/061f72c591cb899470bc89a06be7c817fde3225f","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/group_conversation/conversation_coordinator.py"}},{"name":"game_master.py","path":"examples/eidolon_examples/group_conversation/game_master.py","sha":"0505373664e00223882a263212d8b79ad84c8b67","size":6934,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/group_conversation/game_master.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/group_conversation/game_master.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/0505373664e00223882a263212d8b79ad84c8b67","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/eidolon_examples/group_conversation/game_master.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/group_conversation/game_master.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/0505373664e00223882a263212d8b79ad84c8b67","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/group_conversation/game_master.py"}},{"name":"iasip","path":"examples/eidolon_examples/group_conversation/iasip","sha":"cdd4a1b25db4ea3ec87f806e7674809e5522af87","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/group_conversation/iasip?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/examples/eidolon_examples/group_conversation/iasip","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/cdd4a1b25db4ea3ec87f806e7674809e5522af87","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/group_conversation/iasip?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/cdd4a1b25db4ea3ec87f806e7674809e5522af87","html":"https://github.com/eidolon-ai/eidolon/tree/main/examples/eidolon_examples/group_conversation/iasip"}},{"name":"python_coder","path":"examples/eidolon_examples/group_conversation/python_coder","sha":"20f379355cad7e8c318f1ef344ed0aacfb91e357","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/group_conversation/python_coder?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/examples/eidolon_examples/group_conversation/python_coder","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/20f379355cad7e8c318f1ef344ed0aacfb91e357","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/group_conversation/python_coder?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/20f379355cad7e8c318f1ef344ed0aacfb91e357","html":"https://github.com/eidolon-ai/eidolon/tree/main/examples/eidolon_examples/group_conversation/python_coder"}},{"name":"resources","path":"examples/eidolon_examples/group_conversation/resources","sha":"92fdabfa63f7f35d06d8b76eb2968d39b4e542ab","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/group_conversation/resources?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/examples/eidolon_examples/group_conversation/resources","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/92fdabfa63f7f35d06d8b76eb2968d39b4e542ab","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/group_conversation/resources?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/92fdabfa63f7f35d06d8b76eb2968d39b4e542ab","html":"https://github.com/eidolon-ai/eidolon/tree/main/examples/eidolon_examples/group_conversation/resources"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:29:19 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E4B6:2518A1:150244:1E6908:65D519AF
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4759'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '241'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/game_of_24?ref=main
  response:
    content: '[{"name":"custom_cpu.yaml","path":"examples/eidolon_examples/game_of_24/custom_cpu.yaml","sha":"251d6ebe65e283939b6e9821b5f36b45bcc1bcfa","size":152,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/game_of_24/custom_cpu.yaml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/game_of_24/custom_cpu.yaml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/251d6ebe65e283939b6e9821b5f36b45bcc1bcfa","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/eidolon_examples/game_of_24/custom_cpu.yaml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/game_of_24/custom_cpu.yaml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/251d6ebe65e283939b6e9821b5f36b45bcc1bcfa","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/game_of_24/custom_cpu.yaml"}},{"name":"default_cpu.yaml","path":"examples/eidolon_examples/game_of_24/default_cpu.yaml","sha":"ac72e01dd128dee0de0668f6b833e0aa17a10c68","size":140,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/game_of_24/default_cpu.yaml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/game_of_24/default_cpu.yaml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/ac72e01dd128dee0de0668f6b833e0aa17a10c68","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/eidolon_examples/game_of_24/default_cpu.yaml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/game_of_24/default_cpu.yaml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/ac72e01dd128dee0de0668f6b833e0aa17a10c68","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/game_of_24/default_cpu.yaml"}},{"name":"go24_agent.yaml","path":"examples/eidolon_examples/game_of_24/go24_agent.yaml","sha":"5178a8cc8b186f91f4cb8557bec0ecd738ae3ab1","size":1100,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/game_of_24/go24_agent.yaml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/game_of_24/go24_agent.yaml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/5178a8cc8b186f91f4cb8557bec0ecd738ae3ab1","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/eidolon_examples/game_of_24/go24_agent.yaml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/game_of_24/go24_agent.yaml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/5178a8cc8b186f91f4cb8557bec0ecd738ae3ab1","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/game_of_24/go24_agent.yaml"}},{"name":"machine.yaml","path":"examples/eidolon_examples/game_of_24/machine.yaml","sha":"ba1a7f74e6a1b1b00de94abe5dbdfb103754a9c4","size":183,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/game_of_24/machine.yaml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/game_of_24/machine.yaml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/ba1a7f74e6a1b1b00de94abe5dbdfb103754a9c4","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/eidolon_examples/game_of_24/machine.yaml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/game_of_24/machine.yaml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/ba1a7f74e6a1b1b00de94abe5dbdfb103754a9c4","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/game_of_24/machine.yaml"}},{"name":"tot_agent.yaml","path":"examples/eidolon_examples/game_of_24/tot_agent.yaml","sha":"a20feecfee75ce8af9ecebac26eeae9ca11707a0","size":3303,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/game_of_24/tot_agent.yaml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/game_of_24/tot_agent.yaml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/a20feecfee75ce8af9ecebac26eeae9ca11707a0","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/eidolon_examples/game_of_24/tot_agent.yaml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/game_of_24/tot_agent.yaml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/a20feecfee75ce8af9ecebac26eeae9ca11707a0","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/game_of_24/tot_agent.yaml"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:29:19 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E4B7:254D25:160FDC:1F76B2:65D519AF
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4757'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '243'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent?ref=main
  response:
    content: '[{"name":"__init__.py","path":"sdk/eidolon_ai_sdk/agent/__init__.py","sha":"e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/__init__.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/__init__.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/agent/__init__.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/__init__.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/__init__.py"}},{"name":"agent.py","path":"sdk/eidolon_ai_sdk/agent/agent.py","sha":"dbafd7f722ec630ddaa4f9493aa7f106abbdebd6","size":2402,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/agent.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/agent.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/dbafd7f722ec630ddaa4f9493aa7f106abbdebd6","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/agent/agent.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/agent.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/dbafd7f722ec630ddaa4f9493aa7f106abbdebd6","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/agent.py"}},{"name":"client.py","path":"sdk/eidolon_ai_sdk/agent/client.py","sha":"f2bacd7e553cb9b05e4fa23a35932d4ddb4d41d7","size":6014,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/client.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/client.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/f2bacd7e553cb9b05e4fa23a35932d4ddb4d41d7","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/agent/client.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/client.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/f2bacd7e553cb9b05e4fa23a35932d4ddb4d41d7","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/client.py"}},{"name":"doc_manager","path":"sdk/eidolon_ai_sdk/agent/doc_manager","sha":"b9e263835fc336e664b3c9b8d6da5fc9e3aa3e56","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/doc_manager?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/sdk/eidolon_ai_sdk/agent/doc_manager","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/b9e263835fc336e664b3c9b8d6da5fc9e3aa3e56","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/doc_manager?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/b9e263835fc336e664b3c9b8d6da5fc9e3aa3e56","html":"https://github.com/eidolon-ai/eidolon/tree/main/sdk/eidolon_ai_sdk/agent/doc_manager"}},{"name":"generic_agent.py","path":"sdk/eidolon_ai_sdk/agent/generic_agent.py","sha":"02a5c7ce9ed0ceb9c7b3313ff7fdcd942a8d5dc7","size":5516,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/generic_agent.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/generic_agent.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/02a5c7ce9ed0ceb9c7b3313ff7fdcd942a8d5dc7","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/agent/generic_agent.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/generic_agent.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/02a5c7ce9ed0ceb9c7b3313ff7fdcd942a8d5dc7","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/generic_agent.py"}},{"name":"retriever_agent","path":"sdk/eidolon_ai_sdk/agent/retriever_agent","sha":"3eec39b3a5e0bc8763cfc9e81b56c4415f00e773","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/retriever_agent?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/sdk/eidolon_ai_sdk/agent/retriever_agent","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/3eec39b3a5e0bc8763cfc9e81b56c4415f00e773","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/retriever_agent?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/3eec39b3a5e0bc8763cfc9e81b56c4415f00e773","html":"https://github.com/eidolon-ai/eidolon/tree/main/sdk/eidolon_ai_sdk/agent/retriever_agent"}},{"name":"tot_agent","path":"sdk/eidolon_ai_sdk/agent/tot_agent","sha":"90912ae83c00c6a44ee84b6a781fe7b56e75c35d","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/tot_agent?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/sdk/eidolon_ai_sdk/agent/tot_agent","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/90912ae83c00c6a44ee84b6a781fe7b56e75c35d","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/tot_agent?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/90912ae83c00c6a44ee84b6a781fe7b56e75c35d","html":"https://github.com/eidolon-ai/eidolon/tree/main/sdk/eidolon_ai_sdk/agent/tot_agent"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:29:19 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E4B2:25626D:155651:1EBCA8:65D519AF
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4758'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '242'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/bin?ref=main
  response:
    content: '[{"name":"__init__.py","path":"sdk/eidolon_ai_sdk/bin/__init__.py","sha":"e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/bin/__init__.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/bin/__init__.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/bin/__init__.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/bin/__init__.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/bin/__init__.py"}},{"name":"agent_creator.py","path":"sdk/eidolon_ai_sdk/bin/agent_creator.py","sha":"8abbd0395917430afcf522ef067d75b5384e160d","size":9444,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/bin/agent_creator.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/bin/agent_creator.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/8abbd0395917430afcf522ef067d75b5384e160d","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/bin/agent_creator.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/bin/agent_creator.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/8abbd0395917430afcf522ef067d75b5384e160d","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/bin/agent_creator.py"}},{"name":"agent_http_server.py","path":"sdk/eidolon_ai_sdk/bin/agent_http_server.py","sha":"841fecfdcba9a696a144b2dc4cbccab507d908d7","size":8318,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/bin/agent_http_server.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/bin/agent_http_server.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/841fecfdcba9a696a144b2dc4cbccab507d908d7","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/bin/agent_http_server.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/bin/agent_http_server.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/841fecfdcba9a696a144b2dc4cbccab507d908d7","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/bin/agent_http_server.py"}},{"name":"replay.py","path":"sdk/eidolon_ai_sdk/bin/replay.py","sha":"ed6c97f852b81c24d22db1b10d78638807381592","size":3752,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/bin/replay.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/bin/replay.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/ed6c97f852b81c24d22db1b10d78638807381592","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/bin/replay.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/bin/replay.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/ed6c97f852b81c24d22db1b10d78638807381592","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/bin/replay.py"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:29:19 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E4B9:2518DF:160782:1F6E3D:65D519AF
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4756'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '244'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/content?ref=main
  response:
    content: '[{"name":"config.ts","path":"docs/src/content/config.ts","sha":"9df91b6044424c8275f3d9f46c8a46cdefccc1ae","size":267,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/content/config.ts?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/docs/src/content/config.ts","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/9df91b6044424c8275f3d9f46c8a46cdefccc1ae","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/docs/src/content/config.ts","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/content/config.ts?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/9df91b6044424c8275f3d9f46c8a46cdefccc1ae","html":"https://github.com/eidolon-ai/eidolon/blob/main/docs/src/content/config.ts"}},{"name":"docs","path":"docs/src/content/docs","sha":"d82a463a89436dd5d27d200ad6ebe81c6a97f644","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/content/docs?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/docs/src/content/docs","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/d82a463a89436dd5d27d200ad6ebe81c6a97f644","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/content/docs?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/d82a463a89436dd5d27d200ad6ebe81c6a97f644","html":"https://github.com/eidolon-ai/eidolon/tree/main/docs/src/content/docs"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:29:19 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E4B8:3A0B33:2F08:3E57:65D519AF
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4755'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '245'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/cpu?ref=main
  response:
    content: '[{"name":"__init__.py","path":"sdk/eidolon_ai_sdk/cpu/__init__.py","sha":"e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/cpu/__init__.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/cpu/__init__.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/cpu/__init__.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/cpu/__init__.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/cpu/__init__.py"}},{"name":"agent_call_history.py","path":"sdk/eidolon_ai_sdk/cpu/agent_call_history.py","sha":"410f0ff1814d60e533cf27130a61d79b36c23389","size":1826,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/cpu/agent_call_history.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/cpu/agent_call_history.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/410f0ff1814d60e533cf27130a61d79b36c23389","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/cpu/agent_call_history.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/cpu/agent_call_history.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/410f0ff1814d60e533cf27130a61d79b36c23389","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/cpu/agent_call_history.py"}},{"name":"agent_cpu.py","path":"sdk/eidolon_ai_sdk/cpu/agent_cpu.py","sha":"8a022a0fde0bebbd9c11cb27001bee7ed4a4970e","size":4153,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/cpu/agent_cpu.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/cpu/agent_cpu.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/8a022a0fde0bebbd9c11cb27001bee7ed4a4970e","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/cpu/agent_cpu.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/cpu/agent_cpu.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/8a022a0fde0bebbd9c11cb27001bee7ed4a4970e","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/cpu/agent_cpu.py"}},{"name":"agent_io.py","path":"sdk/eidolon_ai_sdk/cpu/agent_io.py","sha":"d22bb0cabe724332190377b3148646ab36c4ffe2","size":2956,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/cpu/agent_io.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/cpu/agent_io.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/d22bb0cabe724332190377b3148646ab36c4ffe2","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/cpu/agent_io.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/cpu/agent_io.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/d22bb0cabe724332190377b3148646ab36c4ffe2","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/cpu/agent_io.py"}},{"name":"agents_logic_unit.py","path":"sdk/eidolon_ai_sdk/cpu/agents_logic_unit.py","sha":"bad94fb3d9078fa435b3f6120588ba91f69fb001","size":7597,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/cpu/agents_logic_unit.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/cpu/agents_logic_unit.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/bad94fb3d9078fa435b3f6120588ba91f69fb001","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/cpu/agents_logic_unit.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/cpu/agents_logic_unit.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/bad94fb3d9078fa435b3f6120588ba91f69fb001","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/cpu/agents_logic_unit.py"}},{"name":"call_context.py","path":"sdk/eidolon_ai_sdk/cpu/call_context.py","sha":"c5a1e4e38a2ca967a3ff25bdc4c7b887693083e8","size":292,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/cpu/call_context.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/cpu/call_context.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/c5a1e4e38a2ca967a3ff25bdc4c7b887693083e8","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/cpu/call_context.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/cpu/call_context.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/c5a1e4e38a2ca967a3ff25bdc4c7b887693083e8","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/cpu/call_context.py"}},{"name":"conversation_memory_unit.py","path":"sdk/eidolon_ai_sdk/cpu/conversation_memory_unit.py","sha":"2ac77ba18c40e01ed7b899e6605e0358c6c673be","size":2830,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/cpu/conversation_memory_unit.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/cpu/conversation_memory_unit.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/2ac77ba18c40e01ed7b899e6605e0358c6c673be","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/cpu/conversation_memory_unit.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/cpu/conversation_memory_unit.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/2ac77ba18c40e01ed7b899e6605e0358c6c673be","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/cpu/conversation_memory_unit.py"}},{"name":"conversational_agent_cpu.py","path":"sdk/eidolon_ai_sdk/cpu/conversational_agent_cpu.py","sha":"17b3d7afa10e15020010cdc33d047f1e5fcc7994","size":7736,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/cpu/conversational_agent_cpu.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/cpu/conversational_agent_cpu.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/17b3d7afa10e15020010cdc33d047f1e5fcc7994","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/cpu/conversational_agent_cpu.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/cpu/conversational_agent_cpu.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/17b3d7afa10e15020010cdc33d047f1e5fcc7994","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/cpu/conversational_agent_cpu.py"}},{"name":"llm","path":"sdk/eidolon_ai_sdk/cpu/llm","sha":"76bac8f53bbd5c76068f4b60c05556348ea62c69","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/cpu/llm?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/sdk/eidolon_ai_sdk/cpu/llm","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/76bac8f53bbd5c76068f4b60c05556348ea62c69","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/cpu/llm?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/76bac8f53bbd5c76068f4b60c05556348ea62c69","html":"https://github.com/eidolon-ai/eidolon/tree/main/sdk/eidolon_ai_sdk/cpu/llm"}},{"name":"llm_message.py","path":"sdk/eidolon_ai_sdk/cpu/llm_message.py","sha":"82b507777bd5fcab0fab5fb3048be5c7039f6687","size":1725,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/cpu/llm_message.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/cpu/llm_message.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/82b507777bd5fcab0fab5fb3048be5c7039f6687","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/cpu/llm_message.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/cpu/llm_message.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/82b507777bd5fcab0fab5fb3048be5c7039f6687","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/cpu/llm_message.py"}},{"name":"llm_unit.py","path":"sdk/eidolon_ai_sdk/cpu/llm_unit.py","sha":"67b99ddac68fd63c740c41e2391aaa9b3d3bb667","size":1910,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/cpu/llm_unit.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/cpu/llm_unit.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/67b99ddac68fd63c740c41e2391aaa9b3d3bb667","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/cpu/llm_unit.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/cpu/llm_unit.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/67b99ddac68fd63c740c41e2391aaa9b3d3bb667","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/cpu/llm_unit.py"}},{"name":"logic_unit.py","path":"sdk/eidolon_ai_sdk/cpu/logic_unit.py","sha":"42b066dcdc9f8fc97b967b524f207a7fc98d2d08","size":4204,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/cpu/logic_unit.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/cpu/logic_unit.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/42b066dcdc9f8fc97b967b524f207a7fc98d2d08","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/cpu/logic_unit.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/cpu/logic_unit.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/42b066dcdc9f8fc97b967b524f207a7fc98d2d08","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/cpu/logic_unit.py"}},{"name":"memory_unit.py","path":"sdk/eidolon_ai_sdk/cpu/memory_unit.py","sha":"753116d4cbec48d4b5ffc90aa5390371ce3d5d1b","size":3541,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/cpu/memory_unit.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/cpu/memory_unit.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/753116d4cbec48d4b5ffc90aa5390371ce3d5d1b","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/cpu/memory_unit.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/cpu/memory_unit.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/753116d4cbec48d4b5ffc90aa5390371ce3d5d1b","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/cpu/memory_unit.py"}},{"name":"open_ai_assistants_cpu.py","path":"sdk/eidolon_ai_sdk/cpu/open_ai_assistants_cpu.py","sha":"b0bae69a959afc1b444debf0e65fc97ebcc3fce2","size":13673,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/cpu/open_ai_assistants_cpu.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/cpu/open_ai_assistants_cpu.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/b0bae69a959afc1b444debf0e65fc97ebcc3fce2","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/cpu/open_ai_assistants_cpu.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/cpu/open_ai_assistants_cpu.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/b0bae69a959afc1b444debf0e65fc97ebcc3fce2","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/cpu/open_ai_assistants_cpu.py"}},{"name":"processing_unit.py","path":"sdk/eidolon_ai_sdk/cpu/processing_unit.py","sha":"1d31f3b6db5dff361b08eb02f2c4bb6a54b79126","size":825,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/cpu/processing_unit.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/cpu/processing_unit.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/1d31f3b6db5dff361b08eb02f2c4bb6a54b79126","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/cpu/processing_unit.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/cpu/processing_unit.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/1d31f3b6db5dff361b08eb02f2c4bb6a54b79126","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/cpu/processing_unit.py"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:29:19 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E4BB:25592D:153424:1E9A50:65D519AF
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4753'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '247'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/builtins?ref=main
  response:
    content: '[{"name":"__init__.py","path":"sdk/eidolon_ai_sdk/builtins/__init__.py","sha":"e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/builtins/__init__.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/builtins/__init__.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/builtins/__init__.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/builtins/__init__.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/builtins/__init__.py"}},{"name":"code_builtins.py","path":"sdk/eidolon_ai_sdk/builtins/code_builtins.py","sha":"152d13e372f9cc16261090cb7168785a926c17d9","size":5343,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/builtins/code_builtins.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/builtins/code_builtins.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/152d13e372f9cc16261090cb7168785a926c17d9","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/builtins/code_builtins.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/builtins/code_builtins.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/152d13e372f9cc16261090cb7168785a926c17d9","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/builtins/code_builtins.py"}},{"name":"logic_units","path":"sdk/eidolon_ai_sdk/builtins/logic_units","sha":"42a6a8897ee63644854bd6445527f1c34db39a28","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/builtins/logic_units?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/sdk/eidolon_ai_sdk/builtins/logic_units","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/42a6a8897ee63644854bd6445527f1c34db39a28","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/builtins/logic_units?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/42a6a8897ee63644854bd6445527f1c34db39a28","html":"https://github.com/eidolon-ai/eidolon/tree/main/sdk/eidolon_ai_sdk/builtins/logic_units"}},{"name":"resources","path":"sdk/eidolon_ai_sdk/builtins/resources","sha":"36daadf10bfee96a6da95367b0beafe5af64ec69","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/builtins/resources?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/sdk/eidolon_ai_sdk/builtins/resources","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/36daadf10bfee96a6da95367b0beafe5af64ec69","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/builtins/resources?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/36daadf10bfee96a6da95367b0beafe5af64ec69","html":"https://github.com/eidolon-ai/eidolon/tree/main/sdk/eidolon_ai_sdk/builtins/resources"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:29:19 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E4BA:25886F:142825:1D8F06:65D519AF
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4754'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '246'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/security?ref=main
  response:
    content: '[{"name":"__init__.py","path":"sdk/eidolon_ai_sdk/security/__init__.py","sha":"e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/security/__init__.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/security/__init__.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/security/__init__.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/security/__init__.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/security/__init__.py"}},{"name":"google_authorizor.py","path":"sdk/eidolon_ai_sdk/security/google_authorizor.py","sha":"596631152f2c83e903ebc3f256462658cc354889","size":1812,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/security/google_authorizor.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/security/google_authorizor.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/596631152f2c83e903ebc3f256462658cc354889","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/security/google_authorizor.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/security/google_authorizor.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/596631152f2c83e903ebc3f256462658cc354889","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/security/google_authorizor.py"}},{"name":"jwt_middleware.py","path":"sdk/eidolon_ai_sdk/security/jwt_middleware.py","sha":"661e259bebc42593e04f3454c23ebdbda2a38419","size":1745,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/security/jwt_middleware.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/security/jwt_middleware.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/661e259bebc42593e04f3454c23ebdbda2a38419","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/security/jwt_middleware.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/security/jwt_middleware.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/661e259bebc42593e04f3454c23ebdbda2a38419","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/security/jwt_middleware.py"}},{"name":"okta_authorizor.py","path":"sdk/eidolon_ai_sdk/security/okta_authorizor.py","sha":"4d1116e049ef4f2beba26641372e38bf0b139700","size":487,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/security/okta_authorizor.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/security/okta_authorizor.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/4d1116e049ef4f2beba26641372e38bf0b139700","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/security/okta_authorizor.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/security/okta_authorizor.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/4d1116e049ef4f2beba26641372e38bf0b139700","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/security/okta_authorizor.py"}},{"name":"security_manager.py","path":"sdk/eidolon_ai_sdk/security/security_manager.py","sha":"175804f2e78c8e22b4e3697feb86bbe63cc895ab","size":978,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/security/security_manager.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/security/security_manager.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/175804f2e78c8e22b4e3697feb86bbe63cc895ab","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/security/security_manager.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/security/security_manager.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/175804f2e78c8e22b4e3697feb86bbe63cc895ab","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/security/security_manager.py"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:29:19 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E4BE:2552AA:15BFAD:1F267A:65D519AF
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4751'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '249'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/memory?ref=main
  response:
    content: '[{"name":"__init__.py","path":"sdk/eidolon_ai_sdk/memory/__init__.py","sha":"e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/memory/__init__.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/memory/__init__.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/memory/__init__.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/memory/__init__.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/memory/__init__.py"}},{"name":"agent_memory.py","path":"sdk/eidolon_ai_sdk/memory/agent_memory.py","sha":"9cfa2930baed16b36ddbcab4ac3ee64cb179af64","size":1157,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/memory/agent_memory.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/memory/agent_memory.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/9cfa2930baed16b36ddbcab4ac3ee64cb179af64","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/memory/agent_memory.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/memory/agent_memory.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/9cfa2930baed16b36ddbcab4ac3ee64cb179af64","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/memory/agent_memory.py"}},{"name":"chroma_vector_store.py","path":"sdk/eidolon_ai_sdk/memory/chroma_vector_store.py","sha":"3e6c1b1b39eb90fc2caf50ecd6b33e80c7deef6a","size":5286,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/memory/chroma_vector_store.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/memory/chroma_vector_store.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/3e6c1b1b39eb90fc2caf50ecd6b33e80c7deef6a","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/memory/chroma_vector_store.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/memory/chroma_vector_store.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/3e6c1b1b39eb90fc2caf50ecd6b33e80c7deef6a","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/memory/chroma_vector_store.py"}},{"name":"document.py","path":"sdk/eidolon_ai_sdk/memory/document.py","sha":"66dd9fc741f50eb2eb03fbda938771fca9f7de9d","size":641,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/memory/document.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/memory/document.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/66dd9fc741f50eb2eb03fbda938771fca9f7de9d","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/memory/document.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/memory/document.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/66dd9fc741f50eb2eb03fbda938771fca9f7de9d","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/memory/document.py"}},{"name":"embeddings.py","path":"sdk/eidolon_ai_sdk/memory/embeddings.py","sha":"a111bf5861a31197246f0a89c50c47bf3c8101c7","size":2655,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/memory/embeddings.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/memory/embeddings.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/a111bf5861a31197246f0a89c50c47bf3c8101c7","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/memory/embeddings.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/memory/embeddings.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/a111bf5861a31197246f0a89c50c47bf3c8101c7","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/memory/embeddings.py"}},{"name":"file_memory.py","path":"sdk/eidolon_ai_sdk/memory/file_memory.py","sha":"c4ce501ddc93d23b0e178d82746b74551607eb60","size":2517,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/memory/file_memory.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/memory/file_memory.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/c4ce501ddc93d23b0e178d82746b74551607eb60","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/memory/file_memory.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/memory/file_memory.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/c4ce501ddc93d23b0e178d82746b74551607eb60","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/memory/file_memory.py"}},{"name":"file_system_vector_store.py","path":"sdk/eidolon_ai_sdk/memory/file_system_vector_store.py","sha":"b720480946c302872af59a10504db23c5c9e23b5","size":4220,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/memory/file_system_vector_store.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/memory/file_system_vector_store.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/b720480946c302872af59a10504db23c5c9e23b5","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/memory/file_system_vector_store.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/memory/file_system_vector_store.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/b720480946c302872af59a10504db23c5c9e23b5","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/memory/file_system_vector_store.py"}},{"name":"in_memory_file_memory.py","path":"sdk/eidolon_ai_sdk/memory/in_memory_file_memory.py","sha":"a559fc42a3a33c439e792d5272e78e5358c99850","size":3912,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/memory/in_memory_file_memory.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/memory/in_memory_file_memory.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/a559fc42a3a33c439e792d5272e78e5358c99850","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/memory/in_memory_file_memory.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/memory/in_memory_file_memory.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/a559fc42a3a33c439e792d5272e78e5358c99850","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/memory/in_memory_file_memory.py"}},{"name":"local_file_memory.py","path":"sdk/eidolon_ai_sdk/memory/local_file_memory.py","sha":"5de3f79ef29d8a2f773a314ca24b47fd7d7faa5f","size":5624,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/memory/local_file_memory.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/memory/local_file_memory.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/5de3f79ef29d8a2f773a314ca24b47fd7d7faa5f","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/memory/local_file_memory.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/memory/local_file_memory.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/5de3f79ef29d8a2f773a314ca24b47fd7d7faa5f","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/memory/local_file_memory.py"}},{"name":"local_symbolic_memory.py","path":"sdk/eidolon_ai_sdk/memory/local_symbolic_memory.py","sha":"719ecd09fa7467bf1a25bb7e9e5e3acea3c084ba","size":4837,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/memory/local_symbolic_memory.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/memory/local_symbolic_memory.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/719ecd09fa7467bf1a25bb7e9e5e3acea3c084ba","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/memory/local_symbolic_memory.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/memory/local_symbolic_memory.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/719ecd09fa7467bf1a25bb7e9e5e3acea3c084ba","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/memory/local_symbolic_memory.py"}},{"name":"mongo_symbolic_memory.py","path":"sdk/eidolon_ai_sdk/memory/mongo_symbolic_memory.py","sha":"dbcb3ab019b02d01114b2d82beb5c35025187be4","size":4067,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/memory/mongo_symbolic_memory.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/memory/mongo_symbolic_memory.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/dbcb3ab019b02d01114b2d82beb5c35025187be4","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/memory/mongo_symbolic_memory.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/memory/mongo_symbolic_memory.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/dbcb3ab019b02d01114b2d82beb5c35025187be4","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/memory/mongo_symbolic_memory.py"}},{"name":"noop_memory.py","path":"sdk/eidolon_ai_sdk/memory/noop_memory.py","sha":"1dbcbcfa51c7b7b2304fcfcb89136f8f0081e569","size":996,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/memory/noop_memory.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/memory/noop_memory.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/1dbcbcfa51c7b7b2304fcfcb89136f8f0081e569","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/memory/noop_memory.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/memory/noop_memory.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/1dbcbcfa51c7b7b2304fcfcb89136f8f0081e569","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/memory/noop_memory.py"}},{"name":"semantic_memory.py","path":"sdk/eidolon_ai_sdk/memory/semantic_memory.py","sha":"5a802554679ea68b9d07e3498fc41e43e59f9843","size":5453,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/memory/semantic_memory.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/memory/semantic_memory.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/5a802554679ea68b9d07e3498fc41e43e59f9843","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/memory/semantic_memory.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/memory/semantic_memory.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/5a802554679ea68b9d07e3498fc41e43e59f9843","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/memory/semantic_memory.py"}},{"name":"similarity_memory.py","path":"sdk/eidolon_ai_sdk/memory/similarity_memory.py","sha":"1071828f68f623e3b46585bc51848a994b8f4817","size":869,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/memory/similarity_memory.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/memory/similarity_memory.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/1071828f68f623e3b46585bc51848a994b8f4817","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/memory/similarity_memory.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/memory/similarity_memory.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/1071828f68f623e3b46585bc51848a994b8f4817","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/memory/similarity_memory.py"}},{"name":"vector_store.py","path":"sdk/eidolon_ai_sdk/memory/vector_store.py","sha":"057432f9c3d1b44288f18a7c0cb0df112c13ace6","size":1516,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/memory/vector_store.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/memory/vector_store.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/057432f9c3d1b44288f18a7c0cb0df112c13ace6","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/memory/vector_store.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/memory/vector_store.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/057432f9c3d1b44288f18a7c0cb0df112c13ace6","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/memory/vector_store.py"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:29:19 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E4BD:282C91:DDB40:1425EF:65D519AF
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4750'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '250'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/util?ref=main
  response:
    content: '[{"name":"__init__.py","path":"sdk/eidolon_ai_sdk/util/__init__.py","sha":"e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/util/__init__.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/util/__init__.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/util/__init__.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/util/__init__.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/util/__init__.py"}},{"name":"aiohttp.py","path":"sdk/eidolon_ai_sdk/util/aiohttp.py","sha":"bfd5c8462131f640f046a26fdd29c84830056f72","size":2716,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/util/aiohttp.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/util/aiohttp.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/bfd5c8462131f640f046a26fdd29c84830056f72","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/util/aiohttp.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/util/aiohttp.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/bfd5c8462131f640f046a26fdd29c84830056f72","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/util/aiohttp.py"}},{"name":"async_wrapper.py","path":"sdk/eidolon_ai_sdk/util/async_wrapper.py","sha":"ac58da434ff6b011172dafc4249d7e0df42552b8","size":509,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/util/async_wrapper.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/util/async_wrapper.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/ac58da434ff6b011172dafc4249d7e0df42552b8","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/util/async_wrapper.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/util/async_wrapper.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/ac58da434ff6b011172dafc4249d7e0df42552b8","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/util/async_wrapper.py"}},{"name":"class_utils.py","path":"sdk/eidolon_ai_sdk/util/class_utils.py","sha":"44d54344692ac2a71f2988adfc692dd55876921e","size":2806,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/util/class_utils.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/util/class_utils.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/44d54344692ac2a71f2988adfc692dd55876921e","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/util/class_utils.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/util/class_utils.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/44d54344692ac2a71f2988adfc692dd55876921e","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/util/class_utils.py"}},{"name":"logger.py","path":"sdk/eidolon_ai_sdk/util/logger.py","sha":"948da74a65c124a4238715352d464137d4305888","size":448,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/util/logger.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/util/logger.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/948da74a65c124a4238715352d464137d4305888","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/util/logger.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/util/logger.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/948da74a65c124a4238715352d464137d4305888","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/util/logger.py"}},{"name":"replay.py","path":"sdk/eidolon_ai_sdk/util/replay.py","sha":"d00078a1fd8c35632f856c4127737a03bd334975","size":3359,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/util/replay.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/util/replay.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/d00078a1fd8c35632f856c4127737a03bd334975","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/util/replay.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/util/replay.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/d00078a1fd8c35632f856c4127737a03bd334975","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/util/replay.py"}},{"name":"schema_to_model.py","path":"sdk/eidolon_ai_sdk/util/schema_to_model.py","sha":"45bac811752cc3739595ffcacd41ea46ee682822","size":6206,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/util/schema_to_model.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/util/schema_to_model.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/45bac811752cc3739595ffcacd41ea46ee682822","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/util/schema_to_model.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/util/schema_to_model.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/45bac811752cc3739595ffcacd41ea46ee682822","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/util/schema_to_model.py"}},{"name":"str_utils.py","path":"sdk/eidolon_ai_sdk/util/str_utils.py","sha":"3f7dd953db20ac83f3b2240327e27ff4a8503cfb","size":349,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/util/str_utils.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/util/str_utils.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/3f7dd953db20ac83f3b2240327e27ff4a8503cfb","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/util/str_utils.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/util/str_utils.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/3f7dd953db20ac83f3b2240327e27ff4a8503cfb","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/util/str_utils.py"}},{"name":"stream_collector.py","path":"sdk/eidolon_ai_sdk/util/stream_collector.py","sha":"eb30bacbb5dfb5d76cd30e142746aad8f588fd48","size":3826,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/util/stream_collector.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/util/stream_collector.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/eb30bacbb5dfb5d76cd30e142746aad8f588fd48","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/util/stream_collector.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/util/stream_collector.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/eb30bacbb5dfb5d76cd30e142746aad8f588fd48","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/util/stream_collector.py"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:29:19 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E4C0:2537C8:173753:209E61:65D519AF
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4749'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '251'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/system?ref=main
  response:
    content: '[{"name":"__init__.py","path":"sdk/eidolon_ai_sdk/system/__init__.py","sha":"e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/system/__init__.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/system/__init__.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/system/__init__.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/system/__init__.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/system/__init__.py"}},{"name":"agent_contract.py","path":"sdk/eidolon_ai_sdk/system/agent_contract.py","sha":"3e7b6ed39743961b0ed5fe9b060d07b58af451b6","size":1024,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/system/agent_contract.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/system/agent_contract.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/3e7b6ed39743961b0ed5fe9b060d07b58af451b6","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/system/agent_contract.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/system/agent_contract.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/3e7b6ed39743961b0ed5fe9b060d07b58af451b6","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/system/agent_contract.py"}},{"name":"agent_controller.py","path":"sdk/eidolon_ai_sdk/system/agent_controller.py","sha":"8dd8e607518d332b6cde8a888b6b02b0a4510728","size":23134,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/system/agent_controller.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/system/agent_controller.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/8dd8e607518d332b6cde8a888b6b02b0a4510728","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/system/agent_controller.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/system/agent_controller.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/8dd8e607518d332b6cde8a888b6b02b0a4510728","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/system/agent_controller.py"}},{"name":"agent_machine.py","path":"sdk/eidolon_ai_sdk/system/agent_machine.py","sha":"fd60830dfda808c7f7852eff37745ac5acec782b","size":2947,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/system/agent_machine.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/system/agent_machine.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/fd60830dfda808c7f7852eff37745ac5acec782b","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/system/agent_machine.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/system/agent_machine.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/fd60830dfda808c7f7852eff37745ac5acec782b","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/system/agent_machine.py"}},{"name":"fn_handler.py","path":"sdk/eidolon_ai_sdk/system/fn_handler.py","sha":"0b372b59b9a834d1f2b832c955a349ba2d0fb534","size":3358,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/system/fn_handler.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/system/fn_handler.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/0b372b59b9a834d1f2b832c955a349ba2d0fb534","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/system/fn_handler.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/system/fn_handler.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/0b372b59b9a834d1f2b832c955a349ba2d0fb534","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/system/fn_handler.py"}},{"name":"processes.py","path":"sdk/eidolon_ai_sdk/system/processes.py","sha":"2c464ce9a1cf0c4553eb265e1219380e85d8ea9e","size":3847,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/system/processes.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/system/processes.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/2c464ce9a1cf0c4553eb265e1219380e85d8ea9e","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/system/processes.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/system/processes.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/2c464ce9a1cf0c4553eb265e1219380e85d8ea9e","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/system/processes.py"}},{"name":"reference_model.py","path":"sdk/eidolon_ai_sdk/system/reference_model.py","sha":"1d6112fbf7dc0f66b9e3274537d991e3e3bbc573","size":6629,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/system/reference_model.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/system/reference_model.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/1d6112fbf7dc0f66b9e3274537d991e3e3bbc573","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/system/reference_model.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/system/reference_model.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/1d6112fbf7dc0f66b9e3274537d991e3e3bbc573","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/system/reference_model.py"}},{"name":"request_context.py","path":"sdk/eidolon_ai_sdk/system/request_context.py","sha":"d037bc2c57a7f2be6ac0789594ac01cc6960f62e","size":2360,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/system/request_context.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/system/request_context.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/d037bc2c57a7f2be6ac0789594ac01cc6960f62e","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/system/request_context.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/system/request_context.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/d037bc2c57a7f2be6ac0789594ac01cc6960f62e","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/system/request_context.py"}},{"name":"resources","path":"sdk/eidolon_ai_sdk/system/resources","sha":"fe450f9db0aedb5c77bf09d95157d532f6d415a5","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/system/resources?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/sdk/eidolon_ai_sdk/system/resources","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/fe450f9db0aedb5c77bf09d95157d532f6d415a5","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/system/resources?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/fe450f9db0aedb5c77bf09d95157d532f6d415a5","html":"https://github.com/eidolon-ai/eidolon/tree/main/sdk/eidolon_ai_sdk/system/resources"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:29:19 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E4BF:253F79:163B90:1FA275:65D519AF
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4748'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '252'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/io?ref=main
  response:
    content: '[{"name":"__init__.py","path":"sdk/eidolon_ai_sdk/io/__init__.py","sha":"e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/io/__init__.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/io/__init__.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/io/__init__.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/io/__init__.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/io/__init__.py"}},{"name":"events.py","path":"sdk/eidolon_ai_sdk/io/events.py","sha":"5a42287702689c58153bd0aac6e8f40898e77506","size":4981,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/io/events.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/io/events.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/5a42287702689c58153bd0aac6e8f40898e77506","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/io/events.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/io/events.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/5a42287702689c58153bd0aac6e8f40898e77506","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/io/events.py"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:29:19 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E4BC:252DF3:14862C:1DEC84:65D519AF
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4752'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '248'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/assets/main_images?ref=main
  response:
    content: "[{\"name\":\"DALL\xB7E 2023-12-22 22.35.03 - An abstract, non-humanoid
      central form, reminiscent of a cosmic entity with vibrant, swirling nebula-like
      patterns in deep blues, purples, and hints o.png\",\"path\":\"docs/src/assets/main_images/DALL\xB7E
      2023-12-22 22.35.03 - An abstract, non-humanoid central form, reminiscent of
      a cosmic entity with vibrant, swirling nebula-like patterns in deep blues, purples,
      and hints o.png\",\"sha\":\"d43d4b812d150091491cd30d7ef8348113e6d5fe\",\"size\":2054621,\"url\":\"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/assets/main_images/DALL%C2%B7E%202023-12-22%2022.35.03%20-%20An%20abstract,%20non-humanoid%20central%20form,%20reminiscent%20of%20a%20cosmic%20entity%20with%20vibrant,%20swirling%20nebula-like%20patterns%20in%20deep%20blues,%20purples,%20and%20hints%20o.png?ref=main\",\"html_url\":\"https://github.com/eidolon-ai/eidolon/blob/main/docs/src/assets/main_images/DALL%C2%B7E%202023-12-22%2022.35.03%20-%20An%20abstract,%20non-humanoid%20central%20form,%20reminiscent%20of%20a%20cosmic%20entity%20with%20vibrant,%20swirling%20nebula-like%20patterns%20in%20deep%20blues,%20purples,%20and%20hints%20o.png\",\"git_url\":\"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/d43d4b812d150091491cd30d7ef8348113e6d5fe\",\"download_url\":\"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/docs/src/assets/main_images/DALL\xB7E
      2023-12-22 22.35.03 - An abstract, non-humanoid central form, reminiscent of
      a cosmic entity with vibrant, swirling nebula-like patterns in deep blues, purples,
      and hints o.png\",\"type\":\"file\",\"_links\":{\"self\":\"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/assets/main_images/DALL%C2%B7E%202023-12-22%2022.35.03%20-%20An%20abstract,%20non-humanoid%20central%20form,%20reminiscent%20of%20a%20cosmic%20entity%20with%20vibrant,%20swirling%20nebula-like%20patterns%20in%20deep%20blues,%20purples,%20and%20hints%20o.png?ref=main\",\"git\":\"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/d43d4b812d150091491cd30d7ef8348113e6d5fe\",\"html\":\"https://github.com/eidolon-ai/eidolon/blob/main/docs/src/assets/main_images/DALL%C2%B7E%202023-12-22%2022.35.03%20-%20An%20abstract,%20non-humanoid%20central%20form,%20reminiscent%20of%20a%20cosmic%20entity%20with%20vibrant,%20swirling%20nebula-like%20patterns%20in%20deep%20blues,%20purples,%20and%20hints%20o.png\"}},{\"name\":\"DALL\xB7E
      2023-12-22 22.35.08 - An abstract, non-humanoid central form, reminiscent of
      a cosmic entity with vibrant, swirling nebula-like patterns in deep blues, purples,
      and hints o.png\",\"path\":\"docs/src/assets/main_images/DALL\xB7E 2023-12-22
      22.35.08 - An abstract, non-humanoid central form, reminiscent of a cosmic entity
      with vibrant, swirling nebula-like patterns in deep blues, purples, and hints
      o.png\",\"sha\":\"02e9e0e45079a36b1d7cfc68952fab48c18d79ae\",\"size\":2117661,\"url\":\"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/assets/main_images/DALL%C2%B7E%202023-12-22%2022.35.08%20-%20An%20abstract,%20non-humanoid%20central%20form,%20reminiscent%20of%20a%20cosmic%20entity%20with%20vibrant,%20swirling%20nebula-like%20patterns%20in%20deep%20blues,%20purples,%20and%20hints%20o.png?ref=main\",\"html_url\":\"https://github.com/eidolon-ai/eidolon/blob/main/docs/src/assets/main_images/DALL%C2%B7E%202023-12-22%2022.35.08%20-%20An%20abstract,%20non-humanoid%20central%20form,%20reminiscent%20of%20a%20cosmic%20entity%20with%20vibrant,%20swirling%20nebula-like%20patterns%20in%20deep%20blues,%20purples,%20and%20hints%20o.png\",\"git_url\":\"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/02e9e0e45079a36b1d7cfc68952fab48c18d79ae\",\"download_url\":\"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/docs/src/assets/main_images/DALL\xB7E
      2023-12-22 22.35.08 - An abstract, non-humanoid central form, reminiscent of
      a cosmic entity with vibrant, swirling nebula-like patterns in deep blues, purples,
      and hints o.png\",\"type\":\"file\",\"_links\":{\"self\":\"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/assets/main_images/DALL%C2%B7E%202023-12-22%2022.35.08%20-%20An%20abstract,%20non-humanoid%20central%20form,%20reminiscent%20of%20a%20cosmic%20entity%20with%20vibrant,%20swirling%20nebula-like%20patterns%20in%20deep%20blues,%20purples,%20and%20hints%20o.png?ref=main\",\"git\":\"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/02e9e0e45079a36b1d7cfc68952fab48c18d79ae\",\"html\":\"https://github.com/eidolon-ai/eidolon/blob/main/docs/src/assets/main_images/DALL%C2%B7E%202023-12-22%2022.35.08%20-%20An%20abstract,%20non-humanoid%20central%20form,%20reminiscent%20of%20a%20cosmic%20entity%20with%20vibrant,%20swirling%20nebula-like%20patterns%20in%20deep%20blues,%20purples,%20and%20hints%20o.png\"}},{\"name\":\"DALL\xB7E
      2023-12-22 22.35.10 - Multiple abstract, non-humanoid forms resembling cosmic
      entities, each with vibrant, swirling nebula-like patterns in deep blues, purples,
      and hints o.png\",\"path\":\"docs/src/assets/main_images/DALL\xB7E 2023-12-22
      22.35.10 - Multiple abstract, non-humanoid forms resembling cosmic entities,
      each with vibrant, swirling nebula-like patterns in deep blues, purples, and
      hints o.png\",\"sha\":\"207d1f916f376cac78f0ed8710782fda39a114df\",\"size\":2181162,\"url\":\"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/assets/main_images/DALL%C2%B7E%202023-12-22%2022.35.10%20-%20Multiple%20abstract,%20non-humanoid%20forms%20resembling%20cosmic%20entities,%20each%20with%20vibrant,%20swirling%20nebula-like%20patterns%20in%20deep%20blues,%20purples,%20and%20hints%20o.png?ref=main\",\"html_url\":\"https://github.com/eidolon-ai/eidolon/blob/main/docs/src/assets/main_images/DALL%C2%B7E%202023-12-22%2022.35.10%20-%20Multiple%20abstract,%20non-humanoid%20forms%20resembling%20cosmic%20entities,%20each%20with%20vibrant,%20swirling%20nebula-like%20patterns%20in%20deep%20blues,%20purples,%20and%20hints%20o.png\",\"git_url\":\"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/207d1f916f376cac78f0ed8710782fda39a114df\",\"download_url\":\"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/docs/src/assets/main_images/DALL\xB7E
      2023-12-22 22.35.10 - Multiple abstract, non-humanoid forms resembling cosmic
      entities, each with vibrant, swirling nebula-like patterns in deep blues, purples,
      and hints o.png\",\"type\":\"file\",\"_links\":{\"self\":\"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/assets/main_images/DALL%C2%B7E%202023-12-22%2022.35.10%20-%20Multiple%20abstract,%20non-humanoid%20forms%20resembling%20cosmic%20entities,%20each%20with%20vibrant,%20swirling%20nebula-like%20patterns%20in%20deep%20blues,%20purples,%20and%20hints%20o.png?ref=main\",\"git\":\"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/207d1f916f376cac78f0ed8710782fda39a114df\",\"html\":\"https://github.com/eidolon-ai/eidolon/blob/main/docs/src/assets/main_images/DALL%C2%B7E%202023-12-22%2022.35.10%20-%20Multiple%20abstract,%20non-humanoid%20forms%20resembling%20cosmic%20entities,%20each%20with%20vibrant,%20swirling%20nebula-like%20patterns%20in%20deep%20blues,%20purples,%20and%20hints%20o.png\"}},{\"name\":\"DALL\xB7E
      2023-12-22 22.35.12 - Multiple abstract, non-humanoid forms resembling cosmic
      entities, each with vibrant, swirling nebula-like patterns in deep blues, purples,
      and hints o.png\",\"path\":\"docs/src/assets/main_images/DALL\xB7E 2023-12-22
      22.35.12 - Multiple abstract, non-humanoid forms resembling cosmic entities,
      each with vibrant, swirling nebula-like patterns in deep blues, purples, and
      hints o.png\",\"sha\":\"3466ab6ae20228649492285ba3bb335fe65a57de\",\"size\":2032687,\"url\":\"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/assets/main_images/DALL%C2%B7E%202023-12-22%2022.35.12%20-%20Multiple%20abstract,%20non-humanoid%20forms%20resembling%20cosmic%20entities,%20each%20with%20vibrant,%20swirling%20nebula-like%20patterns%20in%20deep%20blues,%20purples,%20and%20hints%20o.png?ref=main\",\"html_url\":\"https://github.com/eidolon-ai/eidolon/blob/main/docs/src/assets/main_images/DALL%C2%B7E%202023-12-22%2022.35.12%20-%20Multiple%20abstract,%20non-humanoid%20forms%20resembling%20cosmic%20entities,%20each%20with%20vibrant,%20swirling%20nebula-like%20patterns%20in%20deep%20blues,%20purples,%20and%20hints%20o.png\",\"git_url\":\"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/3466ab6ae20228649492285ba3bb335fe65a57de\",\"download_url\":\"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/docs/src/assets/main_images/DALL\xB7E
      2023-12-22 22.35.12 - Multiple abstract, non-humanoid forms resembling cosmic
      entities, each with vibrant, swirling nebula-like patterns in deep blues, purples,
      and hints o.png\",\"type\":\"file\",\"_links\":{\"self\":\"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/assets/main_images/DALL%C2%B7E%202023-12-22%2022.35.12%20-%20Multiple%20abstract,%20non-humanoid%20forms%20resembling%20cosmic%20entities,%20each%20with%20vibrant,%20swirling%20nebula-like%20patterns%20in%20deep%20blues,%20purples,%20and%20hints%20o.png?ref=main\",\"git\":\"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/3466ab6ae20228649492285ba3bb335fe65a57de\",\"html\":\"https://github.com/eidolon-ai/eidolon/blob/main/docs/src/assets/main_images/DALL%C2%B7E%202023-12-22%2022.35.12%20-%20Multiple%20abstract,%20non-humanoid%20forms%20resembling%20cosmic%20entities,%20each%20with%20vibrant,%20swirling%20nebula-like%20patterns%20in%20deep%20blues,%20purples,%20and%20hints%20o.png\"}},{\"name\":\"DALL\xB7E
      2023-12-22 22.35.14 - A central abstract, non-humanoid form resembling a cosmic
      entity, with vibrant, swirling nebula-like patterns in deep blues, purples,
      and hints of pin.png\",\"path\":\"docs/src/assets/main_images/DALL\xB7E 2023-12-22
      22.35.14 - A central abstract, non-humanoid form resembling a cosmic entity,
      with vibrant, swirling nebula-like patterns in deep blues, purples, and hints
      of pin.png\",\"sha\":\"23ccb64021ee43ecd4e45d0d7a678ff67a5e2565\",\"size\":2101737,\"url\":\"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/assets/main_images/DALL%C2%B7E%202023-12-22%2022.35.14%20-%20A%20central%20abstract,%20non-humanoid%20form%20resembling%20a%20cosmic%20entity,%20with%20vibrant,%20swirling%20nebula-like%20patterns%20in%20deep%20blues,%20purples,%20and%20hints%20of%20pin.png?ref=main\",\"html_url\":\"https://github.com/eidolon-ai/eidolon/blob/main/docs/src/assets/main_images/DALL%C2%B7E%202023-12-22%2022.35.14%20-%20A%20central%20abstract,%20non-humanoid%20form%20resembling%20a%20cosmic%20entity,%20with%20vibrant,%20swirling%20nebula-like%20patterns%20in%20deep%20blues,%20purples,%20and%20hints%20of%20pin.png\",\"git_url\":\"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/23ccb64021ee43ecd4e45d0d7a678ff67a5e2565\",\"download_url\":\"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/docs/src/assets/main_images/DALL\xB7E
      2023-12-22 22.35.14 - A central abstract, non-humanoid form resembling a cosmic
      entity, with vibrant, swirling nebula-like patterns in deep blues, purples,
      and hints of pin.png\",\"type\":\"file\",\"_links\":{\"self\":\"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/assets/main_images/DALL%C2%B7E%202023-12-22%2022.35.14%20-%20A%20central%20abstract,%20non-humanoid%20form%20resembling%20a%20cosmic%20entity,%20with%20vibrant,%20swirling%20nebula-like%20patterns%20in%20deep%20blues,%20purples,%20and%20hints%20of%20pin.png?ref=main\",\"git\":\"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/23ccb64021ee43ecd4e45d0d7a678ff67a5e2565\",\"html\":\"https://github.com/eidolon-ai/eidolon/blob/main/docs/src/assets/main_images/DALL%C2%B7E%202023-12-22%2022.35.14%20-%20A%20central%20abstract,%20non-humanoid%20form%20resembling%20a%20cosmic%20entity,%20with%20vibrant,%20swirling%20nebula-like%20patterns%20in%20deep%20blues,%20purples,%20and%20hints%20of%20pin.png\"}},{\"name\":\"DALL\xB7E
      2023-12-22 22.35.15 - A central abstract, non-humanoid form resembling a cosmic
      entity, with vibrant, swirling nebula-like patterns in deep blues, purples,
      and hints of pin.png\",\"path\":\"docs/src/assets/main_images/DALL\xB7E 2023-12-22
      22.35.15 - A central abstract, non-humanoid form resembling a cosmic entity,
      with vibrant, swirling nebula-like patterns in deep blues, purples, and hints
      of pin.png\",\"sha\":\"3409e3b5a3b598388c368d5075bc10ec7f4e0b3f\",\"size\":2142845,\"url\":\"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/assets/main_images/DALL%C2%B7E%202023-12-22%2022.35.15%20-%20A%20central%20abstract,%20non-humanoid%20form%20resembling%20a%20cosmic%20entity,%20with%20vibrant,%20swirling%20nebula-like%20patterns%20in%20deep%20blues,%20purples,%20and%20hints%20of%20pin.png?ref=main\",\"html_url\":\"https://github.com/eidolon-ai/eidolon/blob/main/docs/src/assets/main_images/DALL%C2%B7E%202023-12-22%2022.35.15%20-%20A%20central%20abstract,%20non-humanoid%20form%20resembling%20a%20cosmic%20entity,%20with%20vibrant,%20swirling%20nebula-like%20patterns%20in%20deep%20blues,%20purples,%20and%20hints%20of%20pin.png\",\"git_url\":\"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/3409e3b5a3b598388c368d5075bc10ec7f4e0b3f\",\"download_url\":\"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/docs/src/assets/main_images/DALL\xB7E
      2023-12-22 22.35.15 - A central abstract, non-humanoid form resembling a cosmic
      entity, with vibrant, swirling nebula-like patterns in deep blues, purples,
      and hints of pin.png\",\"type\":\"file\",\"_links\":{\"self\":\"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/assets/main_images/DALL%C2%B7E%202023-12-22%2022.35.15%20-%20A%20central%20abstract,%20non-humanoid%20form%20resembling%20a%20cosmic%20entity,%20with%20vibrant,%20swirling%20nebula-like%20patterns%20in%20deep%20blues,%20purples,%20and%20hints%20of%20pin.png?ref=main\",\"git\":\"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/3409e3b5a3b598388c368d5075bc10ec7f4e0b3f\",\"html\":\"https://github.com/eidolon-ai/eidolon/blob/main/docs/src/assets/main_images/DALL%C2%B7E%202023-12-22%2022.35.15%20-%20A%20central%20abstract,%20non-humanoid%20form%20resembling%20a%20cosmic%20entity,%20with%20vibrant,%20swirling%20nebula-like%20patterns%20in%20deep%20blues,%20purples,%20and%20hints%20of%20pin.png\"}},{\"name\":\"DALL\xB7E
      2023-12-22 22.35.16 - A central abstract, non-humanoid form resembling a cosmic
      entity, with vibrant, swirling nebula-like patterns in deep blues, purples,
      and hints of pin.png\",\"path\":\"docs/src/assets/main_images/DALL\xB7E 2023-12-22
      22.35.16 - A central abstract, non-humanoid form resembling a cosmic entity,
      with vibrant, swirling nebula-like patterns in deep blues, purples, and hints
      of pin.png\",\"sha\":\"c1987e6823b917e89768d117b52c265cd746b002\",\"size\":2224929,\"url\":\"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/assets/main_images/DALL%C2%B7E%202023-12-22%2022.35.16%20-%20A%20central%20abstract,%20non-humanoid%20form%20resembling%20a%20cosmic%20entity,%20with%20vibrant,%20swirling%20nebula-like%20patterns%20in%20deep%20blues,%20purples,%20and%20hints%20of%20pin.png?ref=main\",\"html_url\":\"https://github.com/eidolon-ai/eidolon/blob/main/docs/src/assets/main_images/DALL%C2%B7E%202023-12-22%2022.35.16%20-%20A%20central%20abstract,%20non-humanoid%20form%20resembling%20a%20cosmic%20entity,%20with%20vibrant,%20swirling%20nebula-like%20patterns%20in%20deep%20blues,%20purples,%20and%20hints%20of%20pin.png\",\"git_url\":\"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/c1987e6823b917e89768d117b52c265cd746b002\",\"download_url\":\"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/docs/src/assets/main_images/DALL\xB7E
      2023-12-22 22.35.16 - A central abstract, non-humanoid form resembling a cosmic
      entity, with vibrant, swirling nebula-like patterns in deep blues, purples,
      and hints of pin.png\",\"type\":\"file\",\"_links\":{\"self\":\"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/assets/main_images/DALL%C2%B7E%202023-12-22%2022.35.16%20-%20A%20central%20abstract,%20non-humanoid%20form%20resembling%20a%20cosmic%20entity,%20with%20vibrant,%20swirling%20nebula-like%20patterns%20in%20deep%20blues,%20purples,%20and%20hints%20of%20pin.png?ref=main\",\"git\":\"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/c1987e6823b917e89768d117b52c265cd746b002\",\"html\":\"https://github.com/eidolon-ai/eidolon/blob/main/docs/src/assets/main_images/DALL%C2%B7E%202023-12-22%2022.35.16%20-%20A%20central%20abstract,%20non-humanoid%20form%20resembling%20a%20cosmic%20entity,%20with%20vibrant,%20swirling%20nebula-like%20patterns%20in%20deep%20blues,%20purples,%20and%20hints%20of%20pin.png\"}},{\"name\":\"DALL\xB7E
      2023-12-22 22.35.18 - A central abstract, non-humanoid form resembling a cosmic
      entity, with vibrant, swirling nebula-like patterns in deep blues, purples,
      and hints of pin.png\",\"path\":\"docs/src/assets/main_images/DALL\xB7E 2023-12-22
      22.35.18 - A central abstract, non-humanoid form resembling a cosmic entity,
      with vibrant, swirling nebula-like patterns in deep blues, purples, and hints
      of pin.png\",\"sha\":\"6c201c7e187fecfc1ec740c6bb8da09a87e533f1\",\"size\":2050790,\"url\":\"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/assets/main_images/DALL%C2%B7E%202023-12-22%2022.35.18%20-%20A%20central%20abstract,%20non-humanoid%20form%20resembling%20a%20cosmic%20entity,%20with%20vibrant,%20swirling%20nebula-like%20patterns%20in%20deep%20blues,%20purples,%20and%20hints%20of%20pin.png?ref=main\",\"html_url\":\"https://github.com/eidolon-ai/eidolon/blob/main/docs/src/assets/main_images/DALL%C2%B7E%202023-12-22%2022.35.18%20-%20A%20central%20abstract,%20non-humanoid%20form%20resembling%20a%20cosmic%20entity,%20with%20vibrant,%20swirling%20nebula-like%20patterns%20in%20deep%20blues,%20purples,%20and%20hints%20of%20pin.png\",\"git_url\":\"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/6c201c7e187fecfc1ec740c6bb8da09a87e533f1\",\"download_url\":\"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/docs/src/assets/main_images/DALL\xB7E
      2023-12-22 22.35.18 - A central abstract, non-humanoid form resembling a cosmic
      entity, with vibrant, swirling nebula-like patterns in deep blues, purples,
      and hints of pin.png\",\"type\":\"file\",\"_links\":{\"self\":\"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/assets/main_images/DALL%C2%B7E%202023-12-22%2022.35.18%20-%20A%20central%20abstract,%20non-humanoid%20form%20resembling%20a%20cosmic%20entity,%20with%20vibrant,%20swirling%20nebula-like%20patterns%20in%20deep%20blues,%20purples,%20and%20hints%20of%20pin.png?ref=main\",\"git\":\"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/6c201c7e187fecfc1ec740c6bb8da09a87e533f1\",\"html\":\"https://github.com/eidolon-ai/eidolon/blob/main/docs/src/assets/main_images/DALL%C2%B7E%202023-12-22%2022.35.18%20-%20A%20central%20abstract,%20non-humanoid%20form%20resembling%20a%20cosmic%20entity,%20with%20vibrant,%20swirling%20nebula-like%20patterns%20in%20deep%20blues,%20purples,%20and%20hints%20of%20pin.png\"}},{\"name\":\"DALL\xB7E
      2023-12-22 22.35.20 - A central abstract form resembling a cosmic brain or an
      AI agent, with vibrant, swirling nebula-like patterns in deep blues, purples,
      and hints of pin.png\",\"path\":\"docs/src/assets/main_images/DALL\xB7E 2023-12-22
      22.35.20 - A central abstract form resembling a cosmic brain or an AI agent,
      with vibrant, swirling nebula-like patterns in deep blues, purples, and hints
      of pin.png\",\"sha\":\"ef8ccff6e404637bb70bf8ab07d5171bb1f160e1\",\"size\":2242149,\"url\":\"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/assets/main_images/DALL%C2%B7E%202023-12-22%2022.35.20%20-%20A%20central%20abstract%20form%20resembling%20a%20cosmic%20brain%20or%20an%20AI%20agent,%20with%20vibrant,%20swirling%20nebula-like%20patterns%20in%20deep%20blues,%20purples,%20and%20hints%20of%20pin.png?ref=main\",\"html_url\":\"https://github.com/eidolon-ai/eidolon/blob/main/docs/src/assets/main_images/DALL%C2%B7E%202023-12-22%2022.35.20%20-%20A%20central%20abstract%20form%20resembling%20a%20cosmic%20brain%20or%20an%20AI%20agent,%20with%20vibrant,%20swirling%20nebula-like%20patterns%20in%20deep%20blues,%20purples,%20and%20hints%20of%20pin.png\",\"git_url\":\"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/ef8ccff6e404637bb70bf8ab07d5171bb1f160e1\",\"download_url\":\"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/docs/src/assets/main_images/DALL\xB7E
      2023-12-22 22.35.20 - A central abstract form resembling a cosmic brain or an
      AI agent, with vibrant, swirling nebula-like patterns in deep blues, purples,
      and hints of pin.png\",\"type\":\"file\",\"_links\":{\"self\":\"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/assets/main_images/DALL%C2%B7E%202023-12-22%2022.35.20%20-%20A%20central%20abstract%20form%20resembling%20a%20cosmic%20brain%20or%20an%20AI%20agent,%20with%20vibrant,%20swirling%20nebula-like%20patterns%20in%20deep%20blues,%20purples,%20and%20hints%20of%20pin.png?ref=main\",\"git\":\"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/ef8ccff6e404637bb70bf8ab07d5171bb1f160e1\",\"html\":\"https://github.com/eidolon-ai/eidolon/blob/main/docs/src/assets/main_images/DALL%C2%B7E%202023-12-22%2022.35.20%20-%20A%20central%20abstract%20form%20resembling%20a%20cosmic%20brain%20or%20an%20AI%20agent,%20with%20vibrant,%20swirling%20nebula-like%20patterns%20in%20deep%20blues,%20purples,%20and%20hints%20of%20pin.png\"}},{\"name\":\"DALL\xB7E
      2023-12-22 22.35.21 - A central abstract form resembling a cosmic brain or an
      AI agent, with vibrant, swirling nebula-like patterns in deep blues, purples,
      and hints of pin.png\",\"path\":\"docs/src/assets/main_images/DALL\xB7E 2023-12-22
      22.35.21 - A central abstract form resembling a cosmic brain or an AI agent,
      with vibrant, swirling nebula-like patterns in deep blues, purples, and hints
      of pin.png\",\"sha\":\"002f7632c6c1bc31102bf754212ebb44e29084ba\",\"size\":1894943,\"url\":\"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/assets/main_images/DALL%C2%B7E%202023-12-22%2022.35.21%20-%20A%20central%20abstract%20form%20resembling%20a%20cosmic%20brain%20or%20an%20AI%20agent,%20with%20vibrant,%20swirling%20nebula-like%20patterns%20in%20deep%20blues,%20purples,%20and%20hints%20of%20pin.png?ref=main\",\"html_url\":\"https://github.com/eidolon-ai/eidolon/blob/main/docs/src/assets/main_images/DALL%C2%B7E%202023-12-22%2022.35.21%20-%20A%20central%20abstract%20form%20resembling%20a%20cosmic%20brain%20or%20an%20AI%20agent,%20with%20vibrant,%20swirling%20nebula-like%20patterns%20in%20deep%20blues,%20purples,%20and%20hints%20of%20pin.png\",\"git_url\":\"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/002f7632c6c1bc31102bf754212ebb44e29084ba\",\"download_url\":\"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/docs/src/assets/main_images/DALL\xB7E
      2023-12-22 22.35.21 - A central abstract form resembling a cosmic brain or an
      AI agent, with vibrant, swirling nebula-like patterns in deep blues, purples,
      and hints of pin.png\",\"type\":\"file\",\"_links\":{\"self\":\"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/assets/main_images/DALL%C2%B7E%202023-12-22%2022.35.21%20-%20A%20central%20abstract%20form%20resembling%20a%20cosmic%20brain%20or%20an%20AI%20agent,%20with%20vibrant,%20swirling%20nebula-like%20patterns%20in%20deep%20blues,%20purples,%20and%20hints%20of%20pin.png?ref=main\",\"git\":\"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/002f7632c6c1bc31102bf754212ebb44e29084ba\",\"html\":\"https://github.com/eidolon-ai/eidolon/blob/main/docs/src/assets/main_images/DALL%C2%B7E%202023-12-22%2022.35.21%20-%20A%20central%20abstract%20form%20resembling%20a%20cosmic%20brain%20or%20an%20AI%20agent,%20with%20vibrant,%20swirling%20nebula-like%20patterns%20in%20deep%20blues,%20purples,%20and%20hints%20of%20pin.png\"}},{\"name\":\"eidolon_with_gradient.png\",\"path\":\"docs/src/assets/main_images/eidolon_with_gradient.png\",\"sha\":\"628035ba81d58a773e7b87a2242beba102eb75b2\",\"size\":2245999,\"url\":\"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/assets/main_images/eidolon_with_gradient.png?ref=main\",\"html_url\":\"https://github.com/eidolon-ai/eidolon/blob/main/docs/src/assets/main_images/eidolon_with_gradient.png\",\"git_url\":\"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/628035ba81d58a773e7b87a2242beba102eb75b2\",\"download_url\":\"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/docs/src/assets/main_images/eidolon_with_gradient.png\",\"type\":\"file\",\"_links\":{\"self\":\"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/assets/main_images/eidolon_with_gradient.png?ref=main\",\"git\":\"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/628035ba81d58a773e7b87a2242beba102eb75b2\",\"html\":\"https://github.com/eidolon-ai/eidolon/blob/main/docs/src/assets/main_images/eidolon_with_gradient.png\"}},{\"name\":\"img_1.png\",\"path\":\"docs/src/assets/main_images/img_1.png\",\"sha\":\"89a7f3dbb72c4956f0a6325c36e2a7345473fb4a\",\"size\":2712080,\"url\":\"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/assets/main_images/img_1.png?ref=main\",\"html_url\":\"https://github.com/eidolon-ai/eidolon/blob/main/docs/src/assets/main_images/img_1.png\",\"git_url\":\"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/89a7f3dbb72c4956f0a6325c36e2a7345473fb4a\",\"download_url\":\"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/docs/src/assets/main_images/img_1.png\",\"type\":\"file\",\"_links\":{\"self\":\"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/assets/main_images/img_1.png?ref=main\",\"git\":\"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/89a7f3dbb72c4956f0a6325c36e2a7345473fb4a\",\"html\":\"https://github.com/eidolon-ai/eidolon/blob/main/docs/src/assets/main_images/img_1.png\"}},{\"name\":\"img_2.png\",\"path\":\"docs/src/assets/main_images/img_2.png\",\"sha\":\"5356907346e2dde2388f89015ec537a2961247b1\",\"size\":2554213,\"url\":\"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/assets/main_images/img_2.png?ref=main\",\"html_url\":\"https://github.com/eidolon-ai/eidolon/blob/main/docs/src/assets/main_images/img_2.png\",\"git_url\":\"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/5356907346e2dde2388f89015ec537a2961247b1\",\"download_url\":\"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/docs/src/assets/main_images/img_2.png\",\"type\":\"file\",\"_links\":{\"self\":\"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/assets/main_images/img_2.png?ref=main\",\"git\":\"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/5356907346e2dde2388f89015ec537a2961247b1\",\"html\":\"https://github.com/eidolon-ai/eidolon/blob/main/docs/src/assets/main_images/img_2.png\"}}]"
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:29:19 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E4B4:255256:166399:1FCA52:65D519AF
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4747'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '253'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/hello_world/resources?ref=main
  response:
    content: '[{"name":"ExampleAutoAgent.yaml","path":"examples/eidolon_examples/hello_world/resources/ExampleAutoAgent.yaml","sha":"9b7b9b3efbb2d238f8f4ca6f4d383b7db26f3b99","size":135,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/hello_world/resources/ExampleAutoAgent.yaml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/hello_world/resources/ExampleAutoAgent.yaml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/9b7b9b3efbb2d238f8f4ca6f4d383b7db26f3b99","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/eidolon_examples/hello_world/resources/ExampleAutoAgent.yaml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/hello_world/resources/ExampleAutoAgent.yaml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/9b7b9b3efbb2d238f8f4ca6f4d383b7db26f3b99","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/hello_world/resources/ExampleAutoAgent.yaml"}},{"name":"ExampleGenericAgent.yaml","path":"examples/eidolon_examples/hello_world/resources/ExampleGenericAgent.yaml","sha":"d22aa6ba05bca826271ee742513895e9b2081a4c","size":488,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/hello_world/resources/ExampleGenericAgent.yaml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/hello_world/resources/ExampleGenericAgent.yaml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/d22aa6ba05bca826271ee742513895e9b2081a4c","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/eidolon_examples/hello_world/resources/ExampleGenericAgent.yaml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/hello_world/resources/ExampleGenericAgent.yaml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/d22aa6ba05bca826271ee742513895e9b2081a4c","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/hello_world/resources/ExampleGenericAgent.yaml"}},{"name":"HelloWorldAgent.yaml","path":"examples/eidolon_examples/hello_world/resources/HelloWorldAgent.yaml","sha":"550bbb5621cb7043d619359a7c20fc15764f535a","size":124,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/hello_world/resources/HelloWorldAgent.yaml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/hello_world/resources/HelloWorldAgent.yaml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/550bbb5621cb7043d619359a7c20fc15764f535a","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/eidolon_examples/hello_world/resources/HelloWorldAgent.yaml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/hello_world/resources/HelloWorldAgent.yaml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/550bbb5621cb7043d619359a7c20fc15764f535a","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/hello_world/resources/HelloWorldAgent.yaml"}},{"name":"ImageAgent.yaml","path":"examples/eidolon_examples/hello_world/resources/ImageAgent.yaml","sha":"885804ef7df33ca2c1b2249fe6ded9b0749e51ba","size":865,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/hello_world/resources/ImageAgent.yaml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/hello_world/resources/ImageAgent.yaml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/885804ef7df33ca2c1b2249fe6ded9b0749e51ba","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/eidolon_examples/hello_world/resources/ImageAgent.yaml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/hello_world/resources/ImageAgent.yaml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/885804ef7df33ca2c1b2249fe6ded9b0749e51ba","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/hello_world/resources/ImageAgent.yaml"}},{"name":"OpenAiAssistantsAgent.yaml","path":"examples/eidolon_examples/hello_world/resources/OpenAiAssistantsAgent.yaml","sha":"2781fac862138a6c804dff7b30c466ed3dda447d","size":644,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/hello_world/resources/OpenAiAssistantsAgent.yaml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/hello_world/resources/OpenAiAssistantsAgent.yaml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/2781fac862138a6c804dff7b30c466ed3dda447d","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/eidolon_examples/hello_world/resources/OpenAiAssistantsAgent.yaml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/hello_world/resources/OpenAiAssistantsAgent.yaml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/2781fac862138a6c804dff7b30c466ed3dda447d","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/hello_world/resources/OpenAiAssistantsAgent.yaml"}},{"name":"SpeechAgent.yaml","path":"examples/eidolon_examples/hello_world/resources/SpeechAgent.yaml","sha":"0d4492bfbe9acee065fa56a62db390d79ccdac4f","size":528,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/hello_world/resources/SpeechAgent.yaml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/hello_world/resources/SpeechAgent.yaml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/0d4492bfbe9acee065fa56a62db390d79ccdac4f","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/eidolon_examples/hello_world/resources/SpeechAgent.yaml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/hello_world/resources/SpeechAgent.yaml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/0d4492bfbe9acee065fa56a62db390d79ccdac4f","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/hello_world/resources/SpeechAgent.yaml"}},{"name":"StateMachineAgent.yaml","path":"examples/eidolon_examples/hello_world/resources/StateMachineAgent.yaml","sha":"8d2eba47b31014d50bd682ac7f8ba93de3d65257","size":130,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/hello_world/resources/StateMachineAgent.yaml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/hello_world/resources/StateMachineAgent.yaml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/8d2eba47b31014d50bd682ac7f8ba93de3d65257","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/eidolon_examples/hello_world/resources/StateMachineAgent.yaml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/hello_world/resources/StateMachineAgent.yaml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/8d2eba47b31014d50bd682ac7f8ba93de3d65257","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/hello_world/resources/StateMachineAgent.yaml"}},{"name":"StreamTestAgent.yaml","path":"examples/eidolon_examples/hello_world/resources/StreamTestAgent.yaml","sha":"808f033448bf563c61c12961e341554a061bfa35","size":133,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/hello_world/resources/StreamTestAgent.yaml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/hello_world/resources/StreamTestAgent.yaml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/808f033448bf563c61c12961e341554a061bfa35","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/eidolon_examples/hello_world/resources/StreamTestAgent.yaml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/hello_world/resources/StreamTestAgent.yaml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/808f033448bf563c61c12961e341554a061bfa35","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/hello_world/resources/StreamTestAgent.yaml"}},{"name":"TreeOfThoughtsAgent.yaml","path":"examples/eidolon_examples/hello_world/resources/TreeOfThoughtsAgent.yaml","sha":"1f123c77a0374c2574601834fd99634846a65b7d","size":339,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/hello_world/resources/TreeOfThoughtsAgent.yaml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/hello_world/resources/TreeOfThoughtsAgent.yaml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/1f123c77a0374c2574601834fd99634846a65b7d","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/eidolon_examples/hello_world/resources/TreeOfThoughtsAgent.yaml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/hello_world/resources/TreeOfThoughtsAgent.yaml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/1f123c77a0374c2574601834fd99634846a65b7d","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/hello_world/resources/TreeOfThoughtsAgent.yaml"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:29:19 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E4B6:2518A1:150248:1E690C:65D519AF
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4746'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '254'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/assets/fonts?ref=main
  response:
    content: '[{"name":"Inter-Bold.woff","path":"webui/assets/fonts/Inter-Bold.woff","sha":"1e80f6235899fc654faf3af6894340926a306d62","size":25760,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/assets/fonts/Inter-Bold.woff?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/webui/assets/fonts/Inter-Bold.woff","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/1e80f6235899fc654faf3af6894340926a306d62","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/webui/assets/fonts/Inter-Bold.woff","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/assets/fonts/Inter-Bold.woff?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/1e80f6235899fc654faf3af6894340926a306d62","html":"https://github.com/eidolon-ai/eidolon/blob/main/webui/assets/fonts/Inter-Bold.woff"}},{"name":"Inter-Regular.woff","path":"webui/assets/fonts/Inter-Regular.woff","sha":"4c6b7118eec99ba089704281a3ba39e067977537","size":24576,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/assets/fonts/Inter-Regular.woff?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/webui/assets/fonts/Inter-Regular.woff","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/4c6b7118eec99ba089704281a3ba39e067977537","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/webui/assets/fonts/Inter-Regular.woff","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/assets/fonts/Inter-Regular.woff?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/4c6b7118eec99ba089704281a3ba39e067977537","html":"https://github.com/eidolon-ai/eidolon/blob/main/webui/assets/fonts/Inter-Regular.woff"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:29:19 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E4BB:25592D:153426:1E9A55:65D519AF
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4745'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '255'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/app/sign-in?ref=main
  response:
    content: '[{"name":"page.tsx","path":"webui/app/sign-in/page.tsx","sha":"c716f7a8c0fe6cbf1018fd43586edb354e412a3f","size":1814,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/app/sign-in/page.tsx?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/webui/app/sign-in/page.tsx","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/c716f7a8c0fe6cbf1018fd43586edb354e412a3f","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/webui/app/sign-in/page.tsx","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/app/sign-in/page.tsx?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/c716f7a8c0fe6cbf1018fd43586edb354e412a3f","html":"https://github.com/eidolon-ai/eidolon/blob/main/webui/app/sign-in/page.tsx"}},{"name":"signon-options.ts","path":"webui/app/sign-in/signon-options.ts","sha":"7c8a222579cccefdba3ca08eaaae0a6bcf0dcfef","size":193,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/app/sign-in/signon-options.ts?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/webui/app/sign-in/signon-options.ts","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/7c8a222579cccefdba3ca08eaaae0a6bcf0dcfef","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/webui/app/sign-in/signon-options.ts","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/app/sign-in/signon-options.ts?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/7c8a222579cccefdba3ca08eaaae0a6bcf0dcfef","html":"https://github.com/eidolon-ai/eidolon/blob/main/webui/app/sign-in/signon-options.ts"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:29:19 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E4BA:25886F:142828:1D8F07:65D519AF
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4744'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '256'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/k8_monitor/resources?ref=main
  response:
    content: '[{"name":"K8Manager.yaml","path":"examples/eidolon_examples/k8_monitor/resources/K8Manager.yaml","sha":"fa7c5a5d86730037cb9032e7defb9f574557dbe9","size":1189,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/k8_monitor/resources/K8Manager.yaml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/k8_monitor/resources/K8Manager.yaml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/fa7c5a5d86730037cb9032e7defb9f574557dbe9","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/eidolon_examples/k8_monitor/resources/K8Manager.yaml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/k8_monitor/resources/K8Manager.yaml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/fa7c5a5d86730037cb9032e7defb9f574557dbe9","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/k8_monitor/resources/K8Manager.yaml"}},{"name":"K8Worker.yaml","path":"examples/eidolon_examples/k8_monitor/resources/K8Worker.yaml","sha":"3770fe441d0a881865756229f97720d4ae6f7fe1","size":1083,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/k8_monitor/resources/K8Worker.yaml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/k8_monitor/resources/K8Worker.yaml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/3770fe441d0a881865756229f97720d4ae6f7fe1","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/eidolon_examples/k8_monitor/resources/K8Worker.yaml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/k8_monitor/resources/K8Worker.yaml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/3770fe441d0a881865756229f97720d4ae6f7fe1","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/k8_monitor/resources/K8Worker.yaml"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:29:19 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E4B9:2518DF:160784:1F6E42:65D519AF
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4743'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '257'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/code_search/resources?ref=main
  response:
    content: '[{"name":"documentation_producer.yaml","path":"examples/eidolon_examples/code_search/resources/documentation_producer.yaml","sha":"2852f0c3c7838f9fe113390c1e0fd8f106684250","size":1199,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/code_search/resources/documentation_producer.yaml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/code_search/resources/documentation_producer.yaml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/2852f0c3c7838f9fe113390c1e0fd8f106684250","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/eidolon_examples/code_search/resources/documentation_producer.yaml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/code_search/resources/documentation_producer.yaml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/2852f0c3c7838f9fe113390c1e0fd8f106684250","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/code_search/resources/documentation_producer.yaml"}},{"name":"search_code.yaml","path":"examples/eidolon_examples/code_search/resources/search_code.yaml","sha":"bc7ca63fd41db99df5f50eb27e8eb957730e07a8","size":294,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/code_search/resources/search_code.yaml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/code_search/resources/search_code.yaml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/bc7ca63fd41db99df5f50eb27e8eb957730e07a8","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/eidolon_examples/code_search/resources/search_code.yaml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/code_search/resources/search_code.yaml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/bc7ca63fd41db99df5f50eb27e8eb957730e07a8","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/code_search/resources/search_code.yaml"}},{"name":"search_docs.yaml","path":"examples/eidolon_examples/code_search/resources/search_docs.yaml","sha":"d22b48eefe411ae70aeb8f5cbff248cc73f88ddc","size":244,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/code_search/resources/search_docs.yaml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/code_search/resources/search_docs.yaml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/d22b48eefe411ae70aeb8f5cbff248cc73f88ddc","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/eidolon_examples/code_search/resources/search_docs.yaml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/code_search/resources/search_docs.yaml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/d22b48eefe411ae70aeb8f5cbff248cc73f88ddc","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/code_search/resources/search_docs.yaml"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:29:19 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E4B8:3A0B33:2F0D:3E5E:65D519AF
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4742'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '258'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/lib/hooks?ref=main
  response:
    content: '[{"name":"use-at-bottom.tsx","path":"webui/lib/hooks/use-at-bottom.tsx","sha":"92db4836ed40f24ec963fdf0063bbc8c4090eb8f","size":638,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/lib/hooks/use-at-bottom.tsx?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/webui/lib/hooks/use-at-bottom.tsx","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/92db4836ed40f24ec963fdf0063bbc8c4090eb8f","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/webui/lib/hooks/use-at-bottom.tsx","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/lib/hooks/use-at-bottom.tsx?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/92db4836ed40f24ec963fdf0063bbc8c4090eb8f","html":"https://github.com/eidolon-ai/eidolon/blob/main/webui/lib/hooks/use-at-bottom.tsx"}},{"name":"use-copy-to-clipboard.tsx","path":"webui/lib/hooks/use-copy-to-clipboard.tsx","sha":"e4ad0acfc7bf82c1420c26f92b593595155d483e","size":712,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/lib/hooks/use-copy-to-clipboard.tsx?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/webui/lib/hooks/use-copy-to-clipboard.tsx","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e4ad0acfc7bf82c1420c26f92b593595155d483e","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/webui/lib/hooks/use-copy-to-clipboard.tsx","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/lib/hooks/use-copy-to-clipboard.tsx?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e4ad0acfc7bf82c1420c26f92b593595155d483e","html":"https://github.com/eidolon-ai/eidolon/blob/main/webui/lib/hooks/use-copy-to-clipboard.tsx"}},{"name":"use-local-storage.ts","path":"webui/lib/hooks/use-local-storage.ts","sha":"d5345de7e89c416b821170a8c29e9fbbe2c743ee","size":592,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/lib/hooks/use-local-storage.ts?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/webui/lib/hooks/use-local-storage.ts","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/d5345de7e89c416b821170a8c29e9fbbe2c743ee","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/webui/lib/hooks/use-local-storage.ts","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/lib/hooks/use-local-storage.ts?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/d5345de7e89c416b821170a8c29e9fbbe2c743ee","html":"https://github.com/eidolon-ai/eidolon/blob/main/webui/lib/hooks/use-local-storage.ts"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:29:19 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E4BE:2552AA:15BFB3:1F267F:65D519AF
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4741'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '259'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/group_conversation/python_coder?ref=main
  response:
    content: '[{"name":"CodeCritique.yaml","path":"examples/eidolon_examples/group_conversation/python_coder/CodeCritique.yaml","sha":"e4c07675f3c8ae21eb2f4912849aa95c063760f1","size":809,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/group_conversation/python_coder/CodeCritique.yaml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/group_conversation/python_coder/CodeCritique.yaml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e4c07675f3c8ae21eb2f4912849aa95c063760f1","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/eidolon_examples/group_conversation/python_coder/CodeCritique.yaml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/group_conversation/python_coder/CodeCritique.yaml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e4c07675f3c8ae21eb2f4912849aa95c063760f1","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/group_conversation/python_coder/CodeCritique.yaml"}},{"name":"CommunityChameleon.yaml","path":"examples/eidolon_examples/group_conversation/python_coder/CommunityChameleon.yaml","sha":"cf2544697bb8c0d9239f4555baa158c807d4c00e","size":827,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/group_conversation/python_coder/CommunityChameleon.yaml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/group_conversation/python_coder/CommunityChameleon.yaml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/cf2544697bb8c0d9239f4555baa158c807d4c00e","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/eidolon_examples/group_conversation/python_coder/CommunityChameleon.yaml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/group_conversation/python_coder/CommunityChameleon.yaml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/cf2544697bb8c0d9239f4555baa158c807d4c00e","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/group_conversation/python_coder/CommunityChameleon.yaml"}},{"name":"DebubbingDog.yaml","path":"examples/eidolon_examples/group_conversation/python_coder/DebubbingDog.yaml","sha":"f5af4fbf5899e9209039ec68701ee04b12605281","size":780,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/group_conversation/python_coder/DebubbingDog.yaml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/group_conversation/python_coder/DebubbingDog.yaml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/f5af4fbf5899e9209039ec68701ee04b12605281","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/eidolon_examples/group_conversation/python_coder/DebubbingDog.yaml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/group_conversation/python_coder/DebubbingDog.yaml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/f5af4fbf5899e9209039ec68701ee04b12605281","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/group_conversation/python_coder/DebubbingDog.yaml"}},{"name":"GameMaster.yaml","path":"examples/eidolon_examples/group_conversation/python_coder/GameMaster.yaml","sha":"484b6cdd8b735b9e3d7decd1aee1d459c3e78477","size":1370,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/group_conversation/python_coder/GameMaster.yaml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/group_conversation/python_coder/GameMaster.yaml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/484b6cdd8b735b9e3d7decd1aee1d459c3e78477","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/eidolon_examples/group_conversation/python_coder/GameMaster.yaml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/group_conversation/python_coder/GameMaster.yaml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/484b6cdd8b735b9e3d7decd1aee1d459c3e78477","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/group_conversation/python_coder/GameMaster.yaml"}},{"name":"LogicLynx.yaml","path":"examples/eidolon_examples/group_conversation/python_coder/LogicLynx.yaml","sha":"a5e144e7836c4efd82795df5c04d8c009d7841b1","size":721,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/group_conversation/python_coder/LogicLynx.yaml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/group_conversation/python_coder/LogicLynx.yaml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/a5e144e7836c4efd82795df5c04d8c009d7841b1","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/eidolon_examples/group_conversation/python_coder/LogicLynx.yaml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/group_conversation/python_coder/LogicLynx.yaml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/a5e144e7836c4efd82795df5c04d8c009d7841b1","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/group_conversation/python_coder/LogicLynx.yaml"}},{"name":"PerformanceParrot.yaml","path":"examples/eidolon_examples/group_conversation/python_coder/PerformanceParrot.yaml","sha":"dd54e8a75d5a43630070a8caf297de8e81e15a45","size":792,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/group_conversation/python_coder/PerformanceParrot.yaml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/group_conversation/python_coder/PerformanceParrot.yaml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/dd54e8a75d5a43630070a8caf297de8e81e15a45","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/eidolon_examples/group_conversation/python_coder/PerformanceParrot.yaml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/group_conversation/python_coder/PerformanceParrot.yaml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/dd54e8a75d5a43630070a8caf297de8e81e15a45","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/group_conversation/python_coder/PerformanceParrot.yaml"}},{"name":"ResourceRabbit.yaml","path":"examples/eidolon_examples/group_conversation/python_coder/ResourceRabbit.yaml","sha":"74856677c2a421ffc04ec9e3f788399ce2896300","size":770,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/group_conversation/python_coder/ResourceRabbit.yaml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/group_conversation/python_coder/ResourceRabbit.yaml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/74856677c2a421ffc04ec9e3f788399ce2896300","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/eidolon_examples/group_conversation/python_coder/ResourceRabbit.yaml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/group_conversation/python_coder/ResourceRabbit.yaml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/74856677c2a421ffc04ec9e3f788399ce2896300","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/group_conversation/python_coder/ResourceRabbit.yaml"}},{"name":"SyntaxSquirrel.yaml","path":"examples/eidolon_examples/group_conversation/python_coder/SyntaxSquirrel.yaml","sha":"99bc477222d59c9fb4acaea461f0a992574dd186","size":1032,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/group_conversation/python_coder/SyntaxSquirrel.yaml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/group_conversation/python_coder/SyntaxSquirrel.yaml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/99bc477222d59c9fb4acaea461f0a992574dd186","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/eidolon_examples/group_conversation/python_coder/SyntaxSquirrel.yaml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/group_conversation/python_coder/SyntaxSquirrel.yaml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/99bc477222d59c9fb4acaea461f0a992574dd186","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/group_conversation/python_coder/SyntaxSquirrel.yaml"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:29:19 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E4BC:252DF3:148635:1DEC8A:65D519AF
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4738'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '262'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/group_conversation/iasip?ref=main
  response:
    content: '[{"name":"Charlie.yaml","path":"examples/eidolon_examples/group_conversation/iasip/Charlie.yaml","sha":"b5e7c0a0413ea73226974cc09d8b0d5b55af802d","size":429,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/group_conversation/iasip/Charlie.yaml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/group_conversation/iasip/Charlie.yaml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/b5e7c0a0413ea73226974cc09d8b0d5b55af802d","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/eidolon_examples/group_conversation/iasip/Charlie.yaml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/group_conversation/iasip/Charlie.yaml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/b5e7c0a0413ea73226974cc09d8b0d5b55af802d","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/group_conversation/iasip/Charlie.yaml"}},{"name":"Coordinator.yaml","path":"examples/eidolon_examples/group_conversation/iasip/Coordinator.yaml","sha":"708c5efbde07cd2297261865a2e47c17e84fc2cf","size":244,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/group_conversation/iasip/Coordinator.yaml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/group_conversation/iasip/Coordinator.yaml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/708c5efbde07cd2297261865a2e47c17e84fc2cf","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/eidolon_examples/group_conversation/iasip/Coordinator.yaml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/group_conversation/iasip/Coordinator.yaml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/708c5efbde07cd2297261865a2e47c17e84fc2cf","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/group_conversation/iasip/Coordinator.yaml"}},{"name":"Dee.yaml","path":"examples/eidolon_examples/group_conversation/iasip/Dee.yaml","sha":"e90fcccd143fe700914b454451418eb69bf8424b","size":422,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/group_conversation/iasip/Dee.yaml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/group_conversation/iasip/Dee.yaml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e90fcccd143fe700914b454451418eb69bf8424b","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/eidolon_examples/group_conversation/iasip/Dee.yaml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/group_conversation/iasip/Dee.yaml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e90fcccd143fe700914b454451418eb69bf8424b","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/group_conversation/iasip/Dee.yaml"}},{"name":"Dennis.yaml","path":"examples/eidolon_examples/group_conversation/iasip/Dennis.yaml","sha":"3b8ff5494c510e390a074b889047623c397f6948","size":375,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/group_conversation/iasip/Dennis.yaml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/group_conversation/iasip/Dennis.yaml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/3b8ff5494c510e390a074b889047623c397f6948","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/eidolon_examples/group_conversation/iasip/Dennis.yaml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/group_conversation/iasip/Dennis.yaml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/3b8ff5494c510e390a074b889047623c397f6948","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/group_conversation/iasip/Dennis.yaml"}},{"name":"Frank.yaml","path":"examples/eidolon_examples/group_conversation/iasip/Frank.yaml","sha":"66a03d3acc3bd12c6e0b11317d22119a28c4873f","size":422,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/group_conversation/iasip/Frank.yaml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/group_conversation/iasip/Frank.yaml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/66a03d3acc3bd12c6e0b11317d22119a28c4873f","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/eidolon_examples/group_conversation/iasip/Frank.yaml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/group_conversation/iasip/Frank.yaml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/66a03d3acc3bd12c6e0b11317d22119a28c4873f","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/group_conversation/iasip/Frank.yaml"}},{"name":"Mac.yaml","path":"examples/eidolon_examples/group_conversation/iasip/Mac.yaml","sha":"444325a730dff4a27edda79981f5c306b5081733","size":431,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/group_conversation/iasip/Mac.yaml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/group_conversation/iasip/Mac.yaml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/444325a730dff4a27edda79981f5c306b5081733","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/eidolon_examples/group_conversation/iasip/Mac.yaml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/group_conversation/iasip/Mac.yaml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/444325a730dff4a27edda79981f5c306b5081733","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/group_conversation/iasip/Mac.yaml"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:29:19 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E4BD:282C91:DDB45:1425F2:65D519AF
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4740'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '260'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/group_conversation/resources?ref=main
  response:
    content: '[{"name":"Alex.yaml","path":"examples/eidolon_examples/group_conversation/resources/Alex.yaml","sha":"e48a245ecb086032515a3031df3854bf0f7d4d96","size":527,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/group_conversation/resources/Alex.yaml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/group_conversation/resources/Alex.yaml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e48a245ecb086032515a3031df3854bf0f7d4d96","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/eidolon_examples/group_conversation/resources/Alex.yaml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/group_conversation/resources/Alex.yaml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e48a245ecb086032515a3031df3854bf0f7d4d96","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/group_conversation/resources/Alex.yaml"}},{"name":"Bob.yaml","path":"examples/eidolon_examples/group_conversation/resources/Bob.yaml","sha":"02352f92936fa9b342b6dbaaaf8edb3de400ee63","size":866,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/group_conversation/resources/Bob.yaml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/group_conversation/resources/Bob.yaml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/02352f92936fa9b342b6dbaaaf8edb3de400ee63","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/eidolon_examples/group_conversation/resources/Bob.yaml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/group_conversation/resources/Bob.yaml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/02352f92936fa9b342b6dbaaaf8edb3de400ee63","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/group_conversation/resources/Bob.yaml"}},{"name":"Chad.yaml","path":"examples/eidolon_examples/group_conversation/resources/Chad.yaml","sha":"3b2dd40455cf1f06e05ea4667ce360cbe549de37","size":707,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/group_conversation/resources/Chad.yaml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/group_conversation/resources/Chad.yaml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/3b2dd40455cf1f06e05ea4667ce360cbe549de37","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/eidolon_examples/group_conversation/resources/Chad.yaml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/group_conversation/resources/Chad.yaml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/3b2dd40455cf1f06e05ea4667ce360cbe549de37","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/group_conversation/resources/Chad.yaml"}},{"name":"Coordinator.yaml","path":"examples/eidolon_examples/group_conversation/resources/Coordinator.yaml","sha":"51cbc021c558cfd668d43208eccd92f5d3849039","size":228,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/group_conversation/resources/Coordinator.yaml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/group_conversation/resources/Coordinator.yaml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/51cbc021c558cfd668d43208eccd92f5d3849039","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/eidolon_examples/group_conversation/resources/Coordinator.yaml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/group_conversation/resources/Coordinator.yaml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/51cbc021c558cfd668d43208eccd92f5d3849039","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/group_conversation/resources/Coordinator.yaml"}},{"name":"Fred.yaml","path":"examples/eidolon_examples/group_conversation/resources/Fred.yaml","sha":"11748578e442a59ad3c1120f9477abc422cd158b","size":547,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/group_conversation/resources/Fred.yaml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/group_conversation/resources/Fred.yaml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/11748578e442a59ad3c1120f9477abc422cd158b","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/eidolon_examples/group_conversation/resources/Fred.yaml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/group_conversation/resources/Fred.yaml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/11748578e442a59ad3c1120f9477abc422cd158b","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/group_conversation/resources/Fred.yaml"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:29:19 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E4B5:256B07:153578:1E9C00:65D519AF
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4737'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '263'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/getting_started/4_defining_a_machine?ref=main
  response:
    content: '[{"name":"frugal_cpu.yaml","path":"examples/eidolon_examples/getting_started/4_defining_a_machine/frugal_cpu.yaml","sha":"3acfdd9e082f2fda845d5b17058ea95f5bae0cc0","size":362,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/getting_started/4_defining_a_machine/frugal_cpu.yaml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/getting_started/4_defining_a_machine/frugal_cpu.yaml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/3acfdd9e082f2fda845d5b17058ea95f5bae0cc0","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/eidolon_examples/getting_started/4_defining_a_machine/frugal_cpu.yaml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/getting_started/4_defining_a_machine/frugal_cpu.yaml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/3acfdd9e082f2fda845d5b17058ea95f5bae0cc0","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/getting_started/4_defining_a_machine/frugal_cpu.yaml"}},{"name":"machine.yaml","path":"examples/eidolon_examples/getting_started/4_defining_a_machine/machine.yaml","sha":"ba1a7f74e6a1b1b00de94abe5dbdfb103754a9c4","size":183,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/getting_started/4_defining_a_machine/machine.yaml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/getting_started/4_defining_a_machine/machine.yaml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/ba1a7f74e6a1b1b00de94abe5dbdfb103754a9c4","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/eidolon_examples/getting_started/4_defining_a_machine/machine.yaml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/getting_started/4_defining_a_machine/machine.yaml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/ba1a7f74e6a1b1b00de94abe5dbdfb103754a9c4","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/getting_started/4_defining_a_machine/machine.yaml"}},{"name":"qa_agent.yaml","path":"examples/eidolon_examples/getting_started/4_defining_a_machine/qa_agent.yaml","sha":"6084fb820c63f34e11b6da784154ccbff94a9e2c","size":196,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/getting_started/4_defining_a_machine/qa_agent.yaml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/getting_started/4_defining_a_machine/qa_agent.yaml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/6084fb820c63f34e11b6da784154ccbff94a9e2c","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/eidolon_examples/getting_started/4_defining_a_machine/qa_agent.yaml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/getting_started/4_defining_a_machine/qa_agent.yaml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/6084fb820c63f34e11b6da784154ccbff94a9e2c","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/getting_started/4_defining_a_machine/qa_agent.yaml"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:29:19 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E4BF:253F79:163B92:1FA27F:65D519AF
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4735'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '265'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/app/chat?ref=main
  response:
    content: '[{"name":"[id]","path":"webui/app/chat/[id]","sha":"1a8803d6b9e6e0f5706d8854918665aac3303b11","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/app/chat/[id]?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/webui/app/chat/[id]","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/1a8803d6b9e6e0f5706d8854918665aac3303b11","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/app/chat/[id]?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/1a8803d6b9e6e0f5706d8854918665aac3303b11","html":"https://github.com/eidolon-ai/eidolon/tree/main/webui/app/chat/[id]"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:29:19 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E4C0:2537C8:17375B:209E67:65D519AF
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4736'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '264'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/swifties/resources?ref=main
  response:
    content: '[{"name":"TaylorPR.yaml","path":"examples/eidolon_examples/swifties/resources/TaylorPR.yaml","sha":"67b9f3afc6e6ef8ee6f7b526f91cdaf67049de93","size":1802,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/swifties/resources/TaylorPR.yaml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/swifties/resources/TaylorPR.yaml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/67b9f3afc6e6ef8ee6f7b526f91cdaf67049de93","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/eidolon_examples/swifties/resources/TaylorPR.yaml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/swifties/resources/TaylorPR.yaml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/67b9f3afc6e6ef8ee6f7b526f91cdaf67049de93","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/swifties/resources/TaylorPR.yaml"}},{"name":"Topicality.yaml","path":"examples/eidolon_examples/swifties/resources/Topicality.yaml","sha":"005ca568a3868b462edae46643720d80fdfc51a1","size":2253,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/swifties/resources/Topicality.yaml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/swifties/resources/Topicality.yaml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/005ca568a3868b462edae46643720d80fdfc51a1","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/eidolon_examples/swifties/resources/Topicality.yaml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/swifties/resources/Topicality.yaml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/005ca568a3868b462edae46643720d80fdfc51a1","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/swifties/resources/Topicality.yaml"}},{"name":"TravisKelceExpert.yaml","path":"examples/eidolon_examples/swifties/resources/TravisKelceExpert.yaml","sha":"08e496b0fa56e01086ed54f2acdce87b78431493","size":1495,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/swifties/resources/TravisKelceExpert.yaml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/swifties/resources/TravisKelceExpert.yaml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/08e496b0fa56e01086ed54f2acdce87b78431493","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/eidolon_examples/swifties/resources/TravisKelceExpert.yaml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/swifties/resources/TravisKelceExpert.yaml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/08e496b0fa56e01086ed54f2acdce87b78431493","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/swifties/resources/TravisKelceExpert.yaml"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:29:19 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E4B2:25626D:155655:1EBCAB:65D519AF
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4739'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '261'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/app/api?ref=main
  response:
    content: '[{"name":"auth","path":"webui/app/api/auth","sha":"aad2b43a9c4dc8aad807e798ea335cd712612f80","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/app/api/auth?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/webui/app/api/auth","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/aad2b43a9c4dc8aad807e798ea335cd712612f80","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/app/api/auth?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/aad2b43a9c4dc8aad807e798ea335cd712612f80","html":"https://github.com/eidolon-ai/eidolon/tree/main/webui/app/api/auth"}},{"name":"chat","path":"webui/app/api/chat","sha":"704e91d34065b96e813d8c7e041b0fd906a1d93d","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/app/api/chat?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/webui/app/api/chat","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/704e91d34065b96e813d8c7e041b0fd906a1d93d","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/app/api/chat?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/704e91d34065b96e813d8c7e041b0fd906a1d93d","html":"https://github.com/eidolon-ai/eidolon/tree/main/webui/app/api/chat"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:29:19 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E4B7:254D25:160FE0:1F76B9:65D519AF
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4734'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '266'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/agent?ref=main
  response:
    content: '[{"name":"__init__.py","path":"sdk/tests/agent/__init__.py","sha":"e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/agent/__init__.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/agent/__init__.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/agent/__init__.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/agent/__init__.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/agent/__init__.py"}},{"name":"cassettes","path":"sdk/tests/agent/cassettes","sha":"c9de494a8533845a8fbbb7d4bc78e98d14fbdaed","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/agent/cassettes?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/sdk/tests/agent/cassettes","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/c9de494a8533845a8fbbb7d4bc78e98d14fbdaed","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/agent/cassettes?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/c9de494a8533845a8fbbb7d4bc78e98d14fbdaed","html":"https://github.com/eidolon-ai/eidolon/tree/main/sdk/tests/agent/cassettes"}},{"name":"doc_manager","path":"sdk/tests/agent/doc_manager","sha":"70a742d7170e89be69c3d7be904ae660886b3c2e","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/agent/doc_manager?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/sdk/tests/agent/doc_manager","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/70a742d7170e89be69c3d7be904ae660886b3c2e","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/agent/doc_manager?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/70a742d7170e89be69c3d7be904ae660886b3c2e","html":"https://github.com/eidolon-ai/eidolon/tree/main/sdk/tests/agent/doc_manager"}},{"name":"retriever_docs","path":"sdk/tests/agent/retriever_docs","sha":"07373e7973c0fa7894dd808a5195b91a8af413c7","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/agent/retriever_docs?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/sdk/tests/agent/retriever_docs","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/07373e7973c0fa7894dd808a5195b91a8af413c7","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/agent/retriever_docs?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/07373e7973c0fa7894dd808a5195b91a8af413c7","html":"https://github.com/eidolon-ai/eidolon/tree/main/sdk/tests/agent/retriever_docs"}},{"name":"test_retriever_agent.py","path":"sdk/tests/agent/test_retriever_agent.py","sha":"a39fbbf9087bc04e5b199a04bfc211100bb7735d","size":1320,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/agent/test_retriever_agent.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/agent/test_retriever_agent.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/a39fbbf9087bc04e5b199a04bfc211100bb7735d","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/agent/test_retriever_agent.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/agent/test_retriever_agent.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/a39fbbf9087bc04e5b199a04bfc211100bb7735d","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/agent/test_retriever_agent.py"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:29:19 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E4AB:2511E0:14F666:1E5D52:65D519AF
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4733'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '267'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/getting_started/1_agent_communication?ref=main
  response:
    content: '[{"name":"hello_world_agent.yaml","path":"examples/eidolon_examples/getting_started/1_agent_communication/hello_world_agent.yaml","sha":"f8e912dc71de047783b678b122f0d8d7c314dffd","size":400,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/getting_started/1_agent_communication/hello_world_agent.yaml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/getting_started/1_agent_communication/hello_world_agent.yaml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/f8e912dc71de047783b678b122f0d8d7c314dffd","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/eidolon_examples/getting_started/1_agent_communication/hello_world_agent.yaml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/getting_started/1_agent_communication/hello_world_agent.yaml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/f8e912dc71de047783b678b122f0d8d7c314dffd","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/getting_started/1_agent_communication/hello_world_agent.yaml"}},{"name":"qa_agent.yaml","path":"examples/eidolon_examples/getting_started/1_agent_communication/qa_agent.yaml","sha":"3b052cf277d038553391ec1166e90341bd07cb06","size":708,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/getting_started/1_agent_communication/qa_agent.yaml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/getting_started/1_agent_communication/qa_agent.yaml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/3b052cf277d038553391ec1166e90341bd07cb06","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/eidolon_examples/getting_started/1_agent_communication/qa_agent.yaml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/getting_started/1_agent_communication/qa_agent.yaml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/3b052cf277d038553391ec1166e90341bd07cb06","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/getting_started/1_agent_communication/qa_agent.yaml"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:29:19 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E4B3:2535CB:18D90F:223FE0:65D519AF
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4731'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '269'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/cpu?ref=main
  response:
    content: '[{"name":"__init__.py","path":"sdk/tests/cpu/__init__.py","sha":"e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/cpu/__init__.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/cpu/__init__.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/cpu/__init__.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/cpu/__init__.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/cpu/__init__.py"}},{"name":"test_conversational_logic_unit.py","path":"sdk/tests/cpu/test_conversational_logic_unit.py","sha":"f7d88058343cf83f399850f340e581f5f47c8ed4","size":3204,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/cpu/test_conversational_logic_unit.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/cpu/test_conversational_logic_unit.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/f7d88058343cf83f399850f340e581f5f47c8ed4","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/cpu/test_conversational_logic_unit.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/cpu/test_conversational_logic_unit.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/f7d88058343cf83f399850f340e581f5f47c8ed4","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/cpu/test_conversational_logic_unit.py"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:29:19 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E4B0:24F1D0:15C595:1F2C79:65D519AF
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4732'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '268'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/content/docs?ref=main
  response:
    content: '[{"name":"architecture","path":"docs/src/content/docs/architecture","sha":"29b1c5e110c83dbce3edac0d5462b61b1130dd91","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/content/docs/architecture?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/docs/src/content/docs/architecture","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/29b1c5e110c83dbce3edac0d5462b61b1130dd91","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/content/docs/architecture?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/29b1c5e110c83dbce3edac0d5462b61b1130dd91","html":"https://github.com/eidolon-ai/eidolon/tree/main/docs/src/content/docs/architecture"}},{"name":"getting_started","path":"docs/src/content/docs/getting_started","sha":"9f055cc7ed5f27265c1d413dcf70d1431e073d01","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/content/docs/getting_started?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/docs/src/content/docs/getting_started","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/9f055cc7ed5f27265c1d413dcf70d1431e073d01","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/content/docs/getting_started?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/9f055cc7ed5f27265c1d413dcf70d1431e073d01","html":"https://github.com/eidolon-ai/eidolon/tree/main/docs/src/content/docs/getting_started"}},{"name":"guides","path":"docs/src/content/docs/guides","sha":"b88fee73272529cfcbd0515cb5ef23cfa8ac1927","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/content/docs/guides?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/docs/src/content/docs/guides","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/b88fee73272529cfcbd0515cb5ef23cfa8ac1927","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/content/docs/guides?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/b88fee73272529cfcbd0515cb5ef23cfa8ac1927","html":"https://github.com/eidolon-ai/eidolon/tree/main/docs/src/content/docs/guides"}},{"name":"index.mdx","path":"docs/src/content/docs/index.mdx","sha":"6d73608087b761ea32a2e72e235a01a20100b3e9","size":1137,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/content/docs/index.mdx?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/docs/src/content/docs/index.mdx","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/6d73608087b761ea32a2e72e235a01a20100b3e9","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/docs/src/content/docs/index.mdx","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/content/docs/index.mdx?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/6d73608087b761ea32a2e72e235a01a20100b3e9","html":"https://github.com/eidolon-ai/eidolon/blob/main/docs/src/content/docs/index.mdx"}},{"name":"reference","path":"docs/src/content/docs/reference","sha":"dc8d9ecf743d3f792c30202378d0bb33cdf79277","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/content/docs/reference?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/docs/src/content/docs/reference","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/dc8d9ecf743d3f792c30202378d0bb33cdf79277","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/content/docs/reference?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/dc8d9ecf743d3f792c30202378d0bb33cdf79277","html":"https://github.com/eidolon-ai/eidolon/tree/main/docs/src/content/docs/reference"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:29:19 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E4AF:257FF1:16173C:1F7DB3:65D519AF
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4729'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '271'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/components/agent-input?ref=main
  response:
    content: '[{"name":"agent-input-form.tsx","path":"webui/components/agent-input/agent-input-form.tsx","sha":"000c558a81700ea040b5245f5f683d045b46ad0c","size":2774,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/components/agent-input/agent-input-form.tsx?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/webui/components/agent-input/agent-input-form.tsx","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/000c558a81700ea040b5245f5f683d045b46ad0c","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/webui/components/agent-input/agent-input-form.tsx","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/components/agent-input/agent-input-form.tsx?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/000c558a81700ea040b5245f5f683d045b46ad0c","html":"https://github.com/eidolon-ai/eidolon/blob/main/webui/components/agent-input/agent-input-form.tsx"}},{"name":"agent-process.tsx","path":"webui/components/agent-input/agent-process.tsx","sha":"f8daf1e3274f4fa0cd852bd7756ad303e81294d2","size":4350,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/components/agent-input/agent-process.tsx?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/webui/components/agent-input/agent-process.tsx","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/f8daf1e3274f4fa0cd852bd7756ad303e81294d2","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/webui/components/agent-input/agent-process.tsx","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/components/agent-input/agent-process.tsx?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/f8daf1e3274f4fa0cd852bd7756ad303e81294d2","html":"https://github.com/eidolon-ai/eidolon/blob/main/webui/components/agent-input/agent-process.tsx"}},{"name":"start-program-dialog.tsx","path":"webui/components/agent-input/start-program-dialog.tsx","sha":"b63101e7aecb2551147b67f1696dad75cbef2e10","size":3124,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/components/agent-input/start-program-dialog.tsx?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/webui/components/agent-input/start-program-dialog.tsx","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/b63101e7aecb2551147b67f1696dad75cbef2e10","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/webui/components/agent-input/start-program-dialog.tsx","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/components/agent-input/start-program-dialog.tsx?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/b63101e7aecb2551147b67f1696dad75cbef2e10","html":"https://github.com/eidolon-ai/eidolon/blob/main/webui/components/agent-input/start-program-dialog.tsx"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:29:19 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E4B4:255256:16639A:1FCA55:65D519AF
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4730'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '270'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/components/ui?ref=main
  response:
    content: '[{"name":"icons.tsx","path":"webui/components/ui/icons.tsx","sha":"1efa60894e918050e742ff0e8489ac118d1b88e9","size":2451,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/components/ui/icons.tsx?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/webui/components/ui/icons.tsx","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/1efa60894e918050e742ff0e8489ac118d1b88e9","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/webui/components/ui/icons.tsx","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/components/ui/icons.tsx?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/1efa60894e918050e742ff0e8489ac118d1b88e9","html":"https://github.com/eidolon-ai/eidolon/blob/main/webui/components/ui/icons.tsx"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:29:19 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E4AC:260C59:138131:1C45AB:65D519AF
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4728'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '272'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/images?ref=main
  response:
    content: '[{"name":"cat.png","path":"sdk/tests/images/cat.png","sha":"b346e800748974075991481150e98004439576c4","size":320,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/images/cat.png?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/images/cat.png","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/b346e800748974075991481150e98004439576c4","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/images/cat.png","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/images/cat.png?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/b346e800748974075991481150e98004439576c4","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/images/cat.png"}},{"name":"dog.png","path":"sdk/tests/images/dog.png","sha":"de2459a31500df5f5c49cb86376f460070a5bb72","size":1888,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/images/dog.png?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/images/dog.png","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/de2459a31500df5f5c49cb86376f460070a5bb72","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/images/dog.png","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/images/dog.png?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/de2459a31500df5f5c49cb86376f460070a5bb72","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/images/dog.png"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:29:19 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E4B1:25923F:1DAD26:271388:65D519AF
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4727'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '273'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/system?ref=main
  response:
    content: '[{"name":"__init__.py","path":"sdk/tests/system/__init__.py","sha":"e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/system/__init__.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/system/__init__.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/system/__init__.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/system/__init__.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/system/__init__.py"}},{"name":"cassettes","path":"sdk/tests/system/cassettes","sha":"2ab6297071363775242aae4d4a1514cb2123ed1c","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/system/cassettes?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/sdk/tests/system/cassettes","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/2ab6297071363775242aae4d4a1514cb2123ed1c","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/system/cassettes?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/2ab6297071363775242aae4d4a1514cb2123ed1c","html":"https://github.com/eidolon-ai/eidolon/tree/main/sdk/tests/system/cassettes"}},{"name":"test_code_agents.py","path":"sdk/tests/system/test_code_agents.py","sha":"16d8a97934a6d382c831e75e5f2382db23923cfe","size":13508,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/system/test_code_agents.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/system/test_code_agents.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/16d8a97934a6d382c831e75e5f2382db23923cfe","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/system/test_code_agents.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/system/test_code_agents.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/16d8a97934a6d382c831e75e5f2382db23923cfe","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/system/test_code_agents.py"}},{"name":"test_event_recording.py","path":"sdk/tests/system/test_event_recording.py","sha":"b4ceea5a224cefafe2187ee3454bd86655996a0d","size":3473,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/system/test_event_recording.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/system/test_event_recording.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/b4ceea5a224cefafe2187ee3454bd86655996a0d","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/system/test_event_recording.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/system/test_event_recording.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/b4ceea5a224cefafe2187ee3454bd86655996a0d","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/system/test_event_recording.py"}},{"name":"test_generic_agent.py","path":"sdk/tests/system/test_generic_agent.py","sha":"ba46ff1353a04cae4be9fd81e140dc054dbe6534","size":15585,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/system/test_generic_agent.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/system/test_generic_agent.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/ba46ff1353a04cae4be9fd81e140dc054dbe6534","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/system/test_generic_agent.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/system/test_generic_agent.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/ba46ff1353a04cae4be9fd81e140dc054dbe6534","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/system/test_generic_agent.py"}},{"name":"test_reference_model.py","path":"sdk/tests/system/test_reference_model.py","sha":"d18d095c4c2e664413fb1248de11b059295e6774","size":6098,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/system/test_reference_model.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/system/test_reference_model.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/d18d095c4c2e664413fb1248de11b059295e6774","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/system/test_reference_model.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/system/test_reference_model.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/d18d095c4c2e664413fb1248de11b059295e6774","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/system/test_reference_model.py"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:29:19 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E4C1:2E1594:29FD9:378B1:65D519AF
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4726'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '274'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/tot_agent?ref=main
  response:
    content: '[{"name":"__init__.py","path":"sdk/eidolon_ai_sdk/agent/tot_agent/__init__.py","sha":"e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/tot_agent/__init__.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/tot_agent/__init__.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/agent/tot_agent/__init__.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/tot_agent/__init__.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/tot_agent/__init__.py"}},{"name":"checker.py","path":"sdk/eidolon_ai_sdk/agent/tot_agent/checker.py","sha":"c61b975d8acd83cf4a37f4402d2a0890764e2c81","size":1825,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/tot_agent/checker.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/tot_agent/checker.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/c61b975d8acd83cf4a37f4402d2a0890764e2c81","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/agent/tot_agent/checker.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/tot_agent/checker.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/c61b975d8acd83cf4a37f4402d2a0890764e2c81","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/tot_agent/checker.py"}},{"name":"controller.py","path":"sdk/eidolon_ai_sdk/agent/tot_agent/controller.py","sha":"0515c626564a2d2fd00cde4af08905633a143fb1","size":2468,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/tot_agent/controller.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/tot_agent/controller.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/0515c626564a2d2fd00cde4af08905633a143fb1","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/agent/tot_agent/controller.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/tot_agent/controller.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/0515c626564a2d2fd00cde4af08905633a143fb1","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/tot_agent/controller.py"}},{"name":"memory.py","path":"sdk/eidolon_ai_sdk/agent/tot_agent/memory.py","sha":"fb354039bb12f8a1d8aeabcbff41ffebb874e875","size":1503,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/tot_agent/memory.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/tot_agent/memory.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/fb354039bb12f8a1d8aeabcbff41ffebb874e875","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/agent/tot_agent/memory.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/tot_agent/memory.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/fb354039bb12f8a1d8aeabcbff41ffebb874e875","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/tot_agent/memory.py"}},{"name":"prompts.py","path":"sdk/eidolon_ai_sdk/agent/tot_agent/prompts.py","sha":"700f3240dc5ecbdc5f2a18d2340bc6a1802bb176","size":1423,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/tot_agent/prompts.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/tot_agent/prompts.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/700f3240dc5ecbdc5f2a18d2340bc6a1802bb176","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/agent/tot_agent/prompts.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/tot_agent/prompts.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/700f3240dc5ecbdc5f2a18d2340bc6a1802bb176","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/tot_agent/prompts.py"}},{"name":"thought.py","path":"sdk/eidolon_ai_sdk/agent/tot_agent/thought.py","sha":"7c0596638886ac003087cec4f68b3d182b4abe7c","size":364,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/tot_agent/thought.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/tot_agent/thought.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/7c0596638886ac003087cec4f68b3d182b4abe7c","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/agent/tot_agent/thought.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/tot_agent/thought.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/7c0596638886ac003087cec4f68b3d182b4abe7c","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/tot_agent/thought.py"}},{"name":"thought_generators.py","path":"sdk/eidolon_ai_sdk/agent/tot_agent/thought_generators.py","sha":"fb98b4044f17c3b29a9195a74cfb20f0957283c5","size":4951,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/tot_agent/thought_generators.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/tot_agent/thought_generators.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/fb98b4044f17c3b29a9195a74cfb20f0957283c5","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/agent/tot_agent/thought_generators.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/tot_agent/thought_generators.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/fb98b4044f17c3b29a9195a74cfb20f0957283c5","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/tot_agent/thought_generators.py"}},{"name":"tot_agent.py","path":"sdk/eidolon_ai_sdk/agent/tot_agent/tot_agent.py","sha":"0ffdb4e861238f019e6616bfe8584e33252386c7","size":7611,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/tot_agent/tot_agent.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/tot_agent/tot_agent.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/0ffdb4e861238f019e6616bfe8584e33252386c7","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/agent/tot_agent/tot_agent.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/tot_agent/tot_agent.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/0ffdb4e861238f019e6616bfe8584e33252386c7","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/tot_agent/tot_agent.py"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:29:19 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E4C5:25A09C:1AA7A6:240DFF:65D519AF
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4723'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '277'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/getting_started/3_pluggable_resources?ref=main
  response:
    content: '[{"name":"frugal_cpu.yaml","path":"examples/eidolon_examples/getting_started/3_pluggable_resources/frugal_cpu.yaml","sha":"eca8fab036d87c6573b43626d20f6e33bad83b59","size":366,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/getting_started/3_pluggable_resources/frugal_cpu.yaml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/getting_started/3_pluggable_resources/frugal_cpu.yaml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/eca8fab036d87c6573b43626d20f6e33bad83b59","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/eidolon_examples/getting_started/3_pluggable_resources/frugal_cpu.yaml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/getting_started/3_pluggable_resources/frugal_cpu.yaml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/eca8fab036d87c6573b43626d20f6e33bad83b59","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/getting_started/3_pluggable_resources/frugal_cpu.yaml"}},{"name":"qa_agent.yaml","path":"examples/eidolon_examples/getting_started/3_pluggable_resources/qa_agent.yaml","sha":"92233a81b660d4d51663b45f68156c030f6a0788","size":198,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/getting_started/3_pluggable_resources/qa_agent.yaml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/getting_started/3_pluggable_resources/qa_agent.yaml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/92233a81b660d4d51663b45f68156c030f6a0788","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/eidolon_examples/getting_started/3_pluggable_resources/qa_agent.yaml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/getting_started/3_pluggable_resources/qa_agent.yaml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/92233a81b660d4d51663b45f68156c030f6a0788","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/getting_started/3_pluggable_resources/qa_agent.yaml"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:29:19 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E4C3:2524E4:15E211:1F48CF:65D519AF
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4725'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '275'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/getting_started/2_custom_agents?ref=main
  response:
    content: '[{"name":"__init__.py","path":"examples/eidolon_examples/getting_started/2_custom_agents/__init__.py","sha":"e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/getting_started/2_custom_agents/__init__.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/getting_started/2_custom_agents/__init__.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/eidolon_examples/getting_started/2_custom_agents/__init__.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/getting_started/2_custom_agents/__init__.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/getting_started/2_custom_agents/__init__.py"}},{"name":"hello_world.py","path":"examples/eidolon_examples/getting_started/2_custom_agents/hello_world.py","sha":"2d14bbcaeaf3bfcec769d595cbb40a4c2ee01261","size":634,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/getting_started/2_custom_agents/hello_world.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/getting_started/2_custom_agents/hello_world.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/2d14bbcaeaf3bfcec769d595cbb40a4c2ee01261","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/eidolon_examples/getting_started/2_custom_agents/hello_world.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/getting_started/2_custom_agents/hello_world.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/2d14bbcaeaf3bfcec769d595cbb40a4c2ee01261","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/getting_started/2_custom_agents/hello_world.py"}},{"name":"qa.py","path":"examples/eidolon_examples/getting_started/2_custom_agents/qa.py","sha":"a570b38d7ef8b8e0490262307b229493d7111dc9","size":2146,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/getting_started/2_custom_agents/qa.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/getting_started/2_custom_agents/qa.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/a570b38d7ef8b8e0490262307b229493d7111dc9","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/eidolon_examples/getting_started/2_custom_agents/qa.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/getting_started/2_custom_agents/qa.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/a570b38d7ef8b8e0490262307b229493d7111dc9","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/getting_started/2_custom_agents/qa.py"}},{"name":"resources","path":"examples/eidolon_examples/getting_started/2_custom_agents/resources","sha":"82ad701e310f20cdcb577f2ba4c53bf5b6ea5294","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/getting_started/2_custom_agents/resources?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/examples/eidolon_examples/getting_started/2_custom_agents/resources","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/82ad701e310f20cdcb577f2ba4c53bf5b6ea5294","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/getting_started/2_custom_agents/resources?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/82ad701e310f20cdcb577f2ba4c53bf5b6ea5294","html":"https://github.com/eidolon-ai/eidolon/tree/main/examples/eidolon_examples/getting_started/2_custom_agents/resources"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:29:19 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E4C8:2542CD:142C20:1D92D5:65D519AF
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4724'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '276'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/doc_manager?ref=main
  response:
    content: '[{"name":"__init__.py","path":"sdk/eidolon_ai_sdk/agent/doc_manager/__init__.py","sha":"e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/doc_manager/__init__.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/doc_manager/__init__.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/agent/doc_manager/__init__.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/doc_manager/__init__.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/doc_manager/__init__.py"}},{"name":"document_manager.py","path":"sdk/eidolon_ai_sdk/agent/doc_manager/document_manager.py","sha":"aedbb59e1340642445debaffd9ad481032f6622f","size":4243,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/doc_manager/document_manager.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/doc_manager/document_manager.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/aedbb59e1340642445debaffd9ad481032f6622f","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/agent/doc_manager/document_manager.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/doc_manager/document_manager.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/aedbb59e1340642445debaffd9ad481032f6622f","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/doc_manager/document_manager.py"}},{"name":"loaders","path":"sdk/eidolon_ai_sdk/agent/doc_manager/loaders","sha":"6803f11ceeedd77b3b83d98a872b668823d0d810","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/doc_manager/loaders?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/sdk/eidolon_ai_sdk/agent/doc_manager/loaders","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/6803f11ceeedd77b3b83d98a872b668823d0d810","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/doc_manager/loaders?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/6803f11ceeedd77b3b83d98a872b668823d0d810","html":"https://github.com/eidolon-ai/eidolon/tree/main/sdk/eidolon_ai_sdk/agent/doc_manager/loaders"}},{"name":"parsers","path":"sdk/eidolon_ai_sdk/agent/doc_manager/parsers","sha":"747e83ab217fab0ea5b5788db80775c5ead7a606","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/doc_manager/parsers?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/sdk/eidolon_ai_sdk/agent/doc_manager/parsers","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/747e83ab217fab0ea5b5788db80775c5ead7a606","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/doc_manager/parsers?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/747e83ab217fab0ea5b5788db80775c5ead7a606","html":"https://github.com/eidolon-ai/eidolon/tree/main/sdk/eidolon_ai_sdk/agent/doc_manager/parsers"}},{"name":"transformer","path":"sdk/eidolon_ai_sdk/agent/doc_manager/transformer","sha":"68bc1ba77b2cdcf00985909b0c8a93fdb0c68b0b","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/doc_manager/transformer?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/sdk/eidolon_ai_sdk/agent/doc_manager/transformer","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/68bc1ba77b2cdcf00985909b0c8a93fdb0c68b0b","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/doc_manager/transformer?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/68bc1ba77b2cdcf00985909b0c8a93fdb0c68b0b","html":"https://github.com/eidolon-ai/eidolon/tree/main/sdk/eidolon_ai_sdk/agent/doc_manager/transformer"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:29:19 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E4C7:2556C1:150055:1E672A:65D519AF
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4720'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '280'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/util?ref=main
  response:
    content: '[{"name":"__init__.py","path":"sdk/tests/util/__init__.py","sha":"e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/util/__init__.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/util/__init__.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/util/__init__.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/util/__init__.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/util/__init__.py"}},{"name":"test_class_utils.py","path":"sdk/tests/util/test_class_utils.py","sha":"9c5cb872675010b34e7de81922e68c573bbf0a5b","size":2483,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/util/test_class_utils.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/util/test_class_utils.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/9c5cb872675010b34e7de81922e68c573bbf0a5b","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/util/test_class_utils.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/util/test_class_utils.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/9c5cb872675010b34e7de81922e68c573bbf0a5b","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/util/test_class_utils.py"}},{"name":"test_schema_to_model.py","path":"sdk/tests/util/test_schema_to_model.py","sha":"dfbb276bca6f4be2482e6c1458bfb138f5415f82","size":5635,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/util/test_schema_to_model.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/util/test_schema_to_model.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/dfbb276bca6f4be2482e6c1458bfb138f5415f82","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/util/test_schema_to_model.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/util/test_schema_to_model.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/dfbb276bca6f4be2482e6c1458bfb138f5415f82","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/util/test_schema_to_model.py"}},{"name":"test_str_utils.py","path":"sdk/tests/util/test_str_utils.py","sha":"9a6e36d70f76195bacb1ae5b5194b062cdbc787f","size":1656,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/util/test_str_utils.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/util/test_str_utils.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/9a6e36d70f76195bacb1ae5b5194b062cdbc787f","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/util/test_str_utils.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/util/test_str_utils.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/9a6e36d70f76195bacb1ae5b5194b062cdbc787f","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/util/test_str_utils.py"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:29:19 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E4C4:254ED9:16605C:1FC6A4:65D519AF
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4721'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '279'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/retriever_agent?ref=main
  response:
    content: '[{"name":"__init__.py","path":"sdk/eidolon_ai_sdk/agent/retriever_agent/__init__.py","sha":"e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/retriever_agent/__init__.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/retriever_agent/__init__.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/agent/retriever_agent/__init__.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/retriever_agent/__init__.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/retriever_agent/__init__.py"}},{"name":"document_reranker.py","path":"sdk/eidolon_ai_sdk/agent/retriever_agent/document_reranker.py","sha":"f326f1abdb6fabb895d4792384cc4a4ff8d12a6b","size":2078,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/retriever_agent/document_reranker.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/retriever_agent/document_reranker.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/f326f1abdb6fabb895d4792384cc4a4ff8d12a6b","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/agent/retriever_agent/document_reranker.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/retriever_agent/document_reranker.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/f326f1abdb6fabb895d4792384cc4a4ff8d12a6b","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/retriever_agent/document_reranker.py"}},{"name":"hyde_question_transformer.py","path":"sdk/eidolon_ai_sdk/agent/retriever_agent/hyde_question_transformer.py","sha":"fe127147c2ed272da99f43c15efe6ae71f7c68d6","size":1444,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/retriever_agent/hyde_question_transformer.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/retriever_agent/hyde_question_transformer.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/fe127147c2ed272da99f43c15efe6ae71f7c68d6","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/agent/retriever_agent/hyde_question_transformer.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/retriever_agent/hyde_question_transformer.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/fe127147c2ed272da99f43c15efe6ae71f7c68d6","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/retriever_agent/hyde_question_transformer.py"}},{"name":"multi_question_transformer.py","path":"sdk/eidolon_ai_sdk/agent/retriever_agent/multi_question_transformer.py","sha":"f191ffb89815dcf5d876f3d3348ed32195b67b97","size":2339,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/retriever_agent/multi_question_transformer.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/retriever_agent/multi_question_transformer.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/f191ffb89815dcf5d876f3d3348ed32195b67b97","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/agent/retriever_agent/multi_question_transformer.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/retriever_agent/multi_question_transformer.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/f191ffb89815dcf5d876f3d3348ed32195b67b97","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/retriever_agent/multi_question_transformer.py"}},{"name":"question_transformer.py","path":"sdk/eidolon_ai_sdk/agent/retriever_agent/question_transformer.py","sha":"d35ba2c2b44ef51e28dad8ec749a9affb18c9501","size":559,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/retriever_agent/question_transformer.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/retriever_agent/question_transformer.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/d35ba2c2b44ef51e28dad8ec749a9affb18c9501","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/agent/retriever_agent/question_transformer.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/retriever_agent/question_transformer.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/d35ba2c2b44ef51e28dad8ec749a9affb18c9501","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/retriever_agent/question_transformer.py"}},{"name":"retriever_agent.py","path":"sdk/eidolon_ai_sdk/agent/retriever_agent/retriever_agent.py","sha":"7f98c9b11358920a3305e40bfffb9e106cf04903","size":5827,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/retriever_agent/retriever_agent.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/retriever_agent/retriever_agent.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/7f98c9b11358920a3305e40bfffb9e106cf04903","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/agent/retriever_agent/retriever_agent.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/retriever_agent/retriever_agent.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/7f98c9b11358920a3305e40bfffb9e106cf04903","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/retriever_agent/retriever_agent.py"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:29:19 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E4C6:2556CA:14E19E:1E485C:65D519AF
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4722'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '278'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/builtins/logic_units?ref=main
  response:
    content: '[{"name":"__init__.py","path":"sdk/eidolon_ai_sdk/builtins/logic_units/__init__.py","sha":"e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/builtins/logic_units/__init__.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/builtins/logic_units/__init__.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/builtins/logic_units/__init__.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/builtins/logic_units/__init__.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/builtins/logic_units/__init__.py"}},{"name":"web_search.py","path":"sdk/eidolon_ai_sdk/builtins/logic_units/web_search.py","sha":"d3104f87b1bce5556c742171c18ea9a1b083c8c0","size":3941,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/builtins/logic_units/web_search.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/builtins/logic_units/web_search.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/d3104f87b1bce5556c742171c18ea9a1b083c8c0","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/builtins/logic_units/web_search.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/builtins/logic_units/web_search.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/d3104f87b1bce5556c742171c18ea9a1b083c8c0","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/builtins/logic_units/web_search.py"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:29:19 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E4C9:250EE1:16076E:1F6E4C:65D519AF
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4719'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '281'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/impl?ref=main
  response:
    content: '[{"name":"__init__.py","path":"sdk/tests/impl/__init__.py","sha":"e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/impl/__init__.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/impl/__init__.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/impl/__init__.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/impl/__init__.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/impl/__init__.py"}},{"name":"test_local_symbolic_memory.py","path":"sdk/tests/impl/test_local_symbolic_memory.py","sha":"88e8668b39dba79aa2522db92c3f539578623b19","size":4210,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/impl/test_local_symbolic_memory.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/impl/test_local_symbolic_memory.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/88e8668b39dba79aa2522db92c3f539578623b19","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/impl/test_local_symbolic_memory.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/impl/test_local_symbolic_memory.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/88e8668b39dba79aa2522db92c3f539578623b19","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/impl/test_local_symbolic_memory.py"}},{"name":"test_messsage_summarizer.py","path":"sdk/tests/impl/test_messsage_summarizer.py","sha":"e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/impl/test_messsage_summarizer.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/impl/test_messsage_summarizer.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/impl/test_messsage_summarizer.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/impl/test_messsage_summarizer.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/impl/test_messsage_summarizer.py"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:29:19 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E4C2:2557D8:16E73E:204DF8:65D519AF
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4718'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '282'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/content/docs/architecture?ref=main
  response:
    content: '[{"name":"agent_cpu.md","path":"docs/src/content/docs/architecture/agent_cpu.md","sha":"23cddb104c377b1a005eef66ccd77b2eceb22988","size":15641,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/content/docs/architecture/agent_cpu.md?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/docs/src/content/docs/architecture/agent_cpu.md","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/23cddb104c377b1a005eef66ccd77b2eceb22988","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/docs/src/content/docs/architecture/agent_cpu.md","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/content/docs/architecture/agent_cpu.md?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/23cddb104c377b1a005eef66ccd77b2eceb22988","html":"https://github.com/eidolon-ai/eidolon/blob/main/docs/src/content/docs/architecture/agent_cpu.md"}},{"name":"agent_os.md","path":"docs/src/content/docs/architecture/agent_os.md","sha":"cf84739f146d589237b9b2cdeb75ae41bd440448","size":12099,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/content/docs/architecture/agent_os.md?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/docs/src/content/docs/architecture/agent_os.md","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/cf84739f146d589237b9b2cdeb75ae41bd440448","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/docs/src/content/docs/architecture/agent_os.md","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/content/docs/architecture/agent_os.md?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/cf84739f146d589237b9b2cdeb75ae41bd440448","html":"https://github.com/eidolon-ai/eidolon/blob/main/docs/src/content/docs/architecture/agent_os.md"}},{"name":"agent_program.md","path":"docs/src/content/docs/architecture/agent_program.md","sha":"4e59d07dfd3483b7817417d3cb8aff1bd9a39767","size":12444,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/content/docs/architecture/agent_program.md?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/docs/src/content/docs/architecture/agent_program.md","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/4e59d07dfd3483b7817417d3cb8aff1bd9a39767","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/docs/src/content/docs/architecture/agent_program.md","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/content/docs/architecture/agent_program.md?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/4e59d07dfd3483b7817417d3cb8aff1bd9a39767","html":"https://github.com/eidolon-ai/eidolon/blob/main/docs/src/content/docs/architecture/agent_program.md"}},{"name":"conclusion.md","path":"docs/src/content/docs/architecture/conclusion.md","sha":"d647b8113743e1794a648371c9e1370637c9cb72","size":4263,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/content/docs/architecture/conclusion.md?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/docs/src/content/docs/architecture/conclusion.md","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/d647b8113743e1794a648371c9e1370637c9cb72","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/docs/src/content/docs/architecture/conclusion.md","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/content/docs/architecture/conclusion.md?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/d647b8113743e1794a648371c9e1370637c9cb72","html":"https://github.com/eidolon-ai/eidolon/blob/main/docs/src/content/docs/architecture/conclusion.md"}},{"name":"fundamentals.md","path":"docs/src/content/docs/architecture/fundamentals.md","sha":"737572e2e69a83706eef9029aa772be2e3fffcda","size":4425,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/content/docs/architecture/fundamentals.md?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/docs/src/content/docs/architecture/fundamentals.md","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/737572e2e69a83706eef9029aa772be2e3fffcda","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/docs/src/content/docs/architecture/fundamentals.md","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/content/docs/architecture/fundamentals.md?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/737572e2e69a83706eef9029aa772be2e3fffcda","html":"https://github.com/eidolon-ai/eidolon/blob/main/docs/src/content/docs/architecture/fundamentals.md"}},{"name":"introduction.md","path":"docs/src/content/docs/architecture/introduction.md","sha":"29cb92dbaeecd7cc652a0b43e207f7d84e27040b","size":832,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/content/docs/architecture/introduction.md?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/docs/src/content/docs/architecture/introduction.md","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/29cb92dbaeecd7cc652a0b43e207f7d84e27040b","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/docs/src/content/docs/architecture/introduction.md","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/content/docs/architecture/introduction.md?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/29cb92dbaeecd7cc652a0b43e207f7d84e27040b","html":"https://github.com/eidolon-ai/eidolon/blob/main/docs/src/content/docs/architecture/introduction.md"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:29:19 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E4AF:257FF1:161744:1F7DC0:65D519AF
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4717'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '283'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/app/chat/[id]?ref=main
  response:
    content: '[{"name":"page.tsx","path":"webui/app/chat/[id]/page.tsx","sha":"af69959c34f135ed1487800f35c24e030687c651","size":732,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/app/chat/[id]/page.tsx?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/webui/app/chat/[id]/page.tsx","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/af69959c34f135ed1487800f35c24e030687c651","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/webui/app/chat/%5Bid%5D/page.tsx","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/app/chat/[id]/page.tsx?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/af69959c34f135ed1487800f35c24e030687c651","html":"https://github.com/eidolon-ai/eidolon/blob/main/webui/app/chat/[id]/page.tsx"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:29:19 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E4B1:25923F:1DAD2F:271392:65D519AF
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4716'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '284'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/app/api/auth?ref=main
  response:
    content: '[{"name":"[...nextauth]","path":"webui/app/api/auth/[...nextauth]","sha":"9c0a213c1901c456a38bf0bcfef10871a38a7d50","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/app/api/auth/[...nextauth]?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/webui/app/api/auth/[...nextauth]","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/9c0a213c1901c456a38bf0bcfef10871a38a7d50","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/app/api/auth/[...nextauth]?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/9c0a213c1901c456a38bf0bcfef10871a38a7d50","html":"https://github.com/eidolon-ai/eidolon/tree/main/webui/app/api/auth/[...nextauth]"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:29:19 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E4B4:255256:16639F:1FCA60:65D519AF
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4715'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '285'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/builtins/resources?ref=main
  response:
    content: '[{"name":"machine.yaml","path":"sdk/eidolon_ai_sdk/builtins/resources/machine.yaml","sha":"9e9d3174392e73c010d6d1c14e2fadf305ad6f8c","size":181,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/builtins/resources/machine.yaml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/builtins/resources/machine.yaml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/9e9d3174392e73c010d6d1c14e2fadf305ad6f8c","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/builtins/resources/machine.yaml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/builtins/resources/machine.yaml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/9e9d3174392e73c010d6d1c14e2fadf305ad6f8c","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/builtins/resources/machine.yaml"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:29:19 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E4CA:276CC5:101D2C:178097:65D519AF
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4714'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '286'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/cpu/llm?ref=main
  response:
    content: '[{"name":"__init__.py","path":"sdk/eidolon_ai_sdk/cpu/llm/__init__.py","sha":"e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/cpu/llm/__init__.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/cpu/llm/__init__.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/cpu/llm/__init__.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/cpu/llm/__init__.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/cpu/llm/__init__.py"}},{"name":"open_ai_llm_unit.py","path":"sdk/eidolon_ai_sdk/cpu/llm/open_ai_llm_unit.py","sha":"0ad39aefa74881870fcee9b54571e2dad8ea4c2a","size":12339,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/cpu/llm/open_ai_llm_unit.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/cpu/llm/open_ai_llm_unit.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/0ad39aefa74881870fcee9b54571e2dad8ea4c2a","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/cpu/llm/open_ai_llm_unit.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/cpu/llm/open_ai_llm_unit.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/0ad39aefa74881870fcee9b54571e2dad8ea4c2a","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/cpu/llm/open_ai_llm_unit.py"}},{"name":"open_ai_speech.py","path":"sdk/eidolon_ai_sdk/cpu/llm/open_ai_speech.py","sha":"a625b486ffcaceb68af030e87fb02e650c698888","size":2861,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/cpu/llm/open_ai_speech.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/cpu/llm/open_ai_speech.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/a625b486ffcaceb68af030e87fb02e650c698888","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/cpu/llm/open_ai_speech.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/cpu/llm/open_ai_speech.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/a625b486ffcaceb68af030e87fb02e650c698888","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/cpu/llm/open_ai_speech.py"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:29:20 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E4CB:251C83:14F6B9:1E5D66:65D519AF
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4713'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '287'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/content/docs/getting_started?ref=main
  response:
    content: '[{"name":"quickstart.md","path":"docs/src/content/docs/getting_started/quickstart.md","sha":"e63eea5a7b8bdf12b42ccdf98aa9c354e09f8617","size":2212,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/content/docs/getting_started/quickstart.md?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/docs/src/content/docs/getting_started/quickstart.md","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e63eea5a7b8bdf12b42ccdf98aa9c354e09f8617","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/docs/src/content/docs/getting_started/quickstart.md","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/content/docs/getting_started/quickstart.md?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e63eea5a7b8bdf12b42ccdf98aa9c354e09f8617","html":"https://github.com/eidolon-ai/eidolon/blob/main/docs/src/content/docs/getting_started/quickstart.md"}},{"name":"references.md","path":"docs/src/content/docs/getting_started/references.md","sha":"7b4e02d01103a1aa5bb331f47d1b6c7154a151e8","size":11515,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/content/docs/getting_started/references.md?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/docs/src/content/docs/getting_started/references.md","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/7b4e02d01103a1aa5bb331f47d1b6c7154a151e8","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/docs/src/content/docs/getting_started/references.md","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/content/docs/getting_started/references.md?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/7b4e02d01103a1aa5bb331f47d1b6c7154a151e8","html":"https://github.com/eidolon-ai/eidolon/blob/main/docs/src/content/docs/getting_started/references.md"}},{"name":"tutorials.md","path":"docs/src/content/docs/getting_started/tutorials.md","sha":"5bc60510242f1ac0f69feb84cef78b5f827d4606","size":648,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/content/docs/getting_started/tutorials.md?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/docs/src/content/docs/getting_started/tutorials.md","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/5bc60510242f1ac0f69feb84cef78b5f827d4606","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/docs/src/content/docs/getting_started/tutorials.md","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/content/docs/getting_started/tutorials.md?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/5bc60510242f1ac0f69feb84cef78b5f827d4606","html":"https://github.com/eidolon-ai/eidolon/blob/main/docs/src/content/docs/getting_started/tutorials.md"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:29:20 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E4C1:2E1594:29FDD:378B5:65D519AF
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4711'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '289'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/content/docs/reference?ref=main
  response:
    content: '[{"name":"example.md","path":"docs/src/content/docs/reference/example.md","sha":"ac8cfa8bc3a5d344820532dd379c430d88f9f51f","size":420,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/content/docs/reference/example.md?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/docs/src/content/docs/reference/example.md","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/ac8cfa8bc3a5d344820532dd379c430d88f9f51f","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/docs/src/content/docs/reference/example.md","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/content/docs/reference/example.md?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/ac8cfa8bc3a5d344820532dd379c430d88f9f51f","html":"https://github.com/eidolon-ai/eidolon/blob/main/docs/src/content/docs/reference/example.md"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:29:20 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E4B0:24F1D0:15C59D:1F2C86:65D519AF
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4712'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '288'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/agent/cassettes?ref=main
  response:
    content: '[{"name":"test_retriever_agent","path":"sdk/tests/agent/cassettes/test_retriever_agent","sha":"69f559788795adcf335334290518de66a4d7c64f","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/agent/cassettes/test_retriever_agent?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/sdk/tests/agent/cassettes/test_retriever_agent","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/69f559788795adcf335334290518de66a4d7c64f","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/agent/cassettes/test_retriever_agent?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/69f559788795adcf335334290518de66a4d7c64f","html":"https://github.com/eidolon-ai/eidolon/tree/main/sdk/tests/agent/cassettes/test_retriever_agent"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:29:20 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E4AB:2511E0:14F670:1E5D5E:65D519AF
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4708'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '292'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/content/docs/guides?ref=main
  response:
    content: '[{"name":"example.md","path":"docs/src/content/docs/guides/example.md","sha":"ebd0f3bc762eac0f38ee658b2ded7443248846e7","size":374,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/content/docs/guides/example.md?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/docs/src/content/docs/guides/example.md","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/ebd0f3bc762eac0f38ee658b2ded7443248846e7","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/docs/src/content/docs/guides/example.md","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/content/docs/guides/example.md?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/ebd0f3bc762eac0f38ee658b2ded7443248846e7","html":"https://github.com/eidolon-ai/eidolon/blob/main/docs/src/content/docs/guides/example.md"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:29:20 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E4B7:254D25:160FE6:1F76C3:65D519AF
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4709'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '291'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/agent/doc_manager?ref=main
  response:
    content: '[{"name":"__init__.py","path":"sdk/tests/agent/doc_manager/__init__.py","sha":"e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/agent/doc_manager/__init__.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/agent/doc_manager/__init__.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/agent/doc_manager/__init__.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/agent/doc_manager/__init__.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/agent/doc_manager/__init__.py"}},{"name":"parsers","path":"sdk/tests/agent/doc_manager/parsers","sha":"15856bcd3f8d9ff69f45d048037acd063c065ac2","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/agent/doc_manager/parsers?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/sdk/tests/agent/doc_manager/parsers","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/15856bcd3f8d9ff69f45d048037acd063c065ac2","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/agent/doc_manager/parsers?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/15856bcd3f8d9ff69f45d048037acd063c065ac2","html":"https://github.com/eidolon-ai/eidolon/tree/main/sdk/tests/agent/doc_manager/parsers"}},{"name":"transformer","path":"sdk/tests/agent/doc_manager/transformer","sha":"8b9cd1ac2e0f290738977fd6eccc9cf2737678f6","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/agent/doc_manager/transformer?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/sdk/tests/agent/doc_manager/transformer","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/8b9cd1ac2e0f290738977fd6eccc9cf2737678f6","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/agent/doc_manager/transformer?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/8b9cd1ac2e0f290738977fd6eccc9cf2737678f6","html":"https://github.com/eidolon-ai/eidolon/tree/main/sdk/tests/agent/doc_manager/transformer"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:29:20 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E4C0:2537C8:173764:209E72:65D519AF
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4707'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '293'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/system/resources?ref=main
  response:
    content: '[{"name":"__init__.py","path":"sdk/eidolon_ai_sdk/system/resources/__init__.py","sha":"e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/system/resources/__init__.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/system/resources/__init__.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/system/resources/__init__.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/system/resources/__init__.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/system/resources/__init__.py"}},{"name":"agent_resource.py","path":"sdk/eidolon_ai_sdk/system/resources/agent_resource.py","sha":"3c3a478e2529956d087dce4f1c03813daa09bbae","size":282,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/system/resources/agent_resource.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/system/resources/agent_resource.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/3c3a478e2529956d087dce4f1c03813daa09bbae","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/system/resources/agent_resource.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/system/resources/agent_resource.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/3c3a478e2529956d087dce4f1c03813daa09bbae","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/system/resources/agent_resource.py"}},{"name":"machine_resource.py","path":"sdk/eidolon_ai_sdk/system/resources/machine_resource.py","sha":"5e0b827975c5af51b434bebbe9388dc90144d172","size":414,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/system/resources/machine_resource.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/system/resources/machine_resource.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/5e0b827975c5af51b434bebbe9388dc90144d172","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/system/resources/machine_resource.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/system/resources/machine_resource.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/5e0b827975c5af51b434bebbe9388dc90144d172","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/system/resources/machine_resource.py"}},{"name":"reference_resource.py","path":"sdk/eidolon_ai_sdk/system/resources/reference_resource.py","sha":"a9756f338876be53f64be89ad556ac306e7dd3c8","size":684,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/system/resources/reference_resource.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/system/resources/reference_resource.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/a9756f338876be53f64be89ad556ac306e7dd3c8","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/system/resources/reference_resource.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/system/resources/reference_resource.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/a9756f338876be53f64be89ad556ac306e7dd3c8","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/system/resources/reference_resource.py"}},{"name":"resources_base.py","path":"sdk/eidolon_ai_sdk/system/resources/resources_base.py","sha":"178164ab591fc3c493b21f60829df4805b950596","size":1471,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/system/resources/resources_base.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/system/resources/resources_base.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/178164ab591fc3c493b21f60829df4805b950596","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/system/resources/resources_base.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/system/resources/resources_base.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/178164ab591fc3c493b21f60829df4805b950596","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/system/resources/resources_base.py"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:29:20 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E4CC:2567E0:14F827:1E5E7D:65D519AF
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4710'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '290'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/getting_started/2_custom_agents/resources?ref=main
  response:
    content: '[{"name":"hello_world_agent.yaml","path":"examples/eidolon_examples/getting_started/2_custom_agents/resources/hello_world_agent.yaml","sha":"a71cecfdf538efbfeca08e51bc5c301a36813431","size":146,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/getting_started/2_custom_agents/resources/hello_world_agent.yaml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/getting_started/2_custom_agents/resources/hello_world_agent.yaml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/a71cecfdf538efbfeca08e51bc5c301a36813431","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/eidolon_examples/getting_started/2_custom_agents/resources/hello_world_agent.yaml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/getting_started/2_custom_agents/resources/hello_world_agent.yaml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/a71cecfdf538efbfeca08e51bc5c301a36813431","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/getting_started/2_custom_agents/resources/hello_world_agent.yaml"}},{"name":"qa_agent.yaml","path":"examples/eidolon_examples/getting_started/2_custom_agents/resources/qa_agent.yaml","sha":"1e3850fafb165743a6abab9d36600e07dea90f28","size":205,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/getting_started/2_custom_agents/resources/qa_agent.yaml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/getting_started/2_custom_agents/resources/qa_agent.yaml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/1e3850fafb165743a6abab9d36600e07dea90f28","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/eidolon_examples/getting_started/2_custom_agents/resources/qa_agent.yaml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/getting_started/2_custom_agents/resources/qa_agent.yaml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/1e3850fafb165743a6abab9d36600e07dea90f28","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/getting_started/2_custom_agents/resources/qa_agent.yaml"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:29:20 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E4C5:25A09C:1AA7A9:240E05:65D519AF
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4706'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '294'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/doc_manager/loaders?ref=main
  response:
    content: '[{"name":"__init__.py","path":"sdk/eidolon_ai_sdk/agent/doc_manager/loaders/__init__.py","sha":"e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/doc_manager/loaders/__init__.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/doc_manager/loaders/__init__.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/agent/doc_manager/loaders/__init__.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/doc_manager/loaders/__init__.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/doc_manager/loaders/__init__.py"}},{"name":"base_loader.py","path":"sdk/eidolon_ai_sdk/agent/doc_manager/loaders/base_loader.py","sha":"948d9e7d4066b33ad8e6d5a0567087fd7b86052a","size":905,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/doc_manager/loaders/base_loader.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/doc_manager/loaders/base_loader.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/948d9e7d4066b33ad8e6d5a0567087fd7b86052a","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/agent/doc_manager/loaders/base_loader.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/doc_manager/loaders/base_loader.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/948d9e7d4066b33ad8e6d5a0567087fd7b86052a","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/doc_manager/loaders/base_loader.py"}},{"name":"filesystem_loader.py","path":"sdk/eidolon_ai_sdk/agent/doc_manager/loaders/filesystem_loader.py","sha":"0f9aa2cce567563eb1010be123fe07b15d6ba8dd","size":3773,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/doc_manager/loaders/filesystem_loader.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/doc_manager/loaders/filesystem_loader.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/0f9aa2cce567563eb1010be123fe07b15d6ba8dd","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/agent/doc_manager/loaders/filesystem_loader.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/doc_manager/loaders/filesystem_loader.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/0f9aa2cce567563eb1010be123fe07b15d6ba8dd","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/doc_manager/loaders/filesystem_loader.py"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:29:20 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E4C7:2556C1:15005A:1E6731:65D519AF
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4704'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '296'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/agent/retriever_docs?ref=main
  response:
    content: '[{"name":"bar","path":"sdk/tests/agent/retriever_docs/bar","sha":"d7fd9445df0af66972e23ff3b6c05a8ef90ce55f","size":310,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/agent/retriever_docs/bar?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/agent/retriever_docs/bar","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/d7fd9445df0af66972e23ff3b6c05a8ef90ce55f","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/agent/retriever_docs/bar","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/agent/retriever_docs/bar?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/d7fd9445df0af66972e23ff3b6c05a8ef90ce55f","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/agent/retriever_docs/bar"}},{"name":"baz","path":"sdk/tests/agent/retriever_docs/baz","sha":"6256a12c95bdd0f48b6f38e553433f54747097e0","size":391,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/agent/retriever_docs/baz?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/agent/retriever_docs/baz","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/6256a12c95bdd0f48b6f38e553433f54747097e0","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/agent/retriever_docs/baz","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/agent/retriever_docs/baz?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/6256a12c95bdd0f48b6f38e553433f54747097e0","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/agent/retriever_docs/baz"}},{"name":"boo","path":"sdk/tests/agent/retriever_docs/boo","sha":"4b44fe6f7b06882acc5208e3cb6d19dec1135e95","size":335,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/agent/retriever_docs/boo?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/agent/retriever_docs/boo","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/4b44fe6f7b06882acc5208e3cb6d19dec1135e95","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/agent/retriever_docs/boo","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/agent/retriever_docs/boo?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/4b44fe6f7b06882acc5208e3cb6d19dec1135e95","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/agent/retriever_docs/boo"}},{"name":"car","path":"sdk/tests/agent/retriever_docs/car","sha":"d7fd9445df0af66972e23ff3b6c05a8ef90ce55f","size":310,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/agent/retriever_docs/car?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/agent/retriever_docs/car","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/d7fd9445df0af66972e23ff3b6c05a8ef90ce55f","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/agent/retriever_docs/car","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/agent/retriever_docs/car?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/d7fd9445df0af66972e23ff3b6c05a8ef90ce55f","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/agent/retriever_docs/car"}},{"name":"caz","path":"sdk/tests/agent/retriever_docs/caz","sha":"6256a12c95bdd0f48b6f38e553433f54747097e0","size":391,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/agent/retriever_docs/caz?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/agent/retriever_docs/caz","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/6256a12c95bdd0f48b6f38e553433f54747097e0","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/agent/retriever_docs/caz","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/agent/retriever_docs/caz?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/6256a12c95bdd0f48b6f38e553433f54747097e0","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/agent/retriever_docs/caz"}},{"name":"coo","path":"sdk/tests/agent/retriever_docs/coo","sha":"4b44fe6f7b06882acc5208e3cb6d19dec1135e95","size":335,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/agent/retriever_docs/coo?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/agent/retriever_docs/coo","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/4b44fe6f7b06882acc5208e3cb6d19dec1135e95","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/agent/retriever_docs/coo","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/agent/retriever_docs/coo?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/4b44fe6f7b06882acc5208e3cb6d19dec1135e95","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/agent/retriever_docs/coo"}},{"name":"dar","path":"sdk/tests/agent/retriever_docs/dar","sha":"d7fd9445df0af66972e23ff3b6c05a8ef90ce55f","size":310,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/agent/retriever_docs/dar?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/agent/retriever_docs/dar","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/d7fd9445df0af66972e23ff3b6c05a8ef90ce55f","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/agent/retriever_docs/dar","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/agent/retriever_docs/dar?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/d7fd9445df0af66972e23ff3b6c05a8ef90ce55f","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/agent/retriever_docs/dar"}},{"name":"daz","path":"sdk/tests/agent/retriever_docs/daz","sha":"6256a12c95bdd0f48b6f38e553433f54747097e0","size":391,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/agent/retriever_docs/daz?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/agent/retriever_docs/daz","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/6256a12c95bdd0f48b6f38e553433f54747097e0","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/agent/retriever_docs/daz","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/agent/retriever_docs/daz?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/6256a12c95bdd0f48b6f38e553433f54747097e0","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/agent/retriever_docs/daz"}},{"name":"doo","path":"sdk/tests/agent/retriever_docs/doo","sha":"4b44fe6f7b06882acc5208e3cb6d19dec1135e95","size":335,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/agent/retriever_docs/doo?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/agent/retriever_docs/doo","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/4b44fe6f7b06882acc5208e3cb6d19dec1135e95","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/agent/retriever_docs/doo","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/agent/retriever_docs/doo?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/4b44fe6f7b06882acc5208e3cb6d19dec1135e95","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/agent/retriever_docs/doo"}},{"name":"ear","path":"sdk/tests/agent/retriever_docs/ear","sha":"d7fd9445df0af66972e23ff3b6c05a8ef90ce55f","size":310,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/agent/retriever_docs/ear?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/agent/retriever_docs/ear","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/d7fd9445df0af66972e23ff3b6c05a8ef90ce55f","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/agent/retriever_docs/ear","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/agent/retriever_docs/ear?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/d7fd9445df0af66972e23ff3b6c05a8ef90ce55f","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/agent/retriever_docs/ear"}},{"name":"eaz","path":"sdk/tests/agent/retriever_docs/eaz","sha":"6256a12c95bdd0f48b6f38e553433f54747097e0","size":391,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/agent/retriever_docs/eaz?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/agent/retriever_docs/eaz","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/6256a12c95bdd0f48b6f38e553433f54747097e0","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/agent/retriever_docs/eaz","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/agent/retriever_docs/eaz?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/6256a12c95bdd0f48b6f38e553433f54747097e0","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/agent/retriever_docs/eaz"}},{"name":"eoo","path":"sdk/tests/agent/retriever_docs/eoo","sha":"4b44fe6f7b06882acc5208e3cb6d19dec1135e95","size":335,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/agent/retriever_docs/eoo?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/agent/retriever_docs/eoo","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/4b44fe6f7b06882acc5208e3cb6d19dec1135e95","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/agent/retriever_docs/eoo","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/agent/retriever_docs/eoo?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/4b44fe6f7b06882acc5208e3cb6d19dec1135e95","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/agent/retriever_docs/eoo"}},{"name":"foo","path":"sdk/tests/agent/retriever_docs/foo","sha":"4b44fe6f7b06882acc5208e3cb6d19dec1135e95","size":335,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/agent/retriever_docs/foo?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/agent/retriever_docs/foo","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/4b44fe6f7b06882acc5208e3cb6d19dec1135e95","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/agent/retriever_docs/foo","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/agent/retriever_docs/foo?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/4b44fe6f7b06882acc5208e3cb6d19dec1135e95","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/agent/retriever_docs/foo"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:29:20 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E4CD:30EE94:36F98:4842D:65D519AF
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4705'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '295'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/system/cassettes?ref=main
  response:
    content: '[{"name":"test_generic_agent","path":"sdk/tests/system/cassettes/test_generic_agent","sha":"e92d7fa1c1bbe990312ec1c4720d01f15cb342f8","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/system/cassettes/test_generic_agent?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/sdk/tests/system/cassettes/test_generic_agent","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/e92d7fa1c1bbe990312ec1c4720d01f15cb342f8","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/system/cassettes/test_generic_agent?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/e92d7fa1c1bbe990312ec1c4720d01f15cb342f8","html":"https://github.com/eidolon-ai/eidolon/tree/main/sdk/tests/system/cassettes/test_generic_agent"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:29:20 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E4CE:254441:15357B:1E9C54:65D519B0
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4702'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '298'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/doc_manager/parsers?ref=main
  response:
    content: '[{"name":"__init__.py","path":"sdk/eidolon_ai_sdk/agent/doc_manager/parsers/__init__.py","sha":"e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/doc_manager/parsers/__init__.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/doc_manager/parsers/__init__.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/agent/doc_manager/parsers/__init__.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/doc_manager/parsers/__init__.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/doc_manager/parsers/__init__.py"}},{"name":"auto_parser.py","path":"sdk/eidolon_ai_sdk/agent/doc_manager/parsers/auto_parser.py","sha":"42f3ef0c7905bc6b7b9a595638d794286348ef7a","size":2787,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/doc_manager/parsers/auto_parser.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/doc_manager/parsers/auto_parser.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/42f3ef0c7905bc6b7b9a595638d794286348ef7a","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/agent/doc_manager/parsers/auto_parser.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/doc_manager/parsers/auto_parser.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/42f3ef0c7905bc6b7b9a595638d794286348ef7a","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/doc_manager/parsers/auto_parser.py"}},{"name":"base_parser.py","path":"sdk/eidolon_ai_sdk/agent/doc_manager/parsers/base_parser.py","sha":"496fe0b02ab386f347fb881bb202c35725842317","size":4510,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/doc_manager/parsers/base_parser.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/doc_manager/parsers/base_parser.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/496fe0b02ab386f347fb881bb202c35725842317","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/agent/doc_manager/parsers/base_parser.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/doc_manager/parsers/base_parser.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/496fe0b02ab386f347fb881bb202c35725842317","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/doc_manager/parsers/base_parser.py"}},{"name":"code_ast_parsers","path":"sdk/eidolon_ai_sdk/agent/doc_manager/parsers/code_ast_parsers","sha":"2e73dc3275e312e092e13312299317f776966859","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/doc_manager/parsers/code_ast_parsers?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/sdk/eidolon_ai_sdk/agent/doc_manager/parsers/code_ast_parsers","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/2e73dc3275e312e092e13312299317f776966859","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/doc_manager/parsers/code_ast_parsers?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/2e73dc3275e312e092e13312299317f776966859","html":"https://github.com/eidolon-ai/eidolon/tree/main/sdk/eidolon_ai_sdk/agent/doc_manager/parsers/code_ast_parsers"}},{"name":"ms_word_parser.py","path":"sdk/eidolon_ai_sdk/agent/doc_manager/parsers/ms_word_parser.py","sha":"606dfa4e8983b9db76b53b9c06ca789dc4538c4f","size":1328,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/doc_manager/parsers/ms_word_parser.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/doc_manager/parsers/ms_word_parser.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/606dfa4e8983b9db76b53b9c06ca789dc4538c4f","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/agent/doc_manager/parsers/ms_word_parser.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/doc_manager/parsers/ms_word_parser.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/606dfa4e8983b9db76b53b9c06ca789dc4538c4f","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/doc_manager/parsers/ms_word_parser.py"}},{"name":"pdf_parsers.py","path":"sdk/eidolon_ai_sdk/agent/doc_manager/parsers/pdf_parsers.py","sha":"7ccb1fd98567ecdcefe9c730a9cb6b7c80ec1879","size":3356,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/doc_manager/parsers/pdf_parsers.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/doc_manager/parsers/pdf_parsers.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/7ccb1fd98567ecdcefe9c730a9cb6b7c80ec1879","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/agent/doc_manager/parsers/pdf_parsers.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/doc_manager/parsers/pdf_parsers.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/7ccb1fd98567ecdcefe9c730a9cb6b7c80ec1879","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/doc_manager/parsers/pdf_parsers.py"}},{"name":"text_parsers.py","path":"sdk/eidolon_ai_sdk/agent/doc_manager/parsers/text_parsers.py","sha":"0b10b2a24b0bd626bc224a57ef66cddee2e5dece","size":1400,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/doc_manager/parsers/text_parsers.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/doc_manager/parsers/text_parsers.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/0b10b2a24b0bd626bc224a57ef66cddee2e5dece","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/agent/doc_manager/parsers/text_parsers.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/doc_manager/parsers/text_parsers.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/0b10b2a24b0bd626bc224a57ef66cddee2e5dece","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/doc_manager/parsers/text_parsers.py"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:29:20 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E4C4:254ED9:16605F:1FC6A9:65D519AF
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4703'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '297'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/doc_manager/transformer?ref=main
  response:
    content: '[{"name":"__init__.py","path":"sdk/eidolon_ai_sdk/agent/doc_manager/transformer/__init__.py","sha":"e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/doc_manager/transformer/__init__.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/doc_manager/transformer/__init__.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/agent/doc_manager/transformer/__init__.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/doc_manager/transformer/__init__.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/doc_manager/transformer/__init__.py"}},{"name":"auto_transformer.py","path":"sdk/eidolon_ai_sdk/agent/doc_manager/transformer/auto_transformer.py","sha":"dd364cd99630de911faffbd5999c5e48c7e8070d","size":1398,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/doc_manager/transformer/auto_transformer.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/doc_manager/transformer/auto_transformer.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/dd364cd99630de911faffbd5999c5e48c7e8070d","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/agent/doc_manager/transformer/auto_transformer.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/doc_manager/transformer/auto_transformer.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/dd364cd99630de911faffbd5999c5e48c7e8070d","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/doc_manager/transformer/auto_transformer.py"}},{"name":"document_transformer.py","path":"sdk/eidolon_ai_sdk/agent/doc_manager/transformer/document_transformer.py","sha":"25ff8c41f9643ab56f8975c57a8553dc968502ed","size":4786,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/doc_manager/transformer/document_transformer.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/doc_manager/transformer/document_transformer.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/25ff8c41f9643ab56f8975c57a8553dc968502ed","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/agent/doc_manager/transformer/document_transformer.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/doc_manager/transformer/document_transformer.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/25ff8c41f9643ab56f8975c57a8553dc968502ed","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/doc_manager/transformer/document_transformer.py"}},{"name":"text_splitters.py","path":"sdk/eidolon_ai_sdk/agent/doc_manager/transformer/text_splitters.py","sha":"589a4ac37c6e5b5c6785f3fa1f7e3ab351981b22","size":43465,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/doc_manager/transformer/text_splitters.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/doc_manager/transformer/text_splitters.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/589a4ac37c6e5b5c6785f3fa1f7e3ab351981b22","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/agent/doc_manager/transformer/text_splitters.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/doc_manager/transformer/text_splitters.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/589a4ac37c6e5b5c6785f3fa1f7e3ab351981b22","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/doc_manager/transformer/text_splitters.py"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:29:20 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E4C6:2556CA:14E1A2:1E4860:65D519AF
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4701'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '299'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/app/api/auth/[...nextauth]?ref=main
  response:
    content: '[{"name":"route.ts","path":"webui/app/api/auth/[...nextauth]/route.ts","sha":"bc08a9bacbf6090f87ae79302e31fc9aad1c6a8f","size":2048,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/app/api/auth/[...nextauth]/route.ts?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/webui/app/api/auth/[...nextauth]/route.ts","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/bc08a9bacbf6090f87ae79302e31fc9aad1c6a8f","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/webui/app/api/auth/%5B...nextauth%5D/route.ts","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/app/api/auth/[...nextauth]/route.ts?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/bc08a9bacbf6090f87ae79302e31fc9aad1c6a8f","html":"https://github.com/eidolon-ai/eidolon/blob/main/webui/app/api/auth/[...nextauth]/route.ts"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:29:20 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E4B4:255256:1663A9:1FCA63:65D519B0
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4700'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '300'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/agent/doc_manager/transformer?ref=main
  response:
    content: '[{"name":"__init__.py","path":"sdk/tests/agent/doc_manager/transformer/__init__.py","sha":"e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/agent/doc_manager/transformer/__init__.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/agent/doc_manager/transformer/__init__.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/agent/doc_manager/transformer/__init__.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/agent/doc_manager/transformer/__init__.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/agent/doc_manager/transformer/__init__.py"}},{"name":"test_RecursiveCharacterTextSplitter.py","path":"sdk/tests/agent/doc_manager/transformer/test_RecursiveCharacterTextSplitter.py","sha":"5c68777903039019b0f8fe66cf5a169beb28e638","size":1816,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/agent/doc_manager/transformer/test_RecursiveCharacterTextSplitter.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/agent/doc_manager/transformer/test_RecursiveCharacterTextSplitter.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/5c68777903039019b0f8fe66cf5a169beb28e638","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/agent/doc_manager/transformer/test_RecursiveCharacterTextSplitter.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/agent/doc_manager/transformer/test_RecursiveCharacterTextSplitter.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/5c68777903039019b0f8fe66cf5a169beb28e638","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/agent/doc_manager/transformer/test_RecursiveCharacterTextSplitter.py"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:29:20 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E4B7:254D25:160FEA:1F76C5:65D519B0
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4699'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '301'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/agent/cassettes/test_retriever_agent?ref=main
  response:
    content: '[{"name":"test_search.yaml","path":"sdk/tests/agent/cassettes/test_retriever_agent/test_search.yaml","sha":"48087271a775240e9fed3ec3c5eac7579a004c39","size":209977,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/agent/cassettes/test_retriever_agent/test_search.yaml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/agent/cassettes/test_retriever_agent/test_search.yaml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/48087271a775240e9fed3ec3c5eac7579a004c39","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/agent/cassettes/test_retriever_agent/test_search.yaml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/agent/cassettes/test_retriever_agent/test_search.yaml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/48087271a775240e9fed3ec3c5eac7579a004c39","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/agent/cassettes/test_retriever_agent/test_search.yaml"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:29:20 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E4AB:2511E0:14F674:1E5D62:65D519B0
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4698'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '302'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/agent/doc_manager/parsers?ref=main
  response:
    content: '[{"name":"AgentXOS.pdf","path":"sdk/tests/agent/doc_manager/parsers/AgentXOS.pdf","sha":"aeff024a96558192032454a91051e26f5b799472","size":1185792,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/agent/doc_manager/parsers/AgentXOS.pdf?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/agent/doc_manager/parsers/AgentXOS.pdf","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/aeff024a96558192032454a91051e26f5b799472","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/agent/doc_manager/parsers/AgentXOS.pdf","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/agent/doc_manager/parsers/AgentXOS.pdf?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/aeff024a96558192032454a91051e26f5b799472","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/agent/doc_manager/parsers/AgentXOS.pdf"}},{"name":"__init__.py","path":"sdk/tests/agent/doc_manager/parsers/__init__.py","sha":"e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/agent/doc_manager/parsers/__init__.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/agent/doc_manager/parsers/__init__.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/agent/doc_manager/parsers/__init__.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/agent/doc_manager/parsers/__init__.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/agent/doc_manager/parsers/__init__.py"}},{"name":"test_pdf_parser.py","path":"sdk/tests/agent/doc_manager/parsers/test_pdf_parser.py","sha":"646b248a0fd708bd5d8c59ab3154f769a813a5de","size":2341,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/agent/doc_manager/parsers/test_pdf_parser.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/agent/doc_manager/parsers/test_pdf_parser.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/646b248a0fd708bd5d8c59ab3154f769a813a5de","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/agent/doc_manager/parsers/test_pdf_parser.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/agent/doc_manager/parsers/test_pdf_parser.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/646b248a0fd708bd5d8c59ab3154f769a813a5de","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/agent/doc_manager/parsers/test_pdf_parser.py"}},{"name":"test_text_parser.py","path":"sdk/tests/agent/doc_manager/parsers/test_text_parser.py","sha":"f4e443a6502f762336751081573e8ccd796d1e1a","size":1161,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/agent/doc_manager/parsers/test_text_parser.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/agent/doc_manager/parsers/test_text_parser.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/f4e443a6502f762336751081573e8ccd796d1e1a","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/agent/doc_manager/parsers/test_text_parser.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/agent/doc_manager/parsers/test_text_parser.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/f4e443a6502f762336751081573e8ccd796d1e1a","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/agent/doc_manager/parsers/test_text_parser.py"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:29:20 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E4C0:2537C8:173769:209E7C:65D519B0
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4697'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '303'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/app/api/chat?ref=main
  response:
    content: '[{"name":"messages","path":"webui/app/api/chat/messages","sha":"f591408f685dcd29f7b650a7cf6ea7500dc13852","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/app/api/chat/messages?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/webui/app/api/chat/messages","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/f591408f685dcd29f7b650a7cf6ea7500dc13852","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/app/api/chat/messages?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/f591408f685dcd29f7b650a7cf6ea7500dc13852","html":"https://github.com/eidolon-ai/eidolon/tree/main/webui/app/api/chat/messages"}},{"name":"route.ts","path":"webui/app/api/chat/route.ts","sha":"50a4351009efec0a749a4d50dbdd488db651a5c4","size":5998,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/app/api/chat/route.ts?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/webui/app/api/chat/route.ts","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/50a4351009efec0a749a4d50dbdd488db651a5c4","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/webui/app/api/chat/route.ts","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/app/api/chat/route.ts?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/50a4351009efec0a749a4d50dbdd488db651a5c4","html":"https://github.com/eidolon-ai/eidolon/blob/main/webui/app/api/chat/route.ts"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:29:20 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E4B2:25626D:155663:1EBCBF:65D519AF
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4696'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '304'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/system/cassettes/test_generic_agent?ref=main
  response:
    content: '[{"name":"TestAgentsWithReferences.test_can_communicate.yaml","path":"sdk/tests/system/cassettes/test_generic_agent/TestAgentsWithReferences.test_can_communicate.yaml","sha":"354c81e5143c3b1a7a1cc80a0f59d393a73bb46d","size":15449,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/system/cassettes/test_generic_agent/TestAgentsWithReferences.test_can_communicate.yaml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/system/cassettes/test_generic_agent/TestAgentsWithReferences.test_can_communicate.yaml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/354c81e5143c3b1a7a1cc80a0f59d393a73bb46d","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/system/cassettes/test_generic_agent/TestAgentsWithReferences.test_can_communicate.yaml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/system/cassettes/test_generic_agent/TestAgentsWithReferences.test_can_communicate.yaml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/354c81e5143c3b1a7a1cc80a0f59d393a73bb46d","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/system/cassettes/test_generic_agent/TestAgentsWithReferences.test_can_communicate.yaml"}},{"name":"TestAgentsWithReferences.test_can_replay_tool_calls.yaml","path":"sdk/tests/system/cassettes/test_generic_agent/TestAgentsWithReferences.test_can_replay_tool_calls.yaml","sha":"c794267bdc75713ee11019ce960cab67942a1cb8","size":23422,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/system/cassettes/test_generic_agent/TestAgentsWithReferences.test_can_replay_tool_calls.yaml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/system/cassettes/test_generic_agent/TestAgentsWithReferences.test_can_replay_tool_calls.yaml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/c794267bdc75713ee11019ce960cab67942a1cb8","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/system/cassettes/test_generic_agent/TestAgentsWithReferences.test_can_replay_tool_calls.yaml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/system/cassettes/test_generic_agent/TestAgentsWithReferences.test_can_replay_tool_calls.yaml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/c794267bdc75713ee11019ce960cab67942a1cb8","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/system/cassettes/test_generic_agent/TestAgentsWithReferences.test_can_replay_tool_calls.yaml"}},{"name":"TestAgentsWithReferences.test_list_body.yaml","path":"sdk/tests/system/cassettes/test_generic_agent/TestAgentsWithReferences.test_list_body.yaml","sha":"070b0b53ba52b08157513131e60487aa2d1191a9","size":15763,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/system/cassettes/test_generic_agent/TestAgentsWithReferences.test_list_body.yaml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/system/cassettes/test_generic_agent/TestAgentsWithReferences.test_list_body.yaml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/070b0b53ba52b08157513131e60487aa2d1191a9","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/system/cassettes/test_generic_agent/TestAgentsWithReferences.test_list_body.yaml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/system/cassettes/test_generic_agent/TestAgentsWithReferences.test_list_body.yaml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/070b0b53ba52b08157513131e60487aa2d1191a9","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/system/cassettes/test_generic_agent/TestAgentsWithReferences.test_list_body.yaml"}},{"name":"TestAgentsWithReferences.test_passes_context.yaml","path":"sdk/tests/system/cassettes/test_generic_agent/TestAgentsWithReferences.test_passes_context.yaml","sha":"8891567302dc38f85d6effea6d972e8e2208cd7e","size":38403,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/system/cassettes/test_generic_agent/TestAgentsWithReferences.test_passes_context.yaml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/system/cassettes/test_generic_agent/TestAgentsWithReferences.test_passes_context.yaml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/8891567302dc38f85d6effea6d972e8e2208cd7e","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/system/cassettes/test_generic_agent/TestAgentsWithReferences.test_passes_context.yaml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/system/cassettes/test_generic_agent/TestAgentsWithReferences.test_passes_context.yaml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/8891567302dc38f85d6effea6d972e8e2208cd7e","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/system/cassettes/test_generic_agent/TestAgentsWithReferences.test_passes_context.yaml"}},{"name":"TestAgentsWithReferences.test_respond_after_tool_call.yaml","path":"sdk/tests/system/cassettes/test_generic_agent/TestAgentsWithReferences.test_respond_after_tool_call.yaml","sha":"740a149dc3ca29906efca2a67f36074bd5cfe436","size":15448,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/system/cassettes/test_generic_agent/TestAgentsWithReferences.test_respond_after_tool_call.yaml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/system/cassettes/test_generic_agent/TestAgentsWithReferences.test_respond_after_tool_call.yaml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/740a149dc3ca29906efca2a67f36074bd5cfe436","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/system/cassettes/test_generic_agent/TestAgentsWithReferences.test_respond_after_tool_call.yaml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/system/cassettes/test_generic_agent/TestAgentsWithReferences.test_respond_after_tool_call.yaml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/740a149dc3ca29906efca2a67f36074bd5cfe436","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/system/cassettes/test_generic_agent/TestAgentsWithReferences.test_respond_after_tool_call.yaml"}},{"name":"TestAgentsWithReferences.test_string_only_body.yaml","path":"sdk/tests/system/cassettes/test_generic_agent/TestAgentsWithReferences.test_string_only_body.yaml","sha":"749f6687f4e4e1088b8091b63c5b6fd703a02dab","size":14810,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/system/cassettes/test_generic_agent/TestAgentsWithReferences.test_string_only_body.yaml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/system/cassettes/test_generic_agent/TestAgentsWithReferences.test_string_only_body.yaml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/749f6687f4e4e1088b8091b63c5b6fd703a02dab","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/system/cassettes/test_generic_agent/TestAgentsWithReferences.test_string_only_body.yaml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/system/cassettes/test_generic_agent/TestAgentsWithReferences.test_string_only_body.yaml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/749f6687f4e4e1088b8091b63c5b6fd703a02dab","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/system/cassettes/test_generic_agent/TestAgentsWithReferences.test_string_only_body.yaml"}},{"name":"TestGenericAgent.test_continued_conversation.yaml","path":"sdk/tests/system/cassettes/test_generic_agent/TestGenericAgent.test_continued_conversation.yaml","sha":"2cc7f4ce5c038e79201e1c4bcf81463a7c25ed64","size":20989,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/system/cassettes/test_generic_agent/TestGenericAgent.test_continued_conversation.yaml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/system/cassettes/test_generic_agent/TestGenericAgent.test_continued_conversation.yaml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/2cc7f4ce5c038e79201e1c4bcf81463a7c25ed64","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/system/cassettes/test_generic_agent/TestGenericAgent.test_continued_conversation.yaml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/system/cassettes/test_generic_agent/TestGenericAgent.test_continued_conversation.yaml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/2cc7f4ce5c038e79201e1c4bcf81463a7c25ed64","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/system/cassettes/test_generic_agent/TestGenericAgent.test_continued_conversation.yaml"}},{"name":"TestGenericAgent.test_deletes_conversational_memory.yaml","path":"sdk/tests/system/cassettes/test_generic_agent/TestGenericAgent.test_deletes_conversational_memory.yaml","sha":"f74ad51fa45c43b33d223f713d70be5189fac87e","size":5579,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/system/cassettes/test_generic_agent/TestGenericAgent.test_deletes_conversational_memory.yaml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/system/cassettes/test_generic_agent/TestGenericAgent.test_deletes_conversational_memory.yaml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/f74ad51fa45c43b33d223f713d70be5189fac87e","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/system/cassettes/test_generic_agent/TestGenericAgent.test_deletes_conversational_memory.yaml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/system/cassettes/test_generic_agent/TestGenericAgent.test_deletes_conversational_memory.yaml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/f74ad51fa45c43b33d223f713d70be5189fac87e","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/system/cassettes/test_generic_agent/TestGenericAgent.test_deletes_conversational_memory.yaml"}},{"name":"TestGenericAgent.test_llm_calls.yaml","path":"sdk/tests/system/cassettes/test_generic_agent/TestGenericAgent.test_llm_calls.yaml","sha":"4b3a99a55784903d651d22c8b027cf0aa0f9bb5d","size":4914,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/system/cassettes/test_generic_agent/TestGenericAgent.test_llm_calls.yaml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/system/cassettes/test_generic_agent/TestGenericAgent.test_llm_calls.yaml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/4b3a99a55784903d651d22c8b027cf0aa0f9bb5d","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/system/cassettes/test_generic_agent/TestGenericAgent.test_llm_calls.yaml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/system/cassettes/test_generic_agent/TestGenericAgent.test_llm_calls.yaml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/4b3a99a55784903d651d22c8b027cf0aa0f9bb5d","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/system/cassettes/test_generic_agent/TestGenericAgent.test_llm_calls.yaml"}},{"name":"TestGenericAgentWithToolCalls.test_normal_tool_call.yaml","path":"sdk/tests/system/cassettes/test_generic_agent/TestGenericAgentWithToolCalls.test_normal_tool_call.yaml","sha":"2d56cf74f0fd06b103d1850ae5fbbe35ebbf0d7d","size":10835,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/system/cassettes/test_generic_agent/TestGenericAgentWithToolCalls.test_normal_tool_call.yaml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/system/cassettes/test_generic_agent/TestGenericAgentWithToolCalls.test_normal_tool_call.yaml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/2d56cf74f0fd06b103d1850ae5fbbe35ebbf0d7d","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/system/cassettes/test_generic_agent/TestGenericAgentWithToolCalls.test_normal_tool_call.yaml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/system/cassettes/test_generic_agent/TestGenericAgentWithToolCalls.test_normal_tool_call.yaml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/2d56cf74f0fd06b103d1850ae5fbbe35ebbf0d7d","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/system/cassettes/test_generic_agent/TestGenericAgentWithToolCalls.test_normal_tool_call.yaml"}},{"name":"TestOutputTests.test_can_replay_llm_requests.yaml","path":"sdk/tests/system/cassettes/test_generic_agent/TestOutputTests.test_can_replay_llm_requests.yaml","sha":"98a5cbe2c90e05785835a6efad0e9b3f79dac038","size":26529,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/system/cassettes/test_generic_agent/TestOutputTests.test_can_replay_llm_requests.yaml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/system/cassettes/test_generic_agent/TestOutputTests.test_can_replay_llm_requests.yaml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/98a5cbe2c90e05785835a6efad0e9b3f79dac038","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/system/cassettes/test_generic_agent/TestOutputTests.test_can_replay_llm_requests.yaml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/system/cassettes/test_generic_agent/TestOutputTests.test_can_replay_llm_requests.yaml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/98a5cbe2c90e05785835a6efad0e9b3f79dac038","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/system/cassettes/test_generic_agent/TestOutputTests.test_can_replay_llm_requests.yaml"}},{"name":"TestOutputTests.test_generic_agent_cleans_up_images.yaml","path":"sdk/tests/system/cassettes/test_generic_agent/TestOutputTests.test_generic_agent_cleans_up_images.yaml","sha":"73355877daf5b06f90f71fe2772b83de92bba10f","size":19013,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/system/cassettes/test_generic_agent/TestOutputTests.test_generic_agent_cleans_up_images.yaml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/system/cassettes/test_generic_agent/TestOutputTests.test_generic_agent_cleans_up_images.yaml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/73355877daf5b06f90f71fe2772b83de92bba10f","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/system/cassettes/test_generic_agent/TestOutputTests.test_generic_agent_cleans_up_images.yaml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/system/cassettes/test_generic_agent/TestOutputTests.test_generic_agent_cleans_up_images.yaml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/73355877daf5b06f90f71fe2772b83de92bba10f","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/system/cassettes/test_generic_agent/TestOutputTests.test_generic_agent_cleans_up_images.yaml"}},{"name":"TestOutputTests.test_generic_agent_supports_image.yaml","path":"sdk/tests/system/cassettes/test_generic_agent/TestOutputTests.test_generic_agent_supports_image.yaml","sha":"105b4e47fb767cffd6d106d5a2b5506081f37d59","size":18313,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/system/cassettes/test_generic_agent/TestOutputTests.test_generic_agent_supports_image.yaml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/system/cassettes/test_generic_agent/TestOutputTests.test_generic_agent_supports_image.yaml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/105b4e47fb767cffd6d106d5a2b5506081f37d59","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/system/cassettes/test_generic_agent/TestOutputTests.test_generic_agent_supports_image.yaml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/system/cassettes/test_generic_agent/TestOutputTests.test_generic_agent_supports_image.yaml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/105b4e47fb767cffd6d106d5a2b5506081f37d59","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/system/cassettes/test_generic_agent/TestOutputTests.test_generic_agent_supports_image.yaml"}},{"name":"TestOutputTests.test_generic_agent_supports_multiple_images.yaml","path":"sdk/tests/system/cassettes/test_generic_agent/TestOutputTests.test_generic_agent_supports_multiple_images.yaml","sha":"e05588c763f343346307077a347f6583afd654c9","size":75999,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/system/cassettes/test_generic_agent/TestOutputTests.test_generic_agent_supports_multiple_images.yaml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/system/cassettes/test_generic_agent/TestOutputTests.test_generic_agent_supports_multiple_images.yaml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e05588c763f343346307077a347f6583afd654c9","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/system/cassettes/test_generic_agent/TestOutputTests.test_generic_agent_supports_multiple_images.yaml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/system/cassettes/test_generic_agent/TestOutputTests.test_generic_agent_supports_multiple_images.yaml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e05588c763f343346307077a347f6583afd654c9","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/system/cassettes/test_generic_agent/TestOutputTests.test_generic_agent_supports_multiple_images.yaml"}},{"name":"TestOutputTests.test_generic_agent_supports_object_output.yaml","path":"sdk/tests/system/cassettes/test_generic_agent/TestOutputTests.test_generic_agent_supports_object_output.yaml","sha":"78ecfee3334157aa9cdc4468d86c96b2d07e27f3","size":7591,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/system/cassettes/test_generic_agent/TestOutputTests.test_generic_agent_supports_object_output.yaml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/system/cassettes/test_generic_agent/TestOutputTests.test_generic_agent_supports_object_output.yaml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/78ecfee3334157aa9cdc4468d86c96b2d07e27f3","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/system/cassettes/test_generic_agent/TestOutputTests.test_generic_agent_supports_object_output.yaml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/system/cassettes/test_generic_agent/TestOutputTests.test_generic_agent_supports_object_output.yaml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/78ecfee3334157aa9cdc4468d86c96b2d07e27f3","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/system/cassettes/test_generic_agent/TestOutputTests.test_generic_agent_supports_object_output.yaml"}},{"name":"TestOutputTests.test_generic_agent_supports_object_output_with_stream.yaml","path":"sdk/tests/system/cassettes/test_generic_agent/TestOutputTests.test_generic_agent_supports_object_output_with_stream.yaml","sha":"7f59cfe087b0aeb9582ebad4f4f99883528a39ef","size":7593,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/system/cassettes/test_generic_agent/TestOutputTests.test_generic_agent_supports_object_output_with_stream.yaml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/system/cassettes/test_generic_agent/TestOutputTests.test_generic_agent_supports_object_output_with_stream.yaml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/7f59cfe087b0aeb9582ebad4f4f99883528a39ef","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/system/cassettes/test_generic_agent/TestOutputTests.test_generic_agent_supports_object_output_with_stream.yaml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/system/cassettes/test_generic_agent/TestOutputTests.test_generic_agent_supports_object_output_with_stream.yaml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/7f59cfe087b0aeb9582ebad4f4f99883528a39ef","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/system/cassettes/test_generic_agent/TestOutputTests.test_generic_agent_supports_object_output_with_stream.yaml"}},{"name":"TestOutputTests.test_generic_agent_supports_string_stream.yaml","path":"sdk/tests/system/cassettes/test_generic_agent/TestOutputTests.test_generic_agent_supports_string_stream.yaml","sha":"b35abd23caf7048fe4293ec48446128f58a3a529","size":7817,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/system/cassettes/test_generic_agent/TestOutputTests.test_generic_agent_supports_string_stream.yaml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/system/cassettes/test_generic_agent/TestOutputTests.test_generic_agent_supports_string_stream.yaml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/b35abd23caf7048fe4293ec48446128f58a3a529","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/system/cassettes/test_generic_agent/TestOutputTests.test_generic_agent_supports_string_stream.yaml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/system/cassettes/test_generic_agent/TestOutputTests.test_generic_agent_supports_string_stream.yaml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/b35abd23caf7048fe4293ec48446128f58a3a529","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/system/cassettes/test_generic_agent/TestOutputTests.test_generic_agent_supports_string_stream.yaml"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:29:20 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E4B7:254D25:160FEF:1F76CA:65D519B0
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4695'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '305'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/app/api/chat/messages?ref=main
  response:
    content: '[{"name":"route.ts","path":"webui/app/api/chat/messages/route.ts","sha":"16b47860356e5005e70f8a77609db4cd400646f0","size":2120,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/app/api/chat/messages/route.ts?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/webui/app/api/chat/messages/route.ts","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/16b47860356e5005e70f8a77609db4cd400646f0","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/webui/app/api/chat/messages/route.ts","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/app/api/chat/messages/route.ts?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/16b47860356e5005e70f8a77609db4cd400646f0","html":"https://github.com/eidolon-ai/eidolon/blob/main/webui/app/api/chat/messages/route.ts"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:29:20 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E4C0:2537C8:173778:209E88:65D519B0
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4693'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '307'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/doc_manager/parsers/code_ast_parsers?ref=main
  response:
    content: '[{"name":"__init__.py","path":"sdk/eidolon_ai_sdk/agent/doc_manager/parsers/code_ast_parsers/__init__.py","sha":"e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/doc_manager/parsers/code_ast_parsers/__init__.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/doc_manager/parsers/code_ast_parsers/__init__.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/agent/doc_manager/parsers/code_ast_parsers/__init__.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/doc_manager/parsers/code_ast_parsers/__init__.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/doc_manager/parsers/code_ast_parsers/__init__.py"}},{"name":"base_ast_generator.py","path":"sdk/eidolon_ai_sdk/agent/doc_manager/parsers/code_ast_parsers/base_ast_generator.py","sha":"0a1635679bdbe78e0b0084e18d276cbdf0358095","size":448,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/doc_manager/parsers/code_ast_parsers/base_ast_generator.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/doc_manager/parsers/code_ast_parsers/base_ast_generator.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/0a1635679bdbe78e0b0084e18d276cbdf0358095","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/agent/doc_manager/parsers/code_ast_parsers/base_ast_generator.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/doc_manager/parsers/code_ast_parsers/base_ast_generator.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/0a1635679bdbe78e0b0084e18d276cbdf0358095","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/doc_manager/parsers/code_ast_parsers/base_ast_generator.py"}},{"name":"cobol.py","path":"sdk/eidolon_ai_sdk/agent/doc_manager/parsers/code_ast_parsers/cobol.py","sha":"2000ccac2cb3d55566e709ff16cccb3eec140be0","size":3699,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/doc_manager/parsers/code_ast_parsers/cobol.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/doc_manager/parsers/code_ast_parsers/cobol.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/2000ccac2cb3d55566e709ff16cccb3eec140be0","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/agent/doc_manager/parsers/code_ast_parsers/cobol.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/doc_manager/parsers/code_ast_parsers/cobol.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/2000ccac2cb3d55566e709ff16cccb3eec140be0","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/doc_manager/parsers/code_ast_parsers/cobol.py"}},{"name":"javascript.py","path":"sdk/eidolon_ai_sdk/agent/doc_manager/parsers/code_ast_parsers/javascript.py","sha":"94a11072ce9de0d899855a3577b14c4479b91b2a","size":2053,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/doc_manager/parsers/code_ast_parsers/javascript.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/doc_manager/parsers/code_ast_parsers/javascript.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/94a11072ce9de0d899855a3577b14c4479b91b2a","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/agent/doc_manager/parsers/code_ast_parsers/javascript.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/doc_manager/parsers/code_ast_parsers/javascript.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/94a11072ce9de0d899855a3577b14c4479b91b2a","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/doc_manager/parsers/code_ast_parsers/javascript.py"}},{"name":"programing_language_parser.py","path":"sdk/eidolon_ai_sdk/agent/doc_manager/parsers/code_ast_parsers/programing_language_parser.py","sha":"82b200dc49b5d30802855a6a6379d8175354e652","size":3212,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/doc_manager/parsers/code_ast_parsers/programing_language_parser.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/doc_manager/parsers/code_ast_parsers/programing_language_parser.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/82b200dc49b5d30802855a6a6379d8175354e652","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/agent/doc_manager/parsers/code_ast_parsers/programing_language_parser.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/doc_manager/parsers/code_ast_parsers/programing_language_parser.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/82b200dc49b5d30802855a6a6379d8175354e652","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/doc_manager/parsers/code_ast_parsers/programing_language_parser.py"}},{"name":"python.py","path":"sdk/eidolon_ai_sdk/agent/doc_manager/parsers/code_ast_parsers/python.py","sha":"59633e32d7df961152bf61bc00b4c71a831b51ac","size":1647,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/doc_manager/parsers/code_ast_parsers/python.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/doc_manager/parsers/code_ast_parsers/python.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/59633e32d7df961152bf61bc00b4c71a831b51ac","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/agent/doc_manager/parsers/code_ast_parsers/python.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/doc_manager/parsers/code_ast_parsers/python.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/59633e32d7df961152bf61bc00b4c71a831b51ac","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/doc_manager/parsers/code_ast_parsers/python.py"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:29:20 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E4AB:2511E0:14F67B:1E5D6C:65D519B0
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4694'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '306'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents
  response:
    content: '[{"name":".github","path":".github","sha":"338665452bc262a4500b18b4dd65ef52a70241ff","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/.github?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/.github","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/338665452bc262a4500b18b4dd65ef52a70241ff","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/.github?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/338665452bc262a4500b18b4dd65ef52a70241ff","html":"https://github.com/eidolon-ai/eidolon/tree/main/.github"}},{"name":".gitignore","path":".gitignore","sha":"6254fcde5a2dc05935e4745485a8090d01e01f61","size":3292,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/.gitignore?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/.gitignore","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/6254fcde5a2dc05935e4745485a8090d01e01f61","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/.gitignore","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/.gitignore?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/6254fcde5a2dc05935e4745485a8090d01e01f61","html":"https://github.com/eidolon-ai/eidolon/blob/main/.gitignore"}},{"name":".idea","path":".idea","sha":"783abf540666e259bbf0bc51e10568db1274fd48","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/.idea?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/.idea","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/783abf540666e259bbf0bc51e10568db1274fd48","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/.idea?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/783abf540666e259bbf0bc51e10568db1274fd48","html":"https://github.com/eidolon-ai/eidolon/tree/main/.idea"}},{"name":"LICENSE","path":"LICENSE","sha":"261eeb9e9f8b2b4b0d119366dda99c6fd7d35c64","size":11357,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/LICENSE?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/LICENSE","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/261eeb9e9f8b2b4b0d119366dda99c6fd7d35c64","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/LICENSE","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/LICENSE?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/261eeb9e9f8b2b4b0d119366dda99c6fd7d35c64","html":"https://github.com/eidolon-ai/eidolon/blob/main/LICENSE"}},{"name":"README.md","path":"README.md","sha":"01966ef9a979a5a42c1988349f5ca5bbb186d432","size":2840,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/README.md?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/README.md","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/01966ef9a979a5a42c1988349f5ca5bbb186d432","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/README.md","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/README.md?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/01966ef9a979a5a42c1988349f5ca5bbb186d432","html":"https://github.com/eidolon-ai/eidolon/blob/main/README.md"}},{"name":"cli","path":"cli","sha":"4a527a2be1f96986b75f883d26e7503555c7b0a3","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/cli?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/cli","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/4a527a2be1f96986b75f883d26e7503555c7b0a3","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/cli?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/4a527a2be1f96986b75f883d26e7503555c7b0a3","html":"https://github.com/eidolon-ai/eidolon/tree/main/cli"}},{"name":"docs","path":"docs","sha":"c4991c33e8585a6bb57d538fb031706d872d982b","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/docs","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/c4991c33e8585a6bb57d538fb031706d872d982b","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/c4991c33e8585a6bb57d538fb031706d872d982b","html":"https://github.com/eidolon-ai/eidolon/tree/main/docs"}},{"name":"eidolon.iml","path":"eidolon.iml","sha":"d35235ca8ce5ab539b1984aea0d7c12982467e12","size":848,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/eidolon.iml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/eidolon.iml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/d35235ca8ce5ab539b1984aea0d7c12982467e12","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/eidolon.iml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/eidolon.iml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/d35235ca8ce5ab539b1984aea0d7c12982467e12","html":"https://github.com/eidolon-ai/eidolon/blob/main/eidolon.iml"}},{"name":"examples","path":"examples","sha":"359bc16be5e6f1cb3e75f2bfd33ec8fdff9f8d99","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/examples","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/359bc16be5e6f1cb3e75f2bfd33ec8fdff9f8d99","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/359bc16be5e6f1cb3e75f2bfd33ec8fdff9f8d99","html":"https://github.com/eidolon-ai/eidolon/tree/main/examples"}},{"name":"sdk","path":"sdk","sha":"5207a0f717f0fa614ed8c120c61c75e6a65070a9","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/sdk","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/5207a0f717f0fa614ed8c120c61c75e6a65070a9","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/5207a0f717f0fa614ed8c120c61c75e6a65070a9","html":"https://github.com/eidolon-ai/eidolon/tree/main/sdk"}},{"name":"webui","path":"webui","sha":"cbddc0d24c33dad3567395f1faf1823ed2bd7f48","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/webui","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/cbddc0d24c33dad3567395f1faf1823ed2bd7f48","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/cbddc0d24c33dad3567395f1faf1823ed2bd7f48","html":"https://github.com/eidolon-ai/eidolon/tree/main/webui"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:29:20 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E4CF:2511E0:14F684:1E5D77:65D519B0
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4692'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '308'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/.github?ref=main
  response:
    content: '[{"name":"dependabot.yml","path":".github/dependabot.yml","sha":"bf113201affde08ee26bec20225472a44ff510a6","size":503,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/.github/dependabot.yml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/.github/dependabot.yml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/bf113201affde08ee26bec20225472a44ff510a6","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/.github/dependabot.yml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/.github/dependabot.yml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/bf113201affde08ee26bec20225472a44ff510a6","html":"https://github.com/eidolon-ai/eidolon/blob/main/.github/dependabot.yml"}},{"name":"workflows","path":".github/workflows","sha":"814658dc147b028faf1dabbf0638aa3e8afd82e8","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/.github/workflows?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/.github/workflows","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/814658dc147b028faf1dabbf0638aa3e8afd82e8","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/.github/workflows?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/814658dc147b028faf1dabbf0638aa3e8afd82e8","html":"https://github.com/eidolon-ai/eidolon/tree/main/.github/workflows"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:29:20 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E4CF:2511E0:14F687:1E5D79:65D519B0
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4691'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '309'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/cli?ref=main
  response:
    content: '[{"name":".DS_Store","path":"cli/.DS_Store","sha":"8cc0d1d2ce4da2c5ef8dbff704490c37ef8431cc","size":6148,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/cli/.DS_Store?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/cli/.DS_Store","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/8cc0d1d2ce4da2c5ef8dbff704490c37ef8431cc","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/cli/.DS_Store","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/cli/.DS_Store?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/8cc0d1d2ce4da2c5ef8dbff704490c37ef8431cc","html":"https://github.com/eidolon-ai/eidolon/blob/main/cli/.DS_Store"}},{"name":"README.md","path":"cli/README.md","sha":"e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/cli/README.md?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/cli/README.md","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/cli/README.md","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/cli/README.md?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","html":"https://github.com/eidolon-ai/eidolon/blob/main/cli/README.md"}},{"name":"cli.iml","path":"cli/cli.iml","sha":"f0a03691a348e5c18c62340198acf5851e3a38f5","size":685,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/cli/cli.iml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/cli/cli.iml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/f0a03691a348e5c18c62340198acf5851e3a38f5","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/cli/cli.iml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/cli/cli.iml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/f0a03691a348e5c18c62340198acf5851e3a38f5","html":"https://github.com/eidolon-ai/eidolon/blob/main/cli/cli.iml"}},{"name":"eidolon_ai_cli","path":"cli/eidolon_ai_cli","sha":"cbef9e3439f1c8cc94accf072aae0e51bbedf1ef","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/cli/eidolon_ai_cli?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/cli/eidolon_ai_cli","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/cbef9e3439f1c8cc94accf072aae0e51bbedf1ef","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/cli/eidolon_ai_cli?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/cbef9e3439f1c8cc94accf072aae0e51bbedf1ef","html":"https://github.com/eidolon-ai/eidolon/tree/main/cli/eidolon_ai_cli"}},{"name":"poetry.lock","path":"cli/poetry.lock","sha":"d58d99d9bf7234ecba8877de2e8b139268297988","size":33066,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/cli/poetry.lock?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/cli/poetry.lock","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/d58d99d9bf7234ecba8877de2e8b139268297988","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/cli/poetry.lock","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/cli/poetry.lock?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/d58d99d9bf7234ecba8877de2e8b139268297988","html":"https://github.com/eidolon-ai/eidolon/blob/main/cli/poetry.lock"}},{"name":"pyproject.toml","path":"cli/pyproject.toml","sha":"8445951f4885e0e2a5ac29e3ba01912d38047ff1","size":704,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/cli/pyproject.toml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/cli/pyproject.toml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/8445951f4885e0e2a5ac29e3ba01912d38047ff1","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/cli/pyproject.toml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/cli/pyproject.toml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/8445951f4885e0e2a5ac29e3ba01912d38047ff1","html":"https://github.com/eidolon-ai/eidolon/blob/main/cli/pyproject.toml"}},{"name":"tests","path":"cli/tests","sha":"88f131881951471c312deb15eda79bf2926c7a61","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/cli/tests?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/cli/tests","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/88f131881951471c312deb15eda79bf2926c7a61","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/cli/tests?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/88f131881951471c312deb15eda79bf2926c7a61","html":"https://github.com/eidolon-ai/eidolon/tree/main/cli/tests"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:29:20 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E4D1:25360F:14C688:1E2CE0:65D519B0
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4690'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '310'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk?ref=main
  response:
    content: '[{"name":".pylintrc","path":"sdk/.pylintrc","sha":"c512f3bfe2a09f680d124da5d43bb9bc1f40942d","size":21342,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/.pylintrc?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/.pylintrc","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/c512f3bfe2a09f680d124da5d43bb9bc1f40942d","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/.pylintrc","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/.pylintrc?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/c512f3bfe2a09f680d124da5d43bb9bc1f40942d","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/.pylintrc"}},{"name":"Dockerfile","path":"sdk/Dockerfile","sha":"22ca9e360119cfbaefc38a757606cd28a17b6cab","size":472,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/Dockerfile?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/Dockerfile","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/22ca9e360119cfbaefc38a757606cd28a17b6cab","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/Dockerfile","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/Dockerfile?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/22ca9e360119cfbaefc38a757606cd28a17b6cab","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/Dockerfile"}},{"name":"Makefile","path":"sdk/Makefile","sha":"d58ff56b85391696b6567658e9e76642246d6c21","size":687,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/Makefile?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/Makefile","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/d58ff56b85391696b6567658e9e76642246d6c21","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/Makefile","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/Makefile?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/d58ff56b85391696b6567658e9e76642246d6c21","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/Makefile"}},{"name":"README.md","path":"sdk/README.md","sha":"23faca2171a6888afae0c0a9c26290da492009ea","size":2247,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/README.md?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/README.md","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/23faca2171a6888afae0c0a9c26290da492009ea","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/README.md","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/README.md?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/23faca2171a6888afae0c0a9c26290da492009ea","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/README.md"}},{"name":"eidolon_ai_sdk","path":"sdk/eidolon_ai_sdk","sha":"ff5b2bcc12125aa95d80bb3c5ee363c523b624ba","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/sdk/eidolon_ai_sdk","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/ff5b2bcc12125aa95d80bb3c5ee363c523b624ba","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/ff5b2bcc12125aa95d80bb3c5ee363c523b624ba","html":"https://github.com/eidolon-ai/eidolon/tree/main/sdk/eidolon_ai_sdk"}},{"name":"eidos_server","path":"sdk/eidos_server","sha":"eb5e82f64781deb783cc44bccc97d5b924398b4f","size":86,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidos_server?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidos_server","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/eb5e82f64781deb783cc44bccc97d5b924398b4f","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidos_server","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidos_server?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/eb5e82f64781deb783cc44bccc97d5b924398b4f","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidos_server"}},{"name":"logging.conf","path":"sdk/logging.conf","sha":"470fb385257d3f2eb2e608022174828b8ed6e6bb","size":587,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/logging.conf?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/logging.conf","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/470fb385257d3f2eb2e608022174828b8ed6e6bb","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/logging.conf","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/logging.conf?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/470fb385257d3f2eb2e608022174828b8ed6e6bb","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/logging.conf"}},{"name":"poetry.lock","path":"sdk/poetry.lock","sha":"01fb895b36e9428ba69c7a40b7447f717a48321e","size":416146,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/poetry.lock?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/poetry.lock","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/01fb895b36e9428ba69c7a40b7447f717a48321e","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/poetry.lock","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/poetry.lock?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/01fb895b36e9428ba69c7a40b7447f717a48321e","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/poetry.lock"}},{"name":"pyproject.toml","path":"sdk/pyproject.toml","sha":"46476e6457a316b47ff79caf830fd82c2d1104d5","size":1520,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/pyproject.toml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/pyproject.toml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/46476e6457a316b47ff79caf830fd82c2d1104d5","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/pyproject.toml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/pyproject.toml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/46476e6457a316b47ff79caf830fd82c2d1104d5","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/pyproject.toml"}},{"name":"pytest.ini","path":"sdk/pytest.ini","sha":"2f4c80e307508cb30bd6635716963f88f6796738","size":29,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/pytest.ini?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/pytest.ini","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/2f4c80e307508cb30bd6635716963f88f6796738","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/pytest.ini","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/pytest.ini?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/2f4c80e307508cb30bd6635716963f88f6796738","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/pytest.ini"}},{"name":"sdk.iml","path":"sdk/sdk.iml","sha":"cef17e9b9d4cf681d3a0a009e434ad7aa937256f","size":685,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/sdk.iml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/sdk.iml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/cef17e9b9d4cf681d3a0a009e434ad7aa937256f","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/sdk.iml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/sdk.iml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/cef17e9b9d4cf681d3a0a009e434ad7aa937256f","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/sdk.iml"}},{"name":"tests","path":"sdk/tests","sha":"6026b3c82749e61ec97cee71709bc49c7c9336ec","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/sdk/tests","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/6026b3c82749e61ec97cee71709bc49c7c9336ec","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/6026b3c82749e61ec97cee71709bc49c7c9336ec","html":"https://github.com/eidolon-ai/eidolon/tree/main/sdk/tests"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:29:20 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E4D4:24F1D0:15C5B7:1F2C9E:65D519B0
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4689'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '311'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/docs?ref=main
  response:
    content: '[{"name":".gitignore","path":"docs/.gitignore","sha":"6240da8b10bfc3ab9dc4564c4169453cf143db7f","size":229,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/.gitignore?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/docs/.gitignore","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/6240da8b10bfc3ab9dc4564c4169453cf143db7f","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/docs/.gitignore","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/.gitignore?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/6240da8b10bfc3ab9dc4564c4169453cf143db7f","html":"https://github.com/eidolon-ai/eidolon/blob/main/docs/.gitignore"}},{"name":".vscode","path":"docs/.vscode","sha":"0c33c7c3c06928c95be8c68f9f15a508c844a3dc","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/.vscode?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/docs/.vscode","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/0c33c7c3c06928c95be8c68f9f15a508c844a3dc","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/.vscode?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/0c33c7c3c06928c95be8c68f9f15a508c844a3dc","html":"https://github.com/eidolon-ai/eidolon/tree/main/docs/.vscode"}},{"name":"README.md","path":"docs/README.md","sha":"b51abaabcd439b9f24bb332de9e368717bbfc2a2","size":2466,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/README.md?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/docs/README.md","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/b51abaabcd439b9f24bb332de9e368717bbfc2a2","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/docs/README.md","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/README.md?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/b51abaabcd439b9f24bb332de9e368717bbfc2a2","html":"https://github.com/eidolon-ai/eidolon/blob/main/docs/README.md"}},{"name":"astro.config.mjs","path":"docs/astro.config.mjs","sha":"b6e8456702e4ccc77c0845f27c974381d9c11258","size":1827,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/astro.config.mjs?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/docs/astro.config.mjs","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/b6e8456702e4ccc77c0845f27c974381d9c11258","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/docs/astro.config.mjs","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/astro.config.mjs?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/b6e8456702e4ccc77c0845f27c974381d9c11258","html":"https://github.com/eidolon-ai/eidolon/blob/main/docs/astro.config.mjs"}},{"name":"package-lock.json","path":"docs/package-lock.json","sha":"54cae8fcbe73285a9198892dd546308b8af63277","size":312899,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/package-lock.json?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/docs/package-lock.json","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/54cae8fcbe73285a9198892dd546308b8af63277","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/docs/package-lock.json","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/package-lock.json?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/54cae8fcbe73285a9198892dd546308b8af63277","html":"https://github.com/eidolon-ai/eidolon/blob/main/docs/package-lock.json"}},{"name":"package.json","path":"docs/package.json","sha":"d6fef9e19403726372b25914896e85de2e01b311","size":396,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/package.json?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/docs/package.json","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/d6fef9e19403726372b25914896e85de2e01b311","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/docs/package.json","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/package.json?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/d6fef9e19403726372b25914896e85de2e01b311","html":"https://github.com/eidolon-ai/eidolon/blob/main/docs/package.json"}},{"name":"public","path":"docs/public","sha":"07c05f1012124dc6fcfa11ca440196bb32e1efe2","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/public?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/docs/public","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/07c05f1012124dc6fcfa11ca440196bb32e1efe2","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/public?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/07c05f1012124dc6fcfa11ca440196bb32e1efe2","html":"https://github.com/eidolon-ai/eidolon/tree/main/docs/public"}},{"name":"src","path":"docs/src","sha":"cc00789fc494dc2abe7ebe63190b054c79b7519d","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/docs/src","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/cc00789fc494dc2abe7ebe63190b054c79b7519d","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/cc00789fc494dc2abe7ebe63190b054c79b7519d","html":"https://github.com/eidolon-ai/eidolon/tree/main/docs/src"}},{"name":"tsconfig.json","path":"docs/tsconfig.json","sha":"77da9dd00982b7abcda3abef70ffba6a4078cf37","size":41,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/tsconfig.json?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/docs/tsconfig.json","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/77da9dd00982b7abcda3abef70ffba6a4078cf37","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/docs/tsconfig.json","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/tsconfig.json?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/77da9dd00982b7abcda3abef70ffba6a4078cf37","html":"https://github.com/eidolon-ai/eidolon/blob/main/docs/tsconfig.json"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:29:20 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E4D2:25382C:1531D9:1E9832:65D519B0
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4688'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '312'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/.idea?ref=main
  response:
    content: '[{"name":".gitignore","path":".idea/.gitignore","sha":"a7c382ed390c36f2fc3f162f89fd69a696aa4665","size":14,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/.idea/.gitignore?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/.idea/.gitignore","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/a7c382ed390c36f2fc3f162f89fd69a696aa4665","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/.idea/.gitignore","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/.idea/.gitignore?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/a7c382ed390c36f2fc3f162f89fd69a696aa4665","html":"https://github.com/eidolon-ai/eidolon/blob/main/.idea/.gitignore"}},{"name":"dataSources.xml","path":".idea/dataSources.xml","sha":"e2f17be487adaebb6b8eb5fd3ba7fb74ced16de8","size":519,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/.idea/dataSources.xml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/.idea/dataSources.xml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e2f17be487adaebb6b8eb5fd3ba7fb74ced16de8","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/.idea/dataSources.xml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/.idea/dataSources.xml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e2f17be487adaebb6b8eb5fd3ba7fb74ced16de8","html":"https://github.com/eidolon-ai/eidolon/blob/main/.idea/dataSources.xml"}},{"name":"eidolon.iml","path":".idea/eidolon.iml","sha":"7cd1e7b163b48e98514ca5b0f00ee56ed0885343","size":528,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/.idea/eidolon.iml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/.idea/eidolon.iml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/7cd1e7b163b48e98514ca5b0f00ee56ed0885343","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/.idea/eidolon.iml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/.idea/eidolon.iml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/7cd1e7b163b48e98514ca5b0f00ee56ed0885343","html":"https://github.com/eidolon-ai/eidolon/blob/main/.idea/eidolon.iml"}},{"name":"inspectionProfiles","path":".idea/inspectionProfiles","sha":"b720fd4a48e839f5b989853cf379ea1639db199e","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/.idea/inspectionProfiles?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/.idea/inspectionProfiles","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/b720fd4a48e839f5b989853cf379ea1639db199e","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/.idea/inspectionProfiles?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/b720fd4a48e839f5b989853cf379ea1639db199e","html":"https://github.com/eidolon-ai/eidolon/tree/main/.idea/inspectionProfiles"}},{"name":"misc.xml","path":".idea/misc.xml","sha":"32978c10c18507b24c427a9d05f80584d8b1d12d","size":396,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/.idea/misc.xml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/.idea/misc.xml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/32978c10c18507b24c427a9d05f80584d8b1d12d","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/.idea/misc.xml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/.idea/misc.xml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/32978c10c18507b24c427a9d05f80584d8b1d12d","html":"https://github.com/eidolon-ai/eidolon/blob/main/.idea/misc.xml"}},{"name":"modules.xml","path":".idea/modules.xml","sha":"6a998d59b87192a2c7621256e309e5b9193eaee0","size":565,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/.idea/modules.xml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/.idea/modules.xml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/6a998d59b87192a2c7621256e309e5b9193eaee0","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/.idea/modules.xml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/.idea/modules.xml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/6a998d59b87192a2c7621256e309e5b9193eaee0","html":"https://github.com/eidolon-ai/eidolon/blob/main/.idea/modules.xml"}},{"name":"runConfigurations","path":".idea/runConfigurations","sha":"f75b9f5378199884a97decef774cc62fc8e67240","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/.idea/runConfigurations?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/.idea/runConfigurations","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/f75b9f5378199884a97decef774cc62fc8e67240","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/.idea/runConfigurations?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/f75b9f5378199884a97decef774cc62fc8e67240","html":"https://github.com/eidolon-ai/eidolon/tree/main/.idea/runConfigurations"}},{"name":"vcs.xml","path":".idea/vcs.xml","sha":"35eb1ddfbbc029bcab630581847471d7f238ec53","size":167,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/.idea/vcs.xml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/.idea/vcs.xml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/35eb1ddfbbc029bcab630581847471d7f238ec53","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/.idea/vcs.xml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/.idea/vcs.xml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/35eb1ddfbbc029bcab630581847471d7f238ec53","html":"https://github.com/eidolon-ai/eidolon/blob/main/.idea/vcs.xml"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:29:20 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E4D0:260C59:138153:1C45D3:65D519B0
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4687'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '313'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/examples?ref=main
  response:
    content: '[{"name":".pylintrc","path":"examples/.pylintrc","sha":"c512f3bfe2a09f680d124da5d43bb9bc1f40942d","size":21342,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/.pylintrc?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/.pylintrc","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/c512f3bfe2a09f680d124da5d43bb9bc1f40942d","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/.pylintrc","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/.pylintrc?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/c512f3bfe2a09f680d124da5d43bb9bc1f40942d","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/.pylintrc"}},{"name":"Dockerfile.code_search","path":"examples/Dockerfile.code_search","sha":"af7452e89d0a5db85aab55c78eb4ed76c232dfc3","size":283,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/Dockerfile.code_search?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/Dockerfile.code_search","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/af7452e89d0a5db85aab55c78eb4ed76c232dfc3","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/Dockerfile.code_search","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/Dockerfile.code_search?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/af7452e89d0a5db85aab55c78eb4ed76c232dfc3","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/Dockerfile.code_search"}},{"name":"Makefile","path":"examples/Makefile","sha":"19471b570aea103db9f889913fc37e0501163767","size":714,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/Makefile?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/Makefile","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/19471b570aea103db9f889913fc37e0501163767","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/Makefile","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/Makefile?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/19471b570aea103db9f889913fc37e0501163767","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/Makefile"}},{"name":"README.md","path":"examples/README.md","sha":"e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/README.md?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/README.md","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/README.md","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/README.md?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/README.md"}},{"name":"eidolon_examples","path":"examples/eidolon_examples","sha":"fd9d746910f1c6ee0b07c643e87e9ea3eb645ca6","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/examples/eidolon_examples","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/fd9d746910f1c6ee0b07c643e87e9ea3eb645ca6","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/fd9d746910f1c6ee0b07c643e87e9ea3eb645ca6","html":"https://github.com/eidolon-ai/eidolon/tree/main/examples/eidolon_examples"}},{"name":"examples.iml","path":"examples/examples.iml","sha":"071bba9f942ded630fdfd720796975d4a41eb37f","size":517,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/examples.iml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/examples.iml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/071bba9f942ded630fdfd720796975d4a41eb37f","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/examples.iml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/examples.iml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/071bba9f942ded630fdfd720796975d4a41eb37f","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/examples.iml"}},{"name":"poetry.lock","path":"examples/poetry.lock","sha":"b13b9a5e264d083ffafb04854609818903854225","size":421135,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/poetry.lock?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/poetry.lock","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/b13b9a5e264d083ffafb04854609818903854225","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/poetry.lock","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/poetry.lock?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/b13b9a5e264d083ffafb04854609818903854225","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/poetry.lock"}},{"name":"pyproject.toml","path":"examples/pyproject.toml","sha":"75b22f6432cd6c6c57e8b118830074f94de01d92","size":681,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/pyproject.toml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/pyproject.toml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/75b22f6432cd6c6c57e8b118830074f94de01d92","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/pyproject.toml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/pyproject.toml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/75b22f6432cd6c6c57e8b118830074f94de01d92","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/pyproject.toml"}},{"name":"tests","path":"examples/tests","sha":"eb8787edb39b1f058f129cd5ab509597f35ef647","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/tests?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/examples/tests","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/eb8787edb39b1f058f129cd5ab509597f35ef647","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/tests?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/eb8787edb39b1f058f129cd5ab509597f35ef647","html":"https://github.com/eidolon-ai/eidolon/tree/main/examples/tests"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:29:20 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E4D3:257FF1:161760:1F7DDC:65D519B0
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4686'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '314'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/webui?ref=main
  response:
    content: '[{"name":".eslintrc.json","path":"webui/.eslintrc.json","sha":"07a4090464f92ca6c2815f94673d68e9f76479ac","size":552,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/.eslintrc.json?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/webui/.eslintrc.json","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/07a4090464f92ca6c2815f94673d68e9f76479ac","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/webui/.eslintrc.json","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/.eslintrc.json?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/07a4090464f92ca6c2815f94673d68e9f76479ac","html":"https://github.com/eidolon-ai/eidolon/blob/main/webui/.eslintrc.json"}},{"name":"README.md","path":"webui/README.md","sha":"4897b47522f43a7e36a502edd968361824bf4378","size":1538,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/README.md?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/webui/README.md","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/4897b47522f43a7e36a502edd968361824bf4378","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/webui/README.md","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/README.md?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/4897b47522f43a7e36a502edd968361824bf4378","html":"https://github.com/eidolon-ai/eidolon/blob/main/webui/README.md"}},{"name":"app","path":"webui/app","sha":"be4beee7cb6d38c135074a18ad6df14b1d0b5cb2","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/app?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/webui/app","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/be4beee7cb6d38c135074a18ad6df14b1d0b5cb2","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/app?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/be4beee7cb6d38c135074a18ad6df14b1d0b5cb2","html":"https://github.com/eidolon-ai/eidolon/tree/main/webui/app"}},{"name":"assets","path":"webui/assets","sha":"b125010bd41c33a655bdb66ec4de2c964be630dd","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/assets?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/webui/assets","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/b125010bd41c33a655bdb66ec4de2c964be630dd","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/assets?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/b125010bd41c33a655bdb66ec4de2c964be630dd","html":"https://github.com/eidolon-ai/eidolon/tree/main/webui/assets"}},{"name":"components","path":"webui/components","sha":"a4a80e376ad8afbb656f657990efb0b6daf4886b","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/components?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/webui/components","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/a4a80e376ad8afbb656f657990efb0b6daf4886b","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/components?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/a4a80e376ad8afbb656f657990efb0b6daf4886b","html":"https://github.com/eidolon-ai/eidolon/tree/main/webui/components"}},{"name":"jest.config.ts","path":"webui/jest.config.ts","sha":"bc455217aa0dd13e044e1a967bc700fafe775069","size":828,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/jest.config.ts?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/webui/jest.config.ts","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/bc455217aa0dd13e044e1a967bc700fafe775069","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/webui/jest.config.ts","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/jest.config.ts?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/bc455217aa0dd13e044e1a967bc700fafe775069","html":"https://github.com/eidolon-ai/eidolon/blob/main/webui/jest.config.ts"}},{"name":"jest.setup.ts","path":"webui/jest.setup.ts","sha":"46888661767b0c944948b5545d2d5acf160bb7ee","size":223,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/jest.setup.ts?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/webui/jest.setup.ts","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/46888661767b0c944948b5545d2d5acf160bb7ee","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/webui/jest.setup.ts","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/jest.setup.ts?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/46888661767b0c944948b5545d2d5acf160bb7ee","html":"https://github.com/eidolon-ai/eidolon/blob/main/webui/jest.setup.ts"}},{"name":"lib","path":"webui/lib","sha":"1c4470ac211e7db33dadac4ca6fa0ea7291debd3","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/lib?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/webui/lib","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/1c4470ac211e7db33dadac4ca6fa0ea7291debd3","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/lib?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/1c4470ac211e7db33dadac4ca6fa0ea7291debd3","html":"https://github.com/eidolon-ai/eidolon/tree/main/webui/lib"}},{"name":"next-env.d.ts","path":"webui/next-env.d.ts","sha":"4f11a03dc6cc37f2b5105c08f2e7b24c603ab2f4","size":201,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/next-env.d.ts?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/webui/next-env.d.ts","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/4f11a03dc6cc37f2b5105c08f2e7b24c603ab2f4","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/webui/next-env.d.ts","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/next-env.d.ts?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/4f11a03dc6cc37f2b5105c08f2e7b24c603ab2f4","html":"https://github.com/eidolon-ai/eidolon/blob/main/webui/next-env.d.ts"}},{"name":"next.config.js","path":"webui/next.config.js","sha":"72ac83d8d3bd1315272f07d67eb9561e747ac4f7","size":447,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/next.config.js?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/webui/next.config.js","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/72ac83d8d3bd1315272f07d67eb9561e747ac4f7","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/webui/next.config.js","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/next.config.js?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/72ac83d8d3bd1315272f07d67eb9561e747ac4f7","html":"https://github.com/eidolon-ai/eidolon/blob/main/webui/next.config.js"}},{"name":"package.json","path":"webui/package.json","sha":"bef94428e29bbd9f6aaef3b2b03a283b3bc9493c","size":2750,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/package.json?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/webui/package.json","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/bef94428e29bbd9f6aaef3b2b03a283b3bc9493c","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/webui/package.json","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/package.json?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/bef94428e29bbd9f6aaef3b2b03a283b3bc9493c","html":"https://github.com/eidolon-ai/eidolon/blob/main/webui/package.json"}},{"name":"pnpm-lock.yaml","path":"webui/pnpm-lock.yaml","sha":"89d59693397cc45790ee3efc70afe34784a74a31","size":260851,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/pnpm-lock.yaml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/webui/pnpm-lock.yaml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/89d59693397cc45790ee3efc70afe34784a74a31","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/webui/pnpm-lock.yaml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/pnpm-lock.yaml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/89d59693397cc45790ee3efc70afe34784a74a31","html":"https://github.com/eidolon-ai/eidolon/blob/main/webui/pnpm-lock.yaml"}},{"name":"postcss.config.js","path":"webui/postcss.config.js","sha":"fef1b2256d61e21330bc8de1cb6978cfac54a9a9","size":94,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/postcss.config.js?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/webui/postcss.config.js","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/fef1b2256d61e21330bc8de1cb6978cfac54a9a9","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/webui/postcss.config.js","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/postcss.config.js?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/fef1b2256d61e21330bc8de1cb6978cfac54a9a9","html":"https://github.com/eidolon-ai/eidolon/blob/main/webui/postcss.config.js"}},{"name":"prettier.config.cjs","path":"webui/prettier.config.cjs","sha":"687e1053d63ae700d2a9a085baacad928d6fe481","size":928,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/prettier.config.cjs?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/webui/prettier.config.cjs","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/687e1053d63ae700d2a9a085baacad928d6fe481","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/webui/prettier.config.cjs","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/prettier.config.cjs?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/687e1053d63ae700d2a9a085baacad928d6fe481","html":"https://github.com/eidolon-ai/eidolon/blob/main/webui/prettier.config.cjs"}},{"name":"public","path":"webui/public","sha":"d8b90f336ce1e236463865833924563b2526c667","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/public?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/webui/public","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/d8b90f336ce1e236463865833924563b2526c667","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/public?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/d8b90f336ce1e236463865833924563b2526c667","html":"https://github.com/eidolon-ai/eidolon/tree/main/webui/public"}},{"name":"tailwind.config.js","path":"webui/tailwind.config.js","sha":"13d4e6aefd4369e1d6c604a8b4e669a992d8c6af","size":3740,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/tailwind.config.js?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/webui/tailwind.config.js","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/13d4e6aefd4369e1d6c604a8b4e669a992d8c6af","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/webui/tailwind.config.js","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/tailwind.config.js?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/13d4e6aefd4369e1d6c604a8b4e669a992d8c6af","html":"https://github.com/eidolon-ai/eidolon/blob/main/webui/tailwind.config.js"}},{"name":"template.env","path":"webui/template.env","sha":"55456d9f70a068b015b0d22de0967c5adf92b029","size":1799,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/template.env?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/webui/template.env","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/55456d9f70a068b015b0d22de0967c5adf92b029","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/webui/template.env","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/template.env?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/55456d9f70a068b015b0d22de0967c5adf92b029","html":"https://github.com/eidolon-ai/eidolon/blob/main/webui/template.env"}},{"name":"tsconfig.json","path":"webui/tsconfig.json","sha":"d357c3e7f7e296734ecb37f842630e2be7a9190d","size":797,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/tsconfig.json?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/webui/tsconfig.json","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/d357c3e7f7e296734ecb37f842630e2be7a9190d","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/webui/tsconfig.json","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/tsconfig.json?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/d357c3e7f7e296734ecb37f842630e2be7a9190d","html":"https://github.com/eidolon-ai/eidolon/blob/main/webui/tsconfig.json"}},{"name":"tsconfig.test.json","path":"webui/tsconfig.test.json","sha":"6883588123d20457e0812faac5c592cd8213faa9","size":947,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/tsconfig.test.json?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/webui/tsconfig.test.json","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/6883588123d20457e0812faac5c592cd8213faa9","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/webui/tsconfig.test.json","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/tsconfig.test.json?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/6883588123d20457e0812faac5c592cd8213faa9","html":"https://github.com/eidolon-ai/eidolon/blob/main/webui/tsconfig.test.json"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:29:20 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E4D5:25923F:1DAD4F:2713B9:65D519B0
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4685'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '315'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/.github/workflows?ref=main
  response:
    content: '[{"name":"docs.yml","path":".github/workflows/docs.yml","sha":"f1dd1dca7ced1440db8daaa7f82742bb1feb9481","size":1379,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/.github/workflows/docs.yml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/.github/workflows/docs.yml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/f1dd1dca7ced1440db8daaa7f82742bb1feb9481","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/.github/workflows/docs.yml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/.github/workflows/docs.yml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/f1dd1dca7ced1440db8daaa7f82742bb1feb9481","html":"https://github.com/eidolon-ai/eidolon/blob/main/.github/workflows/docs.yml"}},{"name":"publish_docker.yml","path":".github/workflows/publish_docker.yml","sha":"edca961ecb7a952ee9b83807e14adba4f990c8ff","size":756,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/.github/workflows/publish_docker.yml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/.github/workflows/publish_docker.yml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/edca961ecb7a952ee9b83807e14adba4f990c8ff","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/.github/workflows/publish_docker.yml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/.github/workflows/publish_docker.yml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/edca961ecb7a952ee9b83807e14adba4f990c8ff","html":"https://github.com/eidolon-ai/eidolon/blob/main/.github/workflows/publish_docker.yml"}},{"name":"publish_sdk.yml","path":".github/workflows/publish_sdk.yml","sha":"22b86d93c7336fa2bcdadf0333a56d729e374412","size":687,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/.github/workflows/publish_sdk.yml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/.github/workflows/publish_sdk.yml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/22b86d93c7336fa2bcdadf0333a56d729e374412","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/.github/workflows/publish_sdk.yml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/.github/workflows/publish_sdk.yml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/22b86d93c7336fa2bcdadf0333a56d729e374412","html":"https://github.com/eidolon-ai/eidolon/blob/main/.github/workflows/publish_sdk.yml"}},{"name":"test.yml","path":".github/workflows/test.yml","sha":"a9cb93e693cf010f6b70b80daf06c6619bd7d8cb","size":3438,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/.github/workflows/test.yml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/.github/workflows/test.yml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/a9cb93e693cf010f6b70b80daf06c6619bd7d8cb","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/.github/workflows/test.yml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/.github/workflows/test.yml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/a9cb93e693cf010f6b70b80daf06c6619bd7d8cb","html":"https://github.com/eidolon-ai/eidolon/blob/main/.github/workflows/test.yml"}},{"name":"version_sdk.yml","path":".github/workflows/version_sdk.yml","sha":"4ae82acb56058ee6a6a6ea3f32ae027ec06e06cd","size":705,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/.github/workflows/version_sdk.yml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/.github/workflows/version_sdk.yml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/4ae82acb56058ee6a6a6ea3f32ae027ec06e06cd","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/.github/workflows/version_sdk.yml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/.github/workflows/version_sdk.yml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/4ae82acb56058ee6a6a6ea3f32ae027ec06e06cd","html":"https://github.com/eidolon-ai/eidolon/blob/main/.github/workflows/version_sdk.yml"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:29:20 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E4CF:2511E0:14F68A:1E5D7C:65D519B0
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4684'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '316'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/cli/eidolon_ai_cli?ref=main
  response:
    content: '[{"name":"StreamProcessor.py","path":"cli/eidolon_ai_cli/StreamProcessor.py","sha":"5784ea2a9ec662798a8a622ecca81666fa66ce5f","size":4719,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/cli/eidolon_ai_cli/StreamProcessor.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/cli/eidolon_ai_cli/StreamProcessor.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/5784ea2a9ec662798a8a622ecca81666fa66ce5f","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/cli/eidolon_ai_cli/StreamProcessor.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/cli/eidolon_ai_cli/StreamProcessor.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/5784ea2a9ec662798a8a622ecca81666fa66ce5f","html":"https://github.com/eidolon-ai/eidolon/blob/main/cli/eidolon_ai_cli/StreamProcessor.py"}},{"name":"__init__.py","path":"cli/eidolon_ai_cli/__init__.py","sha":"e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/cli/eidolon_ai_cli/__init__.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/cli/eidolon_ai_cli/__init__.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/cli/eidolon_ai_cli/__init__.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/cli/eidolon_ai_cli/__init__.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","html":"https://github.com/eidolon-ai/eidolon/blob/main/cli/eidolon_ai_cli/__init__.py"}},{"name":"auth_web_server.py","path":"cli/eidolon_ai_cli/auth_web_server.py","sha":"dabdad5523aa0351492e833dbc938ec51be87f49","size":1531,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/cli/eidolon_ai_cli/auth_web_server.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/cli/eidolon_ai_cli/auth_web_server.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/dabdad5523aa0351492e833dbc938ec51be87f49","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/cli/eidolon_ai_cli/auth_web_server.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/cli/eidolon_ai_cli/auth_web_server.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/dabdad5523aa0351492e833dbc938ec51be87f49","html":"https://github.com/eidolon-ai/eidolon/blob/main/cli/eidolon_ai_cli/auth_web_server.py"}},{"name":"client.py","path":"cli/eidolon_ai_cli/client.py","sha":"80ad992f96c769d3c1440a2abf89528657da3e6a","size":8860,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/cli/eidolon_ai_cli/client.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/cli/eidolon_ai_cli/client.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/80ad992f96c769d3c1440a2abf89528657da3e6a","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/cli/eidolon_ai_cli/client.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/cli/eidolon_ai_cli/client.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/80ad992f96c769d3c1440a2abf89528657da3e6a","html":"https://github.com/eidolon-ai/eidolon/blob/main/cli/eidolon_ai_cli/client.py"}},{"name":"live_console.py","path":"cli/eidolon_ai_cli/live_console.py","sha":"ed69e78d7faef0f9f7c799bd6a750d0bde354883","size":4008,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/cli/eidolon_ai_cli/live_console.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/cli/eidolon_ai_cli/live_console.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/ed69e78d7faef0f9f7c799bd6a750d0bde354883","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/cli/eidolon_ai_cli/live_console.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/cli/eidolon_ai_cli/live_console.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/ed69e78d7faef0f9f7c799bd6a750d0bde354883","html":"https://github.com/eidolon-ai/eidolon/blob/main/cli/eidolon_ai_cli/live_console.py"}},{"name":"main.py","path":"cli/eidolon_ai_cli/main.py","sha":"3763a0ace275c1740216648d3ae9dfd096f51ca2","size":2964,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/cli/eidolon_ai_cli/main.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/cli/eidolon_ai_cli/main.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/3763a0ace275c1740216648d3ae9dfd096f51ca2","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/cli/eidolon_ai_cli/main.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/cli/eidolon_ai_cli/main.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/3763a0ace275c1740216648d3ae9dfd096f51ca2","html":"https://github.com/eidolon-ai/eidolon/blob/main/cli/eidolon_ai_cli/main.py"}},{"name":"markdown.py","path":"cli/eidolon_ai_cli/markdown.py","sha":"c256021352af3b8f5467c6b8da33a5d8d7feb224","size":23673,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/cli/eidolon_ai_cli/markdown.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/cli/eidolon_ai_cli/markdown.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/c256021352af3b8f5467c6b8da33a5d8d7feb224","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/cli/eidolon_ai_cli/markdown.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/cli/eidolon_ai_cli/markdown.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/c256021352af3b8f5467c6b8da33a5d8d7feb224","html":"https://github.com/eidolon-ai/eidolon/blob/main/cli/eidolon_ai_cli/markdown.py"}},{"name":"schema.py","path":"cli/eidolon_ai_cli/schema.py","sha":"1b1b9cca0db4cd64d4045d9080cb3fc75bd52a9a","size":12296,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/cli/eidolon_ai_cli/schema.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/cli/eidolon_ai_cli/schema.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/1b1b9cca0db4cd64d4045d9080cb3fc75bd52a9a","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/cli/eidolon_ai_cli/schema.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/cli/eidolon_ai_cli/schema.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/1b1b9cca0db4cd64d4045d9080cb3fc75bd52a9a","html":"https://github.com/eidolon-ai/eidolon/blob/main/cli/eidolon_ai_cli/schema.py"}},{"name":"security.py","path":"cli/eidolon_ai_cli/security.py","sha":"11015ec30cad57ae40dd30a8c7b77251ec8e7cc8","size":5188,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/cli/eidolon_ai_cli/security.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/cli/eidolon_ai_cli/security.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/11015ec30cad57ae40dd30a8c7b77251ec8e7cc8","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/cli/eidolon_ai_cli/security.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/cli/eidolon_ai_cli/security.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/11015ec30cad57ae40dd30a8c7b77251ec8e7cc8","html":"https://github.com/eidolon-ai/eidolon/blob/main/cli/eidolon_ai_cli/security.py"}},{"name":"terminal2.py","path":"cli/eidolon_ai_cli/terminal2.py","sha":"36324c7fb9b69e96aa25df6ba99f2bec8a409ed4","size":9278,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/cli/eidolon_ai_cli/terminal2.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/cli/eidolon_ai_cli/terminal2.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/36324c7fb9b69e96aa25df6ba99f2bec8a409ed4","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/cli/eidolon_ai_cli/terminal2.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/cli/eidolon_ai_cli/terminal2.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/36324c7fb9b69e96aa25df6ba99f2bec8a409ed4","html":"https://github.com/eidolon-ai/eidolon/blob/main/cli/eidolon_ai_cli/terminal2.py"}},{"name":"util.py","path":"cli/eidolon_ai_cli/util.py","sha":"d82f35c68fde39162e0e4bdd4cb6b65fa154075b","size":2669,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/cli/eidolon_ai_cli/util.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/cli/eidolon_ai_cli/util.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/d82f35c68fde39162e0e4bdd4cb6b65fa154075b","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/cli/eidolon_ai_cli/util.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/cli/eidolon_ai_cli/util.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/d82f35c68fde39162e0e4bdd4cb6b65fa154075b","html":"https://github.com/eidolon-ai/eidolon/blob/main/cli/eidolon_ai_cli/util.py"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:29:20 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E4D1:25360F:14C68A:1E2CE5:65D519B0
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4683'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '317'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk?ref=main
  response:
    content: '[{"name":"__init__.py","path":"sdk/eidolon_ai_sdk/__init__.py","sha":"e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/__init__.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/__init__.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/__init__.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/__init__.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/__init__.py"}},{"name":"agent","path":"sdk/eidolon_ai_sdk/agent","sha":"92155b89509f1fb5306d068507adc6369f5ac8ad","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/sdk/eidolon_ai_sdk/agent","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/92155b89509f1fb5306d068507adc6369f5ac8ad","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/92155b89509f1fb5306d068507adc6369f5ac8ad","html":"https://github.com/eidolon-ai/eidolon/tree/main/sdk/eidolon_ai_sdk/agent"}},{"name":"agent_os.py","path":"sdk/eidolon_ai_sdk/agent_os.py","sha":"f1188e1d46bbd907424753a815ba2470ed864a1f","size":4316,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent_os.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent_os.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/f1188e1d46bbd907424753a815ba2470ed864a1f","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/agent_os.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent_os.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/f1188e1d46bbd907424753a815ba2470ed864a1f","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent_os.py"}},{"name":"bin","path":"sdk/eidolon_ai_sdk/bin","sha":"d9ec668deb54ede8721c414c22e1b1d45012c6b0","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/bin?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/sdk/eidolon_ai_sdk/bin","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/d9ec668deb54ede8721c414c22e1b1d45012c6b0","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/bin?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/d9ec668deb54ede8721c414c22e1b1d45012c6b0","html":"https://github.com/eidolon-ai/eidolon/tree/main/sdk/eidolon_ai_sdk/bin"}},{"name":"builtins","path":"sdk/eidolon_ai_sdk/builtins","sha":"c55b8ed99aac05633caed033bed80b5075d8a8f3","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/builtins?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/sdk/eidolon_ai_sdk/builtins","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/c55b8ed99aac05633caed033bed80b5075d8a8f3","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/builtins?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/c55b8ed99aac05633caed033bed80b5075d8a8f3","html":"https://github.com/eidolon-ai/eidolon/tree/main/sdk/eidolon_ai_sdk/builtins"}},{"name":"cpu","path":"sdk/eidolon_ai_sdk/cpu","sha":"5b21e32c978cdbbdbbf63ea97be809d59c592087","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/cpu?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/sdk/eidolon_ai_sdk/cpu","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/5b21e32c978cdbbdbbf63ea97be809d59c592087","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/cpu?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/5b21e32c978cdbbdbbf63ea97be809d59c592087","html":"https://github.com/eidolon-ai/eidolon/tree/main/sdk/eidolon_ai_sdk/cpu"}},{"name":"io","path":"sdk/eidolon_ai_sdk/io","sha":"038c182bd7121514546d09b19fccabd4e277a744","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/io?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/sdk/eidolon_ai_sdk/io","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/038c182bd7121514546d09b19fccabd4e277a744","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/io?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/038c182bd7121514546d09b19fccabd4e277a744","html":"https://github.com/eidolon-ai/eidolon/tree/main/sdk/eidolon_ai_sdk/io"}},{"name":"memory","path":"sdk/eidolon_ai_sdk/memory","sha":"4cee40d502d643951aab9b7ff787bbedff46c0ec","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/memory?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/sdk/eidolon_ai_sdk/memory","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/4cee40d502d643951aab9b7ff787bbedff46c0ec","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/memory?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/4cee40d502d643951aab9b7ff787bbedff46c0ec","html":"https://github.com/eidolon-ai/eidolon/tree/main/sdk/eidolon_ai_sdk/memory"}},{"name":"security","path":"sdk/eidolon_ai_sdk/security","sha":"2e294df973b3224c7a6426140e923c025f00b13c","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/security?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/sdk/eidolon_ai_sdk/security","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/2e294df973b3224c7a6426140e923c025f00b13c","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/security?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/2e294df973b3224c7a6426140e923c025f00b13c","html":"https://github.com/eidolon-ai/eidolon/tree/main/sdk/eidolon_ai_sdk/security"}},{"name":"system","path":"sdk/eidolon_ai_sdk/system","sha":"7790493743b3f54be55d1cd2feca331cd2c6aab1","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/system?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/sdk/eidolon_ai_sdk/system","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/7790493743b3f54be55d1cd2feca331cd2c6aab1","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/system?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/7790493743b3f54be55d1cd2feca331cd2c6aab1","html":"https://github.com/eidolon-ai/eidolon/tree/main/sdk/eidolon_ai_sdk/system"}},{"name":"util","path":"sdk/eidolon_ai_sdk/util","sha":"1f403676c6a53342829e1f4582a04286c7c8165b","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/util?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/sdk/eidolon_ai_sdk/util","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/1f403676c6a53342829e1f4582a04286c7c8165b","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/util?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/1f403676c6a53342829e1f4582a04286c7c8165b","html":"https://github.com/eidolon-ai/eidolon/tree/main/sdk/eidolon_ai_sdk/util"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:29:21 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E4D4:24F1D0:15C5BB:1F2CA2:65D519B0
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4682'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '318'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests?ref=main
  response:
    content: '[{"name":"__init__.py","path":"sdk/tests/__init__.py","sha":"e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/__init__.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/__init__.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/__init__.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/__init__.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/__init__.py"}},{"name":"agent","path":"sdk/tests/agent","sha":"2d23fed62f35dbf40a67d894349c35571cf0a952","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/agent?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/sdk/tests/agent","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/2d23fed62f35dbf40a67d894349c35571cf0a952","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/agent?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/2d23fed62f35dbf40a67d894349c35571cf0a952","html":"https://github.com/eidolon-ai/eidolon/tree/main/sdk/tests/agent"}},{"name":"conftest.py","path":"sdk/tests/conftest.py","sha":"d3cc014532d5bc85a92adc586c16a621fd58e112","size":12065,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/conftest.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/conftest.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/d3cc014532d5bc85a92adc586c16a621fd58e112","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/conftest.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/conftest.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/d3cc014532d5bc85a92adc586c16a621fd58e112","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/conftest.py"}},{"name":"cpu","path":"sdk/tests/cpu","sha":"1820090a3a9c5df18879bdf11018d99a16f2c088","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/cpu?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/sdk/tests/cpu","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/1820090a3a9c5df18879bdf11018d99a16f2c088","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/cpu?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/1820090a3a9c5df18879bdf11018d99a16f2c088","html":"https://github.com/eidolon-ai/eidolon/tree/main/sdk/tests/cpu"}},{"name":"images","path":"sdk/tests/images","sha":"e1574fb7e93ec022ca1d71379e4a83bea512e62c","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/images?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/sdk/tests/images","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/e1574fb7e93ec022ca1d71379e4a83bea512e62c","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/images?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/e1574fb7e93ec022ca1d71379e4a83bea512e62c","html":"https://github.com/eidolon-ai/eidolon/tree/main/sdk/tests/images"}},{"name":"impl","path":"sdk/tests/impl","sha":"d13bd29f9c0f0b0e15e1816dd50024b90a9e7aba","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/impl?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/sdk/tests/impl","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/d13bd29f9c0f0b0e15e1816dd50024b90a9e7aba","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/impl?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/d13bd29f9c0f0b0e15e1816dd50024b90a9e7aba","html":"https://github.com/eidolon-ai/eidolon/tree/main/sdk/tests/impl"}},{"name":"system","path":"sdk/tests/system","sha":"7f2688cb21f7d668d5c6ec0e24e7f7139dbb82b6","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/system?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/sdk/tests/system","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/7f2688cb21f7d668d5c6ec0e24e7f7139dbb82b6","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/system?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/7f2688cb21f7d668d5c6ec0e24e7f7139dbb82b6","html":"https://github.com/eidolon-ai/eidolon/tree/main/sdk/tests/system"}},{"name":"test_events.py","path":"sdk/tests/test_events.py","sha":"5419ee6b388499f622c0ac4b2c2b9d14a6e755c1","size":150,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/test_events.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/test_events.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/5419ee6b388499f622c0ac4b2c2b9d14a6e755c1","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/test_events.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/test_events.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/5419ee6b388499f622c0ac4b2c2b9d14a6e755c1","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/test_events.py"}},{"name":"test_replay.py","path":"sdk/tests/test_replay.py","sha":"0334b5b41494d1fb8fac63feec93ebf6af099d47","size":4786,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/test_replay.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/test_replay.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/0334b5b41494d1fb8fac63feec93ebf6af099d47","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/test_replay.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/test_replay.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/0334b5b41494d1fb8fac63feec93ebf6af099d47","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/test_replay.py"}},{"name":"test_request_context.py","path":"sdk/tests/test_request_context.py","sha":"e251c5b5215122612c1e19fb8fa61035316ba7a5","size":514,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/test_request_context.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/test_request_context.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e251c5b5215122612c1e19fb8fa61035316ba7a5","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/test_request_context.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/test_request_context.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e251c5b5215122612c1e19fb8fa61035316ba7a5","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/test_request_context.py"}},{"name":"test_stream_collector.py","path":"sdk/tests/test_stream_collector.py","sha":"796a163e53d4985fed2539c5755ae7d2add0408c","size":1804,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/test_stream_collector.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/test_stream_collector.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/796a163e53d4985fed2539c5755ae7d2add0408c","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/test_stream_collector.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/test_stream_collector.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/796a163e53d4985fed2539c5755ae7d2add0408c","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/test_stream_collector.py"}},{"name":"test_web_search.py","path":"sdk/tests/test_web_search.py","sha":"6aa963043456c34f6a4642a977833205bc65ee64","size":519,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/test_web_search.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/test_web_search.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/6aa963043456c34f6a4642a977833205bc65ee64","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/test_web_search.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/test_web_search.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/6aa963043456c34f6a4642a977833205bc65ee64","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/test_web_search.py"}},{"name":"util","path":"sdk/tests/util","sha":"7cb4c95fef61cc0672d672a3f225ec433cb4aa87","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/util?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/sdk/tests/util","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/7cb4c95fef61cc0672d672a3f225ec433cb4aa87","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/util?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/7cb4c95fef61cc0672d672a3f225ec433cb4aa87","html":"https://github.com/eidolon-ai/eidolon/tree/main/sdk/tests/util"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:29:21 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E4D2:25382C:1531DE:1E9835:65D519B0
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4681'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '319'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/public?ref=main
  response:
    content: '[{"name":"CNAME","path":"docs/public/CNAME","sha":"247629a581887a7e4aea37ccbcd411b5855e2520","size":18,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/public/CNAME?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/docs/public/CNAME","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/247629a581887a7e4aea37ccbcd411b5855e2520","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/docs/public/CNAME","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/public/CNAME?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/247629a581887a7e4aea37ccbcd411b5855e2520","html":"https://github.com/eidolon-ai/eidolon/blob/main/docs/public/CNAME"}},{"name":"favicon.ico","path":"docs/public/favicon.ico","sha":"36d1b6d2ae8dec009c608e0ec83cf261a455f285","size":1150,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/public/favicon.ico?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/docs/public/favicon.ico","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/36d1b6d2ae8dec009c608e0ec83cf261a455f285","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/docs/public/favicon.ico","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/public/favicon.ico?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/36d1b6d2ae8dec009c608e0ec83cf261a455f285","html":"https://github.com/eidolon-ai/eidolon/blob/main/docs/public/favicon.ico"}},{"name":"favicon.svg","path":"docs/public/favicon.svg","sha":"cba5ac140a25951a20704b481a65514838f0f4b6","size":696,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/public/favicon.svg?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/docs/public/favicon.svg","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/cba5ac140a25951a20704b481a65514838f0f4b6","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/docs/public/favicon.svg","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/public/favicon.svg?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/cba5ac140a25951a20704b481a65514838f0f4b6","html":"https://github.com/eidolon-ai/eidolon/blob/main/docs/public/favicon.svg"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:29:21 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E4D0:260C59:13815A:1C45D9:65D519B0
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4680'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '320'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/cli/tests?ref=main
  response:
    content: '[{"name":"__init__.py","path":"cli/tests/__init__.py","sha":"e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/cli/tests/__init__.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/cli/tests/__init__.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/cli/tests/__init__.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/cli/tests/__init__.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","html":"https://github.com/eidolon-ai/eidolon/blob/main/cli/tests/__init__.py"}},{"name":"test_cli.py","path":"cli/tests/test_cli.py","sha":"09bd641141f6b81eeb4feb2d8385e4d6f440b6ed","size":103,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/cli/tests/test_cli.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/cli/tests/test_cli.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/09bd641141f6b81eeb4feb2d8385e4d6f440b6ed","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/cli/tests/test_cli.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/cli/tests/test_cli.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/09bd641141f6b81eeb4feb2d8385e4d6f440b6ed","html":"https://github.com/eidolon-ai/eidolon/blob/main/cli/tests/test_cli.py"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:29:21 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E4D6:25626D:15566D:1EBCCA:65D519B0
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4679'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '321'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src?ref=main
  response:
    content: '[{"name":"assets","path":"docs/src/assets","sha":"1a4b7fd47c7e285f3737dff49d93b91f95e1c605","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/assets?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/docs/src/assets","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/1a4b7fd47c7e285f3737dff49d93b91f95e1c605","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/assets?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/1a4b7fd47c7e285f3737dff49d93b91f95e1c605","html":"https://github.com/eidolon-ai/eidolon/tree/main/docs/src/assets"}},{"name":"components","path":"docs/src/components","sha":"12eefd49f15b78a7896d1f07d75f0a928c80a470","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/components?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/docs/src/components","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/12eefd49f15b78a7896d1f07d75f0a928c80a470","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/components?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/12eefd49f15b78a7896d1f07d75f0a928c80a470","html":"https://github.com/eidolon-ai/eidolon/tree/main/docs/src/components"}},{"name":"content","path":"docs/src/content","sha":"b4199a7090b8a4fe4d04165c05b0dc0ee50e70e3","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/content?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/docs/src/content","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/b4199a7090b8a4fe4d04165c05b0dc0ee50e70e3","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/content?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/b4199a7090b8a4fe4d04165c05b0dc0ee50e70e3","html":"https://github.com/eidolon-ai/eidolon/tree/main/docs/src/content"}},{"name":"env.d.ts","path":"docs/src/env.d.ts","sha":"acef35f175aae528d22fdc6b91e819aa52837fd9","size":85,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/env.d.ts?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/docs/src/env.d.ts","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/acef35f175aae528d22fdc6b91e819aa52837fd9","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/docs/src/env.d.ts","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/env.d.ts?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/acef35f175aae528d22fdc6b91e819aa52837fd9","html":"https://github.com/eidolon-ai/eidolon/blob/main/docs/src/env.d.ts"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:29:21 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E4D7:2535CB:18D934:224011:65D519B0
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4678'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '322'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/.idea/inspectionProfiles?ref=main
  response:
    content: '[{"name":"Project_Default.xml","path":".idea/inspectionProfiles/Project_Default.xml","sha":"97cfbefa49e9a7226bf39a225c1775c31dbc458e","size":1508,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/.idea/inspectionProfiles/Project_Default.xml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/.idea/inspectionProfiles/Project_Default.xml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/97cfbefa49e9a7226bf39a225c1775c31dbc458e","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/.idea/inspectionProfiles/Project_Default.xml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/.idea/inspectionProfiles/Project_Default.xml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/97cfbefa49e9a7226bf39a225c1775c31dbc458e","html":"https://github.com/eidolon-ai/eidolon/blob/main/.idea/inspectionProfiles/Project_Default.xml"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:29:21 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E4D9:256B07:153599:1E9C24:65D519B0
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4677'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '323'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/.vscode?ref=main
  response:
    content: '[{"name":"extensions.json","path":"docs/.vscode/extensions.json","sha":"22a15055d638988eb33bb61536d27f623df92e4a","size":87,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/.vscode/extensions.json?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/docs/.vscode/extensions.json","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/22a15055d638988eb33bb61536d27f623df92e4a","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/docs/.vscode/extensions.json","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/.vscode/extensions.json?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/22a15055d638988eb33bb61536d27f623df92e4a","html":"https://github.com/eidolon-ai/eidolon/blob/main/docs/.vscode/extensions.json"}},{"name":"launch.json","path":"docs/.vscode/launch.json","sha":"d6422097621fd7c1b1ccc6daa670c46aed7ef5b7","size":207,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/.vscode/launch.json?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/docs/.vscode/launch.json","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/d6422097621fd7c1b1ccc6daa670c46aed7ef5b7","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/docs/.vscode/launch.json","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/.vscode/launch.json?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/d6422097621fd7c1b1ccc6daa670c46aed7ef5b7","html":"https://github.com/eidolon-ai/eidolon/blob/main/docs/.vscode/launch.json"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:29:21 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E4DA:2518A1:150266:1E6930:65D519B0
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4676'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '324'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/.idea/runConfigurations?ref=main
  response:
    content: '[{"name":"code_search.xml","path":".idea/runConfigurations/code_search.xml","sha":"bc6c39f0174871ff6fc077ae3bae6eb52ff0909d","size":1305,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/.idea/runConfigurations/code_search.xml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/.idea/runConfigurations/code_search.xml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/bc6c39f0174871ff6fc077ae3bae6eb52ff0909d","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/.idea/runConfigurations/code_search.xml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/.idea/runConfigurations/code_search.xml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/bc6c39f0174871ff6fc077ae3bae6eb52ff0909d","html":"https://github.com/eidolon-ai/eidolon/blob/main/.idea/runConfigurations/code_search.xml"}},{"name":"getting_started_1.xml","path":".idea/runConfigurations/getting_started_1.xml","sha":"dd963aa48f7ae675d919815e148a748a7f7cf523","size":1327,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/.idea/runConfigurations/getting_started_1.xml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/.idea/runConfigurations/getting_started_1.xml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/dd963aa48f7ae675d919815e148a748a7f7cf523","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/.idea/runConfigurations/getting_started_1.xml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/.idea/runConfigurations/getting_started_1.xml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/dd963aa48f7ae675d919815e148a748a7f7cf523","html":"https://github.com/eidolon-ai/eidolon/blob/main/.idea/runConfigurations/getting_started_1.xml"}},{"name":"getting_started_2.xml","path":".idea/runConfigurations/getting_started_2.xml","sha":"4aa44fbe68fd1d6bfd02b23029cc2ccb7b34b1b9","size":1321,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/.idea/runConfigurations/getting_started_2.xml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/.idea/runConfigurations/getting_started_2.xml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/4aa44fbe68fd1d6bfd02b23029cc2ccb7b34b1b9","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/.idea/runConfigurations/getting_started_2.xml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/.idea/runConfigurations/getting_started_2.xml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/4aa44fbe68fd1d6bfd02b23029cc2ccb7b34b1b9","html":"https://github.com/eidolon-ai/eidolon/blob/main/.idea/runConfigurations/getting_started_2.xml"}},{"name":"getting_started_3.xml","path":".idea/runConfigurations/getting_started_3.xml","sha":"20e5bd824dd33931c35c61b98e82706336a92514","size":1327,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/.idea/runConfigurations/getting_started_3.xml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/.idea/runConfigurations/getting_started_3.xml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/20e5bd824dd33931c35c61b98e82706336a92514","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/.idea/runConfigurations/getting_started_3.xml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/.idea/runConfigurations/getting_started_3.xml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/20e5bd824dd33931c35c61b98e82706336a92514","html":"https://github.com/eidolon-ai/eidolon/blob/main/.idea/runConfigurations/getting_started_3.xml"}},{"name":"getting_started_4.xml","path":".idea/runConfigurations/getting_started_4.xml","sha":"420ec6c50690ec181d112d7bf0d0b3a78d4c7ca1","size":1326,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/.idea/runConfigurations/getting_started_4.xml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/.idea/runConfigurations/getting_started_4.xml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/420ec6c50690ec181d112d7bf0d0b3a78d4c7ca1","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/.idea/runConfigurations/getting_started_4.xml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/.idea/runConfigurations/getting_started_4.xml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/420ec6c50690ec181d112d7bf0d0b3a78d4c7ca1","html":"https://github.com/eidolon-ai/eidolon/blob/main/.idea/runConfigurations/getting_started_4.xml"}},{"name":"hello_world.xml","path":".idea/runConfigurations/hello_world.xml","sha":"b476c771e80a380421b3784a71954027a04c345a","size":1273,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/.idea/runConfigurations/hello_world.xml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/.idea/runConfigurations/hello_world.xml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/b476c771e80a380421b3784a71954027a04c345a","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/.idea/runConfigurations/hello_world.xml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/.idea/runConfigurations/hello_world.xml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/b476c771e80a380421b3784a71954027a04c345a","html":"https://github.com/eidolon-ai/eidolon/blob/main/.idea/runConfigurations/hello_world.xml"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:29:21 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E4D8:255256:1663B4:1FCA73:65D519B0
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4675'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '325'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/app?ref=main
  response:
    content: '[{"name":"api","path":"webui/app/api","sha":"10f5c4fe51b44f42aec3562c54f6a32745f84d85","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/app/api?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/webui/app/api","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/10f5c4fe51b44f42aec3562c54f6a32745f84d85","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/app/api?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/10f5c4fe51b44f42aec3562c54f6a32745f84d85","html":"https://github.com/eidolon-ai/eidolon/tree/main/webui/app/api"}},{"name":"chat","path":"webui/app/chat","sha":"6355abae405366a2ef4e1a63a18efbebb55d0478","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/app/chat?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/webui/app/chat","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/6355abae405366a2ef4e1a63a18efbebb55d0478","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/app/chat?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/6355abae405366a2ef4e1a63a18efbebb55d0478","html":"https://github.com/eidolon-ai/eidolon/tree/main/webui/app/chat"}},{"name":"globals.css","path":"webui/app/globals.css","sha":"affab4890a72c51eeea4ba27ebb3111c624e2836","size":2170,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/app/globals.css?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/webui/app/globals.css","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/affab4890a72c51eeea4ba27ebb3111c624e2836","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/webui/app/globals.css","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/app/globals.css?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/affab4890a72c51eeea4ba27ebb3111c624e2836","html":"https://github.com/eidolon-ai/eidolon/blob/main/webui/app/globals.css"}},{"name":"layout-style.css","path":"webui/app/layout-style.css","sha":"3844baa4043ff79b704bad651ba9522f446b90e4","size":589,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/app/layout-style.css?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/webui/app/layout-style.css","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/3844baa4043ff79b704bad651ba9522f446b90e4","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/webui/app/layout-style.css","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/app/layout-style.css?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/3844baa4043ff79b704bad651ba9522f446b90e4","html":"https://github.com/eidolon-ai/eidolon/blob/main/webui/app/layout-style.css"}},{"name":"layout.tsx","path":"webui/app/layout.tsx","sha":"f3722db0475c0d5ce64676fb048e8afccfde4a22","size":1422,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/app/layout.tsx?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/webui/app/layout.tsx","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/f3722db0475c0d5ce64676fb048e8afccfde4a22","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/webui/app/layout.tsx","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/app/layout.tsx?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/f3722db0475c0d5ce64676fb048e8afccfde4a22","html":"https://github.com/eidolon-ai/eidolon/blob/main/webui/app/layout.tsx"}},{"name":"page.tsx","path":"webui/app/page.tsx","sha":"bbdd69ebea44d3f5f22dd88e71d1ffe2dfae4c36","size":293,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/app/page.tsx?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/webui/app/page.tsx","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/bbdd69ebea44d3f5f22dd88e71d1ffe2dfae4c36","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/webui/app/page.tsx","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/app/page.tsx?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/bbdd69ebea44d3f5f22dd88e71d1ffe2dfae4c36","html":"https://github.com/eidolon-ai/eidolon/blob/main/webui/app/page.tsx"}},{"name":"sign-in","path":"webui/app/sign-in","sha":"940716ab5aa0cb4670b52efc75a9e079bf6eef00","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/app/sign-in?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/webui/app/sign-in","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/940716ab5aa0cb4670b52efc75a9e079bf6eef00","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/app/sign-in?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/940716ab5aa0cb4670b52efc75a9e079bf6eef00","html":"https://github.com/eidolon-ai/eidolon/tree/main/webui/app/sign-in"}},{"name":"theme.tsx","path":"webui/app/theme.tsx","sha":"965dc929a99054044ff67d65ae129917f05973fa","size":1922,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/app/theme.tsx?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/webui/app/theme.tsx","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/965dc929a99054044ff67d65ae129917f05973fa","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/webui/app/theme.tsx","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/app/theme.tsx?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/965dc929a99054044ff67d65ae129917f05973fa","html":"https://github.com/eidolon-ai/eidolon/blob/main/webui/app/theme.tsx"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:29:21 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E4D5:25923F:1DAD56:2713BE:65D519B1
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4674'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '326'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples?ref=main
  response:
    content: '[{"name":"__init__.py","path":"examples/eidolon_examples/__init__.py","sha":"e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/__init__.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/__init__.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/eidolon_examples/__init__.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/__init__.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/__init__.py"}},{"name":"code_search","path":"examples/eidolon_examples/code_search","sha":"792d41e614ace3ed0587a3bcc8c3433cb60f4e17","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/code_search?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/examples/eidolon_examples/code_search","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/792d41e614ace3ed0587a3bcc8c3433cb60f4e17","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/code_search?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/792d41e614ace3ed0587a3bcc8c3433cb60f4e17","html":"https://github.com/eidolon-ai/eidolon/tree/main/examples/eidolon_examples/code_search"}},{"name":"game_of_24","path":"examples/eidolon_examples/game_of_24","sha":"62222ee04b2ee04cfd766a566271d3eb80c27e3d","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/game_of_24?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/examples/eidolon_examples/game_of_24","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/62222ee04b2ee04cfd766a566271d3eb80c27e3d","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/game_of_24?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/62222ee04b2ee04cfd766a566271d3eb80c27e3d","html":"https://github.com/eidolon-ai/eidolon/tree/main/examples/eidolon_examples/game_of_24"}},{"name":"getting_started","path":"examples/eidolon_examples/getting_started","sha":"b2fb3ee8a4cde6cdaa34b7f3bf03c51ecfa39741","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/getting_started?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/examples/eidolon_examples/getting_started","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/b2fb3ee8a4cde6cdaa34b7f3bf03c51ecfa39741","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/getting_started?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/b2fb3ee8a4cde6cdaa34b7f3bf03c51ecfa39741","html":"https://github.com/eidolon-ai/eidolon/tree/main/examples/eidolon_examples/getting_started"}},{"name":"group_conversation","path":"examples/eidolon_examples/group_conversation","sha":"154f52f1a3391142e06a498668beebc50d25f547","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/group_conversation?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/examples/eidolon_examples/group_conversation","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/154f52f1a3391142e06a498668beebc50d25f547","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/group_conversation?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/154f52f1a3391142e06a498668beebc50d25f547","html":"https://github.com/eidolon-ai/eidolon/tree/main/examples/eidolon_examples/group_conversation"}},{"name":"hello_world","path":"examples/eidolon_examples/hello_world","sha":"7e087bf4a5c83a8336185b5d748580b30247c7ff","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/hello_world?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/examples/eidolon_examples/hello_world","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/7e087bf4a5c83a8336185b5d748580b30247c7ff","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/hello_world?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/7e087bf4a5c83a8336185b5d748580b30247c7ff","html":"https://github.com/eidolon-ai/eidolon/tree/main/examples/eidolon_examples/hello_world"}},{"name":"k8_monitor","path":"examples/eidolon_examples/k8_monitor","sha":"f0490021bbb4788db87baea8ab2bf82de437375a","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/k8_monitor?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/examples/eidolon_examples/k8_monitor","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/f0490021bbb4788db87baea8ab2bf82de437375a","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/k8_monitor?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/f0490021bbb4788db87baea8ab2bf82de437375a","html":"https://github.com/eidolon-ai/eidolon/tree/main/examples/eidolon_examples/k8_monitor"}},{"name":"quickstart","path":"examples/eidolon_examples/quickstart","sha":"8ffb5b0f945a50268a30913d5b78420b403d3578","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/quickstart?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/examples/eidolon_examples/quickstart","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/8ffb5b0f945a50268a30913d5b78420b403d3578","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/quickstart?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/8ffb5b0f945a50268a30913d5b78420b403d3578","html":"https://github.com/eidolon-ai/eidolon/tree/main/examples/eidolon_examples/quickstart"}},{"name":"swifties","path":"examples/eidolon_examples/swifties","sha":"fd354ea01852a4fd47b72e873095a8a0459aa230","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/swifties?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/examples/eidolon_examples/swifties","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/fd354ea01852a4fd47b72e873095a8a0459aa230","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/swifties?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/fd354ea01852a4fd47b72e873095a8a0459aa230","html":"https://github.com/eidolon-ai/eidolon/tree/main/examples/eidolon_examples/swifties"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:29:21 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E4D3:257FF1:161763:1F7DDF:65D519B0
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4673'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '327'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/public?ref=main
  response:
    content: '[{"name":"apple-touch-icon.png","path":"webui/public/apple-touch-icon.png","sha":"0eb831fd3f83deadb29cb4fc846e9feb919a61c2","size":10423,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/public/apple-touch-icon.png?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/webui/public/apple-touch-icon.png","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/0eb831fd3f83deadb29cb4fc846e9feb919a61c2","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/webui/public/apple-touch-icon.png","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/public/apple-touch-icon.png?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/0eb831fd3f83deadb29cb4fc846e9feb919a61c2","html":"https://github.com/eidolon-ai/eidolon/blob/main/webui/public/apple-touch-icon.png"}},{"name":"eidolon_with_gradient.png","path":"webui/public/eidolon_with_gradient.png","sha":"628035ba81d58a773e7b87a2242beba102eb75b2","size":2245999,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/public/eidolon_with_gradient.png?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/webui/public/eidolon_with_gradient.png","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/628035ba81d58a773e7b87a2242beba102eb75b2","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/webui/public/eidolon_with_gradient.png","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/public/eidolon_with_gradient.png?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/628035ba81d58a773e7b87a2242beba102eb75b2","html":"https://github.com/eidolon-ai/eidolon/blob/main/webui/public/eidolon_with_gradient.png"}},{"name":"favicon-16x16.png","path":"webui/public/favicon-16x16.png","sha":"620c7d81f90b455bd9a8ee5a37d4d4f335443076","size":539,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/public/favicon-16x16.png?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/webui/public/favicon-16x16.png","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/620c7d81f90b455bd9a8ee5a37d4d4f335443076","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/webui/public/favicon-16x16.png","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/public/favicon-16x16.png?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/620c7d81f90b455bd9a8ee5a37d4d4f335443076","html":"https://github.com/eidolon-ai/eidolon/blob/main/webui/public/favicon-16x16.png"}},{"name":"favicon.ico","path":"webui/public/favicon.ico","sha":"7452b5dc69b2a634c86779ee4cd4c13319549b43","size":15406,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/public/favicon.ico?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/webui/public/favicon.ico","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/7452b5dc69b2a634c86779ee4cd4c13319549b43","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/webui/public/favicon.ico","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/public/favicon.ico?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/7452b5dc69b2a634c86779ee4cd4c13319549b43","html":"https://github.com/eidolon-ai/eidolon/blob/main/webui/public/favicon.ico"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:29:21 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E4D1:25360F:14C68D:1E2CEA:65D519B1
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4672'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '328'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/lib?ref=main
  response:
    content: '[{"name":"display-elements.ts","path":"webui/lib/display-elements.ts","sha":"e3fe5ad002fa4bbd86b496fad4d7c63e7b83bc02","size":2869,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/lib/display-elements.ts?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/webui/lib/display-elements.ts","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e3fe5ad002fa4bbd86b496fad4d7c63e7b83bc02","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/webui/lib/display-elements.ts","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/lib/display-elements.ts?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e3fe5ad002fa4bbd86b496fad4d7c63e7b83bc02","html":"https://github.com/eidolon-ai/eidolon/blob/main/webui/lib/display-elements.ts"}},{"name":"fonts.ts","path":"webui/lib/fonts.ts","sha":"2485ab7c7a16212b705a5bc397b362aab751ba59","size":253,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/lib/fonts.ts?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/webui/lib/fonts.ts","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/2485ab7c7a16212b705a5bc397b362aab751ba59","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/webui/lib/fonts.ts","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/lib/fonts.ts?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/2485ab7c7a16212b705a5bc397b362aab751ba59","html":"https://github.com/eidolon-ai/eidolon/blob/main/webui/lib/fonts.ts"}},{"name":"hooks","path":"webui/lib/hooks","sha":"a9851fb571d8e1657a3e580d223cc1c3322c92e2","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/lib/hooks?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/webui/lib/hooks","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/a9851fb571d8e1657a3e580d223cc1c3322c92e2","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/lib/hooks?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/a9851fb571d8e1657a3e580d223cc1c3322c92e2","html":"https://github.com/eidolon-ai/eidolon/tree/main/webui/lib/hooks"}},{"name":"types.ts","path":"webui/lib/types.ts","sha":"fdb82ec0b7a1888c882ae2d8927c8841c13a6445","size":3432,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/lib/types.ts?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/webui/lib/types.ts","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/fdb82ec0b7a1888c882ae2d8927c8841c13a6445","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/webui/lib/types.ts","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/lib/types.ts?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/fdb82ec0b7a1888c882ae2d8927c8841c13a6445","html":"https://github.com/eidolon-ai/eidolon/blob/main/webui/lib/types.ts"}},{"name":"utils.ts","path":"webui/lib/utils.ts","sha":"b8b0948ad83974ce341ee3a626cafe9d02f722f7","size":162,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/lib/utils.ts?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/webui/lib/utils.ts","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/b8b0948ad83974ce341ee3a626cafe9d02f722f7","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/webui/lib/utils.ts","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/lib/utils.ts?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/b8b0948ad83974ce341ee3a626cafe9d02f722f7","html":"https://github.com/eidolon-ai/eidolon/blob/main/webui/lib/utils.ts"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:29:21 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E4CF:2511E0:14F68D:1E5D80:65D519B1
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4671'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '329'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/assets?ref=main
  response:
    content: '[{"name":"fonts","path":"webui/assets/fonts","sha":"ce36890c138d71d6c5f60cf63caae172ffd45f96","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/assets/fonts?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/webui/assets/fonts","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/ce36890c138d71d6c5f60cf63caae172ffd45f96","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/assets/fonts?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/ce36890c138d71d6c5f60cf63caae172ffd45f96","html":"https://github.com/eidolon-ai/eidolon/tree/main/webui/assets/fonts"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:29:21 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E4DC:3A0B33:2F31:3E86:65D519B1
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4670'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '330'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/tests?ref=main
  response:
    content: '[{"name":"conftest.py","path":"examples/tests/conftest.py","sha":"e073c8d86ec45794bd792e6f7075b8daed9e9113","size":2310,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/tests/conftest.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/tests/conftest.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e073c8d86ec45794bd792e6f7075b8daed9e9113","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/tests/conftest.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/tests/conftest.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e073c8d86ec45794bd792e6f7075b8daed9e9113","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/tests/conftest.py"}},{"name":"test_code_search.py","path":"examples/tests/test_code_search.py","sha":"a662cd135b8b4a768fd232c0b200715e0371b11c","size":497,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/tests/test_code_search.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/tests/test_code_search.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/a662cd135b8b4a768fd232c0b200715e0371b11c","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/tests/test_code_search.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/tests/test_code_search.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/a662cd135b8b4a768fd232c0b200715e0371b11c","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/tests/test_code_search.py"}},{"name":"test_getting_started.py","path":"examples/tests/test_getting_started.py","sha":"ba058d885ea73ea4e7b3de77a6f0ca3aca99e9e3","size":2033,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/tests/test_getting_started.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/tests/test_getting_started.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/ba058d885ea73ea4e7b3de77a6f0ca3aca99e9e3","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/tests/test_getting_started.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/tests/test_getting_started.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/ba058d885ea73ea4e7b3de77a6f0ca3aca99e9e3","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/tests/test_getting_started.py"}},{"name":"test_hello_world.py","path":"examples/tests/test_hello_world.py","sha":"87a0f8c307413fc198c2ec219fb26ea49d3d71ed","size":1446,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/tests/test_hello_world.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/tests/test_hello_world.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/87a0f8c307413fc198c2ec219fb26ea49d3d71ed","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/tests/test_hello_world.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/tests/test_hello_world.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/87a0f8c307413fc198c2ec219fb26ea49d3d71ed","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/tests/test_hello_world.py"}},{"name":"test_k8_logic_unit.py","path":"examples/tests/test_k8_logic_unit.py","sha":"7c15618bf04eeee06c571af5a83baa2fba14a243","size":1799,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/tests/test_k8_logic_unit.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/tests/test_k8_logic_unit.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/7c15618bf04eeee06c571af5a83baa2fba14a243","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/tests/test_k8_logic_unit.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/tests/test_k8_logic_unit.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/7c15618bf04eeee06c571af5a83baa2fba14a243","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/tests/test_k8_logic_unit.py"}},{"name":"test_quickstart.py","path":"examples/tests/test_quickstart.py","sha":"49612afbb16ddc49c4060bf26576facded589c3a","size":497,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/tests/test_quickstart.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/tests/test_quickstart.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/49612afbb16ddc49c4060bf26576facded589c3a","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/tests/test_quickstart.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/tests/test_quickstart.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/49612afbb16ddc49c4060bf26576facded589c3a","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/tests/test_quickstart.py"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:29:21 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E4DB:254D25:161001:1F76DF:65D519B1
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4669'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '331'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent?ref=main
  response:
    content: '[{"name":"__init__.py","path":"sdk/eidolon_ai_sdk/agent/__init__.py","sha":"e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/__init__.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/__init__.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/agent/__init__.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/__init__.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/__init__.py"}},{"name":"agent.py","path":"sdk/eidolon_ai_sdk/agent/agent.py","sha":"dbafd7f722ec630ddaa4f9493aa7f106abbdebd6","size":2402,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/agent.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/agent.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/dbafd7f722ec630ddaa4f9493aa7f106abbdebd6","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/agent/agent.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/agent.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/dbafd7f722ec630ddaa4f9493aa7f106abbdebd6","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/agent.py"}},{"name":"client.py","path":"sdk/eidolon_ai_sdk/agent/client.py","sha":"f2bacd7e553cb9b05e4fa23a35932d4ddb4d41d7","size":6014,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/client.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/client.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/f2bacd7e553cb9b05e4fa23a35932d4ddb4d41d7","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/agent/client.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/client.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/f2bacd7e553cb9b05e4fa23a35932d4ddb4d41d7","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/client.py"}},{"name":"doc_manager","path":"sdk/eidolon_ai_sdk/agent/doc_manager","sha":"b9e263835fc336e664b3c9b8d6da5fc9e3aa3e56","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/doc_manager?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/sdk/eidolon_ai_sdk/agent/doc_manager","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/b9e263835fc336e664b3c9b8d6da5fc9e3aa3e56","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/doc_manager?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/b9e263835fc336e664b3c9b8d6da5fc9e3aa3e56","html":"https://github.com/eidolon-ai/eidolon/tree/main/sdk/eidolon_ai_sdk/agent/doc_manager"}},{"name":"generic_agent.py","path":"sdk/eidolon_ai_sdk/agent/generic_agent.py","sha":"02a5c7ce9ed0ceb9c7b3313ff7fdcd942a8d5dc7","size":5516,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/generic_agent.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/generic_agent.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/02a5c7ce9ed0ceb9c7b3313ff7fdcd942a8d5dc7","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/agent/generic_agent.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/generic_agent.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/02a5c7ce9ed0ceb9c7b3313ff7fdcd942a8d5dc7","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/generic_agent.py"}},{"name":"retriever_agent","path":"sdk/eidolon_ai_sdk/agent/retriever_agent","sha":"3eec39b3a5e0bc8763cfc9e81b56c4415f00e773","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/retriever_agent?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/sdk/eidolon_ai_sdk/agent/retriever_agent","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/3eec39b3a5e0bc8763cfc9e81b56c4415f00e773","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/retriever_agent?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/3eec39b3a5e0bc8763cfc9e81b56c4415f00e773","html":"https://github.com/eidolon-ai/eidolon/tree/main/sdk/eidolon_ai_sdk/agent/retriever_agent"}},{"name":"tot_agent","path":"sdk/eidolon_ai_sdk/agent/tot_agent","sha":"90912ae83c00c6a44ee84b6a781fe7b56e75c35d","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/tot_agent?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/sdk/eidolon_ai_sdk/agent/tot_agent","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/90912ae83c00c6a44ee84b6a781fe7b56e75c35d","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/tot_agent?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/90912ae83c00c6a44ee84b6a781fe7b56e75c35d","html":"https://github.com/eidolon-ai/eidolon/tree/main/sdk/eidolon_ai_sdk/agent/tot_agent"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:29:21 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E4D0:260C59:138160:1C45DF:65D519B1
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4668'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '332'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/components?ref=main
  response:
    content: '[{"name":"Resizable.tsx","path":"webui/components/Resizable.tsx","sha":"d1f794e6281d21e69250cbc33527427d8cf5047c","size":2614,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/components/Resizable.tsx?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/webui/components/Resizable.tsx","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/d1f794e6281d21e69250cbc33527427d8cf5047c","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/webui/components/Resizable.tsx","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/components/Resizable.tsx?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/d1f794e6281d21e69250cbc33527427d8cf5047c","html":"https://github.com/eidolon-ai/eidolon/blob/main/webui/components/Resizable.tsx"}},{"name":"agent-input","path":"webui/components/agent-input","sha":"766b01dcc66859c51ef5818ec91bcb6506b4daae","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/components/agent-input?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/webui/components/agent-input","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/766b01dcc66859c51ef5818ec91bcb6506b4daae","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/components/agent-input?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/766b01dcc66859c51ef5818ec91bcb6506b4daae","html":"https://github.com/eidolon-ai/eidolon/tree/main/webui/components/agent-input"}},{"name":"button-scroll-to-bottom.tsx","path":"webui/components/button-scroll-to-bottom.tsx","sha":"572cd94a461c3e5d6ef011e489c6ef34bf3867a8","size":799,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/components/button-scroll-to-bottom.tsx?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/webui/components/button-scroll-to-bottom.tsx","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/572cd94a461c3e5d6ef011e489c6ef34bf3867a8","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/webui/components/button-scroll-to-bottom.tsx","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/components/button-scroll-to-bottom.tsx?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/572cd94a461c3e5d6ef011e489c6ef34bf3867a8","html":"https://github.com/eidolon-ai/eidolon/blob/main/webui/components/button-scroll-to-bottom.tsx"}},{"name":"chat-events.css","path":"webui/components/chat-events.css","sha":"0448071cc440465e47cdf69ac395fcf60984e626","size":421,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/components/chat-events.css?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/webui/components/chat-events.css","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/0448071cc440465e47cdf69ac395fcf60984e626","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/webui/components/chat-events.css","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/components/chat-events.css?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/0448071cc440465e47cdf69ac395fcf60984e626","html":"https://github.com/eidolon-ai/eidolon/blob/main/webui/components/chat-events.css"}},{"name":"chat-events.tsx","path":"webui/components/chat-events.tsx","sha":"9f624d4fed2b47007358dc3e747f937b66bd1a09","size":9878,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/components/chat-events.tsx?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/webui/components/chat-events.tsx","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/9f624d4fed2b47007358dc3e747f937b66bd1a09","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/webui/components/chat-events.tsx","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/components/chat-events.tsx?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/9f624d4fed2b47007358dc3e747f937b66bd1a09","html":"https://github.com/eidolon-ai/eidolon/blob/main/webui/components/chat-events.tsx"}},{"name":"chat-scroll-anchor.tsx","path":"webui/components/chat-scroll-anchor.tsx","sha":"65d27344c9b8fab9c304a0a6512c53e895b7a05c","size":727,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/components/chat-scroll-anchor.tsx?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/webui/components/chat-scroll-anchor.tsx","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/65d27344c9b8fab9c304a0a6512c53e895b7a05c","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/webui/components/chat-scroll-anchor.tsx","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/components/chat-scroll-anchor.tsx?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/65d27344c9b8fab9c304a0a6512c53e895b7a05c","html":"https://github.com/eidolon-ai/eidolon/blob/main/webui/components/chat-scroll-anchor.tsx"}},{"name":"chat.css","path":"webui/components/chat.css","sha":"2b660f00cc4cf41de171e7e7aad7aa618735f32b","size":143,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/components/chat.css?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/webui/components/chat.css","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/2b660f00cc4cf41de171e7e7aad7aa618735f32b","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/webui/components/chat.css","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/components/chat.css?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/2b660f00cc4cf41de171e7e7aad7aa618735f32b","html":"https://github.com/eidolon-ai/eidolon/blob/main/webui/components/chat.css"}},{"name":"eidolon-markdown.css","path":"webui/components/eidolon-markdown.css","sha":"0118b51578b1c34135322dd9c7462d5177903369","size":1134,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/components/eidolon-markdown.css?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/webui/components/eidolon-markdown.css","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/0118b51578b1c34135322dd9c7462d5177903369","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/webui/components/eidolon-markdown.css","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/components/eidolon-markdown.css?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/0118b51578b1c34135322dd9c7462d5177903369","html":"https://github.com/eidolon-ai/eidolon/blob/main/webui/components/eidolon-markdown.css"}},{"name":"eidolon-markdown.tsx","path":"webui/components/eidolon-markdown.tsx","sha":"e5df8e26c7e2014911d410300e929e7fb3aa8dad","size":1319,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/components/eidolon-markdown.tsx?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/webui/components/eidolon-markdown.tsx","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e5df8e26c7e2014911d410300e929e7fb3aa8dad","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/webui/components/eidolon-markdown.tsx","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/components/eidolon-markdown.tsx?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e5df8e26c7e2014911d410300e929e7fb3aa8dad","html":"https://github.com/eidolon-ai/eidolon/blob/main/webui/components/eidolon-markdown.tsx"}},{"name":"header.tsx","path":"webui/components/header.tsx","sha":"8b63b6c6ba05dfa93e4354cac538f5c8c5739f79","size":2257,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/components/header.tsx?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/webui/components/header.tsx","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/8b63b6c6ba05dfa93e4354cac538f5c8c5739f79","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/webui/components/header.tsx","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/components/header.tsx?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/8b63b6c6ba05dfa93e4354cac538f5c8c5739f79","html":"https://github.com/eidolon-ai/eidolon/blob/main/webui/components/header.tsx"}},{"name":"session-wrapper.tsx","path":"webui/components/session-wrapper.tsx","sha":"761404d156493297b57b3a6069e0aad29e8447d0","size":288,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/components/session-wrapper.tsx?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/webui/components/session-wrapper.tsx","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/761404d156493297b57b3a6069e0aad29e8447d0","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/webui/components/session-wrapper.tsx","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/components/session-wrapper.tsx?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/761404d156493297b57b3a6069e0aad29e8447d0","html":"https://github.com/eidolon-ai/eidolon/blob/main/webui/components/session-wrapper.tsx"}},{"name":"sidebar-item.tsx","path":"webui/components/sidebar-item.tsx","sha":"8cf1f3410aebe99ee204426e40691bb84efbc87a","size":2085,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/components/sidebar-item.tsx?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/webui/components/sidebar-item.tsx","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/8cf1f3410aebe99ee204426e40691bb84efbc87a","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/webui/components/sidebar-item.tsx","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/components/sidebar-item.tsx?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/8cf1f3410aebe99ee204426e40691bb84efbc87a","html":"https://github.com/eidolon-ai/eidolon/blob/main/webui/components/sidebar-item.tsx"}},{"name":"sidebar-list.tsx","path":"webui/components/sidebar-list.tsx","sha":"a90a9097a4a8b39dc06bacabae246acb53dd010e","size":3385,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/components/sidebar-list.tsx?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/webui/components/sidebar-list.tsx","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/a90a9097a4a8b39dc06bacabae246acb53dd010e","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/webui/components/sidebar-list.tsx","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/components/sidebar-list.tsx?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/a90a9097a4a8b39dc06bacabae246acb53dd010e","html":"https://github.com/eidolon-ai/eidolon/blob/main/webui/components/sidebar-list.tsx"}},{"name":"toaster.tsx","path":"webui/components/toaster.tsx","sha":"d422c1aa87187c2372944a9b3c555f5711272cd8","size":54,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/components/toaster.tsx?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/webui/components/toaster.tsx","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/d422c1aa87187c2372944a9b3c555f5711272cd8","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/webui/components/toaster.tsx","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/components/toaster.tsx?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/d422c1aa87187c2372944a9b3c555f5711272cd8","html":"https://github.com/eidolon-ai/eidolon/blob/main/webui/components/toaster.tsx"}},{"name":"tool-call-element.tsx","path":"webui/components/tool-call-element.tsx","sha":"f20e2a40fac89ba02339ae0bfac733ea9deb2a26","size":2826,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/components/tool-call-element.tsx?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/webui/components/tool-call-element.tsx","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/f20e2a40fac89ba02339ae0bfac733ea9deb2a26","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/webui/components/tool-call-element.tsx","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/components/tool-call-element.tsx?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/f20e2a40fac89ba02339ae0bfac733ea9deb2a26","html":"https://github.com/eidolon-ai/eidolon/blob/main/webui/components/tool-call-element.tsx"}},{"name":"ui","path":"webui/components/ui","sha":"05fd459289b52992286485412d58d53b06fdb790","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/components/ui?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/webui/components/ui","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/05fd459289b52992286485412d58d53b06fdb790","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/components/ui?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/05fd459289b52992286485412d58d53b06fdb790","html":"https://github.com/eidolon-ai/eidolon/tree/main/webui/components/ui"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:29:21 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E4DD:2518DF:1607A6:1F6E6C:65D519B1
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4667'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '333'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/bin?ref=main
  response:
    content: '[{"name":"__init__.py","path":"sdk/eidolon_ai_sdk/bin/__init__.py","sha":"e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/bin/__init__.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/bin/__init__.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/bin/__init__.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/bin/__init__.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/bin/__init__.py"}},{"name":"agent_creator.py","path":"sdk/eidolon_ai_sdk/bin/agent_creator.py","sha":"8abbd0395917430afcf522ef067d75b5384e160d","size":9444,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/bin/agent_creator.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/bin/agent_creator.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/8abbd0395917430afcf522ef067d75b5384e160d","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/bin/agent_creator.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/bin/agent_creator.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/8abbd0395917430afcf522ef067d75b5384e160d","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/bin/agent_creator.py"}},{"name":"agent_http_server.py","path":"sdk/eidolon_ai_sdk/bin/agent_http_server.py","sha":"841fecfdcba9a696a144b2dc4cbccab507d908d7","size":8318,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/bin/agent_http_server.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/bin/agent_http_server.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/841fecfdcba9a696a144b2dc4cbccab507d908d7","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/bin/agent_http_server.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/bin/agent_http_server.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/841fecfdcba9a696a144b2dc4cbccab507d908d7","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/bin/agent_http_server.py"}},{"name":"replay.py","path":"sdk/eidolon_ai_sdk/bin/replay.py","sha":"ed6c97f852b81c24d22db1b10d78638807381592","size":3752,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/bin/replay.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/bin/replay.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/ed6c97f852b81c24d22db1b10d78638807381592","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/bin/replay.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/bin/replay.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/ed6c97f852b81c24d22db1b10d78638807381592","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/bin/replay.py"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:29:21 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E4D2:25382C:1531DF:1E9837:65D519B1
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4666'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '334'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/builtins?ref=main
  response:
    content: '[{"name":"__init__.py","path":"sdk/eidolon_ai_sdk/builtins/__init__.py","sha":"e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/builtins/__init__.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/builtins/__init__.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/builtins/__init__.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/builtins/__init__.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/builtins/__init__.py"}},{"name":"code_builtins.py","path":"sdk/eidolon_ai_sdk/builtins/code_builtins.py","sha":"152d13e372f9cc16261090cb7168785a926c17d9","size":5343,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/builtins/code_builtins.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/builtins/code_builtins.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/152d13e372f9cc16261090cb7168785a926c17d9","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/builtins/code_builtins.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/builtins/code_builtins.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/152d13e372f9cc16261090cb7168785a926c17d9","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/builtins/code_builtins.py"}},{"name":"logic_units","path":"sdk/eidolon_ai_sdk/builtins/logic_units","sha":"42a6a8897ee63644854bd6445527f1c34db39a28","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/builtins/logic_units?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/sdk/eidolon_ai_sdk/builtins/logic_units","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/42a6a8897ee63644854bd6445527f1c34db39a28","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/builtins/logic_units?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/42a6a8897ee63644854bd6445527f1c34db39a28","html":"https://github.com/eidolon-ai/eidolon/tree/main/sdk/eidolon_ai_sdk/builtins/logic_units"}},{"name":"resources","path":"sdk/eidolon_ai_sdk/builtins/resources","sha":"36daadf10bfee96a6da95367b0beafe5af64ec69","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/builtins/resources?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/sdk/eidolon_ai_sdk/builtins/resources","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/36daadf10bfee96a6da95367b0beafe5af64ec69","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/builtins/resources?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/36daadf10bfee96a6da95367b0beafe5af64ec69","html":"https://github.com/eidolon-ai/eidolon/tree/main/sdk/eidolon_ai_sdk/builtins/resources"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:29:21 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E4D7:2535CB:18D936:224013:65D519B1
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4665'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '335'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/cpu?ref=main
  response:
    content: '[{"name":"__init__.py","path":"sdk/eidolon_ai_sdk/cpu/__init__.py","sha":"e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/cpu/__init__.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/cpu/__init__.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/cpu/__init__.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/cpu/__init__.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/cpu/__init__.py"}},{"name":"agent_call_history.py","path":"sdk/eidolon_ai_sdk/cpu/agent_call_history.py","sha":"410f0ff1814d60e533cf27130a61d79b36c23389","size":1826,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/cpu/agent_call_history.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/cpu/agent_call_history.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/410f0ff1814d60e533cf27130a61d79b36c23389","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/cpu/agent_call_history.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/cpu/agent_call_history.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/410f0ff1814d60e533cf27130a61d79b36c23389","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/cpu/agent_call_history.py"}},{"name":"agent_cpu.py","path":"sdk/eidolon_ai_sdk/cpu/agent_cpu.py","sha":"8a022a0fde0bebbd9c11cb27001bee7ed4a4970e","size":4153,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/cpu/agent_cpu.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/cpu/agent_cpu.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/8a022a0fde0bebbd9c11cb27001bee7ed4a4970e","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/cpu/agent_cpu.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/cpu/agent_cpu.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/8a022a0fde0bebbd9c11cb27001bee7ed4a4970e","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/cpu/agent_cpu.py"}},{"name":"agent_io.py","path":"sdk/eidolon_ai_sdk/cpu/agent_io.py","sha":"d22bb0cabe724332190377b3148646ab36c4ffe2","size":2956,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/cpu/agent_io.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/cpu/agent_io.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/d22bb0cabe724332190377b3148646ab36c4ffe2","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/cpu/agent_io.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/cpu/agent_io.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/d22bb0cabe724332190377b3148646ab36c4ffe2","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/cpu/agent_io.py"}},{"name":"agents_logic_unit.py","path":"sdk/eidolon_ai_sdk/cpu/agents_logic_unit.py","sha":"bad94fb3d9078fa435b3f6120588ba91f69fb001","size":7597,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/cpu/agents_logic_unit.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/cpu/agents_logic_unit.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/bad94fb3d9078fa435b3f6120588ba91f69fb001","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/cpu/agents_logic_unit.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/cpu/agents_logic_unit.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/bad94fb3d9078fa435b3f6120588ba91f69fb001","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/cpu/agents_logic_unit.py"}},{"name":"call_context.py","path":"sdk/eidolon_ai_sdk/cpu/call_context.py","sha":"c5a1e4e38a2ca967a3ff25bdc4c7b887693083e8","size":292,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/cpu/call_context.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/cpu/call_context.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/c5a1e4e38a2ca967a3ff25bdc4c7b887693083e8","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/cpu/call_context.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/cpu/call_context.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/c5a1e4e38a2ca967a3ff25bdc4c7b887693083e8","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/cpu/call_context.py"}},{"name":"conversation_memory_unit.py","path":"sdk/eidolon_ai_sdk/cpu/conversation_memory_unit.py","sha":"2ac77ba18c40e01ed7b899e6605e0358c6c673be","size":2830,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/cpu/conversation_memory_unit.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/cpu/conversation_memory_unit.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/2ac77ba18c40e01ed7b899e6605e0358c6c673be","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/cpu/conversation_memory_unit.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/cpu/conversation_memory_unit.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/2ac77ba18c40e01ed7b899e6605e0358c6c673be","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/cpu/conversation_memory_unit.py"}},{"name":"conversational_agent_cpu.py","path":"sdk/eidolon_ai_sdk/cpu/conversational_agent_cpu.py","sha":"17b3d7afa10e15020010cdc33d047f1e5fcc7994","size":7736,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/cpu/conversational_agent_cpu.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/cpu/conversational_agent_cpu.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/17b3d7afa10e15020010cdc33d047f1e5fcc7994","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/cpu/conversational_agent_cpu.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/cpu/conversational_agent_cpu.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/17b3d7afa10e15020010cdc33d047f1e5fcc7994","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/cpu/conversational_agent_cpu.py"}},{"name":"llm","path":"sdk/eidolon_ai_sdk/cpu/llm","sha":"76bac8f53bbd5c76068f4b60c05556348ea62c69","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/cpu/llm?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/sdk/eidolon_ai_sdk/cpu/llm","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/76bac8f53bbd5c76068f4b60c05556348ea62c69","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/cpu/llm?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/76bac8f53bbd5c76068f4b60c05556348ea62c69","html":"https://github.com/eidolon-ai/eidolon/tree/main/sdk/eidolon_ai_sdk/cpu/llm"}},{"name":"llm_message.py","path":"sdk/eidolon_ai_sdk/cpu/llm_message.py","sha":"82b507777bd5fcab0fab5fb3048be5c7039f6687","size":1725,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/cpu/llm_message.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/cpu/llm_message.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/82b507777bd5fcab0fab5fb3048be5c7039f6687","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/cpu/llm_message.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/cpu/llm_message.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/82b507777bd5fcab0fab5fb3048be5c7039f6687","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/cpu/llm_message.py"}},{"name":"llm_unit.py","path":"sdk/eidolon_ai_sdk/cpu/llm_unit.py","sha":"67b99ddac68fd63c740c41e2391aaa9b3d3bb667","size":1910,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/cpu/llm_unit.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/cpu/llm_unit.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/67b99ddac68fd63c740c41e2391aaa9b3d3bb667","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/cpu/llm_unit.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/cpu/llm_unit.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/67b99ddac68fd63c740c41e2391aaa9b3d3bb667","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/cpu/llm_unit.py"}},{"name":"logic_unit.py","path":"sdk/eidolon_ai_sdk/cpu/logic_unit.py","sha":"42b066dcdc9f8fc97b967b524f207a7fc98d2d08","size":4204,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/cpu/logic_unit.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/cpu/logic_unit.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/42b066dcdc9f8fc97b967b524f207a7fc98d2d08","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/cpu/logic_unit.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/cpu/logic_unit.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/42b066dcdc9f8fc97b967b524f207a7fc98d2d08","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/cpu/logic_unit.py"}},{"name":"memory_unit.py","path":"sdk/eidolon_ai_sdk/cpu/memory_unit.py","sha":"753116d4cbec48d4b5ffc90aa5390371ce3d5d1b","size":3541,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/cpu/memory_unit.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/cpu/memory_unit.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/753116d4cbec48d4b5ffc90aa5390371ce3d5d1b","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/cpu/memory_unit.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/cpu/memory_unit.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/753116d4cbec48d4b5ffc90aa5390371ce3d5d1b","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/cpu/memory_unit.py"}},{"name":"open_ai_assistants_cpu.py","path":"sdk/eidolon_ai_sdk/cpu/open_ai_assistants_cpu.py","sha":"b0bae69a959afc1b444debf0e65fc97ebcc3fce2","size":13673,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/cpu/open_ai_assistants_cpu.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/cpu/open_ai_assistants_cpu.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/b0bae69a959afc1b444debf0e65fc97ebcc3fce2","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/cpu/open_ai_assistants_cpu.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/cpu/open_ai_assistants_cpu.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/b0bae69a959afc1b444debf0e65fc97ebcc3fce2","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/cpu/open_ai_assistants_cpu.py"}},{"name":"processing_unit.py","path":"sdk/eidolon_ai_sdk/cpu/processing_unit.py","sha":"1d31f3b6db5dff361b08eb02f2c4bb6a54b79126","size":825,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/cpu/processing_unit.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/cpu/processing_unit.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/1d31f3b6db5dff361b08eb02f2c4bb6a54b79126","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/cpu/processing_unit.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/cpu/processing_unit.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/1d31f3b6db5dff361b08eb02f2c4bb6a54b79126","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/cpu/processing_unit.py"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:29:21 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E4D8:255256:1663B6:1FCA76:65D519B1
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4664'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '336'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/__init__.py
  response:
    content: ''
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Length:
      - '0'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:29:21 GMT
      ETag:
      - W/"938f66ede415ccb10764da47cd5f3cfc076c07b8791c708cfa8ec54982197c1f"
      Expires:
      - Tue, 20 Feb 2024 21:34:21 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - fdcfac04abd7d6b422f836d98b0b534971bce33f
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - BD60:3A9B2B:5CDC4:74B63:65D519AB
      X-Served-By:
      - cache-yvr1526-YVR
      X-Timer:
      - S1708464561.122877,VS0,VE125
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/io?ref=main
  response:
    content: '[{"name":"__init__.py","path":"sdk/eidolon_ai_sdk/io/__init__.py","sha":"e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/io/__init__.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/io/__init__.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/io/__init__.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/io/__init__.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/io/__init__.py"}},{"name":"events.py","path":"sdk/eidolon_ai_sdk/io/events.py","sha":"5a42287702689c58153bd0aac6e8f40898e77506","size":4981,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/io/events.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/io/events.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/5a42287702689c58153bd0aac6e8f40898e77506","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/io/events.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/io/events.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/5a42287702689c58153bd0aac6e8f40898e77506","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/io/events.py"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:29:21 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E4D9:256B07:15359A:1E9C2C:65D519B1
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4663'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '337'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/memory?ref=main
  response:
    content: '[{"name":"__init__.py","path":"sdk/eidolon_ai_sdk/memory/__init__.py","sha":"e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/memory/__init__.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/memory/__init__.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/memory/__init__.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/memory/__init__.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/memory/__init__.py"}},{"name":"agent_memory.py","path":"sdk/eidolon_ai_sdk/memory/agent_memory.py","sha":"9cfa2930baed16b36ddbcab4ac3ee64cb179af64","size":1157,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/memory/agent_memory.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/memory/agent_memory.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/9cfa2930baed16b36ddbcab4ac3ee64cb179af64","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/memory/agent_memory.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/memory/agent_memory.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/9cfa2930baed16b36ddbcab4ac3ee64cb179af64","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/memory/agent_memory.py"}},{"name":"chroma_vector_store.py","path":"sdk/eidolon_ai_sdk/memory/chroma_vector_store.py","sha":"3e6c1b1b39eb90fc2caf50ecd6b33e80c7deef6a","size":5286,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/memory/chroma_vector_store.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/memory/chroma_vector_store.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/3e6c1b1b39eb90fc2caf50ecd6b33e80c7deef6a","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/memory/chroma_vector_store.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/memory/chroma_vector_store.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/3e6c1b1b39eb90fc2caf50ecd6b33e80c7deef6a","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/memory/chroma_vector_store.py"}},{"name":"document.py","path":"sdk/eidolon_ai_sdk/memory/document.py","sha":"66dd9fc741f50eb2eb03fbda938771fca9f7de9d","size":641,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/memory/document.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/memory/document.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/66dd9fc741f50eb2eb03fbda938771fca9f7de9d","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/memory/document.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/memory/document.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/66dd9fc741f50eb2eb03fbda938771fca9f7de9d","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/memory/document.py"}},{"name":"embeddings.py","path":"sdk/eidolon_ai_sdk/memory/embeddings.py","sha":"a111bf5861a31197246f0a89c50c47bf3c8101c7","size":2655,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/memory/embeddings.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/memory/embeddings.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/a111bf5861a31197246f0a89c50c47bf3c8101c7","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/memory/embeddings.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/memory/embeddings.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/a111bf5861a31197246f0a89c50c47bf3c8101c7","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/memory/embeddings.py"}},{"name":"file_memory.py","path":"sdk/eidolon_ai_sdk/memory/file_memory.py","sha":"c4ce501ddc93d23b0e178d82746b74551607eb60","size":2517,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/memory/file_memory.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/memory/file_memory.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/c4ce501ddc93d23b0e178d82746b74551607eb60","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/memory/file_memory.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/memory/file_memory.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/c4ce501ddc93d23b0e178d82746b74551607eb60","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/memory/file_memory.py"}},{"name":"file_system_vector_store.py","path":"sdk/eidolon_ai_sdk/memory/file_system_vector_store.py","sha":"b720480946c302872af59a10504db23c5c9e23b5","size":4220,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/memory/file_system_vector_store.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/memory/file_system_vector_store.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/b720480946c302872af59a10504db23c5c9e23b5","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/memory/file_system_vector_store.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/memory/file_system_vector_store.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/b720480946c302872af59a10504db23c5c9e23b5","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/memory/file_system_vector_store.py"}},{"name":"in_memory_file_memory.py","path":"sdk/eidolon_ai_sdk/memory/in_memory_file_memory.py","sha":"a559fc42a3a33c439e792d5272e78e5358c99850","size":3912,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/memory/in_memory_file_memory.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/memory/in_memory_file_memory.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/a559fc42a3a33c439e792d5272e78e5358c99850","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/memory/in_memory_file_memory.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/memory/in_memory_file_memory.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/a559fc42a3a33c439e792d5272e78e5358c99850","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/memory/in_memory_file_memory.py"}},{"name":"local_file_memory.py","path":"sdk/eidolon_ai_sdk/memory/local_file_memory.py","sha":"5de3f79ef29d8a2f773a314ca24b47fd7d7faa5f","size":5624,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/memory/local_file_memory.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/memory/local_file_memory.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/5de3f79ef29d8a2f773a314ca24b47fd7d7faa5f","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/memory/local_file_memory.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/memory/local_file_memory.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/5de3f79ef29d8a2f773a314ca24b47fd7d7faa5f","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/memory/local_file_memory.py"}},{"name":"local_symbolic_memory.py","path":"sdk/eidolon_ai_sdk/memory/local_symbolic_memory.py","sha":"719ecd09fa7467bf1a25bb7e9e5e3acea3c084ba","size":4837,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/memory/local_symbolic_memory.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/memory/local_symbolic_memory.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/719ecd09fa7467bf1a25bb7e9e5e3acea3c084ba","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/memory/local_symbolic_memory.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/memory/local_symbolic_memory.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/719ecd09fa7467bf1a25bb7e9e5e3acea3c084ba","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/memory/local_symbolic_memory.py"}},{"name":"mongo_symbolic_memory.py","path":"sdk/eidolon_ai_sdk/memory/mongo_symbolic_memory.py","sha":"dbcb3ab019b02d01114b2d82beb5c35025187be4","size":4067,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/memory/mongo_symbolic_memory.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/memory/mongo_symbolic_memory.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/dbcb3ab019b02d01114b2d82beb5c35025187be4","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/memory/mongo_symbolic_memory.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/memory/mongo_symbolic_memory.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/dbcb3ab019b02d01114b2d82beb5c35025187be4","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/memory/mongo_symbolic_memory.py"}},{"name":"noop_memory.py","path":"sdk/eidolon_ai_sdk/memory/noop_memory.py","sha":"1dbcbcfa51c7b7b2304fcfcb89136f8f0081e569","size":996,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/memory/noop_memory.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/memory/noop_memory.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/1dbcbcfa51c7b7b2304fcfcb89136f8f0081e569","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/memory/noop_memory.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/memory/noop_memory.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/1dbcbcfa51c7b7b2304fcfcb89136f8f0081e569","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/memory/noop_memory.py"}},{"name":"semantic_memory.py","path":"sdk/eidolon_ai_sdk/memory/semantic_memory.py","sha":"5a802554679ea68b9d07e3498fc41e43e59f9843","size":5453,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/memory/semantic_memory.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/memory/semantic_memory.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/5a802554679ea68b9d07e3498fc41e43e59f9843","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/memory/semantic_memory.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/memory/semantic_memory.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/5a802554679ea68b9d07e3498fc41e43e59f9843","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/memory/semantic_memory.py"}},{"name":"similarity_memory.py","path":"sdk/eidolon_ai_sdk/memory/similarity_memory.py","sha":"1071828f68f623e3b46585bc51848a994b8f4817","size":869,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/memory/similarity_memory.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/memory/similarity_memory.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/1071828f68f623e3b46585bc51848a994b8f4817","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/memory/similarity_memory.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/memory/similarity_memory.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/1071828f68f623e3b46585bc51848a994b8f4817","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/memory/similarity_memory.py"}},{"name":"vector_store.py","path":"sdk/eidolon_ai_sdk/memory/vector_store.py","sha":"057432f9c3d1b44288f18a7c0cb0df112c13ace6","size":1516,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/memory/vector_store.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/memory/vector_store.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/057432f9c3d1b44288f18a7c0cb0df112c13ace6","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/memory/vector_store.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/memory/vector_store.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/057432f9c3d1b44288f18a7c0cb0df112c13ace6","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/memory/vector_store.py"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:29:21 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E4D4:24F1D0:15C5BE:1F2CA9:65D519B1
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4661'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '339'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/assets?ref=main
  response:
    content: '[{"name":"main_images","path":"docs/src/assets/main_images","sha":"6002f20de21f3133a8662e8d9b375159b0069b45","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/assets/main_images?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/docs/src/assets/main_images","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/6002f20de21f3133a8662e8d9b375159b0069b45","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/assets/main_images?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/6002f20de21f3133a8662e8d9b375159b0069b45","html":"https://github.com/eidolon-ai/eidolon/tree/main/docs/src/assets/main_images"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:29:21 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E4DA:2518A1:150268:1E6931:65D519B1
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4662'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '338'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/agent_os.py
  response:
    content: "from __future__ import annotations\n\nimport os\n\nimport pathlib\nfrom
      typing import Dict, Tuple, TypeVar, Type\n\nfrom eidolon_ai_sdk.system.resources.resources_base
      import load_resources, Resource\nfrom eidolon_ai_sdk.util.logger import logger\n\nT
      = TypeVar(\"T\", bound=\"Resource\")  # noqa: F821\nS = TypeVar(\"S\", bound=\"BaseModel\")
      \ # noqa: F821\n\n\nclass AgentOS:\n    _resources: Dict[str, Dict[str, Tuple[\"Resource\",
      str]]] = ...  # noqa: F821\n    file_memory: \"FileMemory\" = ...  # noqa: F821\n
      \   symbolic_memory: \"SymbolicMemory\" = ...  # noqa: F821\n    similarity_memory:
      \"SimilarityMemory\" = ...  # noqa: F821\n    security_manager: \"SecurityManager\"
      = ...  # noqa: F821\n\n    @staticmethod\n    def current_machine_url() -> str:\n
      \       return os.environ.get(\"EIDOLON_LOCAL_MACHINE\", \"http://localhost:8080\")\n\n
      \   @classmethod\n    def _get_or_load_resources(cls) -> Dict[str, Dict[str,
      Tuple[Resource, str]]]:\n        if cls._resources is ...:\n            from
      eidolon_ai_sdk.builtins.code_builtins import named_builtins\n\n            cls._resources
      = {}\n            for resource in named_builtins():\n                cls.register_resource(resource,
      source=\"builtin\")\n            for resource, loc in load_resources(pathlib.Path(__file__).parent
      / \"builtins\" / \"resources\"):\n                cls.register_resource(resource,
      source=\"builtin\")\n\n        return cls._resources\n\n    @classmethod\n    def
      load_machine(cls, machine):\n        cls.file_memory = machine.memory.file_memory\n
      \       cls.symbolic_memory = machine.memory.symbolic_memory\n        cls.similarity_memory
      = machine.memory.similarity_memory\n        cls.security_manager = machine.security_manager\n\n
      \   @classmethod\n    def register_resource(cls, resource: Resource, source=None):
      \ # noqa: F821\n        resources = cls._get_or_load_resources()\n        if
      resource.kind not in resources:\n            resources[resource.kind] = {}\n
      \       bucket = resources[resource.kind]\n        if resource.metadata.name
      in bucket:\n            if bucket[resource.metadata.name][1] == \"builtin\":\n
      \               logger.info(f\"Overriding builtin resource '{resource.kind}.{resource.metadata.name}'\")\n\n
      \               old_impl = getattr(bucket[resource.metadata.name][0], \"spec\",
      {}).get(\"implementation\")\n                if old_impl:\n                    new_spec
      = getattr(resource, \"spec\")\n                    new_impl = new_spec.get(\"implementation\")
      if isinstance(new_spec, dict) else new_spec\n                    if not new_impl
      or resource.metadata.name == new_impl:\n                        new_spec[\"implementation\"]
      = old_impl\n            else:\n                raise ValueError(\n                    f\"Resource
      {resource.metadata.name} already registered by {bucket[resource.metadata.name][1]}\"\n
      \               )\n        logger.debug(f\"Registering resource {resource.kind}.{resource.metadata.name}\")\n
      \       bucket[resource.metadata.name] = (resource, source)\n\n    @classmethod\n
      \   def get_resources(cls, kind: Type[T]) -> Dict[str, T]:  # noqa: F821\n        return
      {k: tu[0].promote(kind) for k, tu in cls._get_or_load_resources().get(kind.kind_literal(),
      {}).items()}\n\n    @classmethod\n    def get_resource_raw(cls, kind: Type[T],
      name: str) -> Resource:\n        return cls._get_or_load_resources()[kind.kind_literal()][name][0]\n\n
      \   @classmethod\n    def get_resource(cls, kind: Type[T], name: str, default=...)
      -> T:\n        bucket = kind.kind_literal()\n        try:\n            return
      cls.get_resource_raw(kind, name).promote(kind)\n        except KeyError:\n            if
      default is not ...:\n                return default\n            raise ValueError(f\"Resource
      {name} not found in bucket {bucket}\")\n\n    @classmethod\n    def get_instance(cls,
      kind: Type[S], **kwargs) -> S:\n        from eidolon_ai_sdk.system.reference_model
      import Reference\n\n        return Reference[kind, kind.__name__]().instantiate(**kwargs)\n\n
      \   @classmethod\n    def get_resource_source(cls, bucket, name: str) -> str:\n
      \       try:\n            return cls._get_or_load_resources()[bucket][name][1]\n
      \       except KeyError:\n            raise ValueError(f\"Resource {name} not
      found in bucket {bucket}\")\n\n    @classmethod\n    def reset(cls):\n        cls._resources
      = ...\n        cls.file_memory = ...\n        cls.symbolic_memory = ...\n        cls.similarity_memory
      = ...\n        cls.embedder = ...\n"
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Length:
      - '1266'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:29:21 GMT
      ETag:
      - W/"08bd38995329a527ac9ae608cef9e1300a5a9a0dcdf40a693fa5c0e180838665"
      Expires:
      - Tue, 20 Feb 2024 21:34:21 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - 70cd7bca6d0224a1c8c369241734c801509b4837
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - 4754:25435F:B08E0:104307:65D519AF
      X-Served-By:
      - cache-bfi-kbfi7400054-BFI
      X-Timer:
      - S1708464561.156978,VS0,VE146
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/content?ref=main
  response:
    content: '[{"name":"config.ts","path":"docs/src/content/config.ts","sha":"9df91b6044424c8275f3d9f46c8a46cdefccc1ae","size":267,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/content/config.ts?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/docs/src/content/config.ts","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/9df91b6044424c8275f3d9f46c8a46cdefccc1ae","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/docs/src/content/config.ts","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/content/config.ts?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/9df91b6044424c8275f3d9f46c8a46cdefccc1ae","html":"https://github.com/eidolon-ai/eidolon/blob/main/docs/src/content/config.ts"}},{"name":"docs","path":"docs/src/content/docs","sha":"d82a463a89436dd5d27d200ad6ebe81c6a97f644","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/content/docs?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/docs/src/content/docs","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/d82a463a89436dd5d27d200ad6ebe81c6a97f644","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/content/docs?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/d82a463a89436dd5d27d200ad6ebe81c6a97f644","html":"https://github.com/eidolon-ai/eidolon/tree/main/docs/src/content/docs"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:29:21 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E4D1:25360F:14C692:1E2CF5:65D519B1
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4660'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '340'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/system?ref=main
  response:
    content: '[{"name":"__init__.py","path":"sdk/eidolon_ai_sdk/system/__init__.py","sha":"e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/system/__init__.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/system/__init__.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/system/__init__.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/system/__init__.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/system/__init__.py"}},{"name":"agent_contract.py","path":"sdk/eidolon_ai_sdk/system/agent_contract.py","sha":"3e7b6ed39743961b0ed5fe9b060d07b58af451b6","size":1024,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/system/agent_contract.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/system/agent_contract.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/3e7b6ed39743961b0ed5fe9b060d07b58af451b6","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/system/agent_contract.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/system/agent_contract.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/3e7b6ed39743961b0ed5fe9b060d07b58af451b6","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/system/agent_contract.py"}},{"name":"agent_controller.py","path":"sdk/eidolon_ai_sdk/system/agent_controller.py","sha":"8dd8e607518d332b6cde8a888b6b02b0a4510728","size":23134,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/system/agent_controller.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/system/agent_controller.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/8dd8e607518d332b6cde8a888b6b02b0a4510728","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/system/agent_controller.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/system/agent_controller.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/8dd8e607518d332b6cde8a888b6b02b0a4510728","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/system/agent_controller.py"}},{"name":"agent_machine.py","path":"sdk/eidolon_ai_sdk/system/agent_machine.py","sha":"fd60830dfda808c7f7852eff37745ac5acec782b","size":2947,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/system/agent_machine.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/system/agent_machine.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/fd60830dfda808c7f7852eff37745ac5acec782b","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/system/agent_machine.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/system/agent_machine.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/fd60830dfda808c7f7852eff37745ac5acec782b","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/system/agent_machine.py"}},{"name":"fn_handler.py","path":"sdk/eidolon_ai_sdk/system/fn_handler.py","sha":"0b372b59b9a834d1f2b832c955a349ba2d0fb534","size":3358,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/system/fn_handler.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/system/fn_handler.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/0b372b59b9a834d1f2b832c955a349ba2d0fb534","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/system/fn_handler.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/system/fn_handler.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/0b372b59b9a834d1f2b832c955a349ba2d0fb534","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/system/fn_handler.py"}},{"name":"processes.py","path":"sdk/eidolon_ai_sdk/system/processes.py","sha":"2c464ce9a1cf0c4553eb265e1219380e85d8ea9e","size":3847,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/system/processes.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/system/processes.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/2c464ce9a1cf0c4553eb265e1219380e85d8ea9e","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/system/processes.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/system/processes.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/2c464ce9a1cf0c4553eb265e1219380e85d8ea9e","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/system/processes.py"}},{"name":"reference_model.py","path":"sdk/eidolon_ai_sdk/system/reference_model.py","sha":"1d6112fbf7dc0f66b9e3274537d991e3e3bbc573","size":6629,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/system/reference_model.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/system/reference_model.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/1d6112fbf7dc0f66b9e3274537d991e3e3bbc573","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/system/reference_model.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/system/reference_model.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/1d6112fbf7dc0f66b9e3274537d991e3e3bbc573","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/system/reference_model.py"}},{"name":"request_context.py","path":"sdk/eidolon_ai_sdk/system/request_context.py","sha":"d037bc2c57a7f2be6ac0789594ac01cc6960f62e","size":2360,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/system/request_context.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/system/request_context.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/d037bc2c57a7f2be6ac0789594ac01cc6960f62e","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/system/request_context.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/system/request_context.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/d037bc2c57a7f2be6ac0789594ac01cc6960f62e","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/system/request_context.py"}},{"name":"resources","path":"sdk/eidolon_ai_sdk/system/resources","sha":"fe450f9db0aedb5c77bf09d95157d532f6d415a5","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/system/resources?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/sdk/eidolon_ai_sdk/system/resources","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/fe450f9db0aedb5c77bf09d95157d532f6d415a5","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/system/resources?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/fe450f9db0aedb5c77bf09d95157d532f6d415a5","html":"https://github.com/eidolon-ai/eidolon/tree/main/sdk/eidolon_ai_sdk/system/resources"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:29:21 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E4D5:25923F:1DAD5F:2713C9:65D519B1
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4659'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '341'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/__init__.py
  response:
    content: ''
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Length:
      - '0'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:29:21 GMT
      ETag:
      - W/"938f66ede415ccb10764da47cd5f3cfc076c07b8791c708cfa8ec54982197c1f"
      Expires:
      - Tue, 20 Feb 2024 21:34:21 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - 1bbc7557f43b7b18adb2e77e6bd0ad789b220b1c
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - 94E6:5B8F:73D21:8D052:65D519AE
      X-Served-By:
      - cache-yvr1532-YVR
      X-Timer:
      - S1708464561.259381,VS0,VE123
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/security?ref=main
  response:
    content: '[{"name":"__init__.py","path":"sdk/eidolon_ai_sdk/security/__init__.py","sha":"e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/security/__init__.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/security/__init__.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/security/__init__.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/security/__init__.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/security/__init__.py"}},{"name":"google_authorizor.py","path":"sdk/eidolon_ai_sdk/security/google_authorizor.py","sha":"596631152f2c83e903ebc3f256462658cc354889","size":1812,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/security/google_authorizor.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/security/google_authorizor.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/596631152f2c83e903ebc3f256462658cc354889","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/security/google_authorizor.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/security/google_authorizor.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/596631152f2c83e903ebc3f256462658cc354889","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/security/google_authorizor.py"}},{"name":"jwt_middleware.py","path":"sdk/eidolon_ai_sdk/security/jwt_middleware.py","sha":"661e259bebc42593e04f3454c23ebdbda2a38419","size":1745,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/security/jwt_middleware.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/security/jwt_middleware.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/661e259bebc42593e04f3454c23ebdbda2a38419","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/security/jwt_middleware.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/security/jwt_middleware.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/661e259bebc42593e04f3454c23ebdbda2a38419","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/security/jwt_middleware.py"}},{"name":"okta_authorizor.py","path":"sdk/eidolon_ai_sdk/security/okta_authorizor.py","sha":"4d1116e049ef4f2beba26641372e38bf0b139700","size":487,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/security/okta_authorizor.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/security/okta_authorizor.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/4d1116e049ef4f2beba26641372e38bf0b139700","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/security/okta_authorizor.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/security/okta_authorizor.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/4d1116e049ef4f2beba26641372e38bf0b139700","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/security/okta_authorizor.py"}},{"name":"security_manager.py","path":"sdk/eidolon_ai_sdk/security/security_manager.py","sha":"175804f2e78c8e22b4e3697feb86bbe63cc895ab","size":978,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/security/security_manager.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/security/security_manager.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/175804f2e78c8e22b4e3697feb86bbe63cc895ab","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/security/security_manager.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/security/security_manager.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/175804f2e78c8e22b4e3697feb86bbe63cc895ab","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/security/security_manager.py"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:29:21 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E4CF:2511E0:14F693:1E5D87:65D519B1
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4658'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '342'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/conftest.py
  response:
    content: "import os\nimport pathlib\nimport socket\nimport threading\nfrom contextlib
      import asynccontextmanager\nfrom typing import Iterable\nfrom unittest.mock
      import patch, AsyncMock\n\nimport httpx\nimport pytest\nimport uvicorn\nfrom
      bson import ObjectId\nfrom fastapi import FastAPI\nfrom motor.motor_asyncio
      import AsyncIOMotorClient\nfrom sse_starlette.sse import AppStatus\nfrom vcr.request
      import Request as VcrRequest\nfrom vcr.stubs import httpx_stubs\nfrom vcr.stubs.httpx_stubs
      import _shared_vcr_send, _record_responses\n\nimport eidolon_ai_sdk.system.processes
      as processes\nfrom eidolon_ai_sdk.agent_os import AgentOS\nfrom eidolon_ai_sdk.bin.agent_http_server
      import start_os, start_app\nfrom eidolon_ai_sdk.cpu.llm.open_ai_llm_unit import
      OpenAIGPT\nfrom eidolon_ai_sdk.memory.local_file_memory import LocalFileMemory\nfrom
      eidolon_ai_sdk.memory.local_symbolic_memory import LocalSymbolicMemory\nfrom
      eidolon_ai_sdk.memory.mongo_symbolic_memory import MongoSymbolicMemory\nfrom
      eidolon_ai_sdk.memory.similarity_memory import SimilarityMemory\nfrom eidolon_ai_sdk.system.reference_model
      import Reference\nfrom eidolon_ai_sdk.system.resources.agent_resource import
      AgentResource\nfrom eidolon_ai_sdk.system.resources.machine_resource import
      MachineResource\nfrom eidolon_ai_sdk.system.resources.resources_base import
      Resource, Metadata\nfrom eidolon_ai_sdk.util.class_utils import fqn\n\n\n# we
      want all tests using the client_builder to use vcr, so we don't send requests
      to openai\ndef pytest_collection_modifyitems(items):\n    for item in filter(lambda
      i: \"run_app\" in i.fixturenames, items):\n        item.add_marker(pytest.mark.vcr)\n
      \       item.fixturenames.append(\"patched_vcr_object_handling\")\n        item.fixturenames.append(\"deterministic_process_ids\")\n
      \       item.fixturenames.append(\"patch_async_vcr_send\")\n\n\n@pytest.fixture\ndef
      patch_async_vcr_send(monkeypatch):\n    async def mock_async_vcr_send(cassette,
      real_send, *args, **kwargs):\n        if len(args) == 1 and \"stream\" in kwargs
      and kwargs[\"stream\"] is True:\n            args = (args[0], kwargs[\"request\"])\n
      \           del kwargs[\"request\"]\n        vcr_request, response = _shared_vcr_send(cassette,
      real_send, *args, **kwargs)\n        if response:\n            # add cookies
      from response to session cookie store\n            args[0].cookies.extract_cookies(response)\n
      \           return response\n\n        real_response = await real_send(*args,
      **kwargs)\n        if \"text/event-stream\" in real_response.headers[\"Content-Type\"]:\n
      \           aiter_bytes = real_response.aiter_bytes\n\n            async def
      _sub(*args2, **kwargs2):\n                acc = []\n                async for
      x in aiter_bytes(*args2, **kwargs2):\n                    acc.append(x)\n                    yield
      x\n\n                if hasattr(real_response, \"_content\"):\n                    orig_content
      = real_response._content\n                else:\n                    orig_content
      = \"____NOT_SET____\"\n                real_response._content = b\"\".join(acc)\n
      \               _record_responses(cassette, vcr_request, real_response)\n                if
      orig_content == \"____NOT_SET____\":\n                    del real_response._content\n
      \               else:\n                    real_response._content = orig_content\n\n
      \           real_response.aiter_bytes = _sub\n            return real_response\n
      \       else:\n            return _record_responses(cassette, vcr_request, real_response)\n\n
      \   monkeypatch.setattr(httpx_stubs, \"_async_vcr_send\", AsyncMock(side_effect=mock_async_vcr_send))\n\n\n@pytest.fixture(scope=\"module\")\ndef
      app_builder(machine_manager):\n    def fn(resources: Iterable[Resource]):\n
      \       @asynccontextmanager\n        async def manage_lifecycle(_app: FastAPI):\n
      \           async with machine_manager() as _machine:\n                async
      with start_os(\n                    app=_app,\n                    resource_generator=[_machine,
      *resources] if _machine else resources,\n                    machine_name=_machine.metadata.name,\n
      \               ):\n                    yield\n                    print(\"done\")\n\n
      \       return start_app(lifespan=manage_lifecycle)\n\n    return fn\n\n\n@pytest.fixture(scope=\"module\")\ndef
      port():\n    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:\n
      \       s.bind((\"\", 0))\n        s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR,
      1)\n        return s.getsockname()[1]\n\n\n@pytest.fixture(autouse=True)\ndef
      vcr_config():\n    return dict(\n        filter_headers=[(\"authorization\",
      \"XXXXXX\")],\n        ignore_localhost=True,\n        ignore_hosts=[\"0.0.0.0\",
      \"localhost\"],\n        record_mode=\"new_episodes\",\n        match_on=[\"method\",
      \"scheme\", \"host\", \"port\", \"path\", \"query\", \"body\"],\n    )\n\n\n@pytest.fixture(scope=\"module\")\ndef
      run_app(app_builder, port):\n    @asynccontextmanager\n    async def fn(*agents):\n
      \       server_wrapper = []\n\n        def run_server():\n            AppStatus.should_exit
      = False\n            AppStatus.should_exit_event = None\n\n            try:\n
      \               resources = [\n                    a\n                    if
      isinstance(a, Resource)\n                    else AgentResource(\n                        apiVersion=\"eidolon/v1\",\n
      \                       spec=Reference(implementation=fqn(a)),\n                        metadata=Metadata(name=a.__name__),\n
      \                   )\n                    for a in agents\n                ]\n
      \               app = app_builder(resources)\n                # todo, the next
      line launches uvicorn app as a subprocess so it does not block\n                config
      = uvicorn.Config(app, host=\"0.0.0.0\", port=port, log_level=\"info\", loop=\"asyncio\")\n
      \               server = uvicorn.Server(config)\n                server_wrapper.append(server)\n
      \               #     todo, issue here where raising on bootstrap does not kill
      the server\n                server.run()\n            except BaseException as
      e:\n                server_wrapper.clear()\n                server_wrapper.append(\"aborted\")\n
      \               raise e\n\n        server_thread = threading.Thread(target=run_server)\n
      \       server_thread.start()\n\n        try:\n            # Wait for the server
      to start\n            while len(server_wrapper) == 0 or not (server_wrapper[0]
      == \"aborted\" or server_wrapper[0].started):\n                pass\n\n            print(f\"Server
      started on port {port}\")\n            os.environ[\"EIDOLON_LOCAL_MACHINE\"]
      = f\"http://localhost:{port}\"\n            yield f\"http://localhost:{port}\"\n
      \       finally:\n            # server_wrapper[0].force_exit = True\n            server_wrapper[0].should_exit
      = True\n            server_thread.join()\n\n    return fn\n\n\n@pytest.fixture(scope=\"module\")\ndef
      client_builder(run_app):\n    @asynccontextmanager\n    async def fn(*agents):\n
      \       async with run_app(*agents) as ra:\n            with httpx.Client(base_url=ra,
      timeout=httpx.Timeout(60)) as client:\n                yield client\n\n    return
      fn\n\n\n@pytest.fixture(scope=\"module\")\ndef machine_manager(file_memory,
      symbolic_memory, similarity_memory):\n    @asynccontextmanager\n    async def
      fn():\n        async with symbolic_memory() as sym, similarity_memory() as sim:\n
      \           yield MachineResource(\n                apiVersion=\"eidolon/v1\",\n
      \               metadata=Metadata(name=\"test_machine\"),\n                kind=\"Machine\",\n
      \               spec=dict(\n                    symbolic_memory=sym,\n                    file_memory=file_memory,\n
      \                   similarity_memory=sim,\n                ),\n            )\n\n
      \   return fn\n\n\n@pytest.fixture\nasync def machine(machine_manager):\n    async
      with machine_manager() as m:\n        instantiated = m.spec.instantiate()\n
      \       AgentOS.load_machine(instantiated)\n        yield instantiated\n        AgentOS.reset()\n\n\n@pytest.fixture(scope=\"module\")\ndef
      local_symbolic_memory(module_identifier):\n    @asynccontextmanager\n    async
      def fn():\n        ref = Reference(implementation=fqn(LocalSymbolicMemory))\n
      \       memory = ref.instantiate()\n        await memory.start()\n        yield
      ref\n        await memory.stop()\n        # Teardown: drop the test database\n\n
      \   return fn\n\n\n@pytest.fixture(scope=\"module\")\ndef mongo_symbolic_memory(module_identifier):\n
      \   @asynccontextmanager\n    async def fn():\n        # Setup unique database
      for test suite\n        identifier = module_identifier[:20]\n        database_name
      = f\"test_db_{identifier}_{ObjectId()}\"  # Unique name for test database\n
      \       ref = Reference(\n            implementation=fqn(MongoSymbolicMemory),\n
      \           mongo_database_name=database_name,\n        )\n        memory =
      ref.instantiate()\n        await memory.start()\n        yield ref\n        await
      memory.stop()\n        # Teardown: drop the test database\n        connection_string
      = os.getenv(\"MONGO_CONNECTION_STRING\")\n        client = AsyncIOMotorClient(connection_string)\n
      \       await client.drop_database(database_name)\n        client.close()\n\n
      \   return fn\n\n\ndef pytest_addoption(parser):\n    parser.addoption(\"--symbolic_memory\",
      action=\"store\", default=\"mongo\", help=\"Symbolic memory implementation to
      use\")\n\n\n@pytest.fixture(scope=\"module\")\ndef symbolic_memory(mongo_symbolic_memory,
      local_symbolic_memory, pytestconfig):\n    if pytestconfig.getoption(\"symbolic_memory\").lower()
      == \"local\":\n        print(\"Using local symbolic memory\")\n        return
      local_symbolic_memory\n    else:\n        print(\"Using mongo symbolic memory\")\n
      \       return mongo_symbolic_memory\n\n\n@pytest.fixture(scope=\"module\")\ndef
      file_memory_loc(tmp_path_factory, module_identifier):\n    return tmp_path_factory.mktemp(f\"file_memory_{module_identifier}\")\n\n\n@pytest.fixture(scope=\"module\")\ndef
      file_memory(file_memory_loc):\n    return Reference[LocalFileMemory](root_dir=str(file_memory_loc))\n\n\n@pytest.fixture(scope=\"module\")\ndef
      similarity_memory(tmp_path_factory):\n    @asynccontextmanager\n    async def
      cm():\n        tmp_dir = tmp_path_factory.mktemp(f\"vector_store_{module_identifier}_{ObjectId()}\")\n
      \       ref = Reference(\n            implementation=fqn(SimilarityMemory),\n
      \           vector_store=dict(url=f\"file://{tmp_dir}\"),\n        )\n        memory:
      SimilarityMemory = ref.instantiate()\n        await memory.start()\n        yield
      ref\n        await memory.stop()\n\n    return cm\n\n\n@pytest.fixture(scope=\"module\",
      autouse=True)\ndef module_identifier(request):\n    return request.node.name.replace(\".\",
      \"_\")\n\n\n@pytest.fixture(scope=\"session\")\ndef test_dir():\n    return
      pathlib.Path(__file__).parent\n\n\n@pytest.fixture(scope=\"module\")\ndef llm(test_dir,
      module_identifier):\n    return Reference(\n        implementation=fqn(OpenAIGPT),\n
      \       model=\"gpt-4-vision-preview\",\n        force_json=False,\n        max_tokens=4096,\n
      \   )\n\n\n@pytest.fixture()\ndef dog(test_dir):\n    loc = str(test_dir / \"images\"
      / \"dog.png\")\n    with open(loc, \"rb\") as f:\n        yield f\n\n\n@pytest.fixture()\ndef
      cat(test_dir):\n    loc = str(test_dir / \"images\" / \"cat.png\")\n    with
      open(loc, \"rb\") as f:\n        yield f\n\n\n@pytest.fixture\ndef patched_vcr_object_handling():\n
      \   \"\"\"\n    vcr has a bug around how it handles multipart requests, and
      it is wired in for everything,\n    even the fake test client requests, so we
      need to pipe the body through ourselves\n    \"\"\"\n\n    def my_custom_function(httpx_request,
      **kwargs):\n        uri = str(httpx_request.url)\n        headers = dict(httpx_request.headers)\n
      \       return VcrRequest(httpx_request.method, uri, httpx_request, headers)\n\n
      \   with patch.object(httpx_stubs, \"_make_vcr_request\", new=my_custom_function):\n
      \       yield\n\n\ndef deterministic_id_generator(test_name):\n    count = 0\n
      \   while True:\n        yield f\"{test_name}_{count}\"\n        count += 1\n\n\n@pytest.fixture()\ndef
      deterministic_process_ids(request):\n    \"\"\"\n    Tool call responses contain
      the process id, which means it does name make cache hits for vcr.\n    This
      method patches object id for processes so that it returns a deterministic id
      based on the test name.\n    \"\"\"\n\n    test_name = request.node.name\n    id_generator
      = deterministic_id_generator(test_name)\n\n    def patched_ObjectId(*args, **kwargs):\n
      \       return next(id_generator)\n\n    with patch.object(processes.bson, \"ObjectId\",
      new=patched_ObjectId):\n        yield\n"
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Length:
      - '3542'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:29:21 GMT
      ETag:
      - W/"6f4742fc3bb66e6c5d72d609d9e5e6ef35a4f327cfe0009aa81d645b5bb3aad0"
      Expires:
      - Tue, 20 Feb 2024 21:34:21 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - cb18536599ae39fd8bfde5e5b1a7056558d6361a
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - 98DA:7712:573862:69A927:65D519B1
      X-Served-By:
      - cache-yvr1530-YVR
      X-Timer:
      - S1708464561.257225,VS0,VE130
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/test_events.py
  response:
    content: "from eidolon_ai_sdk.io.events import BaseStreamEvent\n\n\ndef test_from_dict():\n
      \   BaseStreamEvent.from_dict({\"event_type\": \"user_input\", \"input\": {}})\n"
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Length:
      - '135'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:29:21 GMT
      ETag:
      - W/"123803c2a0d8dfcaa136d0dcd030774c9fde65d460910e9d55d1c6de3b20c1ce"
      Expires:
      - Tue, 20 Feb 2024 21:34:21 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - b12f5f200ff35999489b1ab4f6570576ddfd6dba
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - 2B34:2587A7:B2D52:106777:65D519AE
      X-Served-By:
      - cache-bfi-krnt7300023-BFI
      X-Timer:
      - S1708464561.279108,VS0,VE123
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/test_replay.py
  response:
    content: "import pytest\n\nfrom eidolon_ai_sdk.agent_os import AgentOS\nfrom eidolon_ai_sdk.system.resources.reference_resource
      import ReferenceResource\nfrom eidolon_ai_sdk.system.resources.resources_base
      import Metadata\nfrom eidolon_ai_sdk.util.replay import replayable, ReplayConfig,
      replay, default_serializer\n\n\nclass SideEffect:\n    calls = []\n\n\nasync
      def foo(*args, **kwargs):\n    SideEffect.calls.append(dict(args=args, kwargs=kwargs))\n
      \   return SideEffect.calls[-1]\n\n\n@pytest.fixture(autouse=True)\ndef side_effect_manager():\n
      \   SideEffect.cals = []\n    yield\n    SideEffect.cals = []\n\n\n@pytest.fixture\ndef
      enabled_resume_point_config(machine, request):\n    AgentOS.register_resource(\n
      \       ReferenceResource(\n            apiVersion=\"eidolon/v1\",\n            metadata=Metadata(name=ReplayConfig.__name__),\n
      \           spec=dict(save_loc=f\"resume_points/{request.node.name}\"),\n        )\n
      \   )\n    return AgentOS.get_instance(ReplayConfig)\n\n\ndef test_default_resume_point_config(machine):\n
      \   assert AgentOS.get_instance(ReplayConfig).save_loc is None\n\n\ndef test_resume_point_enabled(enabled_resume_point_config):\n
      \   assert enabled_resume_point_config.save_loc is not None\n\n\nasync def test_resume_point_actually_works(enabled_resume_point_config,
      file_memory_loc):\n    assert await replayable(foo)(1, 2, 3, a=4, b=5) == dict(args=(1,
      2, 3), kwargs=dict(a=4, b=5))\n    assert len(SideEffect.calls) == 1\n\n    stream
      = replay(file_memory_loc / enabled_resume_point_config.save_loc / \"000_foo\")\n
      \   acc = [s async for s in stream]\n    assert acc[0] == dict(args=(1, 2, 3),
      kwargs=dict(a=4, b=5))\n    assert len(SideEffect.calls) == 2\n\n\nbad_obj =
      {\n    \"args\": [],\n    \"kwargs\": {\n        \"messages\": [\n            {\n
      \               \"role\": \"system\",\n                \"content\": \"You are
      an football expert with a focus on Travis Kelce. You love the game and enjoy
      helping new fans learn.\\nYou speak in a friendly, helpful tone and are always
      willing to answer questions.\\n\\nTaylor Swift and Travis Kelce are in a new,
      public relationship. This is public knowledge and you are happy to \\ntalk about
      it.\\n\\nYou want to help Taylor's fans (swifties) learn more about the football.
      Since you are an expert, it is your \\nresponsibility to research questions
      so that you have answers for the users. You will have the ability to search
      \\nthe web and visit websites to find answers to questions.\\n\\nUse these capabilities
      to retrieve up-to-date information as needed.\\nYou may make multiple searches
      to answer questions. When responding, add specific citations to your response.\\n\\nIf
      you get see system messages suggesting feedback, incorporate it as fact.\",\n
      \           },\n            {\"role\": \"user\", \"content\": [{\"type\": \"text\",
      \"text\": \"what is football?\\n\\nBe concise.\"}]},\n        ],\n        \"model\":
      \"gpt-4-1106-preview\",\n        \"temperature\": 0.3,\n        \"tools\": [\n
      \           {\n                \"type\": \"function\",\n                \"function\":
      {\n                    \"name\": \"WebSearch_go_to_url\",\n                    \"description\":
      \"\\n        Retrieve the html document from a given webpage\\n        :param
      url: the url to retrieve.\\n        :return: the html document.\\n        \",\n
      \                   \"parameters\": {\n                        \"properties\":
      {\"url\": {\"title\": \"Url\", \"type\": \"string\"}},\n                        \"required\":
      [\"url\"],\n                        \"title\": \"Go_to_urlInputModel\",\n                        \"type\":
      \"object\",\n                    },\n                },\n            },\n            {\n
      \               \"type\": \"function\",\n                \"function\": {\n                    \"name\":
      \"WebSearch_search\",\n                    \"description\": \"\\n        Search
      google and get the results. Cannot return more than 100 results\\n        :param
      term: the search query\\n        :param num_results: the number of results to
      return (default 10, max 100)\\n        :param lang: the language to search in
      (default en)\\n        :return: A list of SearchResults including url, title,
      and description\\n        \",\n                    \"parameters\": {\n                        \"properties\":
      {\n                            \"term\": {\"title\": \"Term\", \"type\": \"string\"},\n
      \                           \"num_results\": {\"default\": 10, \"title\": \"Num
      Results\", \"type\": \"integer\"},\n                            \"lang\": {\"default\":
      \"en\", \"title\": \"Lang\", \"type\": \"string\"},\n                        },\n
      \                       \"required\": [\"term\"],\n                        \"title\":
      \"SearchInputModel\",\n                        \"type\": \"object\",\n                    },\n
      \               },\n            },\n        ],\n        \"stream\": True,\n
      \   },\n}\n\n\nasync def test_default_yaml_parser():\n    str_repr, _ = default_serializer(bad_obj)\n
      \   assert str_repr.count(\"\\\\n\") < 20\n    assert str_repr.count(\"|\")
      == 4\n"
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Length:
      - '1702'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:29:21 GMT
      ETag:
      - W/"178e72cbe40fdd385ce437d135fc4e9e168d1e79080a73d8b958eb3ccb22c5a3"
      Expires:
      - Tue, 20 Feb 2024 21:34:21 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - d1a9b5e4fcdfc26b3e44aa2737bcb00c367ca403
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - FFB2:48D4:5B946D:6E1D90:65D519B0
      X-Served-By:
      - cache-yvr1521-YVR
      X-Timer:
      - S1708464561.289737,VS0,VE137
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/test_web_search.py
  response:
    content: "import pytest\n\nfrom eidolon_ai_sdk.builtins.logic_units.web_search
      import WebSearch, WebSearchConfig\n\n\n@pytest.fixture\ndef websearch():\n    return
      WebSearch(processing_unit_locator=None, spec=WebSearchConfig())\n\n\nasync def
      test_go_to_url(websearch):\n    found = await websearch.go_to_url(\"https://httpbin.org/get\")\n
      \   assert '\"url\": \"https://httpbin.org/get\"' in found\n\n\nasync def test_search(websearch):\n
      \   found = await websearch.search(\"test\")\n    assert len(found) == 10\n
      \   assert \"test\" in found[0].description\n"
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Length:
      - '281'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:29:21 GMT
      ETag:
      - W/"6f23edef28ae827df34a1fef3b028673c403b96ea68f32f386bee7b90dce7186"
      Expires:
      - Tue, 20 Feb 2024 21:34:21 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - 442f22129efadafe0498c2d6be2ca0b840a4be50
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - 2678:257E5B:B7757:10B14C:65D519B1
      X-Served-By:
      - cache-bfi-krnt7300097-BFI
      X-Timer:
      - S1708464561.403172,VS0,VE138
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/app/api?ref=main
  response:
    content: '[{"name":"auth","path":"webui/app/api/auth","sha":"aad2b43a9c4dc8aad807e798ea335cd712612f80","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/app/api/auth?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/webui/app/api/auth","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/aad2b43a9c4dc8aad807e798ea335cd712612f80","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/app/api/auth?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/aad2b43a9c4dc8aad807e798ea335cd712612f80","html":"https://github.com/eidolon-ai/eidolon/tree/main/webui/app/api/auth"}},{"name":"chat","path":"webui/app/api/chat","sha":"704e91d34065b96e813d8c7e041b0fd906a1d93d","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/app/api/chat?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/webui/app/api/chat","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/704e91d34065b96e813d8c7e041b0fd906a1d93d","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/app/api/chat?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/704e91d34065b96e813d8c7e041b0fd906a1d93d","html":"https://github.com/eidolon-ai/eidolon/tree/main/webui/app/api/chat"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:29:21 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E4EC:2542CD:142C4A:1D9302:65D519B1
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4657'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '343'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/game_of_24?ref=main
  response:
    content: '[{"name":"custom_cpu.yaml","path":"examples/eidolon_examples/game_of_24/custom_cpu.yaml","sha":"251d6ebe65e283939b6e9821b5f36b45bcc1bcfa","size":152,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/game_of_24/custom_cpu.yaml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/game_of_24/custom_cpu.yaml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/251d6ebe65e283939b6e9821b5f36b45bcc1bcfa","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/eidolon_examples/game_of_24/custom_cpu.yaml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/game_of_24/custom_cpu.yaml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/251d6ebe65e283939b6e9821b5f36b45bcc1bcfa","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/game_of_24/custom_cpu.yaml"}},{"name":"default_cpu.yaml","path":"examples/eidolon_examples/game_of_24/default_cpu.yaml","sha":"ac72e01dd128dee0de0668f6b833e0aa17a10c68","size":140,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/game_of_24/default_cpu.yaml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/game_of_24/default_cpu.yaml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/ac72e01dd128dee0de0668f6b833e0aa17a10c68","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/eidolon_examples/game_of_24/default_cpu.yaml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/game_of_24/default_cpu.yaml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/ac72e01dd128dee0de0668f6b833e0aa17a10c68","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/game_of_24/default_cpu.yaml"}},{"name":"go24_agent.yaml","path":"examples/eidolon_examples/game_of_24/go24_agent.yaml","sha":"5178a8cc8b186f91f4cb8557bec0ecd738ae3ab1","size":1100,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/game_of_24/go24_agent.yaml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/game_of_24/go24_agent.yaml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/5178a8cc8b186f91f4cb8557bec0ecd738ae3ab1","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/eidolon_examples/game_of_24/go24_agent.yaml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/game_of_24/go24_agent.yaml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/5178a8cc8b186f91f4cb8557bec0ecd738ae3ab1","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/game_of_24/go24_agent.yaml"}},{"name":"machine.yaml","path":"examples/eidolon_examples/game_of_24/machine.yaml","sha":"ba1a7f74e6a1b1b00de94abe5dbdfb103754a9c4","size":183,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/game_of_24/machine.yaml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/game_of_24/machine.yaml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/ba1a7f74e6a1b1b00de94abe5dbdfb103754a9c4","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/eidolon_examples/game_of_24/machine.yaml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/game_of_24/machine.yaml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/ba1a7f74e6a1b1b00de94abe5dbdfb103754a9c4","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/game_of_24/machine.yaml"}},{"name":"tot_agent.yaml","path":"examples/eidolon_examples/game_of_24/tot_agent.yaml","sha":"a20feecfee75ce8af9ecebac26eeae9ca11707a0","size":3303,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/game_of_24/tot_agent.yaml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/game_of_24/tot_agent.yaml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/a20feecfee75ce8af9ecebac26eeae9ca11707a0","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/eidolon_examples/game_of_24/tot_agent.yaml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/game_of_24/tot_agent.yaml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/a20feecfee75ce8af9ecebac26eeae9ca11707a0","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/game_of_24/tot_agent.yaml"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:29:21 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E4EB:2556C1:150092:1E6770:65D519B1
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4656'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '344'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/agent?ref=main
  response:
    content: '[{"name":"__init__.py","path":"sdk/tests/agent/__init__.py","sha":"e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/agent/__init__.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/agent/__init__.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/agent/__init__.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/agent/__init__.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/agent/__init__.py"}},{"name":"cassettes","path":"sdk/tests/agent/cassettes","sha":"c9de494a8533845a8fbbb7d4bc78e98d14fbdaed","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/agent/cassettes?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/sdk/tests/agent/cassettes","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/c9de494a8533845a8fbbb7d4bc78e98d14fbdaed","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/agent/cassettes?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/c9de494a8533845a8fbbb7d4bc78e98d14fbdaed","html":"https://github.com/eidolon-ai/eidolon/tree/main/sdk/tests/agent/cassettes"}},{"name":"doc_manager","path":"sdk/tests/agent/doc_manager","sha":"70a742d7170e89be69c3d7be904ae660886b3c2e","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/agent/doc_manager?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/sdk/tests/agent/doc_manager","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/70a742d7170e89be69c3d7be904ae660886b3c2e","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/agent/doc_manager?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/70a742d7170e89be69c3d7be904ae660886b3c2e","html":"https://github.com/eidolon-ai/eidolon/tree/main/sdk/tests/agent/doc_manager"}},{"name":"retriever_docs","path":"sdk/tests/agent/retriever_docs","sha":"07373e7973c0fa7894dd808a5195b91a8af413c7","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/agent/retriever_docs?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/sdk/tests/agent/retriever_docs","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/07373e7973c0fa7894dd808a5195b91a8af413c7","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/agent/retriever_docs?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/07373e7973c0fa7894dd808a5195b91a8af413c7","html":"https://github.com/eidolon-ai/eidolon/tree/main/sdk/tests/agent/retriever_docs"}},{"name":"test_retriever_agent.py","path":"sdk/tests/agent/test_retriever_agent.py","sha":"a39fbbf9087bc04e5b199a04bfc211100bb7735d","size":1320,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/agent/test_retriever_agent.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/agent/test_retriever_agent.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/a39fbbf9087bc04e5b199a04bfc211100bb7735d","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/agent/test_retriever_agent.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/agent/test_retriever_agent.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/a39fbbf9087bc04e5b199a04bfc211100bb7735d","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/agent/test_retriever_agent.py"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:29:21 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E4F1:30EE94:36FB0:4844A:65D519B1
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4655'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '345'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/test_request_context.py
  response:
    content: "from eidolon_ai_sdk.system.request_context import RequestContext\n\n\ndef
      test_set_and_get():\n    RequestContext.set(\"foo\", \"FOO\")\n    assert RequestContext[\"foo\"]
      == \"FOO\"\n\n\ndef test_set_and_get_propagate():\n    RequestContext.set(\"foo\",
      \"FOO\", propagate=True)\n    assert RequestContext[\"foo\"] == \"FOO\"\n\n\ndef
      test_headers_only_show_propagated():\n    RequestContext.set(\"foo\", \"FOO\")\n
      \   RequestContext.set(\"bar\", \"BAR\", propagate=True)\n    assert RequestContext.headers
      == {\"bar\": \"BAR\", \"X-Eidolon-Context\": \"bar\"}\n"
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Length:
      - '217'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:29:21 GMT
      ETag:
      - W/"110cb5f8729afad5f2c5973d2e9af6ea96d8590cd0e4e52c4542b11e5e46e83c"
      Expires:
      - Tue, 20 Feb 2024 21:34:21 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - f2041bb9802453872eb57755ba2c9dc0544b17d5
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - BBAE:283009:73003:AAF0C:65D519B0
      X-Served-By:
      - cache-bfi-kbfi7400042-BFI
      X-Timer:
      - S1708464561.402283,VS0,VE151
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/system?ref=main
  response:
    content: '[{"name":"__init__.py","path":"sdk/tests/system/__init__.py","sha":"e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/system/__init__.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/system/__init__.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/system/__init__.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/system/__init__.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/system/__init__.py"}},{"name":"cassettes","path":"sdk/tests/system/cassettes","sha":"2ab6297071363775242aae4d4a1514cb2123ed1c","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/system/cassettes?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/sdk/tests/system/cassettes","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/2ab6297071363775242aae4d4a1514cb2123ed1c","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/system/cassettes?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/2ab6297071363775242aae4d4a1514cb2123ed1c","html":"https://github.com/eidolon-ai/eidolon/tree/main/sdk/tests/system/cassettes"}},{"name":"test_code_agents.py","path":"sdk/tests/system/test_code_agents.py","sha":"16d8a97934a6d382c831e75e5f2382db23923cfe","size":13508,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/system/test_code_agents.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/system/test_code_agents.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/16d8a97934a6d382c831e75e5f2382db23923cfe","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/system/test_code_agents.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/system/test_code_agents.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/16d8a97934a6d382c831e75e5f2382db23923cfe","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/system/test_code_agents.py"}},{"name":"test_event_recording.py","path":"sdk/tests/system/test_event_recording.py","sha":"b4ceea5a224cefafe2187ee3454bd86655996a0d","size":3473,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/system/test_event_recording.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/system/test_event_recording.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/b4ceea5a224cefafe2187ee3454bd86655996a0d","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/system/test_event_recording.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/system/test_event_recording.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/b4ceea5a224cefafe2187ee3454bd86655996a0d","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/system/test_event_recording.py"}},{"name":"test_generic_agent.py","path":"sdk/tests/system/test_generic_agent.py","sha":"ba46ff1353a04cae4be9fd81e140dc054dbe6534","size":15585,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/system/test_generic_agent.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/system/test_generic_agent.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/ba46ff1353a04cae4be9fd81e140dc054dbe6534","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/system/test_generic_agent.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/system/test_generic_agent.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/ba46ff1353a04cae4be9fd81e140dc054dbe6534","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/system/test_generic_agent.py"}},{"name":"test_reference_model.py","path":"sdk/tests/system/test_reference_model.py","sha":"d18d095c4c2e664413fb1248de11b059295e6774","size":6098,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/system/test_reference_model.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/system/test_reference_model.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/d18d095c4c2e664413fb1248de11b059295e6774","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/system/test_reference_model.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/system/test_reference_model.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/d18d095c4c2e664413fb1248de11b059295e6774","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/system/test_reference_model.py"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:29:21 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E4F9:25923F:1DAD65:2713D4:65D519B1
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4652'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '348'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/app/chat?ref=main
  response:
    content: '[{"name":"[id]","path":"webui/app/chat/[id]","sha":"1a8803d6b9e6e0f5706d8854918665aac3303b11","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/app/chat/[id]?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/webui/app/chat/[id]","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/1a8803d6b9e6e0f5706d8854918665aac3303b11","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/app/chat/[id]?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/1a8803d6b9e6e0f5706d8854918665aac3303b11","html":"https://github.com/eidolon-ai/eidolon/tree/main/webui/app/chat/[id]"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:29:21 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E4EA:2556CA:14E1C5:1E4888:65D519B1
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4654'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '346'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/lib/hooks?ref=main
  response:
    content: '[{"name":"use-at-bottom.tsx","path":"webui/lib/hooks/use-at-bottom.tsx","sha":"92db4836ed40f24ec963fdf0063bbc8c4090eb8f","size":638,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/lib/hooks/use-at-bottom.tsx?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/webui/lib/hooks/use-at-bottom.tsx","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/92db4836ed40f24ec963fdf0063bbc8c4090eb8f","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/webui/lib/hooks/use-at-bottom.tsx","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/lib/hooks/use-at-bottom.tsx?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/92db4836ed40f24ec963fdf0063bbc8c4090eb8f","html":"https://github.com/eidolon-ai/eidolon/blob/main/webui/lib/hooks/use-at-bottom.tsx"}},{"name":"use-copy-to-clipboard.tsx","path":"webui/lib/hooks/use-copy-to-clipboard.tsx","sha":"e4ad0acfc7bf82c1420c26f92b593595155d483e","size":712,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/lib/hooks/use-copy-to-clipboard.tsx?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/webui/lib/hooks/use-copy-to-clipboard.tsx","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e4ad0acfc7bf82c1420c26f92b593595155d483e","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/webui/lib/hooks/use-copy-to-clipboard.tsx","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/lib/hooks/use-copy-to-clipboard.tsx?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e4ad0acfc7bf82c1420c26f92b593595155d483e","html":"https://github.com/eidolon-ai/eidolon/blob/main/webui/lib/hooks/use-copy-to-clipboard.tsx"}},{"name":"use-local-storage.ts","path":"webui/lib/hooks/use-local-storage.ts","sha":"d5345de7e89c416b821170a8c29e9fbbe2c743ee","size":592,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/lib/hooks/use-local-storage.ts?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/webui/lib/hooks/use-local-storage.ts","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/d5345de7e89c416b821170a8c29e9fbbe2c743ee","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/webui/lib/hooks/use-local-storage.ts","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/lib/hooks/use-local-storage.ts?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/d5345de7e89c416b821170a8c29e9fbbe2c743ee","html":"https://github.com/eidolon-ai/eidolon/blob/main/webui/lib/hooks/use-local-storage.ts"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:29:21 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E4E8:254ED9:166081:1FC6D3:65D519B1
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4651'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '349'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/quickstart?ref=main
  response:
    content: '[{"name":"hello_world_agent.yaml","path":"examples/eidolon_examples/quickstart/hello_world_agent.yaml","sha":"4db5266e90ef70484619af811f1b8063909ded42","size":401,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/quickstart/hello_world_agent.yaml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/quickstart/hello_world_agent.yaml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/4db5266e90ef70484619af811f1b8063909ded42","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/eidolon_examples/quickstart/hello_world_agent.yaml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/quickstart/hello_world_agent.yaml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/4db5266e90ef70484619af811f1b8063909ded42","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/quickstart/hello_world_agent.yaml"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:29:21 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E4F7:257FF1:16176B:1F7DEA:65D519B1
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4646'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '354'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/code_search?ref=main
  response:
    content: '[{"name":"Readme.md","path":"examples/eidolon_examples/code_search/Readme.md","sha":"66fd7163a127e3ea14365b8bc28213b24d24ff80","size":3740,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/code_search/Readme.md?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/code_search/Readme.md","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/66fd7163a127e3ea14365b8bc28213b24d24ff80","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/eidolon_examples/code_search/Readme.md","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/code_search/Readme.md?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/66fd7163a127e3ea14365b8bc28213b24d24ff80","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/code_search/Readme.md"}},{"name":"__init__.py","path":"examples/eidolon_examples/code_search/__init__.py","sha":"e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/code_search/__init__.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/code_search/__init__.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/eidolon_examples/code_search/__init__.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/code_search/__init__.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/code_search/__init__.py"}},{"name":"resources","path":"examples/eidolon_examples/code_search/resources","sha":"fad23fce14b099d9ec8a696ba2a0c91f759508d1","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/code_search/resources?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/examples/eidolon_examples/code_search/resources","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/fad23fce14b099d9ec8a696ba2a0c91f759508d1","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/code_search/resources?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/fad23fce14b099d9ec8a696ba2a0c91f759508d1","html":"https://github.com/eidolon-ai/eidolon/tree/main/examples/eidolon_examples/code_search/resources"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:29:21 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E4E6:2557D8:16E75F:204E1D:65D519B1
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4650'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '350'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/group_conversation?ref=main
  response:
    content: '[{"name":"__init__.py","path":"examples/eidolon_examples/group_conversation/__init__.py","sha":"e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/group_conversation/__init__.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/group_conversation/__init__.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/eidolon_examples/group_conversation/__init__.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/group_conversation/__init__.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/group_conversation/__init__.py"}},{"name":"base_conversation_coordinator.py","path":"examples/eidolon_examples/group_conversation/base_conversation_coordinator.py","sha":"cecfa34d58e956d8c7b170f09e9ea71316c335cc","size":9413,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/group_conversation/base_conversation_coordinator.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/group_conversation/base_conversation_coordinator.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/cecfa34d58e956d8c7b170f09e9ea71316c335cc","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/eidolon_examples/group_conversation/base_conversation_coordinator.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/group_conversation/base_conversation_coordinator.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/cecfa34d58e956d8c7b170f09e9ea71316c335cc","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/group_conversation/base_conversation_coordinator.py"}},{"name":"conversation_agent.py","path":"examples/eidolon_examples/group_conversation/conversation_agent.py","sha":"fb0c2bbbf43894f95d77b40007e510715cd1e073","size":7483,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/group_conversation/conversation_agent.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/group_conversation/conversation_agent.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/fb0c2bbbf43894f95d77b40007e510715cd1e073","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/eidolon_examples/group_conversation/conversation_agent.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/group_conversation/conversation_agent.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/fb0c2bbbf43894f95d77b40007e510715cd1e073","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/group_conversation/conversation_agent.py"}},{"name":"conversation_coordinator.py","path":"examples/eidolon_examples/group_conversation/conversation_coordinator.py","sha":"061f72c591cb899470bc89a06be7c817fde3225f","size":9306,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/group_conversation/conversation_coordinator.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/group_conversation/conversation_coordinator.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/061f72c591cb899470bc89a06be7c817fde3225f","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/eidolon_examples/group_conversation/conversation_coordinator.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/group_conversation/conversation_coordinator.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/061f72c591cb899470bc89a06be7c817fde3225f","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/group_conversation/conversation_coordinator.py"}},{"name":"game_master.py","path":"examples/eidolon_examples/group_conversation/game_master.py","sha":"0505373664e00223882a263212d8b79ad84c8b67","size":6934,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/group_conversation/game_master.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/group_conversation/game_master.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/0505373664e00223882a263212d8b79ad84c8b67","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/eidolon_examples/group_conversation/game_master.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/group_conversation/game_master.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/0505373664e00223882a263212d8b79ad84c8b67","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/group_conversation/game_master.py"}},{"name":"iasip","path":"examples/eidolon_examples/group_conversation/iasip","sha":"cdd4a1b25db4ea3ec87f806e7674809e5522af87","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/group_conversation/iasip?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/examples/eidolon_examples/group_conversation/iasip","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/cdd4a1b25db4ea3ec87f806e7674809e5522af87","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/group_conversation/iasip?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/cdd4a1b25db4ea3ec87f806e7674809e5522af87","html":"https://github.com/eidolon-ai/eidolon/tree/main/examples/eidolon_examples/group_conversation/iasip"}},{"name":"python_coder","path":"examples/eidolon_examples/group_conversation/python_coder","sha":"20f379355cad7e8c318f1ef344ed0aacfb91e357","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/group_conversation/python_coder?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/examples/eidolon_examples/group_conversation/python_coder","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/20f379355cad7e8c318f1ef344ed0aacfb91e357","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/group_conversation/python_coder?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/20f379355cad7e8c318f1ef344ed0aacfb91e357","html":"https://github.com/eidolon-ai/eidolon/tree/main/examples/eidolon_examples/group_conversation/python_coder"}},{"name":"resources","path":"examples/eidolon_examples/group_conversation/resources","sha":"92fdabfa63f7f35d06d8b76eb2968d39b4e542ab","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/group_conversation/resources?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/examples/eidolon_examples/group_conversation/resources","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/92fdabfa63f7f35d06d8b76eb2968d39b4e542ab","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/group_conversation/resources?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/92fdabfa63f7f35d06d8b76eb2968d39b4e542ab","html":"https://github.com/eidolon-ai/eidolon/tree/main/examples/eidolon_examples/group_conversation/resources"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:29:21 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E4F0:2567E0:14F836:1E5E94:65D519B1
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4649'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '351'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/swifties?ref=main
  response:
    content: '[{"name":"__init__.py","path":"examples/eidolon_examples/swifties/__init__.py","sha":"e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/swifties/__init__.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/swifties/__init__.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/eidolon_examples/swifties/__init__.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/swifties/__init__.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/swifties/__init__.py"}},{"name":"resources","path":"examples/eidolon_examples/swifties/resources","sha":"9166b89e6a0d2c9f04ad4f45050843819cd139e7","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/swifties/resources?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/examples/eidolon_examples/swifties/resources","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/9166b89e6a0d2c9f04ad4f45050843819cd139e7","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/swifties/resources?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/9166b89e6a0d2c9f04ad4f45050843819cd139e7","html":"https://github.com/eidolon-ai/eidolon/tree/main/examples/eidolon_examples/swifties/resources"}},{"name":"validating_cpu.py","path":"examples/eidolon_examples/swifties/validating_cpu.py","sha":"0f92da16978b3938a7c4d44a41b99ada88742bf8","size":6621,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/swifties/validating_cpu.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/swifties/validating_cpu.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/0f92da16978b3938a7c4d44a41b99ada88742bf8","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/eidolon_examples/swifties/validating_cpu.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/swifties/validating_cpu.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/0f92da16978b3938a7c4d44a41b99ada88742bf8","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/swifties/validating_cpu.py"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:29:21 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E4F8:24F1D0:15C5C5:1F2CB2:65D519B1
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4645'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '355'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/cpu?ref=main
  response:
    content: '[{"name":"__init__.py","path":"sdk/tests/cpu/__init__.py","sha":"e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/cpu/__init__.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/cpu/__init__.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/cpu/__init__.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/cpu/__init__.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/cpu/__init__.py"}},{"name":"test_conversational_logic_unit.py","path":"sdk/tests/cpu/test_conversational_logic_unit.py","sha":"f7d88058343cf83f399850f340e581f5f47c8ed4","size":3204,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/cpu/test_conversational_logic_unit.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/cpu/test_conversational_logic_unit.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/f7d88058343cf83f399850f340e581f5f47c8ed4","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/cpu/test_conversational_logic_unit.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/cpu/test_conversational_logic_unit.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/f7d88058343cf83f399850f340e581f5f47c8ed4","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/cpu/test_conversational_logic_unit.py"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:29:21 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E4F2:254441:153594:1E9C71:65D519B1
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4648'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '352'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/components?ref=main
  response:
    content: '[{"name":"NewHero.astro","path":"docs/src/components/NewHero.astro","sha":"5f9541f7b17df7d152bd057b070eea7511e82785","size":2703,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/components/NewHero.astro?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/docs/src/components/NewHero.astro","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/5f9541f7b17df7d152bd057b070eea7511e82785","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/docs/src/components/NewHero.astro","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/components/NewHero.astro?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/5f9541f7b17df7d152bd057b070eea7511e82785","html":"https://github.com/eidolon-ai/eidolon/blob/main/docs/src/components/NewHero.astro"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:29:21 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E4E9:25A09C:1AA7CB:240E31:65D519B1
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4653'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '347'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/util?ref=main
  response:
    content: '[{"name":"__init__.py","path":"sdk/tests/util/__init__.py","sha":"e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/util/__init__.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/util/__init__.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/util/__init__.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/util/__init__.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/util/__init__.py"}},{"name":"test_class_utils.py","path":"sdk/tests/util/test_class_utils.py","sha":"9c5cb872675010b34e7de81922e68c573bbf0a5b","size":2483,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/util/test_class_utils.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/util/test_class_utils.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/9c5cb872675010b34e7de81922e68c573bbf0a5b","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/util/test_class_utils.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/util/test_class_utils.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/9c5cb872675010b34e7de81922e68c573bbf0a5b","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/util/test_class_utils.py"}},{"name":"test_schema_to_model.py","path":"sdk/tests/util/test_schema_to_model.py","sha":"dfbb276bca6f4be2482e6c1458bfb138f5415f82","size":5635,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/util/test_schema_to_model.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/util/test_schema_to_model.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/dfbb276bca6f4be2482e6c1458bfb138f5415f82","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/util/test_schema_to_model.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/util/test_schema_to_model.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/dfbb276bca6f4be2482e6c1458bfb138f5415f82","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/util/test_schema_to_model.py"}},{"name":"test_str_utils.py","path":"sdk/tests/util/test_str_utils.py","sha":"9a6e36d70f76195bacb1ae5b5194b062cdbc787f","size":1656,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/util/test_str_utils.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/util/test_str_utils.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/9a6e36d70f76195bacb1ae5b5194b062cdbc787f","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/util/test_str_utils.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/util/test_str_utils.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/9a6e36d70f76195bacb1ae5b5194b062cdbc787f","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/util/test_str_utils.py"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:29:21 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E4FA:25626D:155677:1EBCD7:65D519B1
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4644'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '356'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/test_stream_collector.py
  response:
    content: "import pytest\n\nfrom eidolon_ai_sdk.io.events import (\n    StringOutputEvent,\n
      \   ErrorEvent,\n    StartStreamContextEvent,\n    EndStreamContextEvent,\n
      \   SuccessEvent,\n)\nfrom eidolon_ai_sdk.util.stream_collector import StreamCollector,
      ManagedContextError, stream_manager\n\n\nasync def raising_stream(error=None):\n
      \   yield StringOutputEvent(content=\"test\")\n    if error:\n        raise
      error\n\n\nasync def test_terminates_without_raising():\n    collector = StreamCollector(stream=raising_stream())\n
      \   assert [event async for event in collector] == [StringOutputEvent(content=\"test\")]\n
      \   assert collector.get_content() == \"test\"\n\n\nasync def test_adds_context():\n
      \   collector = stream_manager(raising_stream(), StartStreamContextEvent(context_id=\"foo\"))\n
      \   events = [event async for event in collector]\n    assert events == [\n
      \       StartStreamContextEvent(context_id=\"foo\"),\n        StringOutputEvent(stream_context=\"foo\",
      content=\"test\"),\n        SuccessEvent(stream_context=\"foo\"),\n        EndStreamContextEvent(context_id=\"foo\"),\n
      \   ]\n    assert collector.get_content() == \"test\"\n\n\nasync def test_stream_manager_records_errors_and_reraises():\n
      \   events = []\n    error = RuntimeError(\"test error\")\n    collector = stream_manager(raising_stream(error),
      StartStreamContextEvent(context_id=\"foo\"))\n    with pytest.raises(ManagedContextError)
      as e:\n        async for event in collector:\n            events.append(event)\n
      \   assert events == [\n        StartStreamContextEvent(context_id=\"foo\"),\n
      \       StringOutputEvent(stream_context=\"foo\", content=\"test\"),\n        ErrorEvent(stream_context=\"foo\",
      reason=error),\n        EndStreamContextEvent(context_id=\"foo\"),\n    ]\n
      \   assert e.value.args[0] == \"Error in stream context foo\"\n    assert collector.get_content()
      == [\"test\", \"RuntimeError: test error\"]\n"
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Length:
      - '514'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:29:21 GMT
      ETag:
      - W/"b7aef644b662f4ea8a1246b68c7b1f6c909581d74b5687b1afc7f9709159ecd9"
      Expires:
      - Tue, 20 Feb 2024 21:34:21 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - 7cd72d5bd6701bcc562a6dc07fd4cdd93ec7c974
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - 55DC:1394:57C281:6A66FE:65D519B0
      X-Served-By:
      - cache-yvr1530-YVR
      X-Timer:
      - S1708464561.411700,VS0,VE153
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/impl?ref=main
  response:
    content: '[{"name":"__init__.py","path":"sdk/tests/impl/__init__.py","sha":"e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/impl/__init__.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/impl/__init__.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/impl/__init__.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/impl/__init__.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/impl/__init__.py"}},{"name":"test_local_symbolic_memory.py","path":"sdk/tests/impl/test_local_symbolic_memory.py","sha":"88e8668b39dba79aa2522db92c3f539578623b19","size":4210,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/impl/test_local_symbolic_memory.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/impl/test_local_symbolic_memory.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/88e8668b39dba79aa2522db92c3f539578623b19","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/impl/test_local_symbolic_memory.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/impl/test_local_symbolic_memory.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/88e8668b39dba79aa2522db92c3f539578623b19","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/impl/test_local_symbolic_memory.py"}},{"name":"test_messsage_summarizer.py","path":"sdk/tests/impl/test_messsage_summarizer.py","sha":"e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/impl/test_messsage_summarizer.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/impl/test_messsage_summarizer.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/impl/test_messsage_summarizer.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/impl/test_messsage_summarizer.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/impl/test_messsage_summarizer.py"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:29:21 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E4F6:25382C:1531E6:1E9848:65D519B1
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4642'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '358'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/app/sign-in?ref=main
  response:
    content: '[{"name":"page.tsx","path":"webui/app/sign-in/page.tsx","sha":"c716f7a8c0fe6cbf1018fd43586edb354e412a3f","size":1814,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/app/sign-in/page.tsx?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/webui/app/sign-in/page.tsx","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/c716f7a8c0fe6cbf1018fd43586edb354e412a3f","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/webui/app/sign-in/page.tsx","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/app/sign-in/page.tsx?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/c716f7a8c0fe6cbf1018fd43586edb354e412a3f","html":"https://github.com/eidolon-ai/eidolon/blob/main/webui/app/sign-in/page.tsx"}},{"name":"signon-options.ts","path":"webui/app/sign-in/signon-options.ts","sha":"7c8a222579cccefdba3ca08eaaae0a6bcf0dcfef","size":193,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/app/sign-in/signon-options.ts?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/webui/app/sign-in/signon-options.ts","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/7c8a222579cccefdba3ca08eaaae0a6bcf0dcfef","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/webui/app/sign-in/signon-options.ts","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/app/sign-in/signon-options.ts?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/7c8a222579cccefdba3ca08eaaae0a6bcf0dcfef","html":"https://github.com/eidolon-ai/eidolon/blob/main/webui/app/sign-in/signon-options.ts"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:29:21 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E4ED:250EE1:160786:1F6E6D:65D519B1
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4647'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '353'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/hello_world?ref=main
  response:
    content: '[{"name":"AutonomousAgent.py","path":"examples/eidolon_examples/hello_world/AutonomousAgent.py","sha":"d25907605aeb8f8647885e161e89676a4f0f6946","size":1349,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/hello_world/AutonomousAgent.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/hello_world/AutonomousAgent.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/d25907605aeb8f8647885e161e89676a4f0f6946","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/eidolon_examples/hello_world/AutonomousAgent.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/hello_world/AutonomousAgent.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/d25907605aeb8f8647885e161e89676a4f0f6946","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/hello_world/AutonomousAgent.py"}},{"name":"AutonomousSpeechAgent.py","path":"examples/eidolon_examples/hello_world/AutonomousSpeechAgent.py","sha":"211173e7806902ba3b7ccf166948f9001d74bce4","size":2077,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/hello_world/AutonomousSpeechAgent.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/hello_world/AutonomousSpeechAgent.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/211173e7806902ba3b7ccf166948f9001d74bce4","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/eidolon_examples/hello_world/AutonomousSpeechAgent.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/hello_world/AutonomousSpeechAgent.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/211173e7806902ba3b7ccf166948f9001d74bce4","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/hello_world/AutonomousSpeechAgent.py"}},{"name":"HelloWorld.py","path":"examples/eidolon_examples/hello_world/HelloWorld.py","sha":"dbffac592b133e551353750cfbf59c2f5e1ef6b8","size":3130,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/hello_world/HelloWorld.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/hello_world/HelloWorld.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/dbffac592b133e551353750cfbf59c2f5e1ef6b8","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/eidolon_examples/hello_world/HelloWorld.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/hello_world/HelloWorld.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/dbffac592b133e551353750cfbf59c2f5e1ef6b8","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/hello_world/HelloWorld.py"}},{"name":"SimpleTool.py","path":"examples/eidolon_examples/hello_world/SimpleTool.py","sha":"c0530fe662cc770b2bedaf3428ffc8adc54ecc3e","size":1268,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/hello_world/SimpleTool.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/hello_world/SimpleTool.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/c0530fe662cc770b2bedaf3428ffc8adc54ecc3e","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/eidolon_examples/hello_world/SimpleTool.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/hello_world/SimpleTool.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/c0530fe662cc770b2bedaf3428ffc8adc54ecc3e","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/hello_world/SimpleTool.py"}},{"name":"StateMachine.py","path":"examples/eidolon_examples/hello_world/StateMachine.py","sha":"986f5307282d3a12d198b2b5a22f4528e32df776","size":1377,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/hello_world/StateMachine.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/hello_world/StateMachine.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/986f5307282d3a12d198b2b5a22f4528e32df776","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/eidolon_examples/hello_world/StateMachine.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/hello_world/StateMachine.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/986f5307282d3a12d198b2b5a22f4528e32df776","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/hello_world/StateMachine.py"}},{"name":"StreamingTest.py","path":"examples/eidolon_examples/hello_world/StreamingTest.py","sha":"c24c9b26ac9c99ec40dfad715291b179e5bb8820","size":771,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/hello_world/StreamingTest.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/hello_world/StreamingTest.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/c24c9b26ac9c99ec40dfad715291b179e5bb8820","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/eidolon_examples/hello_world/StreamingTest.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/hello_world/StreamingTest.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/c24c9b26ac9c99ec40dfad715291b179e5bb8820","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/hello_world/StreamingTest.py"}},{"name":"__init__.py","path":"examples/eidolon_examples/hello_world/__init__.py","sha":"e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/hello_world/__init__.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/hello_world/__init__.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/eidolon_examples/hello_world/__init__.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/hello_world/__init__.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/hello_world/__init__.py"}},{"name":"resources","path":"examples/eidolon_examples/hello_world/resources","sha":"1a77af2e692bccae87c299a3795e4f358777ed31","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/hello_world/resources?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/examples/eidolon_examples/hello_world/resources","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/1a77af2e692bccae87c299a3795e4f358777ed31","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/hello_world/resources?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/1a77af2e692bccae87c299a3795e4f358777ed31","html":"https://github.com/eidolon-ai/eidolon/tree/main/examples/eidolon_examples/hello_world/resources"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:29:21 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E4F3:2511E0:14F698:1E5D8A:65D519B1
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4640'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '360'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/images?ref=main
  response:
    content: '[{"name":"cat.png","path":"sdk/tests/images/cat.png","sha":"b346e800748974075991481150e98004439576c4","size":320,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/images/cat.png?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/images/cat.png","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/b346e800748974075991481150e98004439576c4","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/images/cat.png","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/images/cat.png?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/b346e800748974075991481150e98004439576c4","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/images/cat.png"}},{"name":"dog.png","path":"sdk/tests/images/dog.png","sha":"de2459a31500df5f5c49cb86376f460070a5bb72","size":1888,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/images/dog.png?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/images/dog.png","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/de2459a31500df5f5c49cb86376f460070a5bb72","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/images/dog.png","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/images/dog.png?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/de2459a31500df5f5c49cb86376f460070a5bb72","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/images/dog.png"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:29:21 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E4F4:260C59:13816E:1C45EF:65D519B1
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4641'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '359'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/k8_monitor?ref=main
  response:
    content: '[{"name":"__init__.py","path":"examples/eidolon_examples/k8_monitor/__init__.py","sha":"e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/k8_monitor/__init__.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/k8_monitor/__init__.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/eidolon_examples/k8_monitor/__init__.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/k8_monitor/__init__.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/k8_monitor/__init__.py"}},{"name":"k8_logic_unit.py","path":"examples/eidolon_examples/k8_monitor/k8_logic_unit.py","sha":"8920ec972815be4596a5c6c0a63bf2566d64e3d5","size":6729,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/k8_monitor/k8_logic_unit.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/k8_monitor/k8_logic_unit.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/8920ec972815be4596a5c6c0a63bf2566d64e3d5","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/eidolon_examples/k8_monitor/k8_logic_unit.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/k8_monitor/k8_logic_unit.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/8920ec972815be4596a5c6c0a63bf2566d64e3d5","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/k8_monitor/k8_logic_unit.py"}},{"name":"resources","path":"examples/eidolon_examples/k8_monitor/resources","sha":"d5eb743610196d989f83c057117b470226075580","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/k8_monitor/resources?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/examples/eidolon_examples/k8_monitor/resources","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/d5eb743610196d989f83c057117b470226075580","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/k8_monitor/resources?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/d5eb743610196d989f83c057117b470226075580","html":"https://github.com/eidolon-ai/eidolon/tree/main/examples/eidolon_examples/k8_monitor/resources"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:29:21 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E4F5:25360F:14C699:1E2CFA:65D519B1
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4639'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '361'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/getting_started?ref=main
  response:
    content: '[{"name":"1_agent_communication","path":"examples/eidolon_examples/getting_started/1_agent_communication","sha":"011abdb2b84458a8dd4aa8873db53a1c6fbb8c1f","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/getting_started/1_agent_communication?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/examples/eidolon_examples/getting_started/1_agent_communication","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/011abdb2b84458a8dd4aa8873db53a1c6fbb8c1f","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/getting_started/1_agent_communication?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/011abdb2b84458a8dd4aa8873db53a1c6fbb8c1f","html":"https://github.com/eidolon-ai/eidolon/tree/main/examples/eidolon_examples/getting_started/1_agent_communication"}},{"name":"2_custom_agents","path":"examples/eidolon_examples/getting_started/2_custom_agents","sha":"bfd2b96f4f848cfeb705a0592a528827093a23b8","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/getting_started/2_custom_agents?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/examples/eidolon_examples/getting_started/2_custom_agents","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/bfd2b96f4f848cfeb705a0592a528827093a23b8","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/getting_started/2_custom_agents?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/bfd2b96f4f848cfeb705a0592a528827093a23b8","html":"https://github.com/eidolon-ai/eidolon/tree/main/examples/eidolon_examples/getting_started/2_custom_agents"}},{"name":"3_pluggable_resources","path":"examples/eidolon_examples/getting_started/3_pluggable_resources","sha":"c1654bd744b2f910e5c8c477037cf9340d13f916","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/getting_started/3_pluggable_resources?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/examples/eidolon_examples/getting_started/3_pluggable_resources","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/c1654bd744b2f910e5c8c477037cf9340d13f916","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/getting_started/3_pluggable_resources?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/c1654bd744b2f910e5c8c477037cf9340d13f916","html":"https://github.com/eidolon-ai/eidolon/tree/main/examples/eidolon_examples/getting_started/3_pluggable_resources"}},{"name":"4_defining_a_machine","path":"examples/eidolon_examples/getting_started/4_defining_a_machine","sha":"b5e7a04a6528a06a2fed6ac73fa55767a0ec8d39","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/getting_started/4_defining_a_machine?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/examples/eidolon_examples/getting_started/4_defining_a_machine","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/b5e7a04a6528a06a2fed6ac73fa55767a0ec8d39","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/getting_started/4_defining_a_machine?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/b5e7a04a6528a06a2fed6ac73fa55767a0ec8d39","html":"https://github.com/eidolon-ai/eidolon/tree/main/examples/eidolon_examples/getting_started/4_defining_a_machine"}},{"name":"__init__.py","path":"examples/eidolon_examples/getting_started/__init__.py","sha":"e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/getting_started/__init__.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/getting_started/__init__.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/eidolon_examples/getting_started/__init__.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/getting_started/__init__.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/getting_started/__init__.py"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:29:21 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E4EF:251C83:14F6D2:1E5D89:65D519B1
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4643'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '357'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/util?ref=main
  response:
    content: '[{"name":"__init__.py","path":"sdk/eidolon_ai_sdk/util/__init__.py","sha":"e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/util/__init__.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/util/__init__.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/util/__init__.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/util/__init__.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/util/__init__.py"}},{"name":"aiohttp.py","path":"sdk/eidolon_ai_sdk/util/aiohttp.py","sha":"bfd5c8462131f640f046a26fdd29c84830056f72","size":2716,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/util/aiohttp.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/util/aiohttp.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/bfd5c8462131f640f046a26fdd29c84830056f72","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/util/aiohttp.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/util/aiohttp.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/bfd5c8462131f640f046a26fdd29c84830056f72","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/util/aiohttp.py"}},{"name":"async_wrapper.py","path":"sdk/eidolon_ai_sdk/util/async_wrapper.py","sha":"ac58da434ff6b011172dafc4249d7e0df42552b8","size":509,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/util/async_wrapper.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/util/async_wrapper.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/ac58da434ff6b011172dafc4249d7e0df42552b8","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/util/async_wrapper.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/util/async_wrapper.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/ac58da434ff6b011172dafc4249d7e0df42552b8","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/util/async_wrapper.py"}},{"name":"class_utils.py","path":"sdk/eidolon_ai_sdk/util/class_utils.py","sha":"44d54344692ac2a71f2988adfc692dd55876921e","size":2806,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/util/class_utils.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/util/class_utils.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/44d54344692ac2a71f2988adfc692dd55876921e","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/util/class_utils.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/util/class_utils.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/44d54344692ac2a71f2988adfc692dd55876921e","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/util/class_utils.py"}},{"name":"logger.py","path":"sdk/eidolon_ai_sdk/util/logger.py","sha":"948da74a65c124a4238715352d464137d4305888","size":448,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/util/logger.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/util/logger.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/948da74a65c124a4238715352d464137d4305888","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/util/logger.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/util/logger.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/948da74a65c124a4238715352d464137d4305888","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/util/logger.py"}},{"name":"replay.py","path":"sdk/eidolon_ai_sdk/util/replay.py","sha":"d00078a1fd8c35632f856c4127737a03bd334975","size":3359,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/util/replay.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/util/replay.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/d00078a1fd8c35632f856c4127737a03bd334975","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/util/replay.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/util/replay.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/d00078a1fd8c35632f856c4127737a03bd334975","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/util/replay.py"}},{"name":"schema_to_model.py","path":"sdk/eidolon_ai_sdk/util/schema_to_model.py","sha":"45bac811752cc3739595ffcacd41ea46ee682822","size":6206,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/util/schema_to_model.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/util/schema_to_model.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/45bac811752cc3739595ffcacd41ea46ee682822","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/util/schema_to_model.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/util/schema_to_model.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/45bac811752cc3739595ffcacd41ea46ee682822","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/util/schema_to_model.py"}},{"name":"str_utils.py","path":"sdk/eidolon_ai_sdk/util/str_utils.py","sha":"3f7dd953db20ac83f3b2240327e27ff4a8503cfb","size":349,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/util/str_utils.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/util/str_utils.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/3f7dd953db20ac83f3b2240327e27ff4a8503cfb","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/util/str_utils.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/util/str_utils.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/3f7dd953db20ac83f3b2240327e27ff4a8503cfb","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/util/str_utils.py"}},{"name":"stream_collector.py","path":"sdk/eidolon_ai_sdk/util/stream_collector.py","sha":"eb30bacbb5dfb5d76cd30e142746aad8f588fd48","size":3826,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/util/stream_collector.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/util/stream_collector.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/eb30bacbb5dfb5d76cd30e142746aad8f588fd48","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/util/stream_collector.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/util/stream_collector.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/eb30bacbb5dfb5d76cd30e142746aad8f588fd48","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/util/stream_collector.py"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:29:21 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E4E7:2524E4:15E22B:1F48F0:65D519B1
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4638'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '362'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/doc_manager?ref=main
  response:
    content: '[{"name":"__init__.py","path":"sdk/eidolon_ai_sdk/agent/doc_manager/__init__.py","sha":"e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/doc_manager/__init__.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/doc_manager/__init__.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/agent/doc_manager/__init__.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/doc_manager/__init__.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/doc_manager/__init__.py"}},{"name":"document_manager.py","path":"sdk/eidolon_ai_sdk/agent/doc_manager/document_manager.py","sha":"aedbb59e1340642445debaffd9ad481032f6622f","size":4243,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/doc_manager/document_manager.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/doc_manager/document_manager.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/aedbb59e1340642445debaffd9ad481032f6622f","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/agent/doc_manager/document_manager.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/doc_manager/document_manager.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/aedbb59e1340642445debaffd9ad481032f6622f","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/doc_manager/document_manager.py"}},{"name":"loaders","path":"sdk/eidolon_ai_sdk/agent/doc_manager/loaders","sha":"6803f11ceeedd77b3b83d98a872b668823d0d810","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/doc_manager/loaders?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/sdk/eidolon_ai_sdk/agent/doc_manager/loaders","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/6803f11ceeedd77b3b83d98a872b668823d0d810","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/doc_manager/loaders?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/6803f11ceeedd77b3b83d98a872b668823d0d810","html":"https://github.com/eidolon-ai/eidolon/tree/main/sdk/eidolon_ai_sdk/agent/doc_manager/loaders"}},{"name":"parsers","path":"sdk/eidolon_ai_sdk/agent/doc_manager/parsers","sha":"747e83ab217fab0ea5b5788db80775c5ead7a606","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/doc_manager/parsers?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/sdk/eidolon_ai_sdk/agent/doc_manager/parsers","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/747e83ab217fab0ea5b5788db80775c5ead7a606","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/doc_manager/parsers?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/747e83ab217fab0ea5b5788db80775c5ead7a606","html":"https://github.com/eidolon-ai/eidolon/tree/main/sdk/eidolon_ai_sdk/agent/doc_manager/parsers"}},{"name":"transformer","path":"sdk/eidolon_ai_sdk/agent/doc_manager/transformer","sha":"68bc1ba77b2cdcf00985909b0c8a93fdb0c68b0b","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/doc_manager/transformer?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/sdk/eidolon_ai_sdk/agent/doc_manager/transformer","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/68bc1ba77b2cdcf00985909b0c8a93fdb0c68b0b","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/doc_manager/transformer?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/68bc1ba77b2cdcf00985909b0c8a93fdb0c68b0b","html":"https://github.com/eidolon-ai/eidolon/tree/main/sdk/eidolon_ai_sdk/agent/doc_manager/transformer"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:29:21 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E503:3A0B33:2F3C:3EA2:65D519B1
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4637'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '363'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/agent/__init__.py
  response:
    content: ''
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Length:
      - '0'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:29:21 GMT
      ETag:
      - W/"938f66ede415ccb10764da47cd5f3cfc076c07b8791c708cfa8ec54982197c1f"
      Expires:
      - Tue, 20 Feb 2024 21:34:21 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - f339a33280ea1941df097279263e5374664d9555
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - 2A40:253545:B20DC:105AC0:65D519B1
      X-Served-By:
      - cache-bfi-kbfi7400084-BFI
      X-Timer:
      - S1708464561.487549,VS0,VE126
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/agent/client.py
  response:
    content: "from __future__ import annotations\n\nimport jsonref\nfrom pydantic
      import BaseModel, Field, Extra\nfrom typing import List, Any, AsyncIterator,
      Optional\nfrom urllib.parse import urljoin\n\nfrom eidolon_ai_sdk.agent_os import
      AgentOS\nfrom eidolon_ai_sdk.io.events import StreamEvent, StartAgentCallEvent,
      AgentStateEvent\nfrom eidolon_ai_sdk.system.agent_contract import DeleteProcessResponse\nfrom
      eidolon_ai_sdk.util.aiohttp import stream_content, get_content, post_content,
      delete\n\n\nclass Machine(BaseModel):\n    machine: str = Field(default_factory=AgentOS.current_machine_url)\n\n
      \   async def get_schema(self) -> dict:\n        url = urljoin(self.machine,
      \"openapi.json\")\n        json_ = await get_content(url)\n        return jsonref.replace_refs(json_)\n\n
      \   def agent(self, agent_name: str) -> Agent:\n        return Agent(machine=self.machine,
      agent=agent_name)\n\n\nclass Agent(BaseModel):\n    machine: str = Field(default_factory=AgentOS.current_machine_url)\n
      \   agent: str\n\n    def stream_program(self, program_name: str, body: Optional[Any]
      = None) -> AgentResponseIterator:\n        return Program(machine=self.machine,
      agent=self.agent, program=program_name).stream_execute(body)\n\n    async def
      program(self, program_name: str, body: Optional[Any] = None) -> ProcessStatus:\n
      \       return await Program(machine=self.machine, agent=self.agent, program=program_name).execute(body)\n\n
      \   def stream_action(self, action_name: str, process_id: str, body: Any) ->
      AgentResponseIterator:\n        url = urljoin(self.machine, f\"agents/{self.agent}/processes/{process_id}/actions/{action_name}\")\n
      \       return AgentResponseIterator(stream_content(url, body))\n\n    async
      def create_process(self) -> ProcessStatus:\n        url = urljoin(self.machine,
      f\"agents/{self.agent}/processes\")\n        json_ = await post_content(url)\n
      \       return ProcessStatus(machine=self.machine, agent=self.agent, **json_)\n\n
      \   def process(self, process_id: str) -> Process:\n        return Process(machine=self.machine,
      agent=self.agent, process_id=process_id)\n\n    @classmethod\n    def get(cls,
      location: str) -> Agent:\n        \"\"\"\n        Convenience method to create
      Agents from dot notation. Ie: machine_loc.agent_name\n        \"\"\"\n        if
      \".\" in location:\n            parts = location.split(\".\")\n            return
      cls(machine=\".\".join(parts[:-1]), agent=parts[-1])\n        else:\n            return
      cls(agent=location)\n\n\nclass Program(BaseModel):\n    machine: str = Field(default_factory=AgentOS.current_machine_url)\n
      \   agent: str\n    program: str\n\n    @classmethod\n    def get(cls, location:
      str):\n        parts = location.split(\".\")\n        kwargs = dict(program=parts[-1],
      agent=parts[-2])\n        if len(parts) > 2:\n            kwargs[\"machine\"]
      = \".\".join(parts[:-2])\n        return cls(**kwargs)\n\n    def stream_execute(self,
      body: Optional[Any] = None) -> AgentResponseIterator:\n        url = urljoin(self.machine,
      f\"agents/{self.agent}/programs/{self.program}\")\n        return AgentResponseIterator(stream_content(url,
      body))\n\n    async def execute(self, body: Optional[Any] = None) -> ProcessStatus:\n
      \       url = urljoin(self.machine, f\"agents/{self.agent}/programs/{self.program}\")\n
      \       json_ = await post_content(url, body)\n        return ProcessStatus(machine=self.machine,
      agent=self.agent, **json_)\n\n\nclass Process(BaseModel):\n    machine: str
      = Field(default_factory=AgentOS.current_machine_url)\n    agent: str\n    process_id:
      str\n\n    async def action(self, action_name: str, body: dict | BaseModel)
      -> ProcessStatus:\n        url = urljoin(self.machine, f\"agents/{self.agent}/processes/{self.process_id}/actions/{action_name}\")\n
      \       json_ = await post_content(url, body)\n        return ProcessStatus(machine=self.machine,
      agent=self.agent, **json_)\n\n    async def status(self) -> ProcessStatus:\n
      \       url = urljoin(self.machine, f\"agents/{self.agent}/processes/{self.process_id}/status\")\n
      \       json_ = await get_content(url)\n        return ProcessStatus(machine=self.machine,
      agent=self.agent, **json_)\n\n    async def delete(self) -> DeleteProcessResponse:\n
      \       deleted = await delete(urljoin(self.machine, f\"agents/{self.agent}/processes/{self.process_id}\"))\n
      \       return DeleteProcessResponse.model_validate(deleted)\n\n    @classmethod\n
      \   def get(cls, stream_response: AgentResponseIterator):\n        if not stream_response.machine
      or not stream_response.agent or not stream_response.process_id:\n            raise
      ValueError(\"stream_response insufficiently iterated\")\n        return cls(machine=stream_response.machine,
      agent=stream_response.agent, process_id=stream_response.process_id)\n\n\nclass
      ProcessStatus(Process, extra=Extra.allow):\n    state: str\n    available_actions:
      List[str]\n\n\nclass AgentResponseIterator(AsyncIterator[StreamEvent]):\n    \"\"\"\n
      \   This class is used to iterate over the responses from an agent call and
      store the state of the conversation after the stream is complete.\n\n    For
      example::\n\n        agent_it = agent.stream_program(\"program_name\", \"some
      data\")\n        async for event in agent_it:\n            # ... do something
      with the event ...\n        process_id = agent_it.process_id\n\n    \"\"\"\n\n
      \   data: AsyncIterator[StreamEvent]\n    machine: str\n    agent: str\n    process_id:
      str\n    state: str\n    available_actions: List[str]\n\n    def __init__(self,
      data: AsyncIterator[StreamEvent]):\n        self.data = data.__aiter__()\n\n
      \   async def __anext__(self):\n        try:\n            event = await self.data.__anext__()\n
      \       except StopAsyncIteration:\n            await self.iteration_complete()\n
      \           raise\n        if event.is_root_and_type(StartAgentCallEvent):\n
      \           self.machine = event.machine\n            self.agent = event.agent_name\n
      \           self.process_id = event.process_id\n        elif event.is_root_and_type(AgentStateEvent):\n
      \           self.state = event.state\n            self.available_actions = event.available_actions\n\n
      \       return event\n\n    def __aiter__(self):\n        return self\n\n    async
      def iteration_complete(self):\n        pass\n"
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Length:
      - '1482'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:29:21 GMT
      ETag:
      - W/"4efd1cb3d5e1e68c7c467e88cee2fa1bc58f8f61dc45bbbdcfac9f50de20ee97"
      Expires:
      - Tue, 20 Feb 2024 21:34:21 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - 4a5cf60794f16e902887968f61f196f927cda0af
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - BE52:257E5B:B7757:10B14F:65D519B1
      X-Served-By:
      - cache-bfi-kbfi7400022-BFI
      X-Timer:
      - S1708464561.488040,VS0,VE128
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/builtins/resources?ref=main
  response:
    content: '[{"name":"machine.yaml","path":"sdk/eidolon_ai_sdk/builtins/resources/machine.yaml","sha":"9e9d3174392e73c010d6d1c14e2fadf305ad6f8c","size":181,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/builtins/resources/machine.yaml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/builtins/resources/machine.yaml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/9e9d3174392e73c010d6d1c14e2fadf305ad6f8c","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/builtins/resources/machine.yaml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/builtins/resources/machine.yaml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/9e9d3174392e73c010d6d1c14e2fadf305ad6f8c","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/builtins/resources/machine.yaml"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:29:21 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E50E:2524E4:15E22E:1F48F2:65D519B1
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4634'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '366'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/builtins/logic_units?ref=main
  response:
    content: '[{"name":"__init__.py","path":"sdk/eidolon_ai_sdk/builtins/logic_units/__init__.py","sha":"e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/builtins/logic_units/__init__.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/builtins/logic_units/__init__.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/builtins/logic_units/__init__.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/builtins/logic_units/__init__.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/builtins/logic_units/__init__.py"}},{"name":"web_search.py","path":"sdk/eidolon_ai_sdk/builtins/logic_units/web_search.py","sha":"d3104f87b1bce5556c742171c18ea9a1b083c8c0","size":3941,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/builtins/logic_units/web_search.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/builtins/logic_units/web_search.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/d3104f87b1bce5556c742171c18ea9a1b083c8c0","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/builtins/logic_units/web_search.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/builtins/logic_units/web_search.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/d3104f87b1bce5556c742171c18ea9a1b083c8c0","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/builtins/logic_units/web_search.py"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:29:21 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E50C:2E1594:2A005:378EA:65D519B1
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4636'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '364'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/components/ui?ref=main
  response:
    content: '[{"name":"icons.tsx","path":"webui/components/ui/icons.tsx","sha":"1efa60894e918050e742ff0e8489ac118d1b88e9","size":2451,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/components/ui/icons.tsx?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/webui/components/ui/icons.tsx","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/1efa60894e918050e742ff0e8489ac118d1b88e9","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/webui/components/ui/icons.tsx","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/components/ui/icons.tsx?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/1efa60894e918050e742ff0e8489ac118d1b88e9","html":"https://github.com/eidolon-ai/eidolon/blob/main/webui/components/ui/icons.tsx"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:29:21 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E4FE:2518A1:150270:1E6939:65D519B1
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4635'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '365'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/builtins/__init__.py
  response:
    content: ''
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Length:
      - '0'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:29:21 GMT
      ETag:
      - W/"938f66ede415ccb10764da47cd5f3cfc076c07b8791c708cfa8ec54982197c1f"
      Expires:
      - Tue, 20 Feb 2024 21:34:21 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - 714a1a512d9045beaf913e7c047f316655f3b0f3
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - 8E44:570F:60C3E2:734F3E:65D519B0
      X-Served-By:
      - cache-yvr1530-YVR
      X-Timer:
      - S1708464561.495245,VS0,VE125
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/agent/agent.py
  response:
    content: "from __future__ import annotations\n\nimport typing\nfrom pydantic import
      BaseModel\nfrom typing import List, TypeVar, Generic\n\nfrom eidolon_ai_sdk.cpu.agent_cpu
      import AgentCPU\nfrom eidolon_ai_sdk.cpu.agents_logic_unit import (\n    AgentsLogicUnit,\n
      \   AgentsLogicUnitSpec,\n)\nfrom eidolon_ai_sdk.system.fn_handler import FnHandler,
      register_handler\nfrom eidolon_ai_sdk.system.reference_model import Specable,
      AnnotatedReference\n\n\nclass AgentSpec(BaseModel):\n    cpu: AnnotatedReference[AgentCPU]\n
      \   agent_refs: List[str] = []\n\n\nclass Agent(Specable[AgentSpec]):\n    cpu:
      AgentCPU\n\n    def __init__(self, **kwargs):\n        super().__init__(**kwargs)\n
      \       self.cpu = self.spec.cpu.instantiate()\n        if self.spec.agent_refs
      and hasattr(self.cpu, \"logic_units\"):\n            self.cpu.logic_units.append(\n
      \               AgentsLogicUnit(\n                    processing_unit_locator=self.cpu,\n
      \                   spec=AgentsLogicUnitSpec(agents=self.spec.agent_refs),\n
      \               )\n            )\n\n\ndef register_program(\n    name: typing.Optional[typing.Callable[[object,
      FnHandler], str]] = None,\n    description: typing.Optional[typing.Callable[[object,
      FnHandler], str]] = None,\n    input_model: typing.Optional[typing.Callable[[object,
      FnHandler], typing.Type[BaseModel]]] = None,\n    output_model: typing.Optional[typing.Callable[[object,
      FnHandler], typing.Any]] = None,\n):\n    return register_handler(\n        name=name,\n
      \       description=description,\n        input_model=input_model,\n        output_model=output_model,\n
      \       allowed_states=[\"initialized\"],\n    )\n\n\ndef register_action(\n
      \   *allowed_states: str,\n    name: str = None,\n    description: typing.Optional[typing.Callable[[object,
      FnHandler], str]] = None,\n    input_model: typing.Optional[typing.Callable[[object,
      FnHandler], BaseModel]] = None,\n    output_model: typing.Optional[typing.Callable[[object,
      FnHandler], typing.Any]] = None,\n):\n    if not allowed_states:\n        raise
      ValueError(\"Must specify at least one valid state\")\n    if \"terminated\"
      in allowed_states:\n        raise ValueError(\"Action cannot transform terminated
      state\")\n\n    return register_handler(\n        name=name,\n        description=description,\n
      \       input_model=input_model,\n        output_model=output_model,\n        allowed_states=allowed_states,\n
      \   )\n\n\nT = TypeVar(\"T\")\n\n\nclass AgentState(BaseModel, Generic[T]):\n
      \   name: str\n    data: T\n"
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Length:
      - '725'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:29:21 GMT
      ETag:
      - W/"cec0bff9bd1f57f7d7a9ca23a80d39548f4d4aae6446f05fd35867f9d97d6b2e"
      Expires:
      - Tue, 20 Feb 2024 21:34:21 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - 8db4be5646636c250d658c2604fa2cdc5ed20701
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - 3692:255865:B8320:10BCF8:65D519B0
      X-Served-By:
      - cache-bfi-kbfi7400052-BFI
      X-Timer:
      - S1708464562.501232,VS0,VE128
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/agent/generic_agent.py
  response:
    content: "from datetime import datetime\nfrom typing import Annotated, Dict, Any,
      Literal, Type, Union\n\nfrom fastapi import Body\nfrom jinja2 import Environment,
      StrictUndefined, meta\nfrom pydantic import BaseModel, field_validator, Field,
      model_validator\nfrom pydantic_core import to_jsonable_python\n\nfrom eidolon_ai_sdk.agent.agent
      import (\n    Agent,\n    register_action,\n    AgentState,\n    AgentSpec,\n
      \   register_program,\n)\nfrom eidolon_ai_sdk.cpu.agent_io import UserTextCPUMessage,
      SystemCPUMessage, ImageCPUMessage\nfrom eidolon_ai_sdk.io.events import AgentStateEvent\nfrom
      eidolon_ai_sdk.system.fn_handler import FnHandler\nfrom eidolon_ai_sdk.system.reference_model
      import Specable\nfrom eidolon_ai_sdk.util.schema_to_model import schema_to_model\n\n\nclass
      GenericAgentSpec(AgentSpec):\n    description: str\n    system_prompt: str\n
      \   user_prompt: str = \"{{ question }}\"\n    input_schema: Dict[str, Any]
      = Field(None, description=\"The json schema for the input model.\")\n    output_schema:
      Union[Literal[\"str\"], Dict[str, Any]] = Field(\n        default=\"str\", description=\"The
      json schema for the output model or the literal 'str' for text output.\"\n    )\n
      \   files: Literal[\"disable\", \"single\", \"single-optional\", \"multiple\"]
      = \"disable\"\n\n    @model_validator(mode=\"after\")\n    def _set_input_schema_default(self):\n
      \       if self.input_schema is None:\n            env = Environment()\n            system_vars
      = meta.find_undeclared_variables(env.parse(self.system_prompt))\n            user_vars
      = meta.find_undeclared_variables(env.parse(self.user_prompt))\n            self.input_schema
      = {v: dict(type=\"string\") for v in system_vars.union(user_vars) if v != \"datetime_iso\"}\n
      \       return self\n\n    @field_validator(\"input_schema\")\n    def validate_prompt_properties(cls,
      input_dict):\n        if not isinstance(input_dict, dict):\n            raise
      ValueError(\"prompt_properties must be a dict\")\n        for k, v in input_dict.items():\n
      \           if isinstance(v, dict):\n                if v.get(\"format\") ==
      \"binary\":\n                    raise ValueError(\n                        \"prompt_properties
      cannot contain format = 'binary' fields. Use the files option instead\"\n                    )\n
      \       return input_dict\n\n\nclass LlmResponse(BaseModel):\n    response:
      str\n\n\ndef make_description(agent: object, _handler: FnHandler) -> str:\n
      \   # noinspection PyUnresolvedReferences\n    spec = agent.spec\n    return
      spec.description\n\n\ndef make_input_schema(agent: object, handler: FnHandler)
      -> Type[BaseModel]:\n    # noinspection PyUnresolvedReferences\n    spec = agent.spec\n
      \   properties: Dict[str, Any] = {}\n    if spec.input_schema:\n        properties[\"body\"]
      = dict(\n            type=\"object\",\n            properties=spec.input_schema,\n
      \       )\n    required = [\"body\"]\n    if spec.files == \"single\" or spec.files
      == \"single-optional\":\n        properties[\"file\"] = dict(type=\"string\",
      format=\"binary\")\n        if spec.files == \"single\":\n            required.append(\"file\")\n
      \   elif spec.files == \"multiple\":\n        properties[\"file\"] = dict(type=\"array\",
      items=dict(type=\"string\", format=\"binary\"))\n        required.append(\"file\")\n
      \   elif \"files\" in properties:\n        del properties[\"file\"]\n    schema
      = {\"type\": \"object\", \"properties\": properties, \"required\": required}\n
      \   return schema_to_model(schema, f\"{handler.name.capitalize()}InputModel\")\n\n\ndef
      make_output_schema(agent: object, handler: FnHandler) -> Type[Any]:\n    # noinspection
      PyUnresolvedReferences\n    spec = agent.spec\n    if spec.output_schema ==
      \"str\":\n        return str\n    elif spec.output_schema:\n        return schema_to_model(spec.output_schema,
      f\"{handler.name.capitalize()}OutputModel\")\n    else:\n        raise ValueError(\"output_schema
      must be specified\")\n\n\nclass GenericAgent(Agent, Specable[GenericAgentSpec]):\n
      \   @register_program(\n        input_model=make_input_schema,\n        output_model=make_output_schema,\n
      \       description=make_description,\n    )\n    async def question(self, process_id,
      **kwargs) -> AgentState[Any]:\n        body = dict(datetime_iso=datetime.now().isoformat())\n
      \       body.update(kwargs.get(\"body\") or {})\n        body = to_jsonable_python(body)\n
      \       files = kwargs.get(\"file\", [])\n        if not isinstance(files, list):\n
      \           files = [files]\n\n        env = Environment(undefined=StrictUndefined)\n
      \       t = await self.cpu.main_thread(process_id)\n        await t.set_boot_messages(\n
      \           prompts=[SystemCPUMessage(prompt=(env.from_string(self.spec.system_prompt).render(**body)))],\n
      \       )\n\n        # pull out any kwargs that are UploadFile and put them
      in a list of UserImageCPUMessage\n        image_messages = []\n        for file
      in files:\n            if file:\n                image_messages.append(ImageCPUMessage(image=file.file,
      prompt=file.filename))\n\n        response = t.stream_request(\n            prompts=[\n
      \               UserTextCPUMessage(prompt=(env.from_string(self.spec.user_prompt).render(**body))),\n
      \               *image_messages,\n            ],\n            output_format=self.spec.output_schema,\n
      \       )\n        async for event in response:\n            yield event\n        yield
      AgentStateEvent(state=\"idle\")\n\n    @register_action(\"idle\", \"http_error\")\n
      \   async def respond(self, process_id, statement: Annotated[str, Body(embed=True)])
      -> AgentState[Any]:\n        t = await self.cpu.main_thread(process_id)\n        response
      = await t.run_request([UserTextCPUMessage(prompt=statement)], self.spec.output_schema)\n
      \       return AgentState(name=\"idle\", data=response)\n"
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Length:
      - '1798'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:29:21 GMT
      ETag:
      - W/"56f41189196a05b5d2ab5a76ee79ec18aee8c60014af50d49791990071f8b1d9"
      Expires:
      - Tue, 20 Feb 2024 21:34:21 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - 793f93a1fcef946ed06bb63cb83a79303f706d95
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - B1FA:25522C:AA6F5:FE118:65D519B0
      X-Served-By:
      - cache-bfi-kbfi7400050-BFI
      X-Timer:
      - S1708464562.500485,VS0,VE130
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/components/agent-input?ref=main
  response:
    content: '[{"name":"agent-input-form.tsx","path":"webui/components/agent-input/agent-input-form.tsx","sha":"000c558a81700ea040b5245f5f683d045b46ad0c","size":2774,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/components/agent-input/agent-input-form.tsx?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/webui/components/agent-input/agent-input-form.tsx","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/000c558a81700ea040b5245f5f683d045b46ad0c","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/webui/components/agent-input/agent-input-form.tsx","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/components/agent-input/agent-input-form.tsx?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/000c558a81700ea040b5245f5f683d045b46ad0c","html":"https://github.com/eidolon-ai/eidolon/blob/main/webui/components/agent-input/agent-input-form.tsx"}},{"name":"agent-process.tsx","path":"webui/components/agent-input/agent-process.tsx","sha":"f8daf1e3274f4fa0cd852bd7756ad303e81294d2","size":4350,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/components/agent-input/agent-process.tsx?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/webui/components/agent-input/agent-process.tsx","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/f8daf1e3274f4fa0cd852bd7756ad303e81294d2","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/webui/components/agent-input/agent-process.tsx","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/components/agent-input/agent-process.tsx?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/f8daf1e3274f4fa0cd852bd7756ad303e81294d2","html":"https://github.com/eidolon-ai/eidolon/blob/main/webui/components/agent-input/agent-process.tsx"}},{"name":"start-program-dialog.tsx","path":"webui/components/agent-input/start-program-dialog.tsx","sha":"b63101e7aecb2551147b67f1696dad75cbef2e10","size":3124,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/components/agent-input/start-program-dialog.tsx?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/webui/components/agent-input/start-program-dialog.tsx","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/b63101e7aecb2551147b67f1696dad75cbef2e10","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/webui/components/agent-input/start-program-dialog.tsx","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/components/agent-input/start-program-dialog.tsx?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/b63101e7aecb2551147b67f1696dad75cbef2e10","html":"https://github.com/eidolon-ai/eidolon/blob/main/webui/components/agent-input/start-program-dialog.tsx"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:29:21 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E4FC:255256:1663B9:1FCA78:65D519B1
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4631'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '369'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/assets/main_images?ref=main
  response:
    content: "[{\"name\":\"DALL\xB7E 2023-12-22 22.35.03 - An abstract, non-humanoid
      central form, reminiscent of a cosmic entity with vibrant, swirling nebula-like
      patterns in deep blues, purples, and hints o.png\",\"path\":\"docs/src/assets/main_images/DALL\xB7E
      2023-12-22 22.35.03 - An abstract, non-humanoid central form, reminiscent of
      a cosmic entity with vibrant, swirling nebula-like patterns in deep blues, purples,
      and hints o.png\",\"sha\":\"d43d4b812d150091491cd30d7ef8348113e6d5fe\",\"size\":2054621,\"url\":\"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/assets/main_images/DALL%C2%B7E%202023-12-22%2022.35.03%20-%20An%20abstract,%20non-humanoid%20central%20form,%20reminiscent%20of%20a%20cosmic%20entity%20with%20vibrant,%20swirling%20nebula-like%20patterns%20in%20deep%20blues,%20purples,%20and%20hints%20o.png?ref=main\",\"html_url\":\"https://github.com/eidolon-ai/eidolon/blob/main/docs/src/assets/main_images/DALL%C2%B7E%202023-12-22%2022.35.03%20-%20An%20abstract,%20non-humanoid%20central%20form,%20reminiscent%20of%20a%20cosmic%20entity%20with%20vibrant,%20swirling%20nebula-like%20patterns%20in%20deep%20blues,%20purples,%20and%20hints%20o.png\",\"git_url\":\"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/d43d4b812d150091491cd30d7ef8348113e6d5fe\",\"download_url\":\"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/docs/src/assets/main_images/DALL\xB7E
      2023-12-22 22.35.03 - An abstract, non-humanoid central form, reminiscent of
      a cosmic entity with vibrant, swirling nebula-like patterns in deep blues, purples,
      and hints o.png\",\"type\":\"file\",\"_links\":{\"self\":\"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/assets/main_images/DALL%C2%B7E%202023-12-22%2022.35.03%20-%20An%20abstract,%20non-humanoid%20central%20form,%20reminiscent%20of%20a%20cosmic%20entity%20with%20vibrant,%20swirling%20nebula-like%20patterns%20in%20deep%20blues,%20purples,%20and%20hints%20o.png?ref=main\",\"git\":\"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/d43d4b812d150091491cd30d7ef8348113e6d5fe\",\"html\":\"https://github.com/eidolon-ai/eidolon/blob/main/docs/src/assets/main_images/DALL%C2%B7E%202023-12-22%2022.35.03%20-%20An%20abstract,%20non-humanoid%20central%20form,%20reminiscent%20of%20a%20cosmic%20entity%20with%20vibrant,%20swirling%20nebula-like%20patterns%20in%20deep%20blues,%20purples,%20and%20hints%20o.png\"}},{\"name\":\"DALL\xB7E
      2023-12-22 22.35.08 - An abstract, non-humanoid central form, reminiscent of
      a cosmic entity with vibrant, swirling nebula-like patterns in deep blues, purples,
      and hints o.png\",\"path\":\"docs/src/assets/main_images/DALL\xB7E 2023-12-22
      22.35.08 - An abstract, non-humanoid central form, reminiscent of a cosmic entity
      with vibrant, swirling nebula-like patterns in deep blues, purples, and hints
      o.png\",\"sha\":\"02e9e0e45079a36b1d7cfc68952fab48c18d79ae\",\"size\":2117661,\"url\":\"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/assets/main_images/DALL%C2%B7E%202023-12-22%2022.35.08%20-%20An%20abstract,%20non-humanoid%20central%20form,%20reminiscent%20of%20a%20cosmic%20entity%20with%20vibrant,%20swirling%20nebula-like%20patterns%20in%20deep%20blues,%20purples,%20and%20hints%20o.png?ref=main\",\"html_url\":\"https://github.com/eidolon-ai/eidolon/blob/main/docs/src/assets/main_images/DALL%C2%B7E%202023-12-22%2022.35.08%20-%20An%20abstract,%20non-humanoid%20central%20form,%20reminiscent%20of%20a%20cosmic%20entity%20with%20vibrant,%20swirling%20nebula-like%20patterns%20in%20deep%20blues,%20purples,%20and%20hints%20o.png\",\"git_url\":\"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/02e9e0e45079a36b1d7cfc68952fab48c18d79ae\",\"download_url\":\"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/docs/src/assets/main_images/DALL\xB7E
      2023-12-22 22.35.08 - An abstract, non-humanoid central form, reminiscent of
      a cosmic entity with vibrant, swirling nebula-like patterns in deep blues, purples,
      and hints o.png\",\"type\":\"file\",\"_links\":{\"self\":\"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/assets/main_images/DALL%C2%B7E%202023-12-22%2022.35.08%20-%20An%20abstract,%20non-humanoid%20central%20form,%20reminiscent%20of%20a%20cosmic%20entity%20with%20vibrant,%20swirling%20nebula-like%20patterns%20in%20deep%20blues,%20purples,%20and%20hints%20o.png?ref=main\",\"git\":\"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/02e9e0e45079a36b1d7cfc68952fab48c18d79ae\",\"html\":\"https://github.com/eidolon-ai/eidolon/blob/main/docs/src/assets/main_images/DALL%C2%B7E%202023-12-22%2022.35.08%20-%20An%20abstract,%20non-humanoid%20central%20form,%20reminiscent%20of%20a%20cosmic%20entity%20with%20vibrant,%20swirling%20nebula-like%20patterns%20in%20deep%20blues,%20purples,%20and%20hints%20o.png\"}},{\"name\":\"DALL\xB7E
      2023-12-22 22.35.10 - Multiple abstract, non-humanoid forms resembling cosmic
      entities, each with vibrant, swirling nebula-like patterns in deep blues, purples,
      and hints o.png\",\"path\":\"docs/src/assets/main_images/DALL\xB7E 2023-12-22
      22.35.10 - Multiple abstract, non-humanoid forms resembling cosmic entities,
      each with vibrant, swirling nebula-like patterns in deep blues, purples, and
      hints o.png\",\"sha\":\"207d1f916f376cac78f0ed8710782fda39a114df\",\"size\":2181162,\"url\":\"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/assets/main_images/DALL%C2%B7E%202023-12-22%2022.35.10%20-%20Multiple%20abstract,%20non-humanoid%20forms%20resembling%20cosmic%20entities,%20each%20with%20vibrant,%20swirling%20nebula-like%20patterns%20in%20deep%20blues,%20purples,%20and%20hints%20o.png?ref=main\",\"html_url\":\"https://github.com/eidolon-ai/eidolon/blob/main/docs/src/assets/main_images/DALL%C2%B7E%202023-12-22%2022.35.10%20-%20Multiple%20abstract,%20non-humanoid%20forms%20resembling%20cosmic%20entities,%20each%20with%20vibrant,%20swirling%20nebula-like%20patterns%20in%20deep%20blues,%20purples,%20and%20hints%20o.png\",\"git_url\":\"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/207d1f916f376cac78f0ed8710782fda39a114df\",\"download_url\":\"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/docs/src/assets/main_images/DALL\xB7E
      2023-12-22 22.35.10 - Multiple abstract, non-humanoid forms resembling cosmic
      entities, each with vibrant, swirling nebula-like patterns in deep blues, purples,
      and hints o.png\",\"type\":\"file\",\"_links\":{\"self\":\"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/assets/main_images/DALL%C2%B7E%202023-12-22%2022.35.10%20-%20Multiple%20abstract,%20non-humanoid%20forms%20resembling%20cosmic%20entities,%20each%20with%20vibrant,%20swirling%20nebula-like%20patterns%20in%20deep%20blues,%20purples,%20and%20hints%20o.png?ref=main\",\"git\":\"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/207d1f916f376cac78f0ed8710782fda39a114df\",\"html\":\"https://github.com/eidolon-ai/eidolon/blob/main/docs/src/assets/main_images/DALL%C2%B7E%202023-12-22%2022.35.10%20-%20Multiple%20abstract,%20non-humanoid%20forms%20resembling%20cosmic%20entities,%20each%20with%20vibrant,%20swirling%20nebula-like%20patterns%20in%20deep%20blues,%20purples,%20and%20hints%20o.png\"}},{\"name\":\"DALL\xB7E
      2023-12-22 22.35.12 - Multiple abstract, non-humanoid forms resembling cosmic
      entities, each with vibrant, swirling nebula-like patterns in deep blues, purples,
      and hints o.png\",\"path\":\"docs/src/assets/main_images/DALL\xB7E 2023-12-22
      22.35.12 - Multiple abstract, non-humanoid forms resembling cosmic entities,
      each with vibrant, swirling nebula-like patterns in deep blues, purples, and
      hints o.png\",\"sha\":\"3466ab6ae20228649492285ba3bb335fe65a57de\",\"size\":2032687,\"url\":\"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/assets/main_images/DALL%C2%B7E%202023-12-22%2022.35.12%20-%20Multiple%20abstract,%20non-humanoid%20forms%20resembling%20cosmic%20entities,%20each%20with%20vibrant,%20swirling%20nebula-like%20patterns%20in%20deep%20blues,%20purples,%20and%20hints%20o.png?ref=main\",\"html_url\":\"https://github.com/eidolon-ai/eidolon/blob/main/docs/src/assets/main_images/DALL%C2%B7E%202023-12-22%2022.35.12%20-%20Multiple%20abstract,%20non-humanoid%20forms%20resembling%20cosmic%20entities,%20each%20with%20vibrant,%20swirling%20nebula-like%20patterns%20in%20deep%20blues,%20purples,%20and%20hints%20o.png\",\"git_url\":\"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/3466ab6ae20228649492285ba3bb335fe65a57de\",\"download_url\":\"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/docs/src/assets/main_images/DALL\xB7E
      2023-12-22 22.35.12 - Multiple abstract, non-humanoid forms resembling cosmic
      entities, each with vibrant, swirling nebula-like patterns in deep blues, purples,
      and hints o.png\",\"type\":\"file\",\"_links\":{\"self\":\"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/assets/main_images/DALL%C2%B7E%202023-12-22%2022.35.12%20-%20Multiple%20abstract,%20non-humanoid%20forms%20resembling%20cosmic%20entities,%20each%20with%20vibrant,%20swirling%20nebula-like%20patterns%20in%20deep%20blues,%20purples,%20and%20hints%20o.png?ref=main\",\"git\":\"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/3466ab6ae20228649492285ba3bb335fe65a57de\",\"html\":\"https://github.com/eidolon-ai/eidolon/blob/main/docs/src/assets/main_images/DALL%C2%B7E%202023-12-22%2022.35.12%20-%20Multiple%20abstract,%20non-humanoid%20forms%20resembling%20cosmic%20entities,%20each%20with%20vibrant,%20swirling%20nebula-like%20patterns%20in%20deep%20blues,%20purples,%20and%20hints%20o.png\"}},{\"name\":\"DALL\xB7E
      2023-12-22 22.35.14 - A central abstract, non-humanoid form resembling a cosmic
      entity, with vibrant, swirling nebula-like patterns in deep blues, purples,
      and hints of pin.png\",\"path\":\"docs/src/assets/main_images/DALL\xB7E 2023-12-22
      22.35.14 - A central abstract, non-humanoid form resembling a cosmic entity,
      with vibrant, swirling nebula-like patterns in deep blues, purples, and hints
      of pin.png\",\"sha\":\"23ccb64021ee43ecd4e45d0d7a678ff67a5e2565\",\"size\":2101737,\"url\":\"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/assets/main_images/DALL%C2%B7E%202023-12-22%2022.35.14%20-%20A%20central%20abstract,%20non-humanoid%20form%20resembling%20a%20cosmic%20entity,%20with%20vibrant,%20swirling%20nebula-like%20patterns%20in%20deep%20blues,%20purples,%20and%20hints%20of%20pin.png?ref=main\",\"html_url\":\"https://github.com/eidolon-ai/eidolon/blob/main/docs/src/assets/main_images/DALL%C2%B7E%202023-12-22%2022.35.14%20-%20A%20central%20abstract,%20non-humanoid%20form%20resembling%20a%20cosmic%20entity,%20with%20vibrant,%20swirling%20nebula-like%20patterns%20in%20deep%20blues,%20purples,%20and%20hints%20of%20pin.png\",\"git_url\":\"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/23ccb64021ee43ecd4e45d0d7a678ff67a5e2565\",\"download_url\":\"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/docs/src/assets/main_images/DALL\xB7E
      2023-12-22 22.35.14 - A central abstract, non-humanoid form resembling a cosmic
      entity, with vibrant, swirling nebula-like patterns in deep blues, purples,
      and hints of pin.png\",\"type\":\"file\",\"_links\":{\"self\":\"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/assets/main_images/DALL%C2%B7E%202023-12-22%2022.35.14%20-%20A%20central%20abstract,%20non-humanoid%20form%20resembling%20a%20cosmic%20entity,%20with%20vibrant,%20swirling%20nebula-like%20patterns%20in%20deep%20blues,%20purples,%20and%20hints%20of%20pin.png?ref=main\",\"git\":\"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/23ccb64021ee43ecd4e45d0d7a678ff67a5e2565\",\"html\":\"https://github.com/eidolon-ai/eidolon/blob/main/docs/src/assets/main_images/DALL%C2%B7E%202023-12-22%2022.35.14%20-%20A%20central%20abstract,%20non-humanoid%20form%20resembling%20a%20cosmic%20entity,%20with%20vibrant,%20swirling%20nebula-like%20patterns%20in%20deep%20blues,%20purples,%20and%20hints%20of%20pin.png\"}},{\"name\":\"DALL\xB7E
      2023-12-22 22.35.15 - A central abstract, non-humanoid form resembling a cosmic
      entity, with vibrant, swirling nebula-like patterns in deep blues, purples,
      and hints of pin.png\",\"path\":\"docs/src/assets/main_images/DALL\xB7E 2023-12-22
      22.35.15 - A central abstract, non-humanoid form resembling a cosmic entity,
      with vibrant, swirling nebula-like patterns in deep blues, purples, and hints
      of pin.png\",\"sha\":\"3409e3b5a3b598388c368d5075bc10ec7f4e0b3f\",\"size\":2142845,\"url\":\"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/assets/main_images/DALL%C2%B7E%202023-12-22%2022.35.15%20-%20A%20central%20abstract,%20non-humanoid%20form%20resembling%20a%20cosmic%20entity,%20with%20vibrant,%20swirling%20nebula-like%20patterns%20in%20deep%20blues,%20purples,%20and%20hints%20of%20pin.png?ref=main\",\"html_url\":\"https://github.com/eidolon-ai/eidolon/blob/main/docs/src/assets/main_images/DALL%C2%B7E%202023-12-22%2022.35.15%20-%20A%20central%20abstract,%20non-humanoid%20form%20resembling%20a%20cosmic%20entity,%20with%20vibrant,%20swirling%20nebula-like%20patterns%20in%20deep%20blues,%20purples,%20and%20hints%20of%20pin.png\",\"git_url\":\"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/3409e3b5a3b598388c368d5075bc10ec7f4e0b3f\",\"download_url\":\"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/docs/src/assets/main_images/DALL\xB7E
      2023-12-22 22.35.15 - A central abstract, non-humanoid form resembling a cosmic
      entity, with vibrant, swirling nebula-like patterns in deep blues, purples,
      and hints of pin.png\",\"type\":\"file\",\"_links\":{\"self\":\"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/assets/main_images/DALL%C2%B7E%202023-12-22%2022.35.15%20-%20A%20central%20abstract,%20non-humanoid%20form%20resembling%20a%20cosmic%20entity,%20with%20vibrant,%20swirling%20nebula-like%20patterns%20in%20deep%20blues,%20purples,%20and%20hints%20of%20pin.png?ref=main\",\"git\":\"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/3409e3b5a3b598388c368d5075bc10ec7f4e0b3f\",\"html\":\"https://github.com/eidolon-ai/eidolon/blob/main/docs/src/assets/main_images/DALL%C2%B7E%202023-12-22%2022.35.15%20-%20A%20central%20abstract,%20non-humanoid%20form%20resembling%20a%20cosmic%20entity,%20with%20vibrant,%20swirling%20nebula-like%20patterns%20in%20deep%20blues,%20purples,%20and%20hints%20of%20pin.png\"}},{\"name\":\"DALL\xB7E
      2023-12-22 22.35.16 - A central abstract, non-humanoid form resembling a cosmic
      entity, with vibrant, swirling nebula-like patterns in deep blues, purples,
      and hints of pin.png\",\"path\":\"docs/src/assets/main_images/DALL\xB7E 2023-12-22
      22.35.16 - A central abstract, non-humanoid form resembling a cosmic entity,
      with vibrant, swirling nebula-like patterns in deep blues, purples, and hints
      of pin.png\",\"sha\":\"c1987e6823b917e89768d117b52c265cd746b002\",\"size\":2224929,\"url\":\"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/assets/main_images/DALL%C2%B7E%202023-12-22%2022.35.16%20-%20A%20central%20abstract,%20non-humanoid%20form%20resembling%20a%20cosmic%20entity,%20with%20vibrant,%20swirling%20nebula-like%20patterns%20in%20deep%20blues,%20purples,%20and%20hints%20of%20pin.png?ref=main\",\"html_url\":\"https://github.com/eidolon-ai/eidolon/blob/main/docs/src/assets/main_images/DALL%C2%B7E%202023-12-22%2022.35.16%20-%20A%20central%20abstract,%20non-humanoid%20form%20resembling%20a%20cosmic%20entity,%20with%20vibrant,%20swirling%20nebula-like%20patterns%20in%20deep%20blues,%20purples,%20and%20hints%20of%20pin.png\",\"git_url\":\"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/c1987e6823b917e89768d117b52c265cd746b002\",\"download_url\":\"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/docs/src/assets/main_images/DALL\xB7E
      2023-12-22 22.35.16 - A central abstract, non-humanoid form resembling a cosmic
      entity, with vibrant, swirling nebula-like patterns in deep blues, purples,
      and hints of pin.png\",\"type\":\"file\",\"_links\":{\"self\":\"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/assets/main_images/DALL%C2%B7E%202023-12-22%2022.35.16%20-%20A%20central%20abstract,%20non-humanoid%20form%20resembling%20a%20cosmic%20entity,%20with%20vibrant,%20swirling%20nebula-like%20patterns%20in%20deep%20blues,%20purples,%20and%20hints%20of%20pin.png?ref=main\",\"git\":\"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/c1987e6823b917e89768d117b52c265cd746b002\",\"html\":\"https://github.com/eidolon-ai/eidolon/blob/main/docs/src/assets/main_images/DALL%C2%B7E%202023-12-22%2022.35.16%20-%20A%20central%20abstract,%20non-humanoid%20form%20resembling%20a%20cosmic%20entity,%20with%20vibrant,%20swirling%20nebula-like%20patterns%20in%20deep%20blues,%20purples,%20and%20hints%20of%20pin.png\"}},{\"name\":\"DALL\xB7E
      2023-12-22 22.35.18 - A central abstract, non-humanoid form resembling a cosmic
      entity, with vibrant, swirling nebula-like patterns in deep blues, purples,
      and hints of pin.png\",\"path\":\"docs/src/assets/main_images/DALL\xB7E 2023-12-22
      22.35.18 - A central abstract, non-humanoid form resembling a cosmic entity,
      with vibrant, swirling nebula-like patterns in deep blues, purples, and hints
      of pin.png\",\"sha\":\"6c201c7e187fecfc1ec740c6bb8da09a87e533f1\",\"size\":2050790,\"url\":\"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/assets/main_images/DALL%C2%B7E%202023-12-22%2022.35.18%20-%20A%20central%20abstract,%20non-humanoid%20form%20resembling%20a%20cosmic%20entity,%20with%20vibrant,%20swirling%20nebula-like%20patterns%20in%20deep%20blues,%20purples,%20and%20hints%20of%20pin.png?ref=main\",\"html_url\":\"https://github.com/eidolon-ai/eidolon/blob/main/docs/src/assets/main_images/DALL%C2%B7E%202023-12-22%2022.35.18%20-%20A%20central%20abstract,%20non-humanoid%20form%20resembling%20a%20cosmic%20entity,%20with%20vibrant,%20swirling%20nebula-like%20patterns%20in%20deep%20blues,%20purples,%20and%20hints%20of%20pin.png\",\"git_url\":\"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/6c201c7e187fecfc1ec740c6bb8da09a87e533f1\",\"download_url\":\"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/docs/src/assets/main_images/DALL\xB7E
      2023-12-22 22.35.18 - A central abstract, non-humanoid form resembling a cosmic
      entity, with vibrant, swirling nebula-like patterns in deep blues, purples,
      and hints of pin.png\",\"type\":\"file\",\"_links\":{\"self\":\"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/assets/main_images/DALL%C2%B7E%202023-12-22%2022.35.18%20-%20A%20central%20abstract,%20non-humanoid%20form%20resembling%20a%20cosmic%20entity,%20with%20vibrant,%20swirling%20nebula-like%20patterns%20in%20deep%20blues,%20purples,%20and%20hints%20of%20pin.png?ref=main\",\"git\":\"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/6c201c7e187fecfc1ec740c6bb8da09a87e533f1\",\"html\":\"https://github.com/eidolon-ai/eidolon/blob/main/docs/src/assets/main_images/DALL%C2%B7E%202023-12-22%2022.35.18%20-%20A%20central%20abstract,%20non-humanoid%20form%20resembling%20a%20cosmic%20entity,%20with%20vibrant,%20swirling%20nebula-like%20patterns%20in%20deep%20blues,%20purples,%20and%20hints%20of%20pin.png\"}},{\"name\":\"DALL\xB7E
      2023-12-22 22.35.20 - A central abstract form resembling a cosmic brain or an
      AI agent, with vibrant, swirling nebula-like patterns in deep blues, purples,
      and hints of pin.png\",\"path\":\"docs/src/assets/main_images/DALL\xB7E 2023-12-22
      22.35.20 - A central abstract form resembling a cosmic brain or an AI agent,
      with vibrant, swirling nebula-like patterns in deep blues, purples, and hints
      of pin.png\",\"sha\":\"ef8ccff6e404637bb70bf8ab07d5171bb1f160e1\",\"size\":2242149,\"url\":\"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/assets/main_images/DALL%C2%B7E%202023-12-22%2022.35.20%20-%20A%20central%20abstract%20form%20resembling%20a%20cosmic%20brain%20or%20an%20AI%20agent,%20with%20vibrant,%20swirling%20nebula-like%20patterns%20in%20deep%20blues,%20purples,%20and%20hints%20of%20pin.png?ref=main\",\"html_url\":\"https://github.com/eidolon-ai/eidolon/blob/main/docs/src/assets/main_images/DALL%C2%B7E%202023-12-22%2022.35.20%20-%20A%20central%20abstract%20form%20resembling%20a%20cosmic%20brain%20or%20an%20AI%20agent,%20with%20vibrant,%20swirling%20nebula-like%20patterns%20in%20deep%20blues,%20purples,%20and%20hints%20of%20pin.png\",\"git_url\":\"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/ef8ccff6e404637bb70bf8ab07d5171bb1f160e1\",\"download_url\":\"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/docs/src/assets/main_images/DALL\xB7E
      2023-12-22 22.35.20 - A central abstract form resembling a cosmic brain or an
      AI agent, with vibrant, swirling nebula-like patterns in deep blues, purples,
      and hints of pin.png\",\"type\":\"file\",\"_links\":{\"self\":\"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/assets/main_images/DALL%C2%B7E%202023-12-22%2022.35.20%20-%20A%20central%20abstract%20form%20resembling%20a%20cosmic%20brain%20or%20an%20AI%20agent,%20with%20vibrant,%20swirling%20nebula-like%20patterns%20in%20deep%20blues,%20purples,%20and%20hints%20of%20pin.png?ref=main\",\"git\":\"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/ef8ccff6e404637bb70bf8ab07d5171bb1f160e1\",\"html\":\"https://github.com/eidolon-ai/eidolon/blob/main/docs/src/assets/main_images/DALL%C2%B7E%202023-12-22%2022.35.20%20-%20A%20central%20abstract%20form%20resembling%20a%20cosmic%20brain%20or%20an%20AI%20agent,%20with%20vibrant,%20swirling%20nebula-like%20patterns%20in%20deep%20blues,%20purples,%20and%20hints%20of%20pin.png\"}},{\"name\":\"DALL\xB7E
      2023-12-22 22.35.21 - A central abstract form resembling a cosmic brain or an
      AI agent, with vibrant, swirling nebula-like patterns in deep blues, purples,
      and hints of pin.png\",\"path\":\"docs/src/assets/main_images/DALL\xB7E 2023-12-22
      22.35.21 - A central abstract form resembling a cosmic brain or an AI agent,
      with vibrant, swirling nebula-like patterns in deep blues, purples, and hints
      of pin.png\",\"sha\":\"002f7632c6c1bc31102bf754212ebb44e29084ba\",\"size\":1894943,\"url\":\"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/assets/main_images/DALL%C2%B7E%202023-12-22%2022.35.21%20-%20A%20central%20abstract%20form%20resembling%20a%20cosmic%20brain%20or%20an%20AI%20agent,%20with%20vibrant,%20swirling%20nebula-like%20patterns%20in%20deep%20blues,%20purples,%20and%20hints%20of%20pin.png?ref=main\",\"html_url\":\"https://github.com/eidolon-ai/eidolon/blob/main/docs/src/assets/main_images/DALL%C2%B7E%202023-12-22%2022.35.21%20-%20A%20central%20abstract%20form%20resembling%20a%20cosmic%20brain%20or%20an%20AI%20agent,%20with%20vibrant,%20swirling%20nebula-like%20patterns%20in%20deep%20blues,%20purples,%20and%20hints%20of%20pin.png\",\"git_url\":\"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/002f7632c6c1bc31102bf754212ebb44e29084ba\",\"download_url\":\"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/docs/src/assets/main_images/DALL\xB7E
      2023-12-22 22.35.21 - A central abstract form resembling a cosmic brain or an
      AI agent, with vibrant, swirling nebula-like patterns in deep blues, purples,
      and hints of pin.png\",\"type\":\"file\",\"_links\":{\"self\":\"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/assets/main_images/DALL%C2%B7E%202023-12-22%2022.35.21%20-%20A%20central%20abstract%20form%20resembling%20a%20cosmic%20brain%20or%20an%20AI%20agent,%20with%20vibrant,%20swirling%20nebula-like%20patterns%20in%20deep%20blues,%20purples,%20and%20hints%20of%20pin.png?ref=main\",\"git\":\"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/002f7632c6c1bc31102bf754212ebb44e29084ba\",\"html\":\"https://github.com/eidolon-ai/eidolon/blob/main/docs/src/assets/main_images/DALL%C2%B7E%202023-12-22%2022.35.21%20-%20A%20central%20abstract%20form%20resembling%20a%20cosmic%20brain%20or%20an%20AI%20agent,%20with%20vibrant,%20swirling%20nebula-like%20patterns%20in%20deep%20blues,%20purples,%20and%20hints%20of%20pin.png\"}},{\"name\":\"eidolon_with_gradient.png\",\"path\":\"docs/src/assets/main_images/eidolon_with_gradient.png\",\"sha\":\"628035ba81d58a773e7b87a2242beba102eb75b2\",\"size\":2245999,\"url\":\"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/assets/main_images/eidolon_with_gradient.png?ref=main\",\"html_url\":\"https://github.com/eidolon-ai/eidolon/blob/main/docs/src/assets/main_images/eidolon_with_gradient.png\",\"git_url\":\"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/628035ba81d58a773e7b87a2242beba102eb75b2\",\"download_url\":\"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/docs/src/assets/main_images/eidolon_with_gradient.png\",\"type\":\"file\",\"_links\":{\"self\":\"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/assets/main_images/eidolon_with_gradient.png?ref=main\",\"git\":\"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/628035ba81d58a773e7b87a2242beba102eb75b2\",\"html\":\"https://github.com/eidolon-ai/eidolon/blob/main/docs/src/assets/main_images/eidolon_with_gradient.png\"}},{\"name\":\"img_1.png\",\"path\":\"docs/src/assets/main_images/img_1.png\",\"sha\":\"89a7f3dbb72c4956f0a6325c36e2a7345473fb4a\",\"size\":2712080,\"url\":\"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/assets/main_images/img_1.png?ref=main\",\"html_url\":\"https://github.com/eidolon-ai/eidolon/blob/main/docs/src/assets/main_images/img_1.png\",\"git_url\":\"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/89a7f3dbb72c4956f0a6325c36e2a7345473fb4a\",\"download_url\":\"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/docs/src/assets/main_images/img_1.png\",\"type\":\"file\",\"_links\":{\"self\":\"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/assets/main_images/img_1.png?ref=main\",\"git\":\"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/89a7f3dbb72c4956f0a6325c36e2a7345473fb4a\",\"html\":\"https://github.com/eidolon-ai/eidolon/blob/main/docs/src/assets/main_images/img_1.png\"}},{\"name\":\"img_2.png\",\"path\":\"docs/src/assets/main_images/img_2.png\",\"sha\":\"5356907346e2dde2388f89015ec537a2961247b1\",\"size\":2554213,\"url\":\"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/assets/main_images/img_2.png?ref=main\",\"html_url\":\"https://github.com/eidolon-ai/eidolon/blob/main/docs/src/assets/main_images/img_2.png\",\"git_url\":\"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/5356907346e2dde2388f89015ec537a2961247b1\",\"download_url\":\"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/docs/src/assets/main_images/img_2.png\",\"type\":\"file\",\"_links\":{\"self\":\"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/assets/main_images/img_2.png?ref=main\",\"git\":\"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/5356907346e2dde2388f89015ec537a2961247b1\",\"html\":\"https://github.com/eidolon-ai/eidolon/blob/main/docs/src/assets/main_images/img_2.png\"}}]"
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:29:21 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E4FF:254D25:161008:1F76E8:65D519B1
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4632'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '368'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/bin/agent_creator.py
  response:
    content: "import importlib.metadata\nimport inspect\nimport os\nimport pkgutil\nimport
      readline\nimport sys\nimport tempfile\nfrom contextlib import contextmanager\nfrom
      functools import cache\nfrom typing import Type, get_origin\n\nimport typer\nimport
      yaml\nfrom click import Choice, BadParameter\nfrom pydantic import BaseModel\nfrom
      pydantic_core import PydanticUndefinedType\nfrom rich import print as richprint\nfrom
      rich.syntax import Syntax\n\nfrom eidolon_ai_sdk.system.reference_model import
      Reference\nfrom eidolon_ai_sdk.system.resources import agent_resources, AgentResource\nfrom
      eidolon_ai_sdk.util.class_utils import for_name, fqn\n\necho = lambda text,
      **kwargs: typer.echo(pad(text), **kwargs)  # noqa\nconfirm = lambda text, **kwargs:
      typer.confirm(pad(text), **kwargs)  # noqa\n\n\ndef prompt(text, default=None,
      choices: list[str] = None, case_sensitive=False, **kwargs):\n    def completer(text,
      state):\n        if case_sensitive:\n            options = [i for i in choices
      if i.startswith(text)]\n        else:\n            options = [i for i in choices
      if i.lower().startswith(text.lower())]\n        return options[state] if state
      < len(options) else None\n\n    if choices:\n        kwargs[\"type\"] = Choice(choices,
      case_sensitive=case_sensitive)\n    kwargs[\"default\"] = default\n    return
      prompt_with_completer(text, completer, **kwargs)\n\n\ndef prompt_with_completer(text,
      completer: callable, **kwargs):\n    readline.set_completer(completer)\n    rtn
      = typer.prompt(pad(text), **kwargs)\n    readline.set_completer(None)\n    return
      rtn\n\n\n@cache\ndef autocomplete_modules(package_name: str, substring: str):\n
      \   try:\n        package = importlib.import_module(package_name)\n        submodules
      = []\n        # if we are at a module, we want all the classes within it\n        for
      loader, name, is_pkg in pkgutil.walk_packages(package.__path__):\n            if
      name.startswith(substring):\n                submodules.append(package_name
      + \".\" + name + \".\")\n        return submodules\n    except ModuleNotFoundError:\n
      \       return []\n\n\n@cache\ndef autocomplete_packages(substring: str):\n
      \   installed_packages = (dist.metadata[\"Name\"] for dist in importlib.metadata.distributions())\n
      \   rtn = [pkg for pkg in installed_packages if pkg.startswith(substring)]\n
      \   return rtn\n\n\ndef fqn_completer(text, state):\n    # Split the text by
      dots and get the last part that's being typed\n    parts = text.split(\".\")\n
      \   packages = autocomplete_packages(parts[0])\n    if len(packages) > 1:\n
      \       options = packages\n    else:\n        if len(parts) > 1:\n            package_name
      = \".\".join(parts[:-1])\n            substring = parts[-1]\n        else:\n
      \           package_name = packages[0]\n            substring = \"\"\n        if
      hasattr(importlib.import_module(package_name), \"__path__\"):\n            options
      = autocomplete_modules(package_name, substring)\n        else:\n            classes
      = (n for n, v in inspect.getmembers(sys.modules[package_name], inspect.isclass))\n
      \           options = [package_name + \".\" + c for c in classes if c.startswith(substring)]\n
      \   return options[state] if state < len(options) else None\n\n\ndef create_agent():\n
      \   agents = [a for a in agent_resources.keys() if a != \"Agent\"] + [\"Custom\"]\n\n
      \   name = prompt(\"What is the name of the agent?\", default=\"NewAgent\")\n
      \   kind = prompt(f\"What type of agent is {name}?\", default=\"GenericAgent\",
      choices=agents)\n    args = dict(apiVersion=\"eidolon/v1\")\n    args[\"kind\"]
      = kind if kind != \"Custom\" else \"Agent\"\n\n    # todo, This is just a reference,
      so we don't need the duplicate logic here\n    if kind == \"Custom\":\n        agent_resource
      = AgentResource\n        fqn_ = prompt_with_completer(\n            \"What is
      the fully qualified name to the implementation?\", fqn_completer, value_proc=impl_proc\n
      \       )\n        agent_class = for_name(fqn_, object)\n        args[\"implementation\"]
      = fqn_\n    else:\n        agent_resource = agent_resources[kind]\n        agent_class
      = agent_resource.clazz\n\n    spec_type = Reference.get_spec_type(agent_class)\n
      \   if spec_type:\n        if confirm(\"Would you like to modify the spec?\",
      default=False):\n            try:\n                with indented():\n                    args[\"spec\"]
      = build_model(spec_type)\n            except Abort:\n                echo(\"Aborted,
      leaving spec blank\")\n    else:\n        echo(f\"{agent_class.__name__} does
      not have a spec.\")\n\n    try:\n        raw_edit_loop(args, agent_resource)\n
      \       richprint(Syntax(yaml.safe_dump(args), \"yaml\", padding=Indenter.depth
      * 2))\n        save_loc = prompt(\"Where do you want to save the resource?\",
      default=f\"{name}.yaml\")\n        with open(save_loc, \"w\") as file:\n            yaml.dump(args,
      file)\n    except Abort:\n        echo(\"Aborted.\", color=\"red\")\n\n\n# todo,
      it would be nice to add indentation as we recurse\ndef build_model(model: Type[BaseModel]):\n
      \   \"\"\"\n    Recursively prompts user for values for a model\n    \"\"\"\n
      \   rtn = {}\n    for field_name, field_info in model.model_fields.items():\n
      \       description = field_info.description\n        default = field_info.default
      if not isinstance(field_info.default, PydanticUndefinedType) else None\n        prompt_text
      = f\"{field_name}\" if not description else f\"{field_name} ({description})\"\n
      \       # todo, it is lame we need to special case references, we should upgrade
      spec to be typed\n        try:\n            if isinstance(field_info.annotation,
      type) and issubclass(field_info.annotation, Reference):\n                echo(prompt_text
      + \":\")\n                with indented():\n                    reference =
      build_reference(field_info)\n                if reference:\n                    rtn[field_name]
      = reference\n            elif isinstance(field_info.annotation, type) and issubclass(field_info.annotation,
      BaseModel):\n                echo(f\"{prompt_text} [{default or field_info.annotation}]\")\n
      \               if confirm(\"Would you like to modify modify the nested field?\",
      default=False):\n                    with indented():\n                        rtn[field_name]
      = build_model(field_info.annotation)\n\n            else:\n                #
      todo, we should support unions, literals, ect nicely with custom prompts\n                type_
      = field_info.annotation\n                if get_origin(field_info.annotation)
      and get_origin(field_info.annotation) in [dict, list]:\n                    type_
      = get_origin(field_info.annotation)\n                if type_ not in [dict,
      list]:\n                    type_ = str\n\n                user_value = prompt(prompt_text,
      default=default, type=type_)\n                if user_value != default:\n                    rtn[field_name]
      = user_value\n        except Abort:\n            echo(f\"Aborted, accepting
      defaults for {field_name}\")\n\n    return raw_edit_loop(rtn, model)\n\n\ndef
      raw_edit_loop(obj, model: Type[BaseModel]):\n    \"\"\"\n    Validates object
      with model and gives user chance to edit in vim. Rinse and repeat.\n    :raises
      Abort: If user chooses to abort\n    \"\"\"\n\n    with tempfile.NamedTemporaryFile(mode=\"w+\",
      delete=False) as temp:\n        yaml.dump(obj, temp)\n        while True:\n
      \           try:\n                model.model_validate(obj).model_dump(exclude_defaults=True)\n
      \               break\n            except ValueError as e:\n                echo(str(e),
      color=\"red\")\n                action = prompt(\n                    f\"{model.__name__}
      validation failed.\",\n                    color=None,\n                    default=\"Edit\",\n
      \                   choices=[\"Edit\", \"Ignore\", \"Abort\"],\n                )\n
      \               if action == \"Ignore\":\n                    break\n                elif
      action == \"Edit\":\n                    os.system(f\"vim {temp.name}\")\n                    with
      open(temp.name) as file:\n                        obj = yaml.safe_load(file)\n
      \               elif action == \"Abort\":\n                    raise Abort()\n
      \               else:\n                    raise Exception(f\"Unexpected choice
      {action}\")\n    return obj\n\n\nclass Abort(Exception):\n    pass\n\n\ndef
      impl_proc(implementation: str):\n    try:\n        for_name(implementation,
      object)\n        return implementation\n    except ValueError as e:\n        raise
      BadParameter(f\"Unable to import {implementation}: {e}\")\n\n\ndef build_reference(field_info):\n
      \   ref_object = {}\n    default_type = field_info.annotation._default.default\n
      \   default_impl = fqn(default_type) if default_type else None\n    impl_value
      = prompt_with_completer(\"implementation\", fqn_completer, default=default_impl,
      value_proc=impl_proc)\n    if impl_value != default_impl:\n        ref_object[\"implementation\"]
      = impl_value\n    spec_type = Reference.get_spec_type(for_name(impl_value, object))\n
      \   if spec_type:\n        if spec_type and confirm(\"Would you like to modify
      the spec?\", default=False):\n            with indented():\n                spec
      = build_model(spec_type)\n            if spec:\n                ref_object[\"spec\"]
      = spec\n    return raw_edit_loop(ref_object, field_info.annotation) if ref_object
      else None\n\n\ndef main():\n    if \"libedit\" in readline.__doc__:\n        readline.parse_and_bind(\"bind
      ^I rl_complete\")\n    else:\n        readline.set_completer_delims(\" \\t\\n;\")\n
      \       readline.parse_and_bind(\"tab: complete\")\n    typer.run(create_agent)\n\n\nif
      __name__ == \"__main__\":\n    main()\n\n\nclass Indenter:\n    depth = 0\n\n\n@contextmanager\ndef
      indented():\n    Indenter.depth += 1\n    try:\n        yield\n    finally:\n
      \       Indenter.depth -= 1\n\n\ndef pad(text):\n    return \"\".join(\"  \"
      * Indenter.depth + line for line in text.splitlines(True))\n"
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Length:
      - '2957'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:29:21 GMT
      ETag:
      - W/"9d7342fee0610cb91ebc4d96b6113388470c742a6bd04fe797abba0269c8f976"
      Expires:
      - Tue, 20 Feb 2024 21:34:21 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - ae3ead5e77fbf2aa07b737245d54a29051423b43
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - D638:24F038:C6AE1:11A512:65D519B0
      X-Served-By:
      - cache-bfi-kbfi7400043-BFI
      X-Timer:
      - S1708464562.501282,VS0,VE131
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/cpu/__init__.py
  response:
    content: ''
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Length:
      - '0'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:29:21 GMT
      ETag:
      - W/"938f66ede415ccb10764da47cd5f3cfc076c07b8791c708cfa8ec54982197c1f"
      Expires:
      - Tue, 20 Feb 2024 21:34:21 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - ca936047dd287d48ee3ef606328d28bc29973869
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - 98DA:7712:573872:69A93C:65D519B1
      X-Served-By:
      - cache-yvr1532-YVR
      X-Timer:
      - S1708464561.497249,VS0,VE130
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/bin/replay.py
  response:
    content: "import asyncio\nimport os\nimport time\nfrom asyncio import sleep\nfrom
      functools import wraps\nfrom glob import glob\nfrom pathlib import Path\nfrom
      typing import Annotated\n\nimport typer\nfrom typer.main import except_hook,
      _typer_developer_exception_attr_name\nfrom typer.models import DeveloperExceptionConfig\nfrom
      eidolon_ai_sdk.util.replay import replay\n\napp = typer.Typer()\n\n\ndef coro(f):\n
      \   @wraps(f)\n    def wrapper(*args, **kwargs):\n        try:\n            return
      asyncio.run(f(*args, **kwargs))\n        except asyncio.exceptions.CancelledError:\n
      \           typer.echo(\"\\n\" + typer.style(\"Aborted.\", fg=typer.colors.RED))\n\n
      \   return wrapper\n\n\n@app.command()\n@coro\nasync def main(\n    replay_location:
      Path,\n    color: Annotated[str, typer.Option(help=\"The color for the displayed
      text\")] = typer.colors.BRIGHT_GREEN,\n    watch: Annotated[bool, typer.Option(help=\"Watch
      the replay location for new files\")] = False,\n):\n    if not watch:\n        await
      _do_replay(replay_location, color)\n    else:\n        care_time = time.time()\n
      \       while True:\n            replay_task = asyncio.create_task(_do_replay(replay_location,
      color))\n            wait_for_update = asyncio.create_task(_wait_for_modification(care_time,
      replay_location))\n\n            done, pending = await asyncio.wait([replay_task,
      wait_for_update], return_when=asyncio.FIRST_COMPLETED)\n            # Replay
      task pending means we have a new file, so we should stop our outgoing task\n
      \           if replay_task in pending:\n                replay_task.cancel(msg=\"Replay
      instructions updated\")\n\n            # still await the task since we want
      to propagate or handle errors\n            try:\n                await replay_task\n
      \               typer.echo(typer.style(\"Waiting for updates...\", dim=True))\n
      \           except asyncio.exceptions.CancelledError:\n                typer.echo(\"\\n\"
      + typer.style(\"Aborted: file modified\", fg=typer.colors.RED))\n            except
      Exception as exc:\n                # Don't let exceptions break us out of the
      loop. Instead, let typer format and print them nicely\n                setattr(\n
      \                   exc,\n                    _typer_developer_exception_attr_name,\n
      \                   DeveloperExceptionConfig(\n                        pretty_exceptions_enable=app.pretty_exceptions_enable,\n
      \                       pretty_exceptions_show_locals=app.pretty_exceptions_show_locals,\n
      \                       pretty_exceptions_short=app.pretty_exceptions_short,\n
      \                   ),\n                )\n                except_hook(type(exc),
      exc, exc.__traceback__)\n                typer.echo(typer.style(\"Waiting for
      updates...\", dim=True))\n            care_time = await wait_for_update\n\n\nasync
      def _do_replay(replay_location, color):\n    typer.echo(typer.style(f\"Replaying
      from {replay_location}\", dim=True))\n    try:\n        ended_with_newline =
      True\n        async for chunk in replay(replay_location):\n            ended_with_newline
      = chunk.endswith(\"\\n\")\n            typer.echo(typer.style(chunk, fg=color),
      nl=False)\n        if not ended_with_newline:\n            typer.echo(\"\\n\",
      nl=False)\n    except FileNotFoundError as fnf:\n        typer.echo(typer.style(f\"{fnf}\",
      fg=typer.colors.RED))\n        raise typer.Exit(1)\n\n\nasync def _wait_for_modification(care_time,
      path, delay=0.2):\n    while True:\n        modification_times = [os.path.getmtime(f)
      for f in (glob(str(path / \"**\")))]\n        if len(modification_times) > 1:\n
      \           latest_file = max(modification_times)\n        elif len(modification_times)
      == 1:\n            latest_file = modification_times[0]\n        else:\n            latest_file
      = care_time\n        if care_time < latest_file:\n            return latest_file\n
      \       await sleep(delay)\n\n\nif __name__ == \"__main__\":\n    app()\n"
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Length:
      - '1274'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:29:21 GMT
      ETag:
      - W/"1cc4edcf2ca47d9aa8eee647cb2dd4812dac70142d3390bf76c1c49160e85529"
      Expires:
      - Tue, 20 Feb 2024 21:34:21 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - d9336b1889322dc4b8b4897b95b0b0799529261a
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - C634:180A:59BE3D:6C63DA:65D519AE
      X-Served-By:
      - cache-yvr1522-YVR
      X-Timer:
      - S1708464561.499563,VS0,VE131
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/assets/fonts?ref=main
  response:
    content: '[{"name":"Inter-Bold.woff","path":"webui/assets/fonts/Inter-Bold.woff","sha":"1e80f6235899fc654faf3af6894340926a306d62","size":25760,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/assets/fonts/Inter-Bold.woff?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/webui/assets/fonts/Inter-Bold.woff","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/1e80f6235899fc654faf3af6894340926a306d62","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/webui/assets/fonts/Inter-Bold.woff","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/assets/fonts/Inter-Bold.woff?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/1e80f6235899fc654faf3af6894340926a306d62","html":"https://github.com/eidolon-ai/eidolon/blob/main/webui/assets/fonts/Inter-Bold.woff"}},{"name":"Inter-Regular.woff","path":"webui/assets/fonts/Inter-Regular.woff","sha":"4c6b7118eec99ba089704281a3ba39e067977537","size":24576,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/assets/fonts/Inter-Regular.woff?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/webui/assets/fonts/Inter-Regular.woff","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/4c6b7118eec99ba089704281a3ba39e067977537","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/webui/assets/fonts/Inter-Regular.woff","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/assets/fonts/Inter-Regular.woff?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/4c6b7118eec99ba089704281a3ba39e067977537","html":"https://github.com/eidolon-ai/eidolon/blob/main/webui/assets/fonts/Inter-Regular.woff"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:29:21 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E4FB:2535CB:18D93C:224018:65D519B1
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4630'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '370'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/tot_agent?ref=main
  response:
    content: '[{"name":"__init__.py","path":"sdk/eidolon_ai_sdk/agent/tot_agent/__init__.py","sha":"e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/tot_agent/__init__.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/tot_agent/__init__.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/agent/tot_agent/__init__.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/tot_agent/__init__.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/tot_agent/__init__.py"}},{"name":"checker.py","path":"sdk/eidolon_ai_sdk/agent/tot_agent/checker.py","sha":"c61b975d8acd83cf4a37f4402d2a0890764e2c81","size":1825,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/tot_agent/checker.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/tot_agent/checker.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/c61b975d8acd83cf4a37f4402d2a0890764e2c81","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/agent/tot_agent/checker.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/tot_agent/checker.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/c61b975d8acd83cf4a37f4402d2a0890764e2c81","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/tot_agent/checker.py"}},{"name":"controller.py","path":"sdk/eidolon_ai_sdk/agent/tot_agent/controller.py","sha":"0515c626564a2d2fd00cde4af08905633a143fb1","size":2468,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/tot_agent/controller.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/tot_agent/controller.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/0515c626564a2d2fd00cde4af08905633a143fb1","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/agent/tot_agent/controller.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/tot_agent/controller.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/0515c626564a2d2fd00cde4af08905633a143fb1","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/tot_agent/controller.py"}},{"name":"memory.py","path":"sdk/eidolon_ai_sdk/agent/tot_agent/memory.py","sha":"fb354039bb12f8a1d8aeabcbff41ffebb874e875","size":1503,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/tot_agent/memory.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/tot_agent/memory.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/fb354039bb12f8a1d8aeabcbff41ffebb874e875","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/agent/tot_agent/memory.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/tot_agent/memory.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/fb354039bb12f8a1d8aeabcbff41ffebb874e875","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/tot_agent/memory.py"}},{"name":"prompts.py","path":"sdk/eidolon_ai_sdk/agent/tot_agent/prompts.py","sha":"700f3240dc5ecbdc5f2a18d2340bc6a1802bb176","size":1423,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/tot_agent/prompts.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/tot_agent/prompts.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/700f3240dc5ecbdc5f2a18d2340bc6a1802bb176","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/agent/tot_agent/prompts.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/tot_agent/prompts.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/700f3240dc5ecbdc5f2a18d2340bc6a1802bb176","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/tot_agent/prompts.py"}},{"name":"thought.py","path":"sdk/eidolon_ai_sdk/agent/tot_agent/thought.py","sha":"7c0596638886ac003087cec4f68b3d182b4abe7c","size":364,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/tot_agent/thought.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/tot_agent/thought.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/7c0596638886ac003087cec4f68b3d182b4abe7c","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/agent/tot_agent/thought.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/tot_agent/thought.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/7c0596638886ac003087cec4f68b3d182b4abe7c","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/tot_agent/thought.py"}},{"name":"thought_generators.py","path":"sdk/eidolon_ai_sdk/agent/tot_agent/thought_generators.py","sha":"fb98b4044f17c3b29a9195a74cfb20f0957283c5","size":4951,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/tot_agent/thought_generators.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/tot_agent/thought_generators.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/fb98b4044f17c3b29a9195a74cfb20f0957283c5","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/agent/tot_agent/thought_generators.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/tot_agent/thought_generators.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/fb98b4044f17c3b29a9195a74cfb20f0957283c5","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/tot_agent/thought_generators.py"}},{"name":"tot_agent.py","path":"sdk/eidolon_ai_sdk/agent/tot_agent/tot_agent.py","sha":"0ffdb4e861238f019e6616bfe8584e33252386c7","size":7611,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/tot_agent/tot_agent.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/tot_agent/tot_agent.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/0ffdb4e861238f019e6616bfe8584e33252386c7","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/agent/tot_agent/tot_agent.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/tot_agent/tot_agent.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/0ffdb4e861238f019e6616bfe8584e33252386c7","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/tot_agent/tot_agent.py"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:29:21 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E506:25592D:15344D:1E9A7F:65D519B1
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4633'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '367'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/cpu/agent_call_history.py
  response:
    content: "from typing import Optional, List, AsyncIterator\n\nfrom pydantic import
      BaseModel\n\nfrom eidolon_ai_sdk.agent_os import AgentOS\n\n\nclass AgentCallHistory(BaseModel):\n
      \   parent_process_id: str\n    parent_thread_id: Optional[str]\n    machine:
      str\n    agent: str\n    remote_process_id: str\n    state: str\n    available_actions:
      List[str]\n\n    async def upsert(self):\n        query = {\n            \"parent_process_id\":
      self.parent_process_id,\n            \"parent_thread_id\": self.parent_thread_id,\n
      \           \"agent\": self.agent,\n            \"remote_process_id\": self.remote_process_id,\n
      \       }\n        await AgentOS.symbolic_memory.upsert_one(\"agent_logic_unit\",
      self.model_dump(), query)\n\n    @classmethod\n    async def get_agent_state(cls,
      parent_process_id: str, parent_thread_id: str):\n        query = {\n            \"parent_process_id\":
      parent_process_id,\n            \"parent_thread_id\": parent_thread_id,\n        }\n
      \       return [\n            AgentCallHistory.model_validate(o) async for o
      in AgentOS.symbolic_memory.find(\"agent_logic_unit\", query)\n        ]\n\n
      \   @classmethod\n    async def get_child_pids(cls):\n        return {\n            o[\"remote_process_id\"]:
      o[\"parent_process_id\"]\n            async for o in AgentOS.symbolic_memory.find(\n
      \               \"agent_logic_unit\", {}, projection={\"remote_process_id\":
      1, \"parent_process_id\": 1}\n            )\n        }\n\n    @classmethod\n
      \   async def get_children(cls, parent_process_id: str) -> AsyncIterator[str]:\n
      \       async for record in AgentOS.symbolic_memory.find(\n            \"agent_logic_unit\",
      {\"parent_process_id\": parent_process_id}, projection={\"remote_process_id\":
      1}\n        ):\n            yield record[\"remote_process_id\"]\n\n    @classmethod\n
      \   async def delete(cls, query):\n        return await AgentOS.symbolic_memory.delete(\"agent_logic_unit\",
      query)\n"
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Length:
      - '542'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:29:21 GMT
      ETag:
      - W/"4180f93ee8ec26b5b55e99d0e183c501ed698da60e0efc430822cb1c5fb279ce"
      Expires:
      - Tue, 20 Feb 2024 21:34:21 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - 4cd6c895af9cba880e50a6c1f76cdfcefdfcccfa
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - 74FC:6B68:5DC11D:704D6E:65D519AB
      X-Served-By:
      - cache-yvr1531-YVR
      X-Timer:
      - S1708464562.507515,VS0,VE128
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/retriever_agent?ref=main
  response:
    content: '[{"name":"__init__.py","path":"sdk/eidolon_ai_sdk/agent/retriever_agent/__init__.py","sha":"e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/retriever_agent/__init__.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/retriever_agent/__init__.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/agent/retriever_agent/__init__.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/retriever_agent/__init__.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/retriever_agent/__init__.py"}},{"name":"document_reranker.py","path":"sdk/eidolon_ai_sdk/agent/retriever_agent/document_reranker.py","sha":"f326f1abdb6fabb895d4792384cc4a4ff8d12a6b","size":2078,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/retriever_agent/document_reranker.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/retriever_agent/document_reranker.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/f326f1abdb6fabb895d4792384cc4a4ff8d12a6b","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/agent/retriever_agent/document_reranker.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/retriever_agent/document_reranker.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/f326f1abdb6fabb895d4792384cc4a4ff8d12a6b","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/retriever_agent/document_reranker.py"}},{"name":"hyde_question_transformer.py","path":"sdk/eidolon_ai_sdk/agent/retriever_agent/hyde_question_transformer.py","sha":"fe127147c2ed272da99f43c15efe6ae71f7c68d6","size":1444,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/retriever_agent/hyde_question_transformer.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/retriever_agent/hyde_question_transformer.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/fe127147c2ed272da99f43c15efe6ae71f7c68d6","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/agent/retriever_agent/hyde_question_transformer.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/retriever_agent/hyde_question_transformer.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/fe127147c2ed272da99f43c15efe6ae71f7c68d6","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/retriever_agent/hyde_question_transformer.py"}},{"name":"multi_question_transformer.py","path":"sdk/eidolon_ai_sdk/agent/retriever_agent/multi_question_transformer.py","sha":"f191ffb89815dcf5d876f3d3348ed32195b67b97","size":2339,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/retriever_agent/multi_question_transformer.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/retriever_agent/multi_question_transformer.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/f191ffb89815dcf5d876f3d3348ed32195b67b97","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/agent/retriever_agent/multi_question_transformer.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/retriever_agent/multi_question_transformer.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/f191ffb89815dcf5d876f3d3348ed32195b67b97","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/retriever_agent/multi_question_transformer.py"}},{"name":"question_transformer.py","path":"sdk/eidolon_ai_sdk/agent/retriever_agent/question_transformer.py","sha":"d35ba2c2b44ef51e28dad8ec749a9affb18c9501","size":559,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/retriever_agent/question_transformer.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/retriever_agent/question_transformer.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/d35ba2c2b44ef51e28dad8ec749a9affb18c9501","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/agent/retriever_agent/question_transformer.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/retriever_agent/question_transformer.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/d35ba2c2b44ef51e28dad8ec749a9affb18c9501","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/retriever_agent/question_transformer.py"}},{"name":"retriever_agent.py","path":"sdk/eidolon_ai_sdk/agent/retriever_agent/retriever_agent.py","sha":"7f98c9b11358920a3305e40bfffb9e106cf04903","size":5827,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/retriever_agent/retriever_agent.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/retriever_agent/retriever_agent.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/7f98c9b11358920a3305e40bfffb9e106cf04903","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/agent/retriever_agent/retriever_agent.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/retriever_agent/retriever_agent.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/7f98c9b11358920a3305e40bfffb9e106cf04903","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/retriever_agent/retriever_agent.py"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:29:21 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E505:25886F:142851:1D8F3E:65D519B1
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4629'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '371'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/bin/__init__.py
  response:
    content: ''
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:29:21 GMT
      ETag:
      - W/"938f66ede415ccb10764da47cd5f3cfc076c07b8791c708cfa8ec54982197c1f"
      Expires:
      - Tue, 20 Feb 2024 21:34:21 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - 22348226f21b6fa7a7e284c7d2484d3c7b2ab672
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - 5686:256A3D:ADDC9:1017B7:65D519B0
      X-Served-By:
      - cache-bfi-krnt7300115-BFI
      X-Timer:
      - S1708464562.501919,VS0,VE143
      X-XSS-Protection:
      - 1; mode=block
      transfer-encoding:
      - chunked
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/builtins/code_builtins.py
  response:
    content: "from typing import Tuple\n\nfrom eidolon_ai_sdk.agent.doc_manager.loaders.base_loader
      import DocumentLoader\nfrom eidolon_ai_sdk.agent.doc_manager.loaders.filesystem_loader
      import FilesystemLoader\nfrom eidolon_ai_sdk.agent.doc_manager.parsers.auto_parser
      import AutoParser\nfrom eidolon_ai_sdk.agent.doc_manager.parsers.base_parser
      import DocumentParser\nfrom eidolon_ai_sdk.agent.doc_manager.transformer.auto_transformer
      import AutoTransformer\nfrom eidolon_ai_sdk.agent.doc_manager.transformer.document_transformer
      import DocumentTransformer\nfrom eidolon_ai_sdk.agent.generic_agent import GenericAgent\nfrom
      eidolon_ai_sdk.agent.retriever_agent.document_reranker import RAGFusionReranker,
      DocumentReranker\nfrom eidolon_ai_sdk.agent.retriever_agent.multi_question_transformer
      import MultiQuestionTransformer\nfrom eidolon_ai_sdk.agent.retriever_agent.question_transformer
      import QuestionTransformer\nfrom eidolon_ai_sdk.agent.retriever_agent.retriever_agent
      import RetrieverAgent\nfrom eidolon_ai_sdk.agent.tot_agent.checker import ToTChecker\nfrom
      eidolon_ai_sdk.agent.tot_agent.thought_generators import ThoughtGenerationStrategy,
      ProposePromptStrategy\nfrom eidolon_ai_sdk.agent.tot_agent.tot_agent import
      TreeOfThoughtsAgent\nfrom eidolon_ai_sdk.builtins.logic_units.web_search import
      WebSearch\nfrom eidolon_ai_sdk.cpu.agent_cpu import AgentCPU\nfrom eidolon_ai_sdk.cpu.agent_io
      import IOUnit\nfrom eidolon_ai_sdk.cpu.conversation_memory_unit import RawMemoryUnit\nfrom
      eidolon_ai_sdk.cpu.conversational_agent_cpu import ConversationalAgentCPU\nfrom
      eidolon_ai_sdk.cpu.llm.open_ai_llm_unit import OpenAIGPT\nfrom eidolon_ai_sdk.cpu.llm.open_ai_speech
      import OpenAiSpeech\nfrom eidolon_ai_sdk.cpu.llm_unit import LLMUnit\nfrom eidolon_ai_sdk.cpu.memory_unit
      import MemoryUnit\nfrom eidolon_ai_sdk.util.logger import logger\n\ntry:\n    from
      eidolon_ai_sdk.memory.chroma_vector_store import ChromaVectorStore\nexcept ImportError:\n
      \   logger.warning(\"Error, ChromaVectorStore is not available\")\n    ChromaVectorStore
      = None\n\nfrom eidolon_ai_sdk.memory.embeddings import NoopEmbedding, Embedding,
      OpenAIEmbedding\nfrom eidolon_ai_sdk.memory.file_memory import FileMemory\nfrom
      eidolon_ai_sdk.memory.local_file_memory import LocalFileMemory\nfrom eidolon_ai_sdk.memory.local_symbolic_memory
      import LocalSymbolicMemory\nfrom eidolon_ai_sdk.memory.mongo_symbolic_memory
      import MongoSymbolicMemory\nfrom eidolon_ai_sdk.memory.noop_memory import NoopVectorStore\nfrom
      eidolon_ai_sdk.memory.semantic_memory import SymbolicMemory\nfrom eidolon_ai_sdk.memory.similarity_memory
      import SimilarityMemory\nfrom eidolon_ai_sdk.memory.vector_store import VectorStore\nfrom
      eidolon_ai_sdk.security.security_manager import SecurityManager\nfrom eidolon_ai_sdk.system.agent_machine
      import AgentMachine\nfrom eidolon_ai_sdk.system.resources.reference_resource
      import ReferenceResource\nfrom eidolon_ai_sdk.system.resources.resources_base
      import Metadata\nfrom eidolon_ai_sdk.util.class_utils import fqn\nfrom eidolon_ai_sdk.util.replay
      import ReplayConfig\n\n\ndef _to_resource(maybe_tuple: type | Tuple[type, type])
      -> ReferenceResource:\n    if isinstance(maybe_tuple, tuple):\n        return
      ReferenceResource(\n            apiVersion=\"eidolon/v1\",\n            metadata=Metadata(name=maybe_tuple[0].__name__),\n
      \           spec=maybe_tuple[1].__name__,\n        )\n    else:\n        return
      ReferenceResource(\n            apiVersion=\"eidolon/v1\",\n            metadata=Metadata(name=maybe_tuple.__name__),\n
      \           spec=fqn(maybe_tuple),\n        )\n\n\ndef named_builtins():\n    \"\"\"\n
      \   Shorthand for defining builtin resources since most are just a pointer to
      a class.\n\n    This will allow us to capture refactoring location of a class
      automatically.\n\n    Tuples map the name of the first element to the name of
      the second.\n    Single types map the name of first element to it's fqn.\n    \"\"\"\n\n
      \   builtin_list = [\n        AgentMachine,\n        # security manager\n        SecurityManager,\n
      \       # agents\n        GenericAgent,\n        TreeOfThoughtsAgent,\n        RetrieverAgent,\n
      \       # cpu\n        (AgentCPU, ConversationalAgentCPU),\n        ConversationalAgentCPU,\n
      \       # cpu components\n        IOUnit,\n        (LLMUnit, OpenAIGPT),\n        OpenAIGPT,\n
      \       (MemoryUnit, RawMemoryUnit),\n        RawMemoryUnit,\n        WebSearch,\n
      \       # machine components\n        (SymbolicMemory, MongoSymbolicMemory),\n
      \       MongoSymbolicMemory,\n        LocalSymbolicMemory,\n        (FileMemory,
      LocalFileMemory),\n        LocalFileMemory,\n        SimilarityMemory,\n        (Embedding,
      OpenAIEmbedding),\n        NoopEmbedding,\n        OpenAIEmbedding,\n        (VectorStore,
      ChromaVectorStore),\n        NoopVectorStore,\n        ChromaVectorStore,\n
      \       # sub components\n        (DocumentParser, AutoParser),\n        AutoParser,\n
      \       (DocumentTransformer, AutoTransformer),\n        AutoTransformer,\n
      \       (ThoughtGenerationStrategy, ProposePromptStrategy),\n        ProposePromptStrategy,\n
      \       (QuestionTransformer, MultiQuestionTransformer),\n        MultiQuestionTransformer,\n
      \       (DocumentReranker, RAGFusionReranker),\n        RAGFusionReranker,\n
      \       (DocumentLoader, FilesystemLoader),\n        FilesystemLoader,\n        ToTChecker,\n
      \       OpenAiSpeech,\n        # config objects\n        ReplayConfig,\n    ]\n
      \   return [_to_resource(maybe_tuple) for maybe_tuple in builtin_list if maybe_tuple]\n"
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Length:
      - '1376'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:29:21 GMT
      ETag:
      - W/"609dd5862755a3835bd07b2d2294dd6d55a69f0b8c6ec6323eeda2a398c807e0"
      Expires:
      - Tue, 20 Feb 2024 21:34:21 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - fb91534865c3b20269661a9f1e9c0dada4af8fd8
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - 7504:66FB:5B391C:6DA757:65D519B0
      X-Served-By:
      - cache-yvr1527-YVR
      X-Timer:
      - S1708464561.496859,VS0,VE143
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/cpu/agent_cpu.py
  response:
    content: "from __future__ import annotations\n\nimport json\nfrom abc import abstractmethod,
      ABC\nfrom pydantic import BaseModel, Field, TypeAdapter\nfrom typing import
      Any, List, Dict, Literal, Union, TypeVar, Type, cast, AsyncIterator\n\nfrom
      eidolon_ai_sdk.cpu.agent_io import CPUMessageTypes\nfrom eidolon_ai_sdk.cpu.call_context
      import CallContext\nfrom eidolon_ai_sdk.io.events import StreamEvent, convert_output_object,
      ObjectOutputEvent, ErrorEvent, StringOutputEvent\nfrom eidolon_ai_sdk.system.reference_model
      import Specable\n\n\nclass AgentCPUSpec(BaseModel):\n    max_num_function_calls:
      int = Field(\n        10,\n        description=\"The maximum number of function
      calls to make in a single request.\",\n    )\n\n\nclass AgentCPU(Specable[AgentCPUSpec],
      ABC):\n    @abstractmethod\n    async def set_boot_messages(self, call_context:
      CallContext, boot_messages: List[CPUMessageTypes]):\n        pass\n\n    @abstractmethod\n
      \   async def schedule_request(\n        self,\n        call_context: CallContext,\n
      \       prompts: List[CPUMessageTypes],\n        output_format: Union[Literal[\"str\"],
      Dict[str, Any]],\n    ) -> AsyncIterator[StreamEvent]:\n        yield None\n\n
      \   def _to_json(self, obj):\n        if obj is None:\n            return \"\"\n
      \       elif isinstance(obj, BaseModel):\n            return obj.model_dump_json()\n
      \       elif isinstance(obj, list):\n            return \"[\" + (\",\".join([self._to_json(o)
      for o in obj])) + \"]\"\n        else:\n            return json.dumps(obj)\n\n
      \   async def main_thread(self, process_id: str) -> Thread:\n        return
      Thread(CallContext(process_id=process_id), self)\n\n    async def new_thread(self,
      process_id) -> Thread:\n        return Thread(CallContext(process_id=process_id).derive_call_context(),
      self)\n\n    @abstractmethod\n    async def clone_thread(self, call_context:
      CallContext) -> Thread:\n        pass\n\n\nT = TypeVar(\"T\")\n\n\nclass Thread:\n
      \   _call_context: CallContext\n    _cpu: AgentCPU\n\n    def __init__(self,
      call_context: CallContext, cpu: AgentCPU):\n        self._call_context = call_context\n
      \       self._cpu = cpu\n\n    async def set_boot_messages(\n        self,\n
      \       prompts: List[CPUMessageTypes],\n    ):\n        return await self._cpu.set_boot_messages(self._call_context,
      list(prompts))\n\n    async def run_request(\n        self,\n        prompts:
      List[CPUMessageTypes],\n        output_format: Union[Literal[\"str\"], Dict[str,
      Any], Type[T]] = \"str\",\n    ) -> T:\n        stream = self.stream_request(prompts,
      output_format)\n        result = None\n        error = None\n\n        is_string_call
      = not isinstance(output_format, type) and (\n            output_format == \"str\"
      or output_format[\"type\"] == \"string\"\n        )\n        string_output =
      \"\"\n        async for event in stream:\n            if event.is_root_and_type(ObjectOutputEvent):\n
      \               result = event.content\n            elif event.is_root_and_type(StringOutputEvent):\n
      \               string_output += event.content\n            elif event.is_root_and_type(ErrorEvent):\n
      \               error = event.reason\n\n        if is_string_call:\n            result
      = string_output\n\n        if error is not None:\n            if isinstance(error,
      Exception):\n                raise error\n            else:\n                raise
      Exception(error)\n\n        return result\n\n    def stream_request(\n        self,
      prompts: List[CPUMessageTypes], output_format: Union[Literal[\"str\"], Dict[str,
      Any], Type[T]] = \"str\"\n    ) -> AsyncIterator[StreamEvent]:\n        if isinstance(output_format,
      type):\n            model = TypeAdapter(output_format)\n            schema =
      model.json_schema()\n            s = convert_output_object(\n                self._cpu.schedule_request(self._call_context,
      prompts, schema), cast(Type[T], output_format)\n            )\n        else:\n
      \           s = self._cpu.schedule_request(self._call_context, prompts, output_format)\n\n
      \       return s\n\n    def call_context(self) -> CallContext:\n        return
      self._call_context\n\n    async def clone(self) -> Thread:\n        return await
      self._cpu.clone_thread(self._call_context)\n\n\nclass CPUException(Exception):\n
      \   def __init__(self, description):\n        super().__init__(\"CPU Error:
      \" + description)\n"
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Length:
      - '1223'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:29:21 GMT
      ETag:
      - W/"af115213e17992db54e41e55bfc0b42c3ac96bda75a46a0e817397b7b126488b"
      Expires:
      - Tue, 20 Feb 2024 21:34:21 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - b2552e38685ac878837b3044b4a23bd0f432e190
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - EFD0:2590F7:BBC2D:10F61D:65D519B1
      X-Served-By:
      - cache-bfi-kbfi7400076-BFI
      X-Timer:
      - S1708464562.529426,VS0,VE119
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/content/docs?ref=main
  response:
    content: '[{"name":"architecture","path":"docs/src/content/docs/architecture","sha":"29b1c5e110c83dbce3edac0d5462b61b1130dd91","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/content/docs/architecture?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/docs/src/content/docs/architecture","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/29b1c5e110c83dbce3edac0d5462b61b1130dd91","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/content/docs/architecture?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/29b1c5e110c83dbce3edac0d5462b61b1130dd91","html":"https://github.com/eidolon-ai/eidolon/tree/main/docs/src/content/docs/architecture"}},{"name":"getting_started","path":"docs/src/content/docs/getting_started","sha":"9f055cc7ed5f27265c1d413dcf70d1431e073d01","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/content/docs/getting_started?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/docs/src/content/docs/getting_started","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/9f055cc7ed5f27265c1d413dcf70d1431e073d01","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/content/docs/getting_started?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/9f055cc7ed5f27265c1d413dcf70d1431e073d01","html":"https://github.com/eidolon-ai/eidolon/tree/main/docs/src/content/docs/getting_started"}},{"name":"guides","path":"docs/src/content/docs/guides","sha":"b88fee73272529cfcbd0515cb5ef23cfa8ac1927","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/content/docs/guides?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/docs/src/content/docs/guides","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/b88fee73272529cfcbd0515cb5ef23cfa8ac1927","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/content/docs/guides?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/b88fee73272529cfcbd0515cb5ef23cfa8ac1927","html":"https://github.com/eidolon-ai/eidolon/tree/main/docs/src/content/docs/guides"}},{"name":"index.mdx","path":"docs/src/content/docs/index.mdx","sha":"6d73608087b761ea32a2e72e235a01a20100b3e9","size":1137,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/content/docs/index.mdx?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/docs/src/content/docs/index.mdx","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/6d73608087b761ea32a2e72e235a01a20100b3e9","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/docs/src/content/docs/index.mdx","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/content/docs/index.mdx?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/6d73608087b761ea32a2e72e235a01a20100b3e9","html":"https://github.com/eidolon-ai/eidolon/blob/main/docs/src/content/docs/index.mdx"}},{"name":"reference","path":"docs/src/content/docs/reference","sha":"dc8d9ecf743d3f792c30202378d0bb33cdf79277","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/content/docs/reference?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/docs/src/content/docs/reference","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/dc8d9ecf743d3f792c30202378d0bb33cdf79277","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/content/docs/reference?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/dc8d9ecf743d3f792c30202378d0bb33cdf79277","html":"https://github.com/eidolon-ai/eidolon/tree/main/docs/src/content/docs/reference"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:29:21 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E511:2556CA:14E1C5:1E488B:65D519B1
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4628'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '372'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/bin/agent_http_server.py
  response:
    content: "import argparse\nimport logging.config\nimport pathlib\nfrom collections
      import deque\nfrom contextlib import asynccontextmanager\nfrom importlib.metadata
      import version, PackageNotFoundError\n\nimport dotenv\nimport uvicorn\nimport
      yaml\nfrom fastapi import FastAPI\nfrom fastapi.openapi.utils import get_openapi\nfrom
      pydantic import TypeAdapter\nfrom starlette.middleware.base import BaseHTTPMiddleware,
      RequestResponseEndpoint\nfrom starlette.middleware.cors import CORSMiddleware\nfrom
      starlette.requests import Request\nfrom starlette.responses import Response,
      JSONResponse\n\nfrom eidolon_ai_sdk.agent_os import AgentOS\nfrom eidolon_ai_sdk.cpu.agent_call_history
      import AgentCallHistory\nfrom eidolon_ai_sdk.io.events import StreamEvent\nfrom
      eidolon_ai_sdk.system.processes import ProcessDoc\nfrom eidolon_ai_sdk.system.request_context
      import ContextMiddleware\nfrom eidolon_ai_sdk.system.resources.machine_resource
      import MachineResource\nfrom eidolon_ai_sdk.system.resources.reference_resource
      import ReferenceResource\nfrom eidolon_ai_sdk.system.resources.resources_base
      import load_resources, Resource\nfrom eidolon_ai_sdk.util.logger import logger\nfrom
      eidolon_ai_sdk.util.replay import ReplayConfig\n\ndotenv.load_dotenv()\n\ntry:\n
      \   EIDOLON_SDK_VERSION = version(\"eidolon-ai-sdk\")\nexcept PackageNotFoundError:\n
      \   EIDOLON_SDK_VERSION = \"unknown\"\n\n\ndef parse_args():\n    # Set up the
      argument parser\n    parser = argparse.ArgumentParser(description=\"Start a
      FastAPI server.\")\n    parser.add_argument(\n        \"-p\",\n        \"--port\",\n
      \       type=int,\n        default=8080,\n        help=\"Port to run the FastAPI
      server on. Defaults to 8080.\",\n    )\n    parser.add_argument(\n        \"-r\",\n
      \       \"--reload\",\n        help=\"Reload the server when the code changes.
      Defaults to False.\",\n        action=\"store_true\",\n    )\n    parser.add_argument(\"--debug\",
      action=\"store_true\", help=\"Turn on debug logging\")\n    parser.add_argument(\n
      \       \"yaml_path\",\n        type=str,\n        help=\"Path to a directory
      containing YAML files describing the agent machine to start.\",\n    )\n    parser.add_argument(\n
      \       \"-m\",\n        \"--machine\",\n        type=str,\n        help=\"The
      name of the machine to start.\",\n        default=\"DEFAULT\",\n    )\n    parser.add_argument(\n
      \       \"--record\",\n        help=\"Enable replay points and save them to
      the provide directory\",\n        action=\"store_true\",\n        default=False,\n
      \   )\n\n    # Parse command line arguments\n    return parser.parse_args()\n\n\n@asynccontextmanager\nasync
      def start_os(app: FastAPI, resource_generator, machine_name, log_level=logging.INFO,
      replay_override=...):\n    def custom_openapi():\n        if app.openapi_schema:\n
      \           return app.openapi_schema\n        openapi_schema = get_openapi(\n
      \           title=\"Custom API\",\n            version=EIDOLON_SDK_VERSION,\n
      \           routes=app.routes,\n        )\n\n        # EventTypes\n        queue
      = deque(\n            [(\"EventTypes\", TypeAdapter(StreamEvent).json_schema(ref_template=\"#/components/schemas/{model}\"))]\n
      \       )\n        depth = 0\n        while queue:\n            if depth > 100:\n
      \               raise ValueError(\"Too many $defs\")\n            name, schema
      = queue.popleft()\n            if \"$defs\" in schema:\n                for
      d_name, d in schema[\"$defs\"].items():\n                    queue.append((d_name,
      d))\n                del schema[\"$defs\"]\n            openapi_schema[\"components\"][\"schemas\"][name]
      = schema\n            depth += 1\n\n        app.openapi_schema = openapi_schema\n
      \       return app.openapi_schema\n\n    app.openapi = custom_openapi\n\n    conf_
      = pathlib.Path(__file__).parent.parent.parent / \"logging.conf\"\n    logging.config.fileConfig(conf_)\n
      \   logger.setLevel(log_level)\n\n    # add system level endpoints\n    @app.get(path=\"/system/health\",
      tags=[\"system\"], description=\"Health check\")\n    async def health():\n
      \       return {\"status\": \"ok\"}\n\n    # noinspection PyShadowingNames\n
      \   @app.get(\"/system/version\", tags=[\"system\"], description=\"Get the version
      of the EIDOS SDK\")\n    async def version():\n        return {\"version\":
      EIDOLON_SDK_VERSION}\n\n    # todo, this needs pagination\n    @app.get(\"/system/processes\",
      tags=[\"system\"], description=\"Get all processes\")\n    async def processes():\n
      \       child_pids = await AgentCallHistory.get_child_pids()\n        processes
      = []\n        async for process in ProcessDoc.find(query={}, projection={\"data\":
      0}):\n            process = process.model_dump()\n            process[\"process_id\"]
      = process[\"_id\"]\n            del process[\"_id\"]\n            if process[\"process_id\"]
      in child_pids:\n                process[\"parent_process_id\"] = child_pids[process[\"process_id\"]]\n
      \           processes.append(process)\n\n        return JSONResponse(content=processes,
      status_code=200)\n\n    @app.get(\"/system/processes/{process_id}\", tags=[\"system\"],
      description=\"Get all processes\")\n    async def process(process_id: str):\n
      \       process_obj = await ProcessDoc.find_one(query={\"_id\": process_id})\n
      \       if not process_obj:\n            return JSONResponse(content={\"error\":
      f\"Process {process_id} not found\"}, status_code=404)\n        process_obj
      = process_obj.model_dump()\n        process_obj[\"process_id\"] = process_obj[\"_id\"]\n
      \       if process_obj.get(\"data\"):\n            del process_obj[\"data\"]\n
      \       del process_obj[\"_id\"]\n\n        return JSONResponse(content=process_obj,
      status_code=200)\n\n    try:\n        for resource_or_tuple in resource_generator:\n
      \           if isinstance(resource_or_tuple, Resource):\n                resource,
      source = resource_or_tuple, None\n            else:\n                resource,
      source = resource_or_tuple\n            AgentOS.register_resource(resource=resource,
      source=source)\n\n        logger.info(f\"Building machine '{machine_name}'\")\n
      \       machine_spec = AgentOS.get_resource(MachineResource, machine_name).spec\n
      \       logger.debug(yaml.safe_dump(machine_spec.model_dump()))\n        machine
      = machine_spec.instantiate()\n        AgentOS.load_machine(machine)\n        await
      machine.start(app)\n\n        if replay_override is not ...:\n            spec
      = AgentOS.get_resource_raw(ReferenceResource, \"ReplayConfig\").spec\n            spec[\"save_loc\"]
      = replay_override\n        if AgentOS.get_instance(ReplayConfig).save_loc:\n
      \           logger.warning(\"Replay points are enabled, this feature is intended
      for test environments only.\")\n        logger.info(\"Server Started\")\n        yield\n
      \       await machine.stop()\n    except BaseException:\n        logger.exception(\"Failed
      to start AgentOS\")\n        raise\n    finally:\n        AgentOS.reset()\n\n\nclass
      LoggingMiddleware(BaseHTTPMiddleware):\n    async def dispatch(self, request:
      Request, call_next):\n        logger.info(f\"Request: {request.method} {request.url}\")\n
      \       try:\n            response = await call_next(request)\n        except
      Exception as e:\n            logger.exception(\"Unhandled exception\")\n            raise
      e\n        logger.info(f\"Response: {response.status_code}\")\n        return
      response\n\n\nclass SecurityMiddleware(BaseHTTPMiddleware):\n    async def dispatch(self,
      request: Request, call_next: RequestResponseEndpoint) -> Response:\n        resp
      = await AgentOS.security_manager.authorization_processor.dispatch(request)\n
      \       if not resp:\n            return await call_next(request)\n        else:\n
      \           return resp\n\n\ndef main():\n    args = parse_args()\n    log_level_str
      = \"debug\" if args.debug else \"info\"\n    log_level = logging.DEBUG if args.debug
      else logging.INFO\n\n    _app = start_app(\n        lambda app: start_os(\n
      \           app,\n            load_resources(args.yaml_path),\n            args.machine,\n
      \           log_level,\n            replay_override=\"recordings\" if args.record
      else ...,\n        )\n    )\n\n    # Run the server\n    uvicorn.run(\n        _app,\n
      \       host=\"0.0.0.0\",\n        port=args.port,\n        log_level=log_level_str,\n
      \       reload=args.reload,\n    )\n\n\n# noinspection PyTypeChecker\ndef start_app(lifespan):\n
      \   _app = FastAPI(lifespan=lifespan)\n    _app.add_middleware(LoggingMiddleware)\n
      \   _app.add_middleware(SecurityMiddleware)\n    _app.add_middleware(ContextMiddleware)\n
      \   _app.add_middleware(\n        CORSMiddleware,\n        allow_origins=[\"*\"],\n
      \       allow_credentials=True,\n        allow_methods=[\"*\"],\n        allow_headers=[\"*\"],\n
      \   )\n    return _app\n\n\nif __name__ == \"__main__\":\n    main()\n"
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Length:
      - '2683'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:29:21 GMT
      ETag:
      - W/"0d39f91c63241515f00adc3ab8c9e43acb1e40d6d8116a7fec9850cf4c59c994"
      Expires:
      - Tue, 20 Feb 2024 21:34:21 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - ad643b74a6514ed0587fec73d29928be7c4339e6
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - 6506:6B68:5DC11D:704D6D:65D519AD
      X-Served-By:
      - cache-yvr1521-YVR
      X-Timer:
      - S1708464561.497546,VS0,VE160
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/cpu/agents_logic_unit.py
  response:
    content: "from pydantic import BaseModel\nfrom typing import List, Any, Dict,
      AsyncIterator\n\nfrom eidolon_ai_sdk.agent.client import Machine, Agent, AgentResponseIterator\nfrom
      eidolon_ai_sdk.cpu.agent_call_history import AgentCallHistory\nfrom eidolon_ai_sdk.cpu.call_context
      import CallContext\nfrom eidolon_ai_sdk.cpu.logic_unit import LogicUnit\nfrom
      eidolon_ai_sdk.io.events import StreamEvent\nfrom eidolon_ai_sdk.system.fn_handler
      import FnHandler\nfrom eidolon_ai_sdk.system.reference_model import Specable\nfrom
      eidolon_ai_sdk.util.logger import logger\nfrom eidolon_ai_sdk.util.schema_to_model
      import schema_to_model\n\n\nclass AgentsLogicUnitSpec(BaseModel):\n    tool_prefix:
      str = \"convo\"\n    agents: List[str]\n\n\nclass AgentsLogicUnit(Specable[AgentsLogicUnitSpec],
      LogicUnit):\n    _machine_schemas: Dict[str, dict]\n\n    def __init__(self,
      **kwargs):\n        super().__init__(**kwargs)\n        self._machine_schemas
      = {}\n\n    async def build_tools(self, call_context: CallContext) -> List[FnHandler]:\n
      \       tools = await self.build_program_tools(call_context)\n        call_history
      = await AgentCallHistory.get_agent_state(call_context.process_id, call_context.thread_id)\n
      \       for call in call_history:\n            for action in call.available_actions:\n
      \               context_ = await self.build_action_tool(\n                    call.machine,
      call.agent, action, call.remote_process_id, call_context\n                )\n
      \               if context_:\n                    tools.append(context_)\n\n
      \       return tools\n\n    async def clone_thread(self, old_context: CallContext,
      new_context: CallContext):\n        call_history = await AgentCallHistory.get_agent_state(old_context.process_id,
      old_context.thread_id)\n        for call in call_history:\n            await
      AgentCallHistory(\n                parent_process_id=new_context.process_id,\n
      \               parent_thread_id=new_context.thread_id,\n                machine=call.machine,\n
      \               agent=call.agent,\n                remote_process_id=call.remote_process_id,\n
      \               state=call.state,\n                available_actions=call.available_actions,\n
      \           ).upsert()\n\n    async def _get_schema(self, machine: str) -> dict:\n
      \       if machine not in self._machine_schemas:\n            self._machine_schemas[machine]
      = await Machine(machine=machine).get_schema()\n        return self._machine_schemas[machine]\n\n
      \   async def build_action_tool(\n        self, machine: str, agent: str, action:
      str, remote_process_id: str, call_context: CallContext\n    ):\n        agent_client
      = Agent.get(agent)\n        path = f\"/agents/{agent}/processes/{{process_id}}/actions/{action}\"\n
      \       machine_schema = await self._get_schema(machine)\n        endpoint_schema
      = machine_schema[\"paths\"][path][\"post\"]\n        try:\n            name
      = self._name(agent, action=action)\n            tool = self._build_tool_def(\n
      \               agent,\n                action,\n                name,\n                endpoint_schema,\n
      \               self._process_tool(agent_client, action, remote_process_id,
      call_context),\n            )\n            return tool\n        except ValueError:\n
      \           logger.warning(f\"unable to build tool {path}\", exc_info=True)\n\n
      \   async def build_program_tools(self, call_context: CallContext):\n        tools
      = []\n        for agent in self.spec.agents:\n            agent_client = Agent.get(agent)\n
      \           agent = agent_client.agent\n\n            prefix = f\"/agents/{agent}/programs/\"\n
      \           machine_schema = await self._get_schema(agent_client.machine)\n
      \           for path in filter(lambda p: p.startswith(prefix), machine_schema[\"paths\"].keys()):\n
      \               try:\n                    program = path.removeprefix(prefix)\n
      \                   name = self._name(agent, action=program)\n                    tool
      = self._build_tool_def(\n                        agent,\n                        program,\n
      \                       name,\n                        machine_schema[\"paths\"][path][\"post\"],\n
      \                       self._program_tool(agent_client, program, call_context),\n
      \                   )\n                    tools.append(tool)\n                except
      ValueError:\n                    logger.warning(f\"unable to build tool {path}\",
      exc_info=True)\n        return tools\n\n    def _build_tool_def(self, agent,
      operation, name, endpoint_schema, tool_call):\n        description = self._description(endpoint_schema,
      name)\n        model = self._body_model(endpoint_schema, name)\n        return
      FnHandler(\n            name=name,\n            description=lambda a, b: description,\n
      \           input_model_fn=lambda a, b: model,\n            output_model_fn=lambda
      a, b: Any,\n            fn=tool_call,\n            extra={\n                \"title\":
      agent,\n                \"sub_title\": operation,\n                \"agent_call\":
      True,\n            },\n        )\n\n    @staticmethod\n    def _body_model(endpoint_schema,
      name):\n        body = endpoint_schema.get(\"requestBody\")\n        if body
      and \"application/json\" not in body[\"content\"]:\n            raise ValueError(f\"Agent
      action at {name} does not support application/json\")\n        json_schema =
      body[\"content\"][\"application/json\"][\"schema\"] if body else dict(type=\"object\",
      properties={})\n        return schema_to_model(dict(type=\"object\", properties=dict(body=json_schema)),
      \"Input\")\n\n    @staticmethod\n    def _description(endpoint_schema, name):\n
      \       description = endpoint_schema.get(\"description\", \"\")\n        if
      not description:\n            logger.warning(f\"Agent program at {name} does
      not have a description. LLM may not use it properly\")\n        return description\n\n
      \   # needs to be under 64 characters\n    def _name(self, agent, action=\"\",
      process_id=\"\"):\n        agent = agent[:15]\n        process_id = process_id[:25]\n
      \       process_id = \"_\" + process_id if process_id else \"\"\n        action
      = action[:15]\n        action = \"_\" + action if action else \"\"\n        return
      self.spec.tool_prefix + \"_\" + agent + process_id + action\n\n    # todo, this
      needs to create history record before iterating\n    def _program_tool(self,
      agent: Agent, program: str, call_context: CallContext):\n        def fn(_self,
      body):\n            return RecordAgentResponseIterator(\n                agent.stream_program(program,
      body), call_context.process_id, call_context.thread_id\n            )\n\n        return
      fn\n\n    # todo, this needs to create history record before iterating\n    def
      _process_tool(self, agent: Agent, action: str, process_id: str, call_context:
      CallContext):\n        def fn(_self, body):\n            return RecordAgentResponseIterator(\n
      \               agent.stream_action(action, process_id, body), call_context.process_id,
      call_context.thread_id\n            )\n\n        return fn\n\n\n# todo, it would
      be nice to work this into the client automatically\nclass RecordAgentResponseIterator(AgentResponseIterator):\n
      \   parent_process_id: str\n    parent_thread_id: str\n\n    def __init__(self,
      data: AsyncIterator[StreamEvent], parent_process_id: str, parent_thread_id:
      str):\n        super().__init__(data)\n        self.parent_process_id = parent_process_id\n
      \       self.parent_thread_id = parent_thread_id\n\n    async def iteration_complete(self):\n
      \       call_data = AgentCallHistory(\n            parent_process_id=self.parent_process_id,\n
      \           parent_thread_id=self.parent_thread_id,\n            machine=self.machine,\n
      \           agent=self.agent,\n            remote_process_id=self.process_id,\n
      \           state=self.state,\n            available_actions=self.available_actions,\n
      \       )\n        await call_data.upsert()\n\n        return await super().iteration_complete()\n"
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Length:
      - '1960'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:29:21 GMT
      ETag:
      - W/"c1afa6e7b068919840215aa01a9454c025f24183ac91dae78f166ee2d0e66ecc"
      Expires:
      - Tue, 20 Feb 2024 21:34:21 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - b247482df367db5c21705e11038ce59a7e80e257
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - 55CC:570F:60C3E7:734F45:65D519AB
      X-Served-By:
      - cache-yvr1523-YVR
      X-Timer:
      - S1708464562.563875,VS0,VE135
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/cpu/agent_io.py
  response:
    content: "from __future__ import annotations\n\nimport asyncio\nimport uuid\nfrom
      abc import abstractmethod, ABC\nfrom io import IOBase\nfrom typing import List,
      Any, Dict, Literal\n\nfrom pydantic import BaseModel\n\nfrom eidolon_ai_sdk.agent_os
      import AgentOS\nfrom eidolon_ai_sdk.cpu.call_context import CallContext\nfrom
      eidolon_ai_sdk.cpu.llm_message import (\n    UserMessageText,\n    SystemMessage,\n
      \   UserMessageImageURL,\n    UserMessage,\n    LLMMessage,\n)\nfrom eidolon_ai_sdk.cpu.processing_unit
      import ProcessingUnit\nfrom eidolon_ai_sdk.memory.file_memory import FileMemory\n\n\nclass
      ResponseHandler(ABC):\n    @abstractmethod\n    async def handle(self, process_id:
      str, response: Dict[str, Any]):\n        pass\n\n\nclass CPUMessage(BaseModel):\n
      \   type: str\n    prompt: str\n    is_boot_prompt: bool = False\n\n\nclass
      UserTextCPUMessage(CPUMessage):\n    type: Literal[\"user\"] = \"user\"\n\n\nclass
      SystemCPUMessage(CPUMessage):\n    type: Literal[\"system\"] = \"system\"\n
      \   is_boot_prompt: bool = True\n\n\nclass ImageCPUMessage(CPUMessage):\n    type:
      Literal[\"image_url\"] = \"image\"\n    image: IOBase\n\n    class Config:\n
      \       arbitrary_types_allowed = True\n\n\nCPUMessageTypes = UserTextCPUMessage
      | SystemCPUMessage | ImageCPUMessage\n\n\nclass IOUnit(ProcessingUnit):\n    async
      def process_request(self, call_context: CallContext, prompts: List[CPUMessageTypes])
      -> List[LLMMessage]:\n        # convert the prompts to a list of strings\n        conv_messages
      = []\n        user_message_parts = []\n        for prompt in prompts:\n            if
      prompt.type == \"user\":\n                user_message_parts.append(UserMessageText(text=prompt.prompt))\n
      \           elif prompt.type == \"system\":\n                conv_messages.append(SystemMessage(content=prompt.prompt))\n
      \           elif prompt.type == \"image\":\n                file_memory = AgentOS.file_memory\n
      \               image_file: IOBase = prompt.image\n                # read the
      prompt.image file into memory\n                image_data = image_file.read()\n
      \               base_loc = f\"uploaded_images/{call_context.process_id}/{call_context.thread_id
      or 'main'}\"\n                tmp_path = f\"{base_loc}/{uuid.uuid4()}\"\n                await
      file_memory.mkdir(base_loc, exist_ok=True)\n                await file_memory.write_file(tmp_path,
      image_data)\n                user_message_parts.append(UserMessageImageURL(image_url=tmp_path))\n
      \           else:\n                raise ValueError(f\"Unknown prompt type {prompt.type}\")\n\n
      \       if len(user_message_parts) > 0:\n            conv_messages.append(UserMessage(content=user_message_parts))\n\n
      \       return conv_messages\n\n    async def process_response(self, call_context:
      CallContext, response: Any):\n        return response\n\n    @classmethod\n
      \   async def delete_process(cls, process_id: str):\n        memory: FileMemory
      = AgentOS.file_memory\n        found = await memory.glob(f\"uploaded_images/{process_id}/**/*\")\n
      \       await asyncio.gather(*[memory.delete_file(file) for file in found])\n"
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Length:
      - '1014'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:29:21 GMT
      ETag:
      - W/"97228c6761da4d4b54f3906cc070a10133a97de7dc65fd4110f25ef4e3b70a7a"
      Expires:
      - Tue, 20 Feb 2024 21:34:21 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - b42acb64b61a917896d32fb31d682e84ef9fb76d
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - BD60:3A9B2B:5CDDD:74B84:65D519B1
      X-Served-By:
      - cache-yvr1522-YVR
      X-Timer:
      - S1708464562.552352,VS0,VE144
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/cpu/call_context.py
  response:
    content: "from typing import Optional\n\nfrom bson import ObjectId\nfrom pydantic
      import BaseModel\n\n\nclass CallContext(BaseModel):\n    process_id: str\n    thread_id:
      Optional[str] = None\n\n    def derive_call_context(self):\n        return CallContext(process_id=self.process_id,
      thread_id=str(ObjectId()))\n"
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Length:
      - '193'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:29:21 GMT
      ETag:
      - W/"4c080bab5d844cacaaa25b7e23d223d4b31422b573ba273935c3a86cb6a02c28"
      Expires:
      - Tue, 20 Feb 2024 21:34:21 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - 06ab40202a7e9e2d07bcebf83ba5a7f872ea54a1
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - E1A6:256179:B31AE:106B96:65D519B1
      X-Served-By:
      - cache-bfi-kbfi7400031-BFI
      X-Timer:
      - S1708464562.570346,VS0,VE161
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/cpu/conversation_memory_unit.py
  response:
    content: "import logging\nfrom typing import List\n\nfrom eidolon_ai_sdk.agent_os
      import AgentOS\nfrom eidolon_ai_sdk.cpu.call_context import CallContext\nfrom
      eidolon_ai_sdk.cpu.llm_message import LLMMessage\nfrom eidolon_ai_sdk.cpu.memory_unit
      import MemoryUnit, MemoryUnitConfig\nfrom eidolon_ai_sdk.system.reference_model
      import Specable\nfrom eidolon_ai_sdk.util.logger import logger\n\n\nclass RawMemoryUnit(MemoryUnit,
      Specable[MemoryUnitConfig]):\n    async def writeMessages(self, call_context:
      CallContext, messages: List[LLMMessage]):\n        conversationItems = [\n            {\n
      \               \"process_id\": call_context.process_id,\n                \"thread_id\":
      call_context.thread_id,\n                \"message\": message.model_dump(),\n
      \               \"is_boot_message\": False,\n            }\n            for
      message in messages\n        ]\n\n        logging.debug(str(messages))\n        logging.debug(conversationItems)\n\n
      \       await AgentOS.symbolic_memory.insert(\"conversation_memory\", conversationItems)\n\n
      \   async def writeBootMessages(self, call_context: CallContext, messages: List[LLMMessage]):\n
      \       conversationItems = [\n            {\n                \"process_id\":
      call_context.process_id,\n                \"thread_id\": call_context.thread_id,\n
      \               \"message\": message.model_dump(),\n                \"is_boot_message\":
      True,\n            }\n            for message in messages\n        ]\n\n        logging.debug(str(messages))\n
      \       logging.debug(conversationItems)\n\n        await AgentOS.symbolic_memory.insert(\"conversation_memory\",
      conversationItems)\n\n    async def getConversationHistory(self, call_context:
      CallContext) -> List[LLMMessage]:\n        existingMessages = []\n        async
      for message in AgentOS.symbolic_memory.find(\n            \"conversation_memory\",\n
      \           {\n                \"process_id\": call_context.process_id,\n                \"thread_id\":
      call_context.thread_id,\n                \"is_boot_message\": True,\n            },\n
      \           {\"is_boot_message\": 0},\n        ):\n            existingMessages.append(LLMMessage.from_dict(message[\"message\"]))\n
      \       async for message in AgentOS.symbolic_memory.find(\n            \"conversation_memory\",\n
      \           {\n                \"process_id\": call_context.process_id,\n                \"thread_id\":
      call_context.thread_id,\n                \"is_boot_message\": False,\n            },\n
      \           {\"is_boot_message\": 0},\n        ):\n            existingMessages.append(LLMMessage.from_dict(message[\"message\"]))\n\n
      \       logging.debug(\"existingMessages = \" + str(existingMessages))\n        return
      existingMessages\n\n    @classmethod\n    async def delete_process(cls, process_id:
      str):\n        await AgentOS.symbolic_memory.delete(\"conversation_memory\",
      {\"process_id\": process_id})\n        logger.info(f\"deleted conversational_memory
      relating to process {process_id}\")\n"
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Length:
      - '622'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:29:21 GMT
      ETag:
      - W/"15be90c270fb82fe00a76c68f030a37aec8a712a360f5a38c1dbd4b97039ec09"
      Expires:
      - Tue, 20 Feb 2024 21:34:21 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - fcb27894243f1463b0fee5fb662a4ca4e2d2c749
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - 612A:255865:B8321:10BCF9:65D519B1
      X-Served-By:
      - cache-bfi-kbfi7400070-BFI
      X-Timer:
      - S1708464562.570659,VS0,VE170
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/cpu/conversational_agent_cpu.py
  response:
    content: "from typing import List, Type, Dict, Any, Union, Literal, AsyncIterator\n\nfrom
      eidolon_ai_sdk.cpu.agent_cpu import AgentCPU, AgentCPUSpec, Thread, CPUException\nfrom
      eidolon_ai_sdk.cpu.agent_io import IOUnit, CPUMessageTypes\nfrom eidolon_ai_sdk.cpu.call_context
      import CallContext\nfrom eidolon_ai_sdk.cpu.llm_message import AssistantMessage,
      ToolResponseMessage, LLMMessage\nfrom eidolon_ai_sdk.cpu.llm_unit import LLMUnit\nfrom
      eidolon_ai_sdk.cpu.logic_unit import LogicUnit, LLMToolWrapper\nfrom eidolon_ai_sdk.cpu.memory_unit
      import MemoryUnit\nfrom eidolon_ai_sdk.cpu.processing_unit import ProcessingUnitLocator,
      PU_T\nfrom eidolon_ai_sdk.io.events import (\n    StreamEvent,\n    LLMToolCallRequestEvent,\n
      \   ToolCallStartEvent,\n)\nfrom eidolon_ai_sdk.system.reference_model import
      Reference, AnnotatedReference, Specable\nfrom eidolon_ai_sdk.util.logger import
      logger\nfrom eidolon_ai_sdk.util.stream_collector import StreamCollector, stream_manager,
      ManagedContextError, merge_streams\n\n\nclass ConversationalAgentCPUSpec(AgentCPUSpec):\n
      \   io_unit: AnnotatedReference[IOUnit]\n    memory_unit: AnnotatedReference[MemoryUnit]\n
      \   llm_unit: AnnotatedReference[LLMUnit]\n    logic_units: List[Reference[LogicUnit]]
      = []\n    record_conversation: bool = True\n    allow_tool_errors: bool = True\n\n\nclass
      ConversationalAgentCPU(AgentCPU, Specable[ConversationalAgentCPUSpec], ProcessingUnitLocator):\n
      \   io_unit: IOUnit\n    memory_unit: MemoryUnit\n    logic_units: List[LogicUnit]\n\n
      \   def __init__(self, spec: ConversationalAgentCPUSpec = None):\n        super().__init__(spec)\n
      \       kwargs = dict(processing_unit_locator=self)\n        self.io_unit =
      self.spec.io_unit.instantiate(**kwargs)\n        self.memory_unit = self.spec.memory_unit.instantiate(**kwargs)\n
      \       self.llm_unit = self.spec.llm_unit.instantiate(**kwargs)\n        self.logic_units
      = [logic_unit.instantiate(**kwargs) for logic_unit in self.spec.logic_units]\n
      \       self.record_memory = self.spec.record_conversation\n\n    def locate_unit(self,
      unit_type: Type[PU_T]) -> PU_T:\n        for unit in self.logic_units:\n            if
      isinstance(unit, unit_type):\n                return unit\n        if isinstance(self.io_unit,
      unit_type):\n            return self.io_unit\n\n        if isinstance(self.memory_unit,
      unit_type):\n            return self.memory_unit\n\n        if isinstance(self.llm_unit,
      unit_type):\n            return self.llm_unit\n\n        raise ValueError(f\"Could
      not locate {unit_type}\")\n\n    async def set_boot_messages(self, call_context:
      CallContext, boot_messages: List[CPUMessageTypes]):\n        conversation_messages
      = await self.io_unit.process_request(call_context, boot_messages)\n        await
      self.memory_unit.storeBootMessages(call_context, conversation_messages)\n\n
      \   async def schedule_request(\n        self,\n        call_context: CallContext,\n
      \       prompts: List[CPUMessageTypes],\n        output_format: Union[Literal[\"str\"],
      Dict[str, Any]] = \"str\",\n    ) -> AsyncIterator[StreamEvent]:\n        try:\n
      \           conversation = await self.memory_unit.getConversationHistory(call_context)\n
      \           conversation_messages = await self.io_unit.process_request(call_context,
      prompts)\n            if self.record_memory:\n                await self.memory_unit.storeMessages(call_context,
      conversation_messages)\n            conversation.extend(conversation_messages)\n
      \           async for event in self._llm_execution_cycle(call_context, output_format,
      conversation):\n                yield event\n        except CPUException as
      e:\n            raise e\n        except Exception as e:\n            raise CPUException(f\"error
      while processing request ({e.__class__.__name__})\") from e\n\n    async def
      _llm_execution_cycle(\n        self,\n        call_context: CallContext,\n        output_format:
      Union[Literal[\"str\"], Dict[str, Any]],\n        conversation: List[LLMMessage],\n
      \   ) -> AsyncIterator[StreamEvent]:\n        num_iterations = 0\n        while
      num_iterations < self.spec.max_num_function_calls:\n            tool_defs =
      await LLMToolWrapper.from_logic_units(call_context, self.logic_units)\n            tool_call_events
      = []\n            execute_llm_ = self.llm_unit.execute_llm(\n                call_context,
      conversation, [w.llm_message for w in tool_defs.values()], output_format\n            )\n
      \           # yield the events but capture the output, so it can be rolled into
      one event for memory.\n            stream_collector = StreamCollector(execute_llm_)\n
      \           async for event in stream_collector:\n                if event.is_root_and_type(LLMToolCallRequestEvent):\n
      \                   tool_call_events.append(event)\n                yield event\n
      \           if stream_collector.get_content():\n                logger.info(f\"LLM
      Response: {stream_collector.get_content()}\")\n\n            assistant_message
      = AssistantMessage(\n                type=\"assistant\",\n                content=stream_collector.get_content()
      or \"\",\n                tool_calls=[tce.tool_call for tce in tool_call_events],\n
      \           )\n            if self.record_memory:\n                await self.memory_unit.storeMessages(call_context,
      [assistant_message])\n            conversation.append(assistant_message)\n\n
      \           # process tool calls\n            async for e in merge_streams(\n
      \               [self._call_tool(call_context, tce, tool_defs, conversation)
      for tce in tool_call_events]\n            ):\n                yield e\n            if
      not tool_call_events:\n                return\n\n        raise CPUException(f\"exceeded
      maximum number of function calls ({self.spec.max_num_function_calls})\")\n\n
      \   async def _call_tool(\n        self,\n        call_context: CallContext,\n
      \       tool_call_event: LLMToolCallRequestEvent,\n        tool_defs,\n        conversation:
      List[LLMMessage],\n    ):\n        tc = tool_call_event.tool_call\n        logic_unit_wrapper
      = [\"NaN\"]\n\n        tool_def = tool_defs[tc.name]\n\n        def tool_event_stream():\n
      \           try:\n                logic_unit_wrapper[0] = tool_def.logic_unit.__class__.__name__\n
      \               return tool_def.execute(tool_call=tc)\n            except KeyError:\n
      \               raise ValueError(f\"Tool {tool_call_event.tool_call.name} not
      found. Available tools: {tool_defs.keys()}\")\n\n        tool_stream = stream_manager(\n
      \           tool_event_stream,\n            ToolCallStartEvent(\n                tool_call=tc,\n
      \               context_id=tc.tool_call_id,\n                title=tool_def.eidolon_handler.extra[\"title\"],\n
      \               sub_title=tool_def.eidolon_handler.extra.get(\"sub_title\",
      \"\"),\n                is_agent_call=tool_def.eidolon_handler.extra.get(\"agent_call\",
      False),\n            ),\n        )\n        try:\n            async for event
      in tool_stream:\n                yield event\n        except ManagedContextError:\n
      \           if self.spec.allow_tool_errors:\n                logger.warning(\"Error
      calling tool \" + tool_call_event.tool_call.name, exc_info=True)\n            else:\n
      \               raise\n\n        message = ToolResponseMessage(\n            logic_unit_name=logic_unit_wrapper[0],\n
      \           tool_call_id=tc.tool_call_id,\n            result=tool_stream.get_content()
      or \"\",\n            name=tc.name,\n        )\n        if self.record_memory:\n
      \           await self.memory_unit.storeMessages(call_context, [message])\n
      \       conversation.append(message)\n\n    async def clone_thread(self, call_context:
      CallContext) -> Thread:\n        new_context = call_context.derive_call_context()\n
      \       await self.io_unit.clone_thread(call_context, new_context)\n        await
      self.memory_unit.clone_thread(call_context, new_context)\n        for processor
      in self.logic_units:\n            await processor.clone_thread(call_context,
      new_context)\n\n        return Thread(call_context=new_context, cpu=self)\n"
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Length:
      - '1982'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:29:21 GMT
      ETag:
      - W/"b6ef065ea62fe909bf0bd1979c5b72dffd991a59572f60e634b586db4678cc7d"
      Expires:
      - Tue, 20 Feb 2024 21:34:21 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - 1094ea2a9b0f813ca7528c2f05d1bd24a2da6e42
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - FFB2:48D4:5B9485:6E1DAC:65D519B1
      X-Served-By:
      - cache-yvr1522-YVR
      X-Timer:
      - S1708464562.600525,VS0,VE136
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/cpu/llm_unit.py
  response:
    content: "from abc import ABC, abstractmethod\nfrom pydantic import BaseModel,
      Field\nfrom typing import List, Any, Dict, Literal, Union, AsyncIterator\n\nfrom
      eidolon_ai_sdk.cpu.call_context import CallContext\nfrom eidolon_ai_sdk.cpu.llm_message
      import LLMMessage\nfrom eidolon_ai_sdk.cpu.processing_unit import ProcessingUnit\nfrom
      eidolon_ai_sdk.io.events import StreamEvent\n\nLLM_MAX_TOKENS = {\n    \"DEFAULT\":
      8192,\n    # OpenAI models: https://platform.openai.com/docs/models/overview\n
      \   # gpt-4\n    \"gpt-4-1106-preview\": 128000,\n    \"gpt-4\": 8192,\n    \"gpt-4-32k\":
      32768,\n    \"gpt-4-0613\": 8192,\n    \"gpt-4-32k-0613\": 32768,\n    \"gpt-4-0314\":
      8192,  # legacy\n    \"gpt-4-32k-0314\": 32768,  # legacy\n    # gpt-3.5\n    \"gpt-3.5-turbo-1106\":
      16385,\n    \"gpt-3.5-turbo\": 4096,\n    \"gpt-3.5-turbo-16k\": 16385,\n    \"gpt-3.5-turbo-0613\":
      4096,  # legacy\n    \"gpt-3.5-turbo-16k-0613\": 16385,  # legacy\n    \"gpt-3.5-turbo-0301\":
      4096,  # legacy\n}\n\n\nclass CompletionUsage(BaseModel):\n    completion_tokens:
      int\n    \"\"\"Number of tokens in the generated completion.\"\"\"\n\n    prompt_tokens:
      int\n    \"\"\"Number of tokens in the prompt.\"\"\"\n\n    total_tokens: int\n
      \   \"\"\"Total number of tokens used in the request (prompt + completion).\"\"\"\n\n\nclass
      LLMCallFunction(BaseModel):\n    name: str = Field(..., description=\"The name
      of the function to call.\")\n    description: str = Field(..., description=\"The
      description of the function to call.\")\n    parameters: Dict[str, object] =
      Field(..., description=\"The json schema for the function parameters.\")\n\n\nclass
      LLMUnit(ProcessingUnit, ABC):\n    def __init__(self, **kwargs):\n        super().__init__(**kwargs)\n\n
      \   @abstractmethod\n    async def execute_llm(\n        self,\n        call_context:
      CallContext,\n        messages: List[LLMMessage],\n        tools: List[LLMCallFunction],\n
      \       output_format: Union[Literal[\"str\"], Dict[str, Any]],\n    ) -> AsyncIterator[StreamEvent]:\n
      \       pass\n"
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Length:
      - '790'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:29:21 GMT
      ETag:
      - W/"2c363bf30375feceff464f9fc66bc19d992aa34e8a5eb0b95e9897bfe4936cb3"
      Expires:
      - Tue, 20 Feb 2024 21:34:21 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - e3dace1dcaca4903de68ec0ec56d122e69e1ac64
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - B258:0FDE:5BD970:6E809A:65D519B0
      X-Served-By:
      - cache-yvr1525-YVR
      X-Timer:
      - S1708464562.611516,VS0,VE146
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/app/api/auth?ref=main
  response:
    content: '[{"name":"[...nextauth]","path":"webui/app/api/auth/[...nextauth]","sha":"9c0a213c1901c456a38bf0bcfef10871a38a7d50","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/app/api/auth/[...nextauth]?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/webui/app/api/auth/[...nextauth]","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/9c0a213c1901c456a38bf0bcfef10871a38a7d50","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/app/api/auth/[...nextauth]?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/9c0a213c1901c456a38bf0bcfef10871a38a7d50","html":"https://github.com/eidolon-ai/eidolon/tree/main/webui/app/api/auth/[...nextauth]"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:29:21 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E511:2556CA:14E1C9:1E4890:65D519B1
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4627'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '373'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/app/chat/[id]?ref=main
  response:
    content: '[{"name":"page.tsx","path":"webui/app/chat/[id]/page.tsx","sha":"af69959c34f135ed1487800f35c24e030687c651","size":732,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/app/chat/[id]/page.tsx?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/webui/app/chat/[id]/page.tsx","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/af69959c34f135ed1487800f35c24e030687c651","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/webui/app/chat/%5Bid%5D/page.tsx","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/app/chat/[id]/page.tsx?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/af69959c34f135ed1487800f35c24e030687c651","html":"https://github.com/eidolon-ai/eidolon/blob/main/webui/app/chat/[id]/page.tsx"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:29:21 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E505:25886F:14285B:1D8F47:65D519B1
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4626'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '374'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/code_search/resources?ref=main
  response:
    content: '[{"name":"documentation_producer.yaml","path":"examples/eidolon_examples/code_search/resources/documentation_producer.yaml","sha":"2852f0c3c7838f9fe113390c1e0fd8f106684250","size":1199,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/code_search/resources/documentation_producer.yaml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/code_search/resources/documentation_producer.yaml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/2852f0c3c7838f9fe113390c1e0fd8f106684250","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/eidolon_examples/code_search/resources/documentation_producer.yaml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/code_search/resources/documentation_producer.yaml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/2852f0c3c7838f9fe113390c1e0fd8f106684250","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/code_search/resources/documentation_producer.yaml"}},{"name":"search_code.yaml","path":"examples/eidolon_examples/code_search/resources/search_code.yaml","sha":"bc7ca63fd41db99df5f50eb27e8eb957730e07a8","size":294,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/code_search/resources/search_code.yaml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/code_search/resources/search_code.yaml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/bc7ca63fd41db99df5f50eb27e8eb957730e07a8","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/eidolon_examples/code_search/resources/search_code.yaml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/code_search/resources/search_code.yaml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/bc7ca63fd41db99df5f50eb27e8eb957730e07a8","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/code_search/resources/search_code.yaml"}},{"name":"search_docs.yaml","path":"examples/eidolon_examples/code_search/resources/search_docs.yaml","sha":"d22b48eefe411ae70aeb8f5cbff248cc73f88ddc","size":244,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/code_search/resources/search_docs.yaml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/code_search/resources/search_docs.yaml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/d22b48eefe411ae70aeb8f5cbff248cc73f88ddc","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/eidolon_examples/code_search/resources/search_docs.yaml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/code_search/resources/search_docs.yaml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/d22b48eefe411ae70aeb8f5cbff248cc73f88ddc","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/code_search/resources/search_docs.yaml"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:29:21 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E4FB:2535CB:18D93F:22401C:65D519B1
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4625'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '375'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/cpu/memory_unit.py
  response:
    content: "from abc import ABC, abstractmethod\nfrom typing import List\n\nfrom
      pydantic import BaseModel\n\nfrom eidolon_ai_sdk.cpu.call_context import CallContext\nfrom
      eidolon_ai_sdk.cpu.llm_message import LLMMessage\nfrom eidolon_ai_sdk.cpu.processing_unit
      import ProcessingUnit\nfrom eidolon_ai_sdk.system.reference_model import Specable\n\n\nclass
      MemoryUnitConfig(BaseModel):\n    pass\n\n\nclass MemoryUnit(ProcessingUnit,
      Specable[MemoryUnitConfig], ABC):\n    def __init__(self, spec: MemoryUnitConfig
      = None, **kwargs):\n        super().__init__(**kwargs)\n        self.spec =
      spec\n\n    async def storeMessages(self, call_context: CallContext, messages:
      List[LLMMessage]):\n        \"\"\"\n        Store the messages for the given
      call context\n        :param call_context: The call context for the current
      conversation\n        :param messages: The messages to store\n        :return:
      None\n        \"\"\"\n        await self.writeMessages(call_context, messages)\n\n
      \   async def storeBootMessages(self, call_context: CallContext, messages: List[LLMMessage]):\n
      \       \"\"\"\n        Store the messages for the given call context\n        :param
      call_context: The call context for the current conversation\n        :param
      messages: The messages to store\n        :return: None\n        \"\"\"\n        await
      self.writeBootMessages(call_context, messages)\n\n    async def storeAndFetch(self,
      call_context: CallContext, messages: List[LLMMessage]) -> List[LLMMessage]:\n
      \       \"\"\"\n        Store the messages and returns the full conversation
      history for the given call context (including the messages just stored)\n        :param
      call_context: The call context for the current conversation\n        :param
      messages: The messages to store\n        :return: The full conversation history
      for the given call context (including the messages just stored)\n        \"\"\"\n
      \       if messages and len(messages) > 0:\n            await self.writeMessages(call_context,
      messages)\n        conversation = await self.getConversationHistory(call_context)\n
      \       return conversation\n\n    @abstractmethod\n    async def writeBootMessages(self,
      call_context: CallContext, messages: List[LLMMessage]):\n        \"\"\"\n        Store
      the messages for the given call context\n        :param call_context: The call
      context for the current conversation\n        :param messages: The messages
      to store\n        :return: None\n        \"\"\"\n        raise NotImplementedError(\"writeBootMessages
      not implemented\")\n\n    @abstractmethod\n    async def writeMessages(self,
      call_context: CallContext, messages: List[LLMMessage]):\n        \"\"\"\n        Store
      the messages for the given call context\n        :param call_context: The call
      context for the current conversation\n        :param messages: The messages
      to store\n        :return: None\n        \"\"\"\n        raise NotImplementedError(\"writeMessages
      not implemented\")\n\n    @abstractmethod\n    async def getConversationHistory(self,
      call_context: CallContext) -> List[LLMMessage]:\n        \"\"\"\n        Get
      the full conversation history for the given call context\n        :param call_context:
      The call context for the current conversation\n        :return: The full conversation
      history for the given call context\n        \"\"\"\n        raise NotImplementedError(\"getConversationHistory
      not implemented\")\n\n    async def clone_thread(self, old_context: CallContext,
      new_context: CallContext):\n        messages = await self.getConversationHistory(old_context)\n
      \       for m in messages:\n            m[\"thread_id\"] = new_context.thread_id\n
      \       await self.storeMessages(new_context, messages)\n"
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Length:
      - '689'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:29:21 GMT
      ETag:
      - W/"e80841c72133230f76274be4121341defdb2297bd381e4b1173bfee483820044"
      Expires:
      - Tue, 20 Feb 2024 21:34:21 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - 9ce3486c6eb118ba076850ed54b9a2d987cf9c9b
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - D30A:255533:BBC29:10F647:65D519B1
      X-Served-By:
      - cache-bfi-kbfi7400076-BFI
      X-Timer:
      - S1708464562.710683,VS0,VE128
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/cpu/processing_unit.py
  response:
    content: "import logging\nfrom abc import ABC, abstractmethod\nfrom typing import
      TypeVar, Type, Optional\n\nfrom eidolon_ai_sdk.cpu.call_context import CallContext\n\nPU_T
      = TypeVar(\"PU_T\", bound=\"ProcessingUnit\")\n\n\nclass ProcessingUnitLocator:\n
      \   @abstractmethod\n    def locate_unit(self, unit_type: Type[PU_T]) -> Optional[PU_T]:\n
      \       pass\n\n\nclass ProcessingUnit(ABC):\n    processing_unit_locator: ProcessingUnitLocator\n
      \   logger = logging.getLogger(\"eidolon\")\n\n    def __init__(self, processing_unit_locator:
      ProcessingUnitLocator, **kwargs):\n        self.processing_unit_locator = processing_unit_locator\n\n
      \   def locate_unit(self, unit_type: Type[PU_T]) -> PU_T:\n        return self.processing_unit_locator.locate_unit(unit_type)\n\n
      \   async def clone_thread(self, old_context: CallContext, new_context: CallContext):\n
      \       pass\n"
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Length:
      - '350'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:29:21 GMT
      ETag:
      - W/"db655f75a3bf936715af60643814fed3922262da0c65ad338a59b573d1e1e3cf"
      Expires:
      - Tue, 20 Feb 2024 21:34:21 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - 6b1ed2dc4089ba188641ca48d7088f194b647a01
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - 4A26:2E4C:61FFD6:746FBC:65D519B0
      X-Served-By:
      - cache-yvr1522-YVR
      X-Timer:
      - S1708464562.739892,VS0,VE134
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/app/api/chat?ref=main
  response:
    content: '[{"name":"messages","path":"webui/app/api/chat/messages","sha":"f591408f685dcd29f7b650a7cf6ea7500dc13852","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/app/api/chat/messages?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/webui/app/api/chat/messages","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/f591408f685dcd29f7b650a7cf6ea7500dc13852","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/app/api/chat/messages?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/f591408f685dcd29f7b650a7cf6ea7500dc13852","html":"https://github.com/eidolon-ai/eidolon/tree/main/webui/app/api/chat/messages"}},{"name":"route.ts","path":"webui/app/api/chat/route.ts","sha":"50a4351009efec0a749a4d50dbdd488db651a5c4","size":5998,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/app/api/chat/route.ts?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/webui/app/api/chat/route.ts","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/50a4351009efec0a749a4d50dbdd488db651a5c4","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/webui/app/api/chat/route.ts","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/app/api/chat/route.ts?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/50a4351009efec0a749a4d50dbdd488db651a5c4","html":"https://github.com/eidolon-ai/eidolon/blob/main/webui/app/api/chat/route.ts"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:29:21 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E506:25592D:153451:1E9A84:65D519B1
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4624'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '376'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/agent/__init__.py
  response:
    content: ''
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:29:21 GMT
      ETag:
      - W/"938f66ede415ccb10764da47cd5f3cfc076c07b8791c708cfa8ec54982197c1f"
      Expires:
      - Tue, 20 Feb 2024 21:34:21 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - a40f95009e814fbbceda61899d18199231bf7ec1
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - 296E:30F250:17E7B:217F4:65D519B0
      X-Served-By:
      - cache-bfi-kbfi7400031-BFI
      X-Timer:
      - S1708464562.767301,VS0,VE116
      X-XSS-Protection:
      - 1; mode=block
      transfer-encoding:
      - chunked
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/cpu/logic_unit.py
  response:
    content: "from __future__ import annotations\n\nimport logging\nimport typing\nfrom
      abc import ABC\nfrom dataclasses import dataclass\nfrom pydantic import BaseModel,
      TypeAdapter\nfrom typing import Dict, List, AsyncIterator, Coroutine\n\nfrom
      eidolon_ai_sdk.cpu.call_context import CallContext\nfrom eidolon_ai_sdk.cpu.llm_message
      import ToolCall\nfrom eidolon_ai_sdk.cpu.llm_unit import LLMCallFunction\nfrom
      eidolon_ai_sdk.cpu.processing_unit import ProcessingUnit\nfrom eidolon_ai_sdk.io.events
      import SuccessEvent, ObjectOutputEvent, ErrorEvent, BaseStreamEvent, StringOutputEvent\nfrom
      eidolon_ai_sdk.system.fn_handler import register_handler, FnHandler, get_handlers\nfrom
      eidolon_ai_sdk.util.logger import logger\n\n\n@dataclass\nclass LLMToolWrapper:\n
      \   logic_unit: LogicUnit\n    llm_message: LLMCallFunction\n    eidolon_handler:
      FnHandler\n    input_model: typing.Type[BaseModel]\n\n    async def execute(self,
      tool_call: ToolCall) -> AsyncIterator[BaseStreamEvent]:\n        logger.info(\"calling
      tool \" + self.eidolon_handler.name)\n        logger.debug(\"args: \" + str(tool_call.arguments)
      + \" | fn: \" + str(self.eidolon_handler.fn))\n        try:\n            # if
      this is a sync tool call just call execute, if it is not we need to store the
      state of the conversation and call in memory\n            input_model = self.eidolon_handler.input_model_fn(self.logic_unit,
      self.eidolon_handler)\n            result = self.eidolon_handler.fn(self.logic_unit,
      **dict(input_model.model_validate(tool_call.arguments)))\n            if isinstance(result,
      Coroutine):\n                result = await result\n\n            if isinstance(result,
      typing.AsyncIterable):\n                async for event in result:\n                    yield
      event\n            else:\n                ret_type = self.eidolon_handler.output_model_fn(self.logic_unit,
      self.eidolon_handler)\n                model = TypeAdapter(ret_type)\n                result
      = model.dump_python(result)\n                if isinstance(result, str):\n                    yield
      StringOutputEvent(content=result)\n                else:\n                    yield
      ObjectOutputEvent(content=result)\n                yield SuccessEvent()\n        except
      Exception as e:\n            logging.exception(\"error calling tool \" + self.eidolon_handler.name)\n
      \           yield ErrorEvent(reason=e)\n\n    @classmethod\n    async def from_logic_units(\n
      \       cls, call_context: CallContext, logic_units: List[LogicUnit]\n    )
      -> Dict[str, LLMToolWrapper]:\n        acc = {}\n        for logic_unit in logic_units:\n
      \           for handler in await logic_unit.build_tools(call_context):\n                new_name
      = logic_unit.__class__.__name__ + \"_\" + handler.name\n                i =
      0\n                while new_name in acc:\n                    new_name = logic_unit.__class__.__name__
      + \"_\" + handler.name + \"_\" + str(i)\n                    i += 1\n                input_model
      = handler.input_model_fn(logic_unit, handler)\n                acc[new_name]
      = LLMToolWrapper(\n                    logic_unit=logic_unit,\n                    llm_message=LLMCallFunction(\n
      \                       name=new_name,\n                        description=handler.description(logic_unit,
      handler),\n                        parameters=input_model.model_json_schema(),\n
      \                   ),\n                    eidolon_handler=handler,\n                    input_model=input_model,\n
      \               )\n        return acc\n\n\ndef llm_function(\n    name: str
      = None,\n    description: typing.Optional[typing.Callable[[object, FnHandler],
      str]] = None,\n    input_model: typing.Optional[typing.Callable[[object, FnHandler],
      BaseModel]] = None,\n    output_model: typing.Optional[typing.Callable[[object,
      FnHandler], typing.Any]] = None,\n):\n    return register_handler(name=name,
      description=description, input_model=input_model, output_model=output_model)\n\n\nclass
      LogicUnit(ProcessingUnit, ABC):\n    async def build_tools(self, call_context:
      CallContext) -> List[FnHandler]:\n        handlers = get_handlers(self)\n        for
      handler in handlers:\n            handler.extra[\"title\"] = self.__class__.__name__\n
      \           handler.extra[\"sub_title\"] = handler.fn.__name__\n            handler.extra[\"agent_call\"]
      = False\n\n            return handlers\n"
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Length:
      - '1281'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:29:21 GMT
      ETag:
      - W/"f37f6d2cfe2eefe40f5d2edc18dd97d94e0c839eac34204e2bcef851bd4366cf"
      Expires:
      - Tue, 20 Feb 2024 21:34:21 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - 4b01415ca5efc1ebb24030f91de3a7f93eade15a
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - 6506:6B68:5DC131:704D87:65D519B1
      X-Served-By:
      - cache-yvr1532-YVR
      X-Timer:
      - S1708464562.763084,VS0,VE129
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/io/__init__.py
  response:
    content: ''
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Length:
      - '0'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:29:21 GMT
      ETag:
      - W/"938f66ede415ccb10764da47cd5f3cfc076c07b8791c708cfa8ec54982197c1f"
      Expires:
      - Tue, 20 Feb 2024 21:34:21 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - 455bd4d772c1ab01509a0bcf6dfa2b4ac3981627
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - 4DBA:1026:72C57:8BF95:65D519B0
      X-Served-By:
      - cache-yvr1525-YVR
      X-Timer:
      - S1708464562.797533,VS0,VE130
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/agent/test_retriever_agent.py
  response:
    content: "import pytest\n\nfrom eidolon_ai_sdk.agent.client import Agent\nfrom
      eidolon_ai_sdk.agent.retriever_agent.retriever_agent import RetrieverAgent\nfrom
      eidolon_ai_sdk.system.reference_model import Reference\nfrom eidolon_ai_sdk.system.resources.agent_resource
      import AgentResource\nfrom eidolon_ai_sdk.system.resources.resources_base import
      Metadata\nfrom eidolon_ai_sdk.util.class_utils import fqn\n\n\n@pytest.fixture(scope=\"module\")\ndef
      retriever(test_dir):\n    docs_loc = test_dir / \"agent\" / \"retriever_docs\"\n
      \   return AgentResource(\n        apiVersion=\"eidolon/v1\",\n        metadata=Metadata(name=\"RetrieverAgent\"),\n
      \       spec=Reference(\n            implementation=fqn(RetrieverAgent),\n            name=\"test_retriever_name\",\n
      \           description=\"A test retriever agent\",\n            loader_root_location=f\"file:///{docs_loc}\",\n
      \       ),\n    )\n\n\n@pytest.fixture(scope=\"module\")\nasync def agent(retriever,
      run_app):\n    async with run_app(retriever):\n        yield Agent.get(\"RetrieverAgent\")\n\n\nasync
      def test_list_files(agent):\n    found = await agent.program(\"list_files\")\n
      \   assert set(found.data) == {\"caz\", \"car\", \"doo\", \"dar\", \"daz\",
      \"coo\", \"ear\", \"eaz\", \"foo\", \"boo\", \"baz\", \"bar\", \"eoo\"}\n\n\nasync
      def test_search(agent):\n    found = await agent.program(\"search\", body={\"question\":
      \"foo\"})\n    assert found.data\n"
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Length:
      - '514'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:29:21 GMT
      ETag:
      - W/"1236366987d73e7b37ad8e1815fe0937ff32b9d3bd735807d19f772079ab5eb4"
      Expires:
      - Tue, 20 Feb 2024 21:34:21 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - e115d092408690c04b7015894138565432cb9577
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - B258:0FDE:5BD97B:6E80A7:65D519B1
      X-Served-By:
      - cache-yvr1522-YVR
      X-Timer:
      - S1708464562.822369,VS0,VE132
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/cpu/llm_message.py
  response:
    content: "from typing import List, Dict, Any, Literal\n\nfrom pydantic import
      BaseModel\n\n\n# Base LLMMessage class\n# todo, replace LLMMessage with LLMMessageTypes\nclass
      LLMMessage(BaseModel):\n    type: str\n\n    @classmethod\n    def from_dict(cls,
      data: Dict[str, Any]):\n        if data.get(\"type\") == \"system\":\n            return
      SystemMessage.model_validate(data)\n        elif data.get(\"type\") == \"user\":\n
      \           return UserMessage.model_validate(data)\n        elif data.get(\"type\")
      == \"assistant\":\n            return AssistantMessage.model_validate(data)\n
      \       elif data.get(\"type\") == \"tool\":\n            return ToolResponseMessage.model_validate(data)\n
      \       else:\n            raise ValueError(f\"Unknown message type {data.get('type')}\")\n\n\n#
      Derived SystemMessage class\nclass SystemMessage(LLMMessage):\n    type: str
      = \"system\"\n    content: str\n\n\n# Derived classes for different types of
      message content parts\nclass UserMessageText(BaseModel):\n    text: str\n    type:
      Literal[\"text\"] = \"text\"\n\n\nclass UserMessageImageURL(BaseModel):\n    image_url:
      str\n    type: Literal[\"image_url\"] = \"image_url\"\n\n\n# Derived UserMessage
      class\nclass UserMessage(LLMMessage):\n    type: str = \"user\"\n    content:
      List[UserMessageText | UserMessageImageURL]\n\n\n# ToolCall class\nclass ToolCall(BaseModel):\n
      \   tool_call_id: str\n    name: str\n    arguments: Dict[str, Any]\n\n\n# Derived
      AssistantMessage class\nclass AssistantMessage(LLMMessage):\n    type: str =
      \"assistant\"\n    content: Any\n    tool_calls: List[ToolCall]\n\n\nclass ToolResponseMessage(LLMMessage):\n
      \   type: str = \"tool\"\n    logic_unit_name: str\n    name: str\n    tool_call_id:
      str\n    result: Any\n\n\nLLMMessageTypes = SystemMessage | UserMessage | AssistantMessage
      | ToolResponseMessage\n"
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Length:
      - '567'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:29:21 GMT
      ETag:
      - W/"5a319a33ce9b9a906964361e55fe7009f9a89f8c0ef96d68d5b4e72b6543f038"
      Expires:
      - Tue, 20 Feb 2024 21:34:21 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - cda563decc9d8a52556a52bb118152db9a32cb5c
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - 2E36:51C0:59EEB5:6C9630:65D519B1
      X-Served-By:
      - cache-yvr1533-YVR
      X-Timer:
      - S1708464562.600965,VS0,VE354
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/cpu/open_ai_assistants_cpu.py
  response:
    content: "import asyncio\nimport json\nimport time\nfrom io import IOBase\nfrom
      typing import List, Dict, Any, Type, Optional, Literal, Union\n\nfrom openai
      import AsyncOpenAI\nfrom openai.types.beta import Assistant\nfrom openai.types.beta.assistant_create_params
      import ToolAssistantToolsFunction\nfrom openai.types.beta.threads import ThreadMessage\nfrom
      openai.types.beta.threads.run_submit_tool_outputs_params import ToolOutput\nfrom
      pydantic import Field\n\nfrom eidolon_ai_sdk.agent_os import AgentOS\nfrom eidolon_ai_sdk.cpu.agent_cpu
      import AgentCPUSpec, AgentCPU, Thread\nfrom eidolon_ai_sdk.cpu.agent_io import
      CPUMessageTypes\nfrom eidolon_ai_sdk.cpu.call_context import CallContext\nfrom
      eidolon_ai_sdk.cpu.llm_message import ToolResponseMessage, LLMMessage\nfrom
      eidolon_ai_sdk.cpu.logic_unit import LogicUnit, LLMToolWrapper\nfrom eidolon_ai_sdk.cpu.processing_unit
      import ProcessingUnitLocator, PU_T\nfrom eidolon_ai_sdk.system.reference_model
      import Specable, Reference\nfrom eidolon_ai_sdk.util.logger import logger\n\n\nclass
      OpenAIAssistantsCPUSpec(AgentCPUSpec):\n    logic_units: List[Reference[LogicUnit]]
      = []\n    model: str = Field(default=\"gpt-4-1106-preview\", description=\"The
      model to use for the LLM.\")\n    temperature: float = 0.3\n    max_wait_time_secs:
      int = 600\n    llm_poll_interval_ms: int = 500\n    enable_retrieval: bool =
      True\n    enable_code_interpreter: bool = True\n\n\nclass OpenAIAssistantsCPU(AgentCPU,
      Specable[OpenAIAssistantsCPUSpec], ProcessingUnitLocator):\n    llm: AsyncOpenAI
      = None\n    logic_units: List[LogicUnit] = None\n\n    def __init__(self, spec:
      OpenAIAssistantsCPUSpec = None):\n        super().__init__(spec)\n        self.tool_defs
      = None\n        kwargs = dict(processing_unit_locator=self)\n        self.logic_units
      = [logic_unit.instantiate(**kwargs) for logic_unit in self.spec.logic_units]\n\n
      \   def locate_unit(self, unit_type: Type[PU_T]) -> PU_T:\n        found = super().locate_unit(unit_type)\n
      \       return found if found else self._locate_unit(unit_type)\n\n    def _locate_unit(self,
      unit_type: Type[PU_T]) -> Optional[PU_T]:\n        for unit in self.logic_units:\n
      \           if isinstance(unit, unit_type):\n                return unit\n        raise
      ValueError(f\"Could not locate {unit_type}\")\n\n    def _getLLM(self):\n        if
      not self.llm:\n            self.llm = AsyncOpenAI()\n        return self.llm\n\n
      \   async def processFile(self, prompt: CPUMessageTypes) -> str:\n        #
      rip out the image messages, store them in the file system, and replace them
      file Ids\n        # collect the user messages\n        llm = self._getLLM()\n
      \       image_file: IOBase = prompt.image\n        # read the prompt.image file
      into memory\n        image_data = image_file.read()\n        file = await llm.files.create(file=image_data,
      purpose=\"assistants\")\n        return file.id\n\n    @classmethod\n    async
      def delete_process(cls, process_id: str):\n        existing_conversations =
      AgentOS.symbolic_memory.find(\"open_ai_conversations\", {\"process_id\": process_id})\n
      \       async for conversation in existing_conversations:\n            await
      AsyncOpenAI().beta.assistants.delete(conversation[\"assistant_id\"])\n            logger.info(\"deleted
      assistant \" + conversation[\"assistant_id\"])\n        await AgentOS.symbolic_memory.delete_many(\"open_ai_conversations\",
      {\"process_id\": process_id})\n        await AgentOS.symbolic_memory.delete_many(\"open_ai_conversation_data\",
      {\"process_id\": process_id})\n\n    async def get_or_create_assistant(\n        self,
      call_context: CallContext, system_message: str = \"\", file_ids=None\n    )
      -> (Assistant, str):\n        # fetch the existing conversation from symbolic
      memory\n        existingConversation = await AgentOS.symbolic_memory.find_one(\n
      \           \"open_ai_conversations\",\n            {\n                \"process_id\":
      call_context.process_id,\n                \"thread_id\": call_context.thread_id,\n
      \           },\n        )\n\n        llm = self._getLLM()\n        if existingConversation:\n
      \           assistant_thread_id = existingConversation[\"assistant_thread_id\"]\n
      \           assistant = await llm.beta.assistants.retrieve(existingConversation[\"assistant_id\"])\n
      \           return assistant, assistant_thread_id\n\n        request = {\"model\":
      self.spec.model}\n        if len(system_message) > 0:\n            request[\"instructions\"]
      = system_message\n\n        if file_ids and len(file_ids) > 0:\n            request[\"file_ids\"]
      = file_ids\n\n        logger.info(\"creating assistant with request \" + str(request))\n
      \       assistant = await llm.beta.assistants.create(**request)\n        thread
      = await llm.beta.threads.create()\n\n        await AgentOS.symbolic_memory.insert_one(\n
      \           \"open_ai_conversations\",\n            {\n                \"process_id\":
      call_context.process_id,\n                \"thread_id\": call_context.thread_id,\n
      \               \"assistant_id\": assistant.id,\n                \"assistant_thread_id\":
      thread.id,\n            },\n        )\n\n        return assistant, thread.id\n\n
      \   async def set_boot_messages(self, call_context: CallContext, boot_messages:
      List[CPUMessageTypes]):\n        # separate out the system messages from the
      user messages\n        system_message: str = \"\"\n        user_messages = []\n
      \       file_ids = []\n        for message in boot_messages:\n            if
      message.type == \"system\":\n                system_message += message.prompt
      + \"\\n\"\n            elif message.type == \"user\":\n                user_messages.append(message.prompt)\n
      \           elif message.type == \"image\":\n                file_ids.append(await
      self.processFile(message))\n            else:\n                raise ValueError(f\"Unknown
      message type {message.type}\")\n\n        assistant, thread_id = await self.get_or_create_assistant(call_context,
      system_message, file_ids)\n        llm = self._getLLM()\n        for user_message
      in user_messages:\n            await llm.beta.threads.messages.create(thread_id=thread_id,
      content=user_message, role=\"user\")\n\n    async def schedule_request(\n        self,\n
      \       call_context: CallContext,\n        prompts: List[CPUMessageTypes],\n
      \       output_format: Union[Literal[\"str\"], Dict[str, Any]],\n    ) -> Any:\n
      \       # separate out the system messages from the user messages\n        user_messages
      = []\n        file_ids = []\n        for message in prompts:\n            if
      message.type == \"user\":\n                user_messages.append(message.prompt)\n
      \           elif message.type == \"image\":\n                file_ids.append(await
      self.processFile(message))\n            else:\n                raise ValueError(f\"Unknown
      message type {message.type}\")\n        if not output_format == \"str\":\n            schema_message
      = (\n                f\"\\nYour response MUST be valid JSON satisfying the following
      schema:\\n{json.dumps(output_format)}.\"\n            )\n            schema_message
      += \"\\nALWAYS reply with json in the following format:\\njson```<insert json
      here>```\\n\"\n            user_messages.append(schema_message)\n\n        assistant,
      thread_id = await self.get_or_create_assistant(call_context)\n        llm =
      self._getLLM()\n        if len(user_messages) == 0:\n            user_messages.append(\"\")\n\n
      \       last_message_id = None\n        for idx, user_message in enumerate(user_messages):\n
      \           request = {\"thread_id\": thread_id, \"content\": user_message,
      \"role\": \"user\"}\n            if idx == len(user_messages) - 1:\n                request[\"file_ids\"]
      = file_ids\n            last_message = await llm.beta.threads.messages.create(**request)\n
      \           last_message_id = last_message.id\n\n        # start the run\n        return
      await self.run_llm_and_tools(call_context, assistant.id, thread_id, last_message_id)\n\n
      \   async def _get_tools_defs(self, call_context: CallContext):\n        conversation
      = []\n        conversation_from_memory = AgentOS.symbolic_memory.find(\n            \"open_ai_conversation_data\",\n
      \           {\n                \"process_id\": call_context.process_id,\n                \"thread_id\":
      call_context.thread_id,\n            },\n        )\n        async for item in
      conversation_from_memory:\n            conversation.append(LLMMessage.from_dict(item[\"tool_result\"]))\n\n
      \       return await LLMToolWrapper.from_logic_units(self.logic_units, conversation=conversation)\n\n
      \   async def run_llm_and_tools(\n        self,\n        call_context: CallContext,\n
      \       assistant_id: str,\n        assistant_thread_id: str,\n        last_message_id:
      str,\n    ):\n        llm = self._getLLM()\n        tool_defs = await self._get_tools_defs(call_context)\n
      \       tools = []\n        logger.info(\"tool defs are \" + str(tool_defs.keys()))\n
      \       for tool_def in tool_defs.values():\n            tools.append(\n                ToolAssistantToolsFunction(\n
      \                   **{\n                        \"type\": \"function\",\n                        \"function\":
      {\n                            \"name\": tool_def.llm_message.name,\n                            \"description\":
      tool_def.llm_message.description,\n                            \"parameters\":
      tool_def.llm_message.parameters,\n                        },\n                    }\n
      \               )\n            )\n        if self.spec.enable_retrieval:\n            tools.append({\"type\":
      \"retrieval\"})\n\n        if self.spec.enable_code_interpreter:\n            tools.append({\"type\":
      \"code_interpreter\"})\n        request = {\"assistant_id\": assistant_id, \"thread_id\":
      assistant_thread_id}\n        if len(tools) > 0:\n            request[\"tools\"]
      = tools\n\n        run = await llm.beta.threads.runs.create(**request)\n        num_iterations
      = 0\n        while num_iterations < self.spec.max_num_function_calls:\n            run
      = await self.run_llm(run.id, assistant_thread_id)\n            if run.status
      == \"requires_action\":\n                results = []\n\n                for
      tool_call in run.required_action.submit_tool_outputs.tool_calls:\n                    tool_call_id
      = tool_call.id\n                    function_call = tool_call.function\n                    arguments
      = json.loads(function_call.arguments)\n                    logger.info(\"executing
      tool \" + function_call.name + \" with args \" + str(function_call.arguments))\n
      \                   tool_def = tool_defs[function_call.name]\n                    tool_result
      = await tool_def.execute(call_context=call_context, args=arguments)\n                    logger.info(\"tool
      result is \" + str(tool_result))\n                    result_as_json_str = self._to_json(tool_result)\n
      \                   message = ToolOutput(tool_call_id=tool_call_id, output=result_as_json_str)\n
      \                   message_to_store = ToolResponseMessage(\n                        logic_unit_name=tool_def.logic_unit.__class__.__name__,\n
      \                       tool_call_id=tool_call_id,\n                        result=result_as_json_str,\n
      \                       name=function_call.name,\n                    )\n                    await
      AgentOS.symbolic_memory.insert_one(\n                        \"open_ai_conversation_data\",\n
      \                       {\n                            \"process_id\": call_context.process_id,\n
      \                           \"thread_id\": call_context.thread_id,\n                            \"assistant_id\":
      assistant_id,\n                            \"assistant_thread_id\": assistant_thread_id,\n
      \                           \"tool_call_id\": tool_call_id,\n                            \"tool_result\":
      message_to_store.model_dump(),\n                        },\n                    )\n
      \                   results.append(message)\n\n                run = await llm.beta.threads.runs.submit_tool_outputs(\n
      \                   thread_id=assistant_thread_id, run_id=run.id, tool_outputs=results\n
      \               )\n                num_iterations += 1\n            else:\n
      \               messages = await llm.beta.threads.messages.list(thread_id=assistant_thread_id,
      before=last_message_id)\n                first_item: ThreadMessage = None\n
      \               async for item in messages:\n                    first_item
      = item\n                    break\n\n                content = \"\"\n                for
      text in first_item.content:\n                    if text.type == \"image_url\":\n
      \                       logger.warning(\"Unsupported image url\")\n                    else:\n
      \                       content += text.text.value + \"\\n\"\n                return
      content\n\n        raise ValueError(f\"Exceeded maximum number of function calls
      {self.spec.max_num_function_calls}\")\n\n    async def run_llm(self, run_id:
      str, thread_id: str):\n        llm = self._getLLM()\n        finished_states
      = [\n            \"completed\",\n            \"requires_action\",\n            \"cancelled\",\n
      \           \"failed\",\n            \"expired\",\n        ]\n        start_time
      = time.time()\n        run = await llm.beta.threads.runs.retrieve(thread_id=thread_id,
      run_id=run_id)\n        while (time.time() - start_time) < self.spec.max_wait_time_secs:\n
      \           if run.status in finished_states:\n                break\n            await
      asyncio.sleep(self.spec.llm_poll_interval_ms / 1000)\n            run = await
      llm.beta.threads.runs.retrieve(thread_id=thread_id, run_id=run_id)\n\n        if
      run.status not in finished_states or run.status == \"expired\":\n            raise
      RuntimeError(\"Timeout while waiting for LLM to finish\")\n        elif run.status
      == \"requires_action\":\n            return run\n        elif run.status ==
      \"completed\":\n            return run\n        elif run.status == \"cancelled\":\n
      \           raise RuntimeError(\"LLM run was cancelled\")\n        else:\n            is_rate_limit
      = run.last_error.code == \"rate_limit\"\n            raise RuntimeError(\n                \"LLM
      run failed because \" + run.last_error.message + (\" (rate limit)\" if is_rate_limit
      else \"\")\n            )\n\n    async def clone_thread(self, call_context:
      CallContext) -> Thread:\n        pass\n"
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Length:
      - '3365'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:29:21 GMT
      ETag:
      - W/"dce1157c4884d165df50567c5872ffd7da0a581f67dc6671f62a0ce89011bf42"
      Expires:
      - Tue, 20 Feb 2024 21:34:21 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - 65204520dfe47cceabebf53ada33863e894fe5cd
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - C634:180A:59BE50:6C63EF:65D519B1
      X-Served-By:
      - cache-yvr1523-YVR
      X-Timer:
      - S1708464562.736748,VS0,VE243
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/io/events.py
  response:
    content: "from __future__ import annotations\n\nfrom abc import ABC\nfrom enum
      import Enum\nfrom pydantic import BaseModel, TypeAdapter, field_serializer\nfrom
      typing import List, TypeVar, Generic, Any, AsyncIterator, Type, Literal, Dict,
      Optional\n\nfrom eidolon_ai_sdk.cpu.llm_message import ToolCall\n\n\nclass Category(Enum):\n
      \   START = \"start\"\n    INPUT = \"input\"\n    END = \"end\"\n    OUTPUT
      = \"output\"\n    TRANSFORM = \"transform\"\n\n\nT = TypeVar(\"T\")\n\n\nclass
      BaseStreamEvent(BaseModel, ABC):\n    stream_context: Optional[str] = None\n
      \   category: Category\n    event_type: str\n\n    def is_root_event(self):\n
      \       return self.stream_context is None\n\n    def is_root_and_type(self,
      event_type: type):\n        return self.stream_context is None and isinstance(self,
      event_type)\n\n    def is_root_end_event(self):\n        return self.is_root_and_type(EndStreamEvent)\n\n
      \   @classmethod\n    def from_dict(cls, event_dict: Dict[str, Any]):\n        #
      remove fields that are set automatically\n        event_type = event_dict.pop(\"event_type\")\n
      \       if \"category\" in event_dict:\n            del event_dict[\"category\"]\n
      \       if event_dict.get(\"stream_context\", ...) is None:\n            del
      event_dict[\"stream_context\"]\n\n        return _type_mapping[event_type](**event_dict)\n\n\nclass
      UserInputEvent(BaseStreamEvent):\n    category: Literal[Category.INPUT] = Category.INPUT\n
      \   event_type: Literal[\"user_input\"] = \"user_input\"\n    input: Dict[str,
      Any]\n\n\nclass StartStreamContextEvent(BaseStreamEvent):\n    category: Literal[Category.START]
      = Category.START\n    event_type: Literal[\"context_start\"] = \"context_start\"\n
      \   context_id: str\n\n    def get_nested_context(self):\n        context =
      self.stream_context + \".\" if self.stream_context else \"\"\n        return
      context + self.context_id\n\n\nclass EndStreamContextEvent(BaseStreamEvent):\n
      \   category: Literal[Category.START] = Category.END\n    event_type: Literal[\"context_end\"]
      = \"context_end\"\n    context_id: str\n\n\nclass ToolCallStartEvent(StartStreamContextEvent):\n
      \   event_type: Literal[\"tool_call_start\"] = \"tool_call_start\"\n    tool_call:
      ToolCall\n    title: str\n    sub_title: str = \"\"\n    is_agent_call: bool
      = False\n\n\nclass StartAgentCallEvent(BaseStreamEvent):\n    category: Literal[Category.START]
      = Category.START\n    event_type: Literal[\"agent_call\"] = \"agent_call\"\n
      \   machine: str\n    agent_name: str\n    call_name: str\n    process_id: str\n\n\nclass
      OutputEvent(BaseStreamEvent, ABC):\n    category: Literal[Category.OUTPUT] =
      Category.OUTPUT\n    content: Any\n\n    @staticmethod\n    def get(content:
      T, **kwargs):\n        if isinstance(content, str):\n            return StringOutputEvent(content=content,
      **kwargs)\n        else:\n            return ObjectOutputEvent[T](content=content,
      **kwargs)\n\n\nclass LLMToolCallRequestEvent(BaseStreamEvent):\n    category:
      Literal[Category.OUTPUT] = Category.OUTPUT\n    event_type: Literal[\"llm_tool_call_request\"]
      = \"llm_tool_call_request\"\n    tool_call: ToolCall\n\n\nclass StringOutputEvent(OutputEvent):\n
      \   event_type: Literal[\"string\"] = \"string\"\n    content: str\n\n\nclass
      ObjectOutputEvent(OutputEvent, Generic[T]):\n    event_type: Literal[\"object\"]
      = \"object\"\n    content: T\n\n\n# note EndStreamEvent does not need to reference
      the type of event it ends since this is captured by context\nclass EndStreamEvent(BaseStreamEvent,
      ABC):\n    category: Literal[Category.END] = Category.END\n    event_type: Literal[\"error\",
      \"success\", \"canceled\"]\n\n\nclass SuccessEvent(EndStreamEvent):\n    event_type:
      Literal[\"success\"] = \"success\"\n\n\nclass CanceledEvent(EndStreamEvent):\n
      \   event_type: Literal[\"canceled\"] = \"canceled\"\n\n\nclass ErrorEvent(EndStreamEvent):\n
      \   event_type: Literal[\"error\"] = \"error\"\n    reason: Any\n\n    @field_serializer(\"reason\")\n
      \   def serialize_reason(self, reason: Any):\n        if isinstance(reason,
      Exception):\n            return f\"{type(reason).__name__}: {reason}\"\n        else:\n
      \           return reason\n\n\nclass AgentStateEvent(BaseStreamEvent):\n    category:
      Literal[Category.TRANSFORM] = Category.TRANSFORM\n    event_type: Literal[\"agent_state\"]
      = \"agent_state\"\n    state: str\n    available_actions: List[str] = None  #
      this is filled in by the server, agents should leave the default\n\n\nStreamEvent
      = (\n    StartAgentCallEvent  # todo, this smells like UserInputEvent and StartAgentCallEvent\n
      \   | ToolCallStartEvent\n    | StartStreamContextEvent\n    | EndStreamContextEvent\n
      \   | LLMToolCallRequestEvent\n    | StringOutputEvent\n    | ObjectOutputEvent\n
      \   | SuccessEvent\n    | CanceledEvent\n    | ErrorEvent\n    | AgentStateEvent\n
      \   | UserInputEvent\n)\n\n_type_mapping = {c.model_fields[\"event_type\"].annotation.__args__[0]:
      c for c in StreamEvent.__args__}\n\n\nasync def convert_output_object(it: AsyncIterator[StreamEvent],
      output_format: Type[T]) -> AsyncIterator[StreamEvent]:\n    model = TypeAdapter(output_format)\n
      \   async for event in it:\n        if event.is_root_and_type(ObjectOutputEvent):\n
      \           event.content = model.validate_python(event.content)\n        yield
      event\n"
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Length:
      - '1513'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:29:22 GMT
      ETag:
      - W/"cb57330926d8874ad32ef571ad7f21c42d91f81a9ce9a552a98f0ebb77a127ff"
      Expires:
      - Tue, 20 Feb 2024 21:34:22 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - 5d85196b11addab901150af3c7cbfc29ddf0abec
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - 55B6:2E1949:11FDE:19816:65D519B1
      X-Served-By:
      - cache-bfi-kbfi7400070-BFI
      X-Timer:
      - S1708464562.922871,VS0,VE131
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/cpu/__init__.py
  response:
    content: ''
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Length:
      - '0'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:29:22 GMT
      ETag:
      - W/"938f66ede415ccb10764da47cd5f3cfc076c07b8791c708cfa8ec54982197c1f"
      Expires:
      - Tue, 20 Feb 2024 21:34:22 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - fdaa7851c81fea4c9e779ea000a5967d157ba93a
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - FFB2:48D4:5B949B:6E1DC7:65D519B1
      X-Served-By:
      - cache-yvr1531-YVR
      X-Timer:
      - S1708464562.916704,VS0,VE158
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/group_conversation/iasip?ref=main
  response:
    content: '[{"name":"Charlie.yaml","path":"examples/eidolon_examples/group_conversation/iasip/Charlie.yaml","sha":"b5e7c0a0413ea73226974cc09d8b0d5b55af802d","size":429,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/group_conversation/iasip/Charlie.yaml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/group_conversation/iasip/Charlie.yaml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/b5e7c0a0413ea73226974cc09d8b0d5b55af802d","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/eidolon_examples/group_conversation/iasip/Charlie.yaml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/group_conversation/iasip/Charlie.yaml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/b5e7c0a0413ea73226974cc09d8b0d5b55af802d","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/group_conversation/iasip/Charlie.yaml"}},{"name":"Coordinator.yaml","path":"examples/eidolon_examples/group_conversation/iasip/Coordinator.yaml","sha":"708c5efbde07cd2297261865a2e47c17e84fc2cf","size":244,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/group_conversation/iasip/Coordinator.yaml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/group_conversation/iasip/Coordinator.yaml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/708c5efbde07cd2297261865a2e47c17e84fc2cf","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/eidolon_examples/group_conversation/iasip/Coordinator.yaml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/group_conversation/iasip/Coordinator.yaml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/708c5efbde07cd2297261865a2e47c17e84fc2cf","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/group_conversation/iasip/Coordinator.yaml"}},{"name":"Dee.yaml","path":"examples/eidolon_examples/group_conversation/iasip/Dee.yaml","sha":"e90fcccd143fe700914b454451418eb69bf8424b","size":422,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/group_conversation/iasip/Dee.yaml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/group_conversation/iasip/Dee.yaml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e90fcccd143fe700914b454451418eb69bf8424b","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/eidolon_examples/group_conversation/iasip/Dee.yaml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/group_conversation/iasip/Dee.yaml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e90fcccd143fe700914b454451418eb69bf8424b","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/group_conversation/iasip/Dee.yaml"}},{"name":"Dennis.yaml","path":"examples/eidolon_examples/group_conversation/iasip/Dennis.yaml","sha":"3b8ff5494c510e390a074b889047623c397f6948","size":375,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/group_conversation/iasip/Dennis.yaml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/group_conversation/iasip/Dennis.yaml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/3b8ff5494c510e390a074b889047623c397f6948","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/eidolon_examples/group_conversation/iasip/Dennis.yaml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/group_conversation/iasip/Dennis.yaml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/3b8ff5494c510e390a074b889047623c397f6948","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/group_conversation/iasip/Dennis.yaml"}},{"name":"Frank.yaml","path":"examples/eidolon_examples/group_conversation/iasip/Frank.yaml","sha":"66a03d3acc3bd12c6e0b11317d22119a28c4873f","size":422,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/group_conversation/iasip/Frank.yaml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/group_conversation/iasip/Frank.yaml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/66a03d3acc3bd12c6e0b11317d22119a28c4873f","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/eidolon_examples/group_conversation/iasip/Frank.yaml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/group_conversation/iasip/Frank.yaml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/66a03d3acc3bd12c6e0b11317d22119a28c4873f","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/group_conversation/iasip/Frank.yaml"}},{"name":"Mac.yaml","path":"examples/eidolon_examples/group_conversation/iasip/Mac.yaml","sha":"444325a730dff4a27edda79981f5c306b5081733","size":431,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/group_conversation/iasip/Mac.yaml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/group_conversation/iasip/Mac.yaml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/444325a730dff4a27edda79981f5c306b5081733","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/eidolon_examples/group_conversation/iasip/Mac.yaml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/group_conversation/iasip/Mac.yaml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/444325a730dff4a27edda79981f5c306b5081733","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/group_conversation/iasip/Mac.yaml"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:29:22 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E51A:2511E0:14F6A3:1E5D99:65D519B1
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4623'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '377'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/k8_monitor/resources?ref=main
  response:
    content: '[{"name":"K8Manager.yaml","path":"examples/eidolon_examples/k8_monitor/resources/K8Manager.yaml","sha":"fa7c5a5d86730037cb9032e7defb9f574557dbe9","size":1189,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/k8_monitor/resources/K8Manager.yaml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/k8_monitor/resources/K8Manager.yaml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/fa7c5a5d86730037cb9032e7defb9f574557dbe9","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/eidolon_examples/k8_monitor/resources/K8Manager.yaml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/k8_monitor/resources/K8Manager.yaml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/fa7c5a5d86730037cb9032e7defb9f574557dbe9","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/k8_monitor/resources/K8Manager.yaml"}},{"name":"K8Worker.yaml","path":"examples/eidolon_examples/k8_monitor/resources/K8Worker.yaml","sha":"3770fe441d0a881865756229f97720d4ae6f7fe1","size":1083,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/k8_monitor/resources/K8Worker.yaml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/k8_monitor/resources/K8Worker.yaml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/3770fe441d0a881865756229f97720d4ae6f7fe1","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/eidolon_examples/k8_monitor/resources/K8Worker.yaml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/k8_monitor/resources/K8Worker.yaml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/3770fe441d0a881865756229f97720d4ae6f7fe1","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/k8_monitor/resources/K8Worker.yaml"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:29:22 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E520:25923F:1DAD7A:2713EC:65D519B1
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4622'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '378'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/cpu/test_conversational_logic_unit.py
  response:
    content: "from contextlib import contextmanager\nfrom typing import Annotated\n\nimport
      pytest\nfrom fastapi import Body\nfrom pydantic import BaseModel\n\nfrom eidolon_ai_sdk.agent.agent
      import register_program, register_action, AgentState\nfrom eidolon_ai_sdk.agent_os
      import AgentOS\nfrom eidolon_ai_sdk.cpu.agents_logic_unit import (\n    AgentsLogicUnit,\n
      \   AgentsLogicUnitSpec,\n)\nfrom eidolon_ai_sdk.cpu.agent_call_history import
      AgentCallHistory\nfrom eidolon_ai_sdk.cpu.call_context import CallContext\nfrom
      eidolon_ai_sdk.io.events import SuccessEvent\n\n\nclass FooModel(BaseModel):\n
      \   foo: str\n    bar: dict\n\n\nclass Foo:\n    @register_program()\n    async
      def init(self, name: Annotated[str, Body(embed=True)]):\n        \"\"\"\n        init
      docs\n        \"\"\"\n        return AgentState(name=\"active\", data=\"initialized\")\n\n
      \   @register_action(\"active\")\n    async def progress_active(self, name:
      Annotated[str, Body()]) -> str:\n        pass\n\n    @register_action(\"idle\")\n
      \   async def progress_idle(self, name: FooModel) -> FooModel:\n        pass\n\n\nclass
      Bar:\n    @register_program()\n    async def init(self):\n        pass\n\n\n@pytest.fixture(scope=\"module\")\nasync
      def server(run_app):\n    async with run_app(Foo, Bar) as ra:\n        yield
      ra\n\n\n@pytest.fixture(scope=\"function\")\ndef conversational_logic_unit(server):\n
      \   @contextmanager\n    def fn(*agents):\n        unit = AgentsLogicUnit(\n
      \           spec=AgentsLogicUnitSpec(\n                tool_prefix=\"convo\",\n
      \               agents=[a.__name__ for a in agents],\n            ),\n            processing_unit_locator=None,\n
      \       )\n        yield unit\n\n    return fn\n\n\n@pytest.mark.asyncio\nasync
      def test_can_build_tools(conversational_logic_unit):\n    with conversational_logic_unit(Foo)
      as clu:\n        tools = await clu.build_tools(CallContext(process_id=\"pid\"))\n
      \       assert len(tools) == 1\n\n\n@pytest.mark.asyncio\nasync def test_builds_tools_from_other_messages(conversational_logic_unit):\n
      \   with conversational_logic_unit(Foo) as clu:\n        await AgentCallHistory(\n
      \           parent_process_id=\"parent_pid\",\n            parent_thread_id=None,\n
      \           machine=AgentOS.current_machine_url(),\n            agent=\"Foo\",\n
      \           remote_process_id=\"pid\",\n            state=\"idle\",\n            available_actions=[\"progress_active\",
      \"progress_idle\"],\n        ).upsert()\n        tools = await clu.build_tools(CallContext(process_id=\"parent_pid\"))\n
      \       assert len(tools) == 3\n\n\nasync def test_no_body(conversational_logic_unit):\n
      \   with conversational_logic_unit(Bar) as clu:\n        tools = await clu.build_tools(CallContext(process_id=\"not_pid\"))\n
      \       assert len(tools) == 1\n\n\nasync def test_docs(conversational_logic_unit):\n
      \   with conversational_logic_unit(Foo) as clu:\n        tools = await clu.build_tools(CallContext(process_id=\"parent_pid\"))\n
      \       assert tools[0].description(None, None) == \"init docs\"\n\n\nasync
      def test_multiple_calls(conversational_logic_unit):\n    with conversational_logic_unit(Foo)
      as clu:\n        for _ in range(3):\n            tools = await clu.build_tools(CallContext(process_id=\"parent_pid\"))\n
      \           output = {type(e) async for e in tools[0].fn(clu, body=dict(name=\"foo\"))}\n
      \           assert SuccessEvent in output\n"
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Length:
      - '979'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:29:22 GMT
      ETag:
      - W/"c673d084258874a1d2c94af65b81d32fe54abbab7d3d9582e18ce1124d18f716"
      Expires:
      - Tue, 20 Feb 2024 21:34:22 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - 20eab103939650cea822f198c188a258ffdb9870
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - FFB2:257E5B:B7763:10B15A:65D519B1
      X-Served-By:
      - cache-bfi-kbfi7400037-BFI
      X-Timer:
      - S1708464562.011763,VS0,VE133
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/getting_started/3_pluggable_resources?ref=main
  response:
    content: '[{"name":"frugal_cpu.yaml","path":"examples/eidolon_examples/getting_started/3_pluggable_resources/frugal_cpu.yaml","sha":"eca8fab036d87c6573b43626d20f6e33bad83b59","size":366,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/getting_started/3_pluggable_resources/frugal_cpu.yaml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/getting_started/3_pluggable_resources/frugal_cpu.yaml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/eca8fab036d87c6573b43626d20f6e33bad83b59","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/eidolon_examples/getting_started/3_pluggable_resources/frugal_cpu.yaml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/getting_started/3_pluggable_resources/frugal_cpu.yaml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/eca8fab036d87c6573b43626d20f6e33bad83b59","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/getting_started/3_pluggable_resources/frugal_cpu.yaml"}},{"name":"qa_agent.yaml","path":"examples/eidolon_examples/getting_started/3_pluggable_resources/qa_agent.yaml","sha":"92233a81b660d4d51663b45f68156c030f6a0788","size":198,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/getting_started/3_pluggable_resources/qa_agent.yaml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/getting_started/3_pluggable_resources/qa_agent.yaml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/92233a81b660d4d51663b45f68156c030f6a0788","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/eidolon_examples/getting_started/3_pluggable_resources/qa_agent.yaml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/getting_started/3_pluggable_resources/qa_agent.yaml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/92233a81b660d4d51663b45f68156c030f6a0788","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/getting_started/3_pluggable_resources/qa_agent.yaml"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:29:22 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E529:25886F:142861:1D8F4F:65D519B1
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4621'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '379'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/hello_world/resources?ref=main
  response:
    content: '[{"name":"ExampleAutoAgent.yaml","path":"examples/eidolon_examples/hello_world/resources/ExampleAutoAgent.yaml","sha":"9b7b9b3efbb2d238f8f4ca6f4d383b7db26f3b99","size":135,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/hello_world/resources/ExampleAutoAgent.yaml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/hello_world/resources/ExampleAutoAgent.yaml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/9b7b9b3efbb2d238f8f4ca6f4d383b7db26f3b99","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/eidolon_examples/hello_world/resources/ExampleAutoAgent.yaml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/hello_world/resources/ExampleAutoAgent.yaml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/9b7b9b3efbb2d238f8f4ca6f4d383b7db26f3b99","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/hello_world/resources/ExampleAutoAgent.yaml"}},{"name":"ExampleGenericAgent.yaml","path":"examples/eidolon_examples/hello_world/resources/ExampleGenericAgent.yaml","sha":"d22aa6ba05bca826271ee742513895e9b2081a4c","size":488,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/hello_world/resources/ExampleGenericAgent.yaml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/hello_world/resources/ExampleGenericAgent.yaml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/d22aa6ba05bca826271ee742513895e9b2081a4c","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/eidolon_examples/hello_world/resources/ExampleGenericAgent.yaml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/hello_world/resources/ExampleGenericAgent.yaml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/d22aa6ba05bca826271ee742513895e9b2081a4c","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/hello_world/resources/ExampleGenericAgent.yaml"}},{"name":"HelloWorldAgent.yaml","path":"examples/eidolon_examples/hello_world/resources/HelloWorldAgent.yaml","sha":"550bbb5621cb7043d619359a7c20fc15764f535a","size":124,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/hello_world/resources/HelloWorldAgent.yaml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/hello_world/resources/HelloWorldAgent.yaml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/550bbb5621cb7043d619359a7c20fc15764f535a","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/eidolon_examples/hello_world/resources/HelloWorldAgent.yaml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/hello_world/resources/HelloWorldAgent.yaml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/550bbb5621cb7043d619359a7c20fc15764f535a","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/hello_world/resources/HelloWorldAgent.yaml"}},{"name":"ImageAgent.yaml","path":"examples/eidolon_examples/hello_world/resources/ImageAgent.yaml","sha":"885804ef7df33ca2c1b2249fe6ded9b0749e51ba","size":865,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/hello_world/resources/ImageAgent.yaml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/hello_world/resources/ImageAgent.yaml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/885804ef7df33ca2c1b2249fe6ded9b0749e51ba","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/eidolon_examples/hello_world/resources/ImageAgent.yaml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/hello_world/resources/ImageAgent.yaml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/885804ef7df33ca2c1b2249fe6ded9b0749e51ba","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/hello_world/resources/ImageAgent.yaml"}},{"name":"OpenAiAssistantsAgent.yaml","path":"examples/eidolon_examples/hello_world/resources/OpenAiAssistantsAgent.yaml","sha":"2781fac862138a6c804dff7b30c466ed3dda447d","size":644,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/hello_world/resources/OpenAiAssistantsAgent.yaml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/hello_world/resources/OpenAiAssistantsAgent.yaml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/2781fac862138a6c804dff7b30c466ed3dda447d","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/eidolon_examples/hello_world/resources/OpenAiAssistantsAgent.yaml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/hello_world/resources/OpenAiAssistantsAgent.yaml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/2781fac862138a6c804dff7b30c466ed3dda447d","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/hello_world/resources/OpenAiAssistantsAgent.yaml"}},{"name":"SpeechAgent.yaml","path":"examples/eidolon_examples/hello_world/resources/SpeechAgent.yaml","sha":"0d4492bfbe9acee065fa56a62db390d79ccdac4f","size":528,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/hello_world/resources/SpeechAgent.yaml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/hello_world/resources/SpeechAgent.yaml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/0d4492bfbe9acee065fa56a62db390d79ccdac4f","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/eidolon_examples/hello_world/resources/SpeechAgent.yaml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/hello_world/resources/SpeechAgent.yaml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/0d4492bfbe9acee065fa56a62db390d79ccdac4f","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/hello_world/resources/SpeechAgent.yaml"}},{"name":"StateMachineAgent.yaml","path":"examples/eidolon_examples/hello_world/resources/StateMachineAgent.yaml","sha":"8d2eba47b31014d50bd682ac7f8ba93de3d65257","size":130,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/hello_world/resources/StateMachineAgent.yaml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/hello_world/resources/StateMachineAgent.yaml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/8d2eba47b31014d50bd682ac7f8ba93de3d65257","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/eidolon_examples/hello_world/resources/StateMachineAgent.yaml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/hello_world/resources/StateMachineAgent.yaml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/8d2eba47b31014d50bd682ac7f8ba93de3d65257","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/hello_world/resources/StateMachineAgent.yaml"}},{"name":"StreamTestAgent.yaml","path":"examples/eidolon_examples/hello_world/resources/StreamTestAgent.yaml","sha":"808f033448bf563c61c12961e341554a061bfa35","size":133,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/hello_world/resources/StreamTestAgent.yaml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/hello_world/resources/StreamTestAgent.yaml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/808f033448bf563c61c12961e341554a061bfa35","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/eidolon_examples/hello_world/resources/StreamTestAgent.yaml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/hello_world/resources/StreamTestAgent.yaml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/808f033448bf563c61c12961e341554a061bfa35","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/hello_world/resources/StreamTestAgent.yaml"}},{"name":"TreeOfThoughtsAgent.yaml","path":"examples/eidolon_examples/hello_world/resources/TreeOfThoughtsAgent.yaml","sha":"1f123c77a0374c2574601834fd99634846a65b7d","size":339,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/hello_world/resources/TreeOfThoughtsAgent.yaml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/hello_world/resources/TreeOfThoughtsAgent.yaml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/1f123c77a0374c2574601834fd99634846a65b7d","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/eidolon_examples/hello_world/resources/TreeOfThoughtsAgent.yaml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/hello_world/resources/TreeOfThoughtsAgent.yaml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/1f123c77a0374c2574601834fd99634846a65b7d","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/hello_world/resources/TreeOfThoughtsAgent.yaml"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:29:22 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E51F:24F1D0:15C5D3:1F2CD4:65D519B1
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4619'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '381'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/agent/retriever_docs?ref=main
  response:
    content: '[{"name":"bar","path":"sdk/tests/agent/retriever_docs/bar","sha":"d7fd9445df0af66972e23ff3b6c05a8ef90ce55f","size":310,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/agent/retriever_docs/bar?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/agent/retriever_docs/bar","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/d7fd9445df0af66972e23ff3b6c05a8ef90ce55f","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/agent/retriever_docs/bar","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/agent/retriever_docs/bar?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/d7fd9445df0af66972e23ff3b6c05a8ef90ce55f","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/agent/retriever_docs/bar"}},{"name":"baz","path":"sdk/tests/agent/retriever_docs/baz","sha":"6256a12c95bdd0f48b6f38e553433f54747097e0","size":391,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/agent/retriever_docs/baz?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/agent/retriever_docs/baz","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/6256a12c95bdd0f48b6f38e553433f54747097e0","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/agent/retriever_docs/baz","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/agent/retriever_docs/baz?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/6256a12c95bdd0f48b6f38e553433f54747097e0","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/agent/retriever_docs/baz"}},{"name":"boo","path":"sdk/tests/agent/retriever_docs/boo","sha":"4b44fe6f7b06882acc5208e3cb6d19dec1135e95","size":335,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/agent/retriever_docs/boo?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/agent/retriever_docs/boo","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/4b44fe6f7b06882acc5208e3cb6d19dec1135e95","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/agent/retriever_docs/boo","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/agent/retriever_docs/boo?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/4b44fe6f7b06882acc5208e3cb6d19dec1135e95","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/agent/retriever_docs/boo"}},{"name":"car","path":"sdk/tests/agent/retriever_docs/car","sha":"d7fd9445df0af66972e23ff3b6c05a8ef90ce55f","size":310,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/agent/retriever_docs/car?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/agent/retriever_docs/car","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/d7fd9445df0af66972e23ff3b6c05a8ef90ce55f","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/agent/retriever_docs/car","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/agent/retriever_docs/car?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/d7fd9445df0af66972e23ff3b6c05a8ef90ce55f","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/agent/retriever_docs/car"}},{"name":"caz","path":"sdk/tests/agent/retriever_docs/caz","sha":"6256a12c95bdd0f48b6f38e553433f54747097e0","size":391,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/agent/retriever_docs/caz?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/agent/retriever_docs/caz","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/6256a12c95bdd0f48b6f38e553433f54747097e0","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/agent/retriever_docs/caz","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/agent/retriever_docs/caz?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/6256a12c95bdd0f48b6f38e553433f54747097e0","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/agent/retriever_docs/caz"}},{"name":"coo","path":"sdk/tests/agent/retriever_docs/coo","sha":"4b44fe6f7b06882acc5208e3cb6d19dec1135e95","size":335,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/agent/retriever_docs/coo?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/agent/retriever_docs/coo","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/4b44fe6f7b06882acc5208e3cb6d19dec1135e95","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/agent/retriever_docs/coo","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/agent/retriever_docs/coo?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/4b44fe6f7b06882acc5208e3cb6d19dec1135e95","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/agent/retriever_docs/coo"}},{"name":"dar","path":"sdk/tests/agent/retriever_docs/dar","sha":"d7fd9445df0af66972e23ff3b6c05a8ef90ce55f","size":310,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/agent/retriever_docs/dar?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/agent/retriever_docs/dar","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/d7fd9445df0af66972e23ff3b6c05a8ef90ce55f","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/agent/retriever_docs/dar","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/agent/retriever_docs/dar?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/d7fd9445df0af66972e23ff3b6c05a8ef90ce55f","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/agent/retriever_docs/dar"}},{"name":"daz","path":"sdk/tests/agent/retriever_docs/daz","sha":"6256a12c95bdd0f48b6f38e553433f54747097e0","size":391,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/agent/retriever_docs/daz?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/agent/retriever_docs/daz","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/6256a12c95bdd0f48b6f38e553433f54747097e0","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/agent/retriever_docs/daz","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/agent/retriever_docs/daz?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/6256a12c95bdd0f48b6f38e553433f54747097e0","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/agent/retriever_docs/daz"}},{"name":"doo","path":"sdk/tests/agent/retriever_docs/doo","sha":"4b44fe6f7b06882acc5208e3cb6d19dec1135e95","size":335,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/agent/retriever_docs/doo?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/agent/retriever_docs/doo","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/4b44fe6f7b06882acc5208e3cb6d19dec1135e95","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/agent/retriever_docs/doo","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/agent/retriever_docs/doo?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/4b44fe6f7b06882acc5208e3cb6d19dec1135e95","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/agent/retriever_docs/doo"}},{"name":"ear","path":"sdk/tests/agent/retriever_docs/ear","sha":"d7fd9445df0af66972e23ff3b6c05a8ef90ce55f","size":310,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/agent/retriever_docs/ear?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/agent/retriever_docs/ear","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/d7fd9445df0af66972e23ff3b6c05a8ef90ce55f","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/agent/retriever_docs/ear","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/agent/retriever_docs/ear?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/d7fd9445df0af66972e23ff3b6c05a8ef90ce55f","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/agent/retriever_docs/ear"}},{"name":"eaz","path":"sdk/tests/agent/retriever_docs/eaz","sha":"6256a12c95bdd0f48b6f38e553433f54747097e0","size":391,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/agent/retriever_docs/eaz?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/agent/retriever_docs/eaz","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/6256a12c95bdd0f48b6f38e553433f54747097e0","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/agent/retriever_docs/eaz","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/agent/retriever_docs/eaz?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/6256a12c95bdd0f48b6f38e553433f54747097e0","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/agent/retriever_docs/eaz"}},{"name":"eoo","path":"sdk/tests/agent/retriever_docs/eoo","sha":"4b44fe6f7b06882acc5208e3cb6d19dec1135e95","size":335,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/agent/retriever_docs/eoo?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/agent/retriever_docs/eoo","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/4b44fe6f7b06882acc5208e3cb6d19dec1135e95","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/agent/retriever_docs/eoo","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/agent/retriever_docs/eoo?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/4b44fe6f7b06882acc5208e3cb6d19dec1135e95","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/agent/retriever_docs/eoo"}},{"name":"foo","path":"sdk/tests/agent/retriever_docs/foo","sha":"4b44fe6f7b06882acc5208e3cb6d19dec1135e95","size":335,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/agent/retriever_docs/foo?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/agent/retriever_docs/foo","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/4b44fe6f7b06882acc5208e3cb6d19dec1135e95","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/agent/retriever_docs/foo","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/agent/retriever_docs/foo?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/4b44fe6f7b06882acc5208e3cb6d19dec1135e95","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/agent/retriever_docs/foo"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:29:22 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E522:2535CB:18D941:224035:65D519B1
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4618'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '382'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/getting_started/4_defining_a_machine?ref=main
  response:
    content: '[{"name":"frugal_cpu.yaml","path":"examples/eidolon_examples/getting_started/4_defining_a_machine/frugal_cpu.yaml","sha":"3acfdd9e082f2fda845d5b17058ea95f5bae0cc0","size":362,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/getting_started/4_defining_a_machine/frugal_cpu.yaml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/getting_started/4_defining_a_machine/frugal_cpu.yaml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/3acfdd9e082f2fda845d5b17058ea95f5bae0cc0","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/eidolon_examples/getting_started/4_defining_a_machine/frugal_cpu.yaml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/getting_started/4_defining_a_machine/frugal_cpu.yaml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/3acfdd9e082f2fda845d5b17058ea95f5bae0cc0","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/getting_started/4_defining_a_machine/frugal_cpu.yaml"}},{"name":"machine.yaml","path":"examples/eidolon_examples/getting_started/4_defining_a_machine/machine.yaml","sha":"ba1a7f74e6a1b1b00de94abe5dbdfb103754a9c4","size":183,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/getting_started/4_defining_a_machine/machine.yaml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/getting_started/4_defining_a_machine/machine.yaml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/ba1a7f74e6a1b1b00de94abe5dbdfb103754a9c4","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/eidolon_examples/getting_started/4_defining_a_machine/machine.yaml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/getting_started/4_defining_a_machine/machine.yaml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/ba1a7f74e6a1b1b00de94abe5dbdfb103754a9c4","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/getting_started/4_defining_a_machine/machine.yaml"}},{"name":"qa_agent.yaml","path":"examples/eidolon_examples/getting_started/4_defining_a_machine/qa_agent.yaml","sha":"6084fb820c63f34e11b6da784154ccbff94a9e2c","size":196,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/getting_started/4_defining_a_machine/qa_agent.yaml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/getting_started/4_defining_a_machine/qa_agent.yaml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/6084fb820c63f34e11b6da784154ccbff94a9e2c","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/eidolon_examples/getting_started/4_defining_a_machine/qa_agent.yaml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/getting_started/4_defining_a_machine/qa_agent.yaml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/6084fb820c63f34e11b6da784154ccbff94a9e2c","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/getting_started/4_defining_a_machine/qa_agent.yaml"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:29:22 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E52A:25592D:153456:1E9A8A:65D519B1
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4616'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '384'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/builtins/logic_units/__init__.py
  response:
    content: ''
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:29:22 GMT
      ETag:
      - W/"938f66ede415ccb10764da47cd5f3cfc076c07b8791c708cfa8ec54982197c1f"
      Expires:
      - Tue, 20 Feb 2024 21:34:22 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - 27e5b7e4ada0c1acb85ad4487d8fe757ee35bd62
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - 3F6A:30F250:17E7F:217F6:65D519B1
      X-Served-By:
      - cache-bfi-kbfi7400021-BFI
      X-Timer:
      - S1708464562.031831,VS0,VE125
      X-XSS-Protection:
      - 1; mode=block
      transfer-encoding:
      - chunked
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/getting_started/1_agent_communication?ref=main
  response:
    content: '[{"name":"hello_world_agent.yaml","path":"examples/eidolon_examples/getting_started/1_agent_communication/hello_world_agent.yaml","sha":"f8e912dc71de047783b678b122f0d8d7c314dffd","size":400,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/getting_started/1_agent_communication/hello_world_agent.yaml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/getting_started/1_agent_communication/hello_world_agent.yaml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/f8e912dc71de047783b678b122f0d8d7c314dffd","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/eidolon_examples/getting_started/1_agent_communication/hello_world_agent.yaml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/getting_started/1_agent_communication/hello_world_agent.yaml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/f8e912dc71de047783b678b122f0d8d7c314dffd","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/getting_started/1_agent_communication/hello_world_agent.yaml"}},{"name":"qa_agent.yaml","path":"examples/eidolon_examples/getting_started/1_agent_communication/qa_agent.yaml","sha":"3b052cf277d038553391ec1166e90341bd07cb06","size":708,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/getting_started/1_agent_communication/qa_agent.yaml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/getting_started/1_agent_communication/qa_agent.yaml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/3b052cf277d038553391ec1166e90341bd07cb06","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/eidolon_examples/getting_started/1_agent_communication/qa_agent.yaml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/getting_started/1_agent_communication/qa_agent.yaml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/3b052cf277d038553391ec1166e90341bd07cb06","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/getting_started/1_agent_communication/qa_agent.yaml"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:29:22 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E524:256B07:1535B0:1E9C3E:65D519B1
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4620'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '380'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/agent/cassettes?ref=main
  response:
    content: '[{"name":"test_retriever_agent","path":"sdk/tests/agent/cassettes/test_retriever_agent","sha":"69f559788795adcf335334290518de66a4d7c64f","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/agent/cassettes/test_retriever_agent?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/sdk/tests/agent/cassettes/test_retriever_agent","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/69f559788795adcf335334290518de66a4d7c64f","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/agent/cassettes/test_retriever_agent?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/69f559788795adcf335334290518de66a4d7c64f","html":"https://github.com/eidolon-ai/eidolon/tree/main/sdk/tests/agent/cassettes/test_retriever_agent"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:29:22 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E51D:25382C:1531F6:1E9859:65D519B1
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4611'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '389'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/impl/__init__.py
  response:
    content: ''
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Length:
      - '0'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:29:22 GMT
      ETag:
      - W/"938f66ede415ccb10764da47cd5f3cfc076c07b8791c708cfa8ec54982197c1f"
      Expires:
      - Tue, 20 Feb 2024 21:34:22 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - d849e65a7fdf75c9851f9bda42b80f0cded58234
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - 8E3A:3B79:5EB9F5:7129FB:65D519B0
      X-Served-By:
      - cache-yvr1534-YVR
      X-Timer:
      - S1708464562.029239,VS0,VE126
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/cpu/llm?ref=main
  response:
    content: '[{"name":"__init__.py","path":"sdk/eidolon_ai_sdk/cpu/llm/__init__.py","sha":"e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/cpu/llm/__init__.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/cpu/llm/__init__.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/cpu/llm/__init__.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/cpu/llm/__init__.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/cpu/llm/__init__.py"}},{"name":"open_ai_llm_unit.py","path":"sdk/eidolon_ai_sdk/cpu/llm/open_ai_llm_unit.py","sha":"0ad39aefa74881870fcee9b54571e2dad8ea4c2a","size":12339,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/cpu/llm/open_ai_llm_unit.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/cpu/llm/open_ai_llm_unit.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/0ad39aefa74881870fcee9b54571e2dad8ea4c2a","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/cpu/llm/open_ai_llm_unit.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/cpu/llm/open_ai_llm_unit.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/0ad39aefa74881870fcee9b54571e2dad8ea4c2a","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/cpu/llm/open_ai_llm_unit.py"}},{"name":"open_ai_speech.py","path":"sdk/eidolon_ai_sdk/cpu/llm/open_ai_speech.py","sha":"a625b486ffcaceb68af030e87fb02e650c698888","size":2861,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/cpu/llm/open_ai_speech.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/cpu/llm/open_ai_speech.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/a625b486ffcaceb68af030e87fb02e650c698888","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/cpu/llm/open_ai_speech.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/cpu/llm/open_ai_speech.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/a625b486ffcaceb68af030e87fb02e650c698888","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/cpu/llm/open_ai_speech.py"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:29:22 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E525:2518A1:150277:1E6947:65D519B1
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4610'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '390'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/agent/doc_manager?ref=main
  response:
    content: '[{"name":"__init__.py","path":"sdk/tests/agent/doc_manager/__init__.py","sha":"e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/agent/doc_manager/__init__.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/agent/doc_manager/__init__.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/agent/doc_manager/__init__.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/agent/doc_manager/__init__.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/agent/doc_manager/__init__.py"}},{"name":"parsers","path":"sdk/tests/agent/doc_manager/parsers","sha":"15856bcd3f8d9ff69f45d048037acd063c065ac2","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/agent/doc_manager/parsers?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/sdk/tests/agent/doc_manager/parsers","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/15856bcd3f8d9ff69f45d048037acd063c065ac2","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/agent/doc_manager/parsers?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/15856bcd3f8d9ff69f45d048037acd063c065ac2","html":"https://github.com/eidolon-ai/eidolon/tree/main/sdk/tests/agent/doc_manager/parsers"}},{"name":"transformer","path":"sdk/tests/agent/doc_manager/transformer","sha":"8b9cd1ac2e0f290738977fd6eccc9cf2737678f6","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/agent/doc_manager/transformer?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/sdk/tests/agent/doc_manager/transformer","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/8b9cd1ac2e0f290738977fd6eccc9cf2737678f6","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/agent/doc_manager/transformer?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/8b9cd1ac2e0f290738977fd6eccc9cf2737678f6","html":"https://github.com/eidolon-ai/eidolon/tree/main/sdk/tests/agent/doc_manager/transformer"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:29:22 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E521:25626D:155681:1EBCE3:65D519B1
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4614'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '386'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/agent/doc_manager/__init__.py
  response:
    content: ''
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Length:
      - '0'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:29:22 GMT
      ETag:
      - W/"938f66ede415ccb10764da47cd5f3cfc076c07b8791c708cfa8ec54982197c1f"
      Expires:
      - Tue, 20 Feb 2024 21:34:22 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - 0072dee051270f10ea5e67f2f756c1e481653afb
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - 8320:3402:62C2EA:7533B2:65D519AF
      X-Served-By:
      - cache-yvr1531-YVR
      X-Timer:
      - S1708464562.027493,VS0,VE127
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/group_conversation/resources?ref=main
  response:
    content: '[{"name":"Alex.yaml","path":"examples/eidolon_examples/group_conversation/resources/Alex.yaml","sha":"e48a245ecb086032515a3031df3854bf0f7d4d96","size":527,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/group_conversation/resources/Alex.yaml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/group_conversation/resources/Alex.yaml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e48a245ecb086032515a3031df3854bf0f7d4d96","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/eidolon_examples/group_conversation/resources/Alex.yaml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/group_conversation/resources/Alex.yaml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e48a245ecb086032515a3031df3854bf0f7d4d96","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/group_conversation/resources/Alex.yaml"}},{"name":"Bob.yaml","path":"examples/eidolon_examples/group_conversation/resources/Bob.yaml","sha":"02352f92936fa9b342b6dbaaaf8edb3de400ee63","size":866,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/group_conversation/resources/Bob.yaml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/group_conversation/resources/Bob.yaml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/02352f92936fa9b342b6dbaaaf8edb3de400ee63","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/eidolon_examples/group_conversation/resources/Bob.yaml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/group_conversation/resources/Bob.yaml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/02352f92936fa9b342b6dbaaaf8edb3de400ee63","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/group_conversation/resources/Bob.yaml"}},{"name":"Chad.yaml","path":"examples/eidolon_examples/group_conversation/resources/Chad.yaml","sha":"3b2dd40455cf1f06e05ea4667ce360cbe549de37","size":707,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/group_conversation/resources/Chad.yaml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/group_conversation/resources/Chad.yaml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/3b2dd40455cf1f06e05ea4667ce360cbe549de37","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/eidolon_examples/group_conversation/resources/Chad.yaml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/group_conversation/resources/Chad.yaml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/3b2dd40455cf1f06e05ea4667ce360cbe549de37","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/group_conversation/resources/Chad.yaml"}},{"name":"Coordinator.yaml","path":"examples/eidolon_examples/group_conversation/resources/Coordinator.yaml","sha":"51cbc021c558cfd668d43208eccd92f5d3849039","size":228,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/group_conversation/resources/Coordinator.yaml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/group_conversation/resources/Coordinator.yaml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/51cbc021c558cfd668d43208eccd92f5d3849039","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/eidolon_examples/group_conversation/resources/Coordinator.yaml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/group_conversation/resources/Coordinator.yaml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/51cbc021c558cfd668d43208eccd92f5d3849039","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/group_conversation/resources/Coordinator.yaml"}},{"name":"Fred.yaml","path":"examples/eidolon_examples/group_conversation/resources/Fred.yaml","sha":"11748578e442a59ad3c1120f9477abc422cd158b","size":547,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/group_conversation/resources/Fred.yaml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/group_conversation/resources/Fred.yaml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/11748578e442a59ad3c1120f9477abc422cd158b","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/eidolon_examples/group_conversation/resources/Fred.yaml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/group_conversation/resources/Fred.yaml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/11748578e442a59ad3c1120f9477abc422cd158b","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/group_conversation/resources/Fred.yaml"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:29:22 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E51E:257FF1:16177A:1F7DFC:65D519B1
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4612'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '388'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/group_conversation/python_coder?ref=main
  response:
    content: '[{"name":"CodeCritique.yaml","path":"examples/eidolon_examples/group_conversation/python_coder/CodeCritique.yaml","sha":"e4c07675f3c8ae21eb2f4912849aa95c063760f1","size":809,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/group_conversation/python_coder/CodeCritique.yaml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/group_conversation/python_coder/CodeCritique.yaml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e4c07675f3c8ae21eb2f4912849aa95c063760f1","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/eidolon_examples/group_conversation/python_coder/CodeCritique.yaml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/group_conversation/python_coder/CodeCritique.yaml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e4c07675f3c8ae21eb2f4912849aa95c063760f1","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/group_conversation/python_coder/CodeCritique.yaml"}},{"name":"CommunityChameleon.yaml","path":"examples/eidolon_examples/group_conversation/python_coder/CommunityChameleon.yaml","sha":"cf2544697bb8c0d9239f4555baa158c807d4c00e","size":827,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/group_conversation/python_coder/CommunityChameleon.yaml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/group_conversation/python_coder/CommunityChameleon.yaml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/cf2544697bb8c0d9239f4555baa158c807d4c00e","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/eidolon_examples/group_conversation/python_coder/CommunityChameleon.yaml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/group_conversation/python_coder/CommunityChameleon.yaml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/cf2544697bb8c0d9239f4555baa158c807d4c00e","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/group_conversation/python_coder/CommunityChameleon.yaml"}},{"name":"DebubbingDog.yaml","path":"examples/eidolon_examples/group_conversation/python_coder/DebubbingDog.yaml","sha":"f5af4fbf5899e9209039ec68701ee04b12605281","size":780,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/group_conversation/python_coder/DebubbingDog.yaml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/group_conversation/python_coder/DebubbingDog.yaml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/f5af4fbf5899e9209039ec68701ee04b12605281","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/eidolon_examples/group_conversation/python_coder/DebubbingDog.yaml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/group_conversation/python_coder/DebubbingDog.yaml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/f5af4fbf5899e9209039ec68701ee04b12605281","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/group_conversation/python_coder/DebubbingDog.yaml"}},{"name":"GameMaster.yaml","path":"examples/eidolon_examples/group_conversation/python_coder/GameMaster.yaml","sha":"484b6cdd8b735b9e3d7decd1aee1d459c3e78477","size":1370,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/group_conversation/python_coder/GameMaster.yaml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/group_conversation/python_coder/GameMaster.yaml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/484b6cdd8b735b9e3d7decd1aee1d459c3e78477","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/eidolon_examples/group_conversation/python_coder/GameMaster.yaml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/group_conversation/python_coder/GameMaster.yaml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/484b6cdd8b735b9e3d7decd1aee1d459c3e78477","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/group_conversation/python_coder/GameMaster.yaml"}},{"name":"LogicLynx.yaml","path":"examples/eidolon_examples/group_conversation/python_coder/LogicLynx.yaml","sha":"a5e144e7836c4efd82795df5c04d8c009d7841b1","size":721,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/group_conversation/python_coder/LogicLynx.yaml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/group_conversation/python_coder/LogicLynx.yaml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/a5e144e7836c4efd82795df5c04d8c009d7841b1","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/eidolon_examples/group_conversation/python_coder/LogicLynx.yaml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/group_conversation/python_coder/LogicLynx.yaml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/a5e144e7836c4efd82795df5c04d8c009d7841b1","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/group_conversation/python_coder/LogicLynx.yaml"}},{"name":"PerformanceParrot.yaml","path":"examples/eidolon_examples/group_conversation/python_coder/PerformanceParrot.yaml","sha":"dd54e8a75d5a43630070a8caf297de8e81e15a45","size":792,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/group_conversation/python_coder/PerformanceParrot.yaml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/group_conversation/python_coder/PerformanceParrot.yaml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/dd54e8a75d5a43630070a8caf297de8e81e15a45","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/eidolon_examples/group_conversation/python_coder/PerformanceParrot.yaml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/group_conversation/python_coder/PerformanceParrot.yaml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/dd54e8a75d5a43630070a8caf297de8e81e15a45","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/group_conversation/python_coder/PerformanceParrot.yaml"}},{"name":"ResourceRabbit.yaml","path":"examples/eidolon_examples/group_conversation/python_coder/ResourceRabbit.yaml","sha":"74856677c2a421ffc04ec9e3f788399ce2896300","size":770,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/group_conversation/python_coder/ResourceRabbit.yaml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/group_conversation/python_coder/ResourceRabbit.yaml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/74856677c2a421ffc04ec9e3f788399ce2896300","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/eidolon_examples/group_conversation/python_coder/ResourceRabbit.yaml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/group_conversation/python_coder/ResourceRabbit.yaml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/74856677c2a421ffc04ec9e3f788399ce2896300","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/group_conversation/python_coder/ResourceRabbit.yaml"}},{"name":"SyntaxSquirrel.yaml","path":"examples/eidolon_examples/group_conversation/python_coder/SyntaxSquirrel.yaml","sha":"99bc477222d59c9fb4acaea461f0a992574dd186","size":1032,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/group_conversation/python_coder/SyntaxSquirrel.yaml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/group_conversation/python_coder/SyntaxSquirrel.yaml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/99bc477222d59c9fb4acaea461f0a992574dd186","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/eidolon_examples/group_conversation/python_coder/SyntaxSquirrel.yaml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/group_conversation/python_coder/SyntaxSquirrel.yaml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/99bc477222d59c9fb4acaea461f0a992574dd186","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/group_conversation/python_coder/SyntaxSquirrel.yaml"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:29:22 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E51C:25360F:14C6A6:1E2D07:65D519B1
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4615'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '385'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/swifties/resources?ref=main
  response:
    content: '[{"name":"TaylorPR.yaml","path":"examples/eidolon_examples/swifties/resources/TaylorPR.yaml","sha":"67b9f3afc6e6ef8ee6f7b526f91cdaf67049de93","size":1802,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/swifties/resources/TaylorPR.yaml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/swifties/resources/TaylorPR.yaml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/67b9f3afc6e6ef8ee6f7b526f91cdaf67049de93","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/eidolon_examples/swifties/resources/TaylorPR.yaml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/swifties/resources/TaylorPR.yaml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/67b9f3afc6e6ef8ee6f7b526f91cdaf67049de93","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/swifties/resources/TaylorPR.yaml"}},{"name":"Topicality.yaml","path":"examples/eidolon_examples/swifties/resources/Topicality.yaml","sha":"005ca568a3868b462edae46643720d80fdfc51a1","size":2253,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/swifties/resources/Topicality.yaml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/swifties/resources/Topicality.yaml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/005ca568a3868b462edae46643720d80fdfc51a1","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/eidolon_examples/swifties/resources/Topicality.yaml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/swifties/resources/Topicality.yaml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/005ca568a3868b462edae46643720d80fdfc51a1","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/swifties/resources/Topicality.yaml"}},{"name":"TravisKelceExpert.yaml","path":"examples/eidolon_examples/swifties/resources/TravisKelceExpert.yaml","sha":"08e496b0fa56e01086ed54f2acdce87b78431493","size":1495,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/swifties/resources/TravisKelceExpert.yaml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/swifties/resources/TravisKelceExpert.yaml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/08e496b0fa56e01086ed54f2acdce87b78431493","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/eidolon_examples/swifties/resources/TravisKelceExpert.yaml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/swifties/resources/TravisKelceExpert.yaml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/08e496b0fa56e01086ed54f2acdce87b78431493","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/swifties/resources/TravisKelceExpert.yaml"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:29:22 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E51B:260C59:13817D:1C45FB:65D519B1
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4613'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '387'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/content/docs/architecture?ref=main
  response:
    content: '[{"name":"agent_cpu.md","path":"docs/src/content/docs/architecture/agent_cpu.md","sha":"23cddb104c377b1a005eef66ccd77b2eceb22988","size":15641,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/content/docs/architecture/agent_cpu.md?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/docs/src/content/docs/architecture/agent_cpu.md","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/23cddb104c377b1a005eef66ccd77b2eceb22988","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/docs/src/content/docs/architecture/agent_cpu.md","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/content/docs/architecture/agent_cpu.md?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/23cddb104c377b1a005eef66ccd77b2eceb22988","html":"https://github.com/eidolon-ai/eidolon/blob/main/docs/src/content/docs/architecture/agent_cpu.md"}},{"name":"agent_os.md","path":"docs/src/content/docs/architecture/agent_os.md","sha":"cf84739f146d589237b9b2cdeb75ae41bd440448","size":12099,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/content/docs/architecture/agent_os.md?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/docs/src/content/docs/architecture/agent_os.md","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/cf84739f146d589237b9b2cdeb75ae41bd440448","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/docs/src/content/docs/architecture/agent_os.md","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/content/docs/architecture/agent_os.md?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/cf84739f146d589237b9b2cdeb75ae41bd440448","html":"https://github.com/eidolon-ai/eidolon/blob/main/docs/src/content/docs/architecture/agent_os.md"}},{"name":"agent_program.md","path":"docs/src/content/docs/architecture/agent_program.md","sha":"4e59d07dfd3483b7817417d3cb8aff1bd9a39767","size":12444,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/content/docs/architecture/agent_program.md?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/docs/src/content/docs/architecture/agent_program.md","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/4e59d07dfd3483b7817417d3cb8aff1bd9a39767","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/docs/src/content/docs/architecture/agent_program.md","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/content/docs/architecture/agent_program.md?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/4e59d07dfd3483b7817417d3cb8aff1bd9a39767","html":"https://github.com/eidolon-ai/eidolon/blob/main/docs/src/content/docs/architecture/agent_program.md"}},{"name":"conclusion.md","path":"docs/src/content/docs/architecture/conclusion.md","sha":"d647b8113743e1794a648371c9e1370637c9cb72","size":4263,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/content/docs/architecture/conclusion.md?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/docs/src/content/docs/architecture/conclusion.md","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/d647b8113743e1794a648371c9e1370637c9cb72","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/docs/src/content/docs/architecture/conclusion.md","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/content/docs/architecture/conclusion.md?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/d647b8113743e1794a648371c9e1370637c9cb72","html":"https://github.com/eidolon-ai/eidolon/blob/main/docs/src/content/docs/architecture/conclusion.md"}},{"name":"fundamentals.md","path":"docs/src/content/docs/architecture/fundamentals.md","sha":"737572e2e69a83706eef9029aa772be2e3fffcda","size":4425,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/content/docs/architecture/fundamentals.md?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/docs/src/content/docs/architecture/fundamentals.md","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/737572e2e69a83706eef9029aa772be2e3fffcda","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/docs/src/content/docs/architecture/fundamentals.md","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/content/docs/architecture/fundamentals.md?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/737572e2e69a83706eef9029aa772be2e3fffcda","html":"https://github.com/eidolon-ai/eidolon/blob/main/docs/src/content/docs/architecture/fundamentals.md"}},{"name":"introduction.md","path":"docs/src/content/docs/architecture/introduction.md","sha":"29cb92dbaeecd7cc652a0b43e207f7d84e27040b","size":832,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/content/docs/architecture/introduction.md?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/docs/src/content/docs/architecture/introduction.md","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/29cb92dbaeecd7cc652a0b43e207f7d84e27040b","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/docs/src/content/docs/architecture/introduction.md","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/content/docs/architecture/introduction.md?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/29cb92dbaeecd7cc652a0b43e207f7d84e27040b","html":"https://github.com/eidolon-ai/eidolon/blob/main/docs/src/content/docs/architecture/introduction.md"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:29:22 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E531:2557D8:16E76C:204E42:65D519B2
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4609'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '391'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/getting_started/2_custom_agents?ref=main
  response:
    content: '[{"name":"__init__.py","path":"examples/eidolon_examples/getting_started/2_custom_agents/__init__.py","sha":"e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/getting_started/2_custom_agents/__init__.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/getting_started/2_custom_agents/__init__.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/eidolon_examples/getting_started/2_custom_agents/__init__.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/getting_started/2_custom_agents/__init__.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/getting_started/2_custom_agents/__init__.py"}},{"name":"hello_world.py","path":"examples/eidolon_examples/getting_started/2_custom_agents/hello_world.py","sha":"2d14bbcaeaf3bfcec769d595cbb40a4c2ee01261","size":634,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/getting_started/2_custom_agents/hello_world.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/getting_started/2_custom_agents/hello_world.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/2d14bbcaeaf3bfcec769d595cbb40a4c2ee01261","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/eidolon_examples/getting_started/2_custom_agents/hello_world.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/getting_started/2_custom_agents/hello_world.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/2d14bbcaeaf3bfcec769d595cbb40a4c2ee01261","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/getting_started/2_custom_agents/hello_world.py"}},{"name":"qa.py","path":"examples/eidolon_examples/getting_started/2_custom_agents/qa.py","sha":"a570b38d7ef8b8e0490262307b229493d7111dc9","size":2146,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/getting_started/2_custom_agents/qa.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/getting_started/2_custom_agents/qa.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/a570b38d7ef8b8e0490262307b229493d7111dc9","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/eidolon_examples/getting_started/2_custom_agents/qa.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/getting_started/2_custom_agents/qa.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/a570b38d7ef8b8e0490262307b229493d7111dc9","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/getting_started/2_custom_agents/qa.py"}},{"name":"resources","path":"examples/eidolon_examples/getting_started/2_custom_agents/resources","sha":"82ad701e310f20cdcb577f2ba4c53bf5b6ea5294","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/getting_started/2_custom_agents/resources?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/examples/eidolon_examples/getting_started/2_custom_agents/resources","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/82ad701e310f20cdcb577f2ba4c53bf5b6ea5294","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/getting_started/2_custom_agents/resources?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/82ad701e310f20cdcb577f2ba4c53bf5b6ea5294","html":"https://github.com/eidolon-ai/eidolon/tree/main/examples/eidolon_examples/getting_started/2_custom_agents/resources"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:29:22 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E527:3A0B33:2F57:3EB5:65D519B1
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4617'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '383'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/impl/test_messsage_summarizer.py
  response:
    content: ''
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Length:
      - '0'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:29:22 GMT
      ETag:
      - W/"938f66ede415ccb10764da47cd5f3cfc076c07b8791c708cfa8ec54982197c1f"
      Expires:
      - Tue, 20 Feb 2024 21:34:22 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - 1735a4031936bc560e392e23faa0fca0026220d5
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - 2E36:51C0:59EECA:6C964A:65D519B1
      X-Served-By:
      - cache-yvr1526-YVR
      X-Timer:
      - S1708464562.049330,VS0,VE121
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/impl/test_local_symbolic_memory.py
  response:
    content: "import pytest\nfrom pymongo.errors import DuplicateKeyError\n\nfrom
      eidolon_ai_sdk.memory.local_symbolic_memory import LocalSymbolicMemory\n\n\n@pytest.fixture\nasync
      def memory():\n    # Setup memory instance\n    mem = LocalSymbolicMemory()\n
      \   await mem.start()\n    yield mem\n    # Teardown memory instance\n    await
      mem.stop()\n\n\nclass TestLocalSymbolicMemory:\n    def test_start(self, memory):\n
      \       assert LocalSymbolicMemory.db == {}, \"Database should be initialized
      as an empty dictionary.\"\n\n    async def test_stop(self, memory):\n        LocalSymbolicMemory.db[\"test\"]
      = \"value\"\n        await memory.stop()\n        assert LocalSymbolicMemory.db
      == {}, \"Database should be cleared after stop.\"\n\n    @pytest.mark.asyncio\n
      \   async def test_insert_one(self, memory):\n        await memory.insert_one(\"collection\",
      {\"key\": \"value\"})\n        assert \"collection\" in LocalSymbolicMemory.db\n
      \       collection_ = LocalSymbolicMemory.db[\"collection\"][0]\n        assert
      collection_.pop(\"_id\")\n        assert collection_ == {\"key\": \"value\"}\n\n
      \   @pytest.mark.asyncio\n    async def test_insert(self, memory):\n        documents
      = [{\"key1\": \"value1\"}, {\"key2\": \"value2\"}]\n        await memory.insert(\"collection\",
      documents)\n        assert len(LocalSymbolicMemory.db[\"collection\"]) == 2\n\n
      \   # ... more tests for the rest of the CRUD operations ...\n\n    @pytest.mark.asyncio\n
      \   async def test_matches_query_simple(self, memory):\n        await memory.insert_one(\"collection\",
      {\"key\": \"value\"})\n        result = await memory.find_one(\"collection\",
      {\"key\": \"value\"})\n        assert result.pop(\"_id\")\n        assert result
      == {\"key\": \"value\"}\n\n    @pytest.mark.asyncio\n    async def test_matches_query_complex(self,
      memory):\n        document = {\n            \"name\": \"John\",\n            \"age\":
      30,\n            \"address\": {\"city\": \"New York\", \"zip\": \"10001\"},\n
      \       }\n        query = {\"name\": \"John\", \"address\": {\"city\": \"New
      York\"}}\n        await memory.insert_one(\"collection\", document)\n        result
      = await memory.find_one(\"collection\", query)\n        assert result.pop(\"_id\")\n
      \       assert result == document\n\n    # Tests for MongoDB-like query operations\n
      \   @pytest.mark.asyncio\n    async def test_matches_query_with_operators(self,
      memory):\n        document = {\"age\": 25}\n        await memory.insert_one(\"collection\",
      document)\n        # The LocalSymbolicMemory class does not support MongoDB-like
      query operators\n        # so we cannot test for them\n\n    # Tests for upsert
      operations\n    @pytest.mark.asyncio\n    async def test_upsert_one_existing(self,
      memory):\n        await memory.insert_one(\n            \"collection\", {\"_id\":
      \"1\", \"key\": \"value\", \"counter\": 1, \"updated\": \"2022-01-01T00:00:00\"}\n
      \       )\n        update = {\"_id\": \"1\", \"key\": \"value\", \"counter\":
      2, \"updated\": \"2022-01-01T00:00:00\"}\n        await memory.upsert_one(\"collection\",
      update, {\"_id\": \"1\", \"updated\": \"2022-01-01T00:00:00\"})\n        result
      = await memory.find_one(\"collection\", {\"_id\": \"1\"})\n        assert result
      == update\n\n    @pytest.mark.asyncio\n    async def test_upsert_one_new(self,
      memory):\n        await memory.upsert_one(\n            \"collection\", {\"_id\":
      \"2\", \"key\": \"new_value\", \"updated\": \"2022-01-01T00:00:00\"}, {\"_id\":
      \"non_existing\"}\n        )\n        result = await memory.find_one(\"collection\",
      {\"_id\": \"2\"})\n        assert result == {\"_id\": \"2\", \"key\": \"new_value\",
      \"updated\": \"2022-01-01T00:00:00\"}\n\n    @pytest.mark.asyncio\n    async
      def test_upsert_one_duplicate_id(self, memory):\n        await memory.insert_one(\"collection\",
      {\"_id\": \"3\", \"key\": \"value\", \"updated\": \"2022-01-01T00:00:00\"})\n
      \       with pytest.raises(DuplicateKeyError):\n            await memory.upsert_one(\n
      \               \"collection\", {\"_id\": \"3\", \"key\": \"new_value\", \"updated\":
      \"2022-01-01T00:00:00\"}, {\"_id\": \"non_existing\"}\n            )\n\n    @pytest.mark.asyncio\n
      \   async def test_upsert_one_updated_since_read(self, memory):\n        await
      memory.insert_one(\"collection\", {\"_id\": \"4\", \"key\": \"value\", \"updated\":
      \"2022-01-01T00:00:00\"})\n        with pytest.raises(DuplicateKeyError):\n
      \           await memory.upsert_one(\n                \"collection\", {\"_id\":
      \"4\"}, {\"key\": \"updated_value\", \"updated\": \"2022-01-02T00:00:00\"}\n
      \           )\n"
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Length:
      - '955'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:29:22 GMT
      ETag:
      - W/"aa66ac2bd39e73c580885dbc95469a1e44b8dc7daf7b77fffe247cd7f081f6a4"
      Expires:
      - Tue, 20 Feb 2024 21:34:22 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - c2abae83bad987818051a4bf2f588bf0d79faa3a
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - CC06:254203:B5C53:109676:65D519B1
      X-Served-By:
      - cache-bfi-kbfi7400055-BFI
      X-Timer:
      - S1708464562.053968,VS0,VE127
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/memory/agent_memory.py
  response:
    content: "from eidolon_ai_sdk.memory.file_memory import FileMemory\nfrom eidolon_ai_sdk.memory.semantic_memory
      import SymbolicMemory\nfrom eidolon_ai_sdk.memory.similarity_memory import SimilarityMemory\n\n\nclass
      AgentMemory:\n    file_memory: FileMemory\n    symbolic_memory: SymbolicMemory\n
      \   similarity_memory: SimilarityMemory\n\n    def __init__(\n        self,\n
      \       file_memory: FileMemory = None,\n        symbolic_memory: SymbolicMemory
      = None,\n        similarity_memory: SimilarityMemory = None,\n    ):\n        self.file_memory
      = file_memory\n        self.symbolic_memory = symbolic_memory\n        self.similarity_memory
      = similarity_memory\n\n    async def start(self):\n        if self.file_memory:\n
      \           await self.file_memory.start()\n        if self.symbolic_memory:\n
      \           await self.symbolic_memory.start()\n        if self.similarity_memory:\n
      \           await self.similarity_memory.start()\n\n    async def stop(self):\n
      \       if self.file_memory:\n            await self.file_memory.stop()\n        if
      self.symbolic_memory:\n            await self.symbolic_memory.stop()\n        if
      self.similarity_memory:\n            await self.similarity_memory.stop()\n"
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Length:
      - '274'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:29:22 GMT
      ETag:
      - W/"1d18912b8089cd69274479097eaae10455a78c0fe0271cf9d27ef4fcc665a158"
      Expires:
      - Tue, 20 Feb 2024 21:34:22 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - 46397cf7133472f2db4be76f9fc1065b8b8f6b91
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - DFEE:71E3:771B7:90298:65D519B0
      X-Served-By:
      - cache-yvr1524-YVR
      X-Timer:
      - S1708464562.028672,VS0,VE152
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/memory/__init__.py
  response:
    content: ''
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:29:22 GMT
      ETag:
      - W/"938f66ede415ccb10764da47cd5f3cfc076c07b8791c708cfa8ec54982197c1f"
      Expires:
      - Tue, 20 Feb 2024 21:34:22 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - 1f413c357422302d1d4f5e73395f380078e24a51
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - 5D26:254203:B5C53:109675:65D519AF
      X-Served-By:
      - cache-bfi-kbfi7400065-BFI
      X-Timer:
      - S1708464562.035466,VS0,VE155
      X-XSS-Protection:
      - 1; mode=block
      transfer-encoding:
      - chunked
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/agent/doc_manager/document_manager.py
  response:
    content: "import asyncio\nimport logging\nimport time\nfrom pydantic import BaseModel,
      Field\nfrom typing import List\n\nfrom eidolon_ai_sdk.agent.doc_manager.loaders.base_loader
      import DocumentLoader, FileInfo\nfrom eidolon_ai_sdk.agent.doc_manager.parsers.base_parser
      import DocumentParser\nfrom eidolon_ai_sdk.agent.doc_manager.transformer.document_transformer
      import DocumentTransformer\nfrom eidolon_ai_sdk.agent_os import AgentOS\nfrom
      eidolon_ai_sdk.system.reference_model import Specable, AnnotatedReference\n\n\nclass
      SearchResult(BaseModel):\n    \"\"\"\n    A search result is a snippet of the
      document that matched the query\n    \"\"\"\n\n    file_name: str = Field(description=\"The
      name of the file\")\n    document_snippet: str = Field(description=\"A snippet
      of the document that matched the query\")\n\n\nclass DocumentDirectory(BaseModel):\n
      \   \"\"\"\n    A package is a collection of python files.\n    \"\"\"\n\n    directory:
      str = Field(description=\"The name of the directory\")\n    files: List[str]
      = Field(description=\"The files that make up the package\")\n\n\nclass DocumentManagerSpec(BaseModel):\n
      \   name: str\n    recheck_frequency: int = Field(default=60, description=\"The
      number of seconds between checks.\")\n    loader: AnnotatedReference[DocumentLoader]\n
      \   parser: AnnotatedReference[DocumentParser]\n    splitter: AnnotatedReference[DocumentTransformer]\n\n\nclass
      DocumentManager(Specable[DocumentManagerSpec]):\n    last_reload = 0\n\n    def
      __init__(self, **kwargs):\n        super().__init__(**kwargs)\n        Specable.__init__(self,
      **kwargs)\n        self.loader = self.spec.loader.instantiate()\n        self.loader.name
      = self.spec.name\n        self.parser = self.spec.parser.instantiate()\n        self.splitter
      = self.spec.splitter.instantiate()\n        self.logger = logging.getLogger(\"eidolon\")\n
      \       self.collection_name = f\"doc_sync_{self.spec.name}\"\n\n    async def
      _addFile(self, file_info: FileInfo):\n        try:\n            parsedDocs =
      list(self.parser.parse(file_info.data))\n            docs = list(self.splitter.transform_documents(parsedDocs))\n
      \           await AgentOS.symbolic_memory.insert_one(\n                self.collection_name,\n
      \               {\n                    \"file_path\": file_info.path,\n                    \"data\":
      file_info.metadata,\n                    \"doc_ids\": [doc.id for doc in docs],\n
      \               },\n            )\n            if len(docs) == 0:\n                self.logger.warning(f\"File
      contained no text {file_info.path}\")\n                return\n            await
      AgentOS.similarity_memory.vector_store.add(f\"doc_contents_{self.spec.name}\",
      docs)\n            self.logger.info(f\"Added file {file_info.path}\")\n        except
      Exception as e:\n            self.logger.warning(f\"Failed to parse file {file_info.path}:
      {e}\")\n\n    async def _removeFile(self, path: str):\n        # get the doc
      ids for the file\n        file_info = await AgentOS.symbolic_memory.find_one(self.collection_name,
      {\"file_path\": path})\n        if file_info is not None:\n            doc_ids
      = file_info[\"doc_ids\"]\n            await AgentOS.similarity_memory.vector_store.delete(f\"doc_contents_{self.spec.name}\",
      doc_ids)\n            await AgentOS.symbolic_memory.delete(self.collection_name,
      {\"file_path\": path})\n\n    async def _replaceFile(self, file_info: FileInfo):\n
      \       await self._removeFile(file_info.path)\n        await self._addFile(file_info)\n\n
      \   async def list_files(self):\n        return self.loader.list_files()\n\n
      \   async def sync_docs(self, force: bool = False):\n        if force or self.last_reload
      + self.spec.recheck_frequency < time.time():\n            self.last_reload =
      time.time()\n            data = {}\n            async for file in AgentOS.symbolic_memory.find(self.collection_name,
      {}):\n                data[file[\"file_path\"]] = file[\"data\"]\n\n            self.logger.info(f\"Found
      {len(data)} files in symbolic memory\")\n\n            ret = await self.loader.get_changes(data)\n
      \           await asyncio.gather(\n                *[self._addFile(file_info)
      async for file_info in ret.added_files],\n                *[self._replaceFile(file_info)
      async for file_info in ret.modified_files],\n                *[self._removeFile(file_path)
      async for file_path in ret.removed_files],\n            )\n            self.last_reload
      = time.time()\n"
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Length:
      - '1294'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:29:22 GMT
      ETag:
      - W/"96bbce3507f0456004e5ea2f90488b9e40f545cba8d9d2eac725ef05f49f092c"
      Expires:
      - Tue, 20 Feb 2024 21:34:22 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - d95180cf7edd8a3d1dc0d1aa02387980baaf746f
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - A41A:48D4:5B94A3:6E1DCD:65D519B0
      X-Served-By:
      - cache-yvr1525-YVR
      X-Timer:
      - S1708464562.050278,VS0,VE138
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/doc_manager/loaders?ref=main
  response:
    content: '[{"name":"__init__.py","path":"sdk/eidolon_ai_sdk/agent/doc_manager/loaders/__init__.py","sha":"e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/doc_manager/loaders/__init__.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/doc_manager/loaders/__init__.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/agent/doc_manager/loaders/__init__.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/doc_manager/loaders/__init__.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/doc_manager/loaders/__init__.py"}},{"name":"base_loader.py","path":"sdk/eidolon_ai_sdk/agent/doc_manager/loaders/base_loader.py","sha":"948d9e7d4066b33ad8e6d5a0567087fd7b86052a","size":905,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/doc_manager/loaders/base_loader.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/doc_manager/loaders/base_loader.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/948d9e7d4066b33ad8e6d5a0567087fd7b86052a","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/agent/doc_manager/loaders/base_loader.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/doc_manager/loaders/base_loader.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/948d9e7d4066b33ad8e6d5a0567087fd7b86052a","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/doc_manager/loaders/base_loader.py"}},{"name":"filesystem_loader.py","path":"sdk/eidolon_ai_sdk/agent/doc_manager/loaders/filesystem_loader.py","sha":"0f9aa2cce567563eb1010be123fe07b15d6ba8dd","size":3773,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/doc_manager/loaders/filesystem_loader.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/doc_manager/loaders/filesystem_loader.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/0f9aa2cce567563eb1010be123fe07b15d6ba8dd","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/agent/doc_manager/loaders/filesystem_loader.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/doc_manager/loaders/filesystem_loader.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/0f9aa2cce567563eb1010be123fe07b15d6ba8dd","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/doc_manager/loaders/filesystem_loader.py"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:29:22 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E532:2524E4:15E238:1F4900:65D519B2
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4608'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '392'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/content/docs/getting_started?ref=main
  response:
    content: '[{"name":"quickstart.md","path":"docs/src/content/docs/getting_started/quickstart.md","sha":"e63eea5a7b8bdf12b42ccdf98aa9c354e09f8617","size":2212,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/content/docs/getting_started/quickstart.md?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/docs/src/content/docs/getting_started/quickstart.md","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e63eea5a7b8bdf12b42ccdf98aa9c354e09f8617","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/docs/src/content/docs/getting_started/quickstart.md","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/content/docs/getting_started/quickstart.md?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e63eea5a7b8bdf12b42ccdf98aa9c354e09f8617","html":"https://github.com/eidolon-ai/eidolon/blob/main/docs/src/content/docs/getting_started/quickstart.md"}},{"name":"references.md","path":"docs/src/content/docs/getting_started/references.md","sha":"7b4e02d01103a1aa5bb331f47d1b6c7154a151e8","size":11515,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/content/docs/getting_started/references.md?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/docs/src/content/docs/getting_started/references.md","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/7b4e02d01103a1aa5bb331f47d1b6c7154a151e8","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/docs/src/content/docs/getting_started/references.md","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/content/docs/getting_started/references.md?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/7b4e02d01103a1aa5bb331f47d1b6c7154a151e8","html":"https://github.com/eidolon-ai/eidolon/blob/main/docs/src/content/docs/getting_started/references.md"}},{"name":"tutorials.md","path":"docs/src/content/docs/getting_started/tutorials.md","sha":"5bc60510242f1ac0f69feb84cef78b5f827d4606","size":648,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/content/docs/getting_started/tutorials.md?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/docs/src/content/docs/getting_started/tutorials.md","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/5bc60510242f1ac0f69feb84cef78b5f827d4606","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/docs/src/content/docs/getting_started/tutorials.md","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/content/docs/getting_started/tutorials.md?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/5bc60510242f1ac0f69feb84cef78b5f827d4606","html":"https://github.com/eidolon-ai/eidolon/blob/main/docs/src/content/docs/getting_started/tutorials.md"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:29:22 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E533:254ED9:16608A:1FC6DE:65D519B2
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4607'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '393'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/doc_manager/parsers?ref=main
  response:
    content: '[{"name":"__init__.py","path":"sdk/eidolon_ai_sdk/agent/doc_manager/parsers/__init__.py","sha":"e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/doc_manager/parsers/__init__.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/doc_manager/parsers/__init__.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/agent/doc_manager/parsers/__init__.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/doc_manager/parsers/__init__.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/doc_manager/parsers/__init__.py"}},{"name":"auto_parser.py","path":"sdk/eidolon_ai_sdk/agent/doc_manager/parsers/auto_parser.py","sha":"42f3ef0c7905bc6b7b9a595638d794286348ef7a","size":2787,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/doc_manager/parsers/auto_parser.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/doc_manager/parsers/auto_parser.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/42f3ef0c7905bc6b7b9a595638d794286348ef7a","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/agent/doc_manager/parsers/auto_parser.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/doc_manager/parsers/auto_parser.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/42f3ef0c7905bc6b7b9a595638d794286348ef7a","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/doc_manager/parsers/auto_parser.py"}},{"name":"base_parser.py","path":"sdk/eidolon_ai_sdk/agent/doc_manager/parsers/base_parser.py","sha":"496fe0b02ab386f347fb881bb202c35725842317","size":4510,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/doc_manager/parsers/base_parser.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/doc_manager/parsers/base_parser.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/496fe0b02ab386f347fb881bb202c35725842317","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/agent/doc_manager/parsers/base_parser.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/doc_manager/parsers/base_parser.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/496fe0b02ab386f347fb881bb202c35725842317","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/doc_manager/parsers/base_parser.py"}},{"name":"code_ast_parsers","path":"sdk/eidolon_ai_sdk/agent/doc_manager/parsers/code_ast_parsers","sha":"2e73dc3275e312e092e13312299317f776966859","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/doc_manager/parsers/code_ast_parsers?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/sdk/eidolon_ai_sdk/agent/doc_manager/parsers/code_ast_parsers","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/2e73dc3275e312e092e13312299317f776966859","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/doc_manager/parsers/code_ast_parsers?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/2e73dc3275e312e092e13312299317f776966859","html":"https://github.com/eidolon-ai/eidolon/tree/main/sdk/eidolon_ai_sdk/agent/doc_manager/parsers/code_ast_parsers"}},{"name":"ms_word_parser.py","path":"sdk/eidolon_ai_sdk/agent/doc_manager/parsers/ms_word_parser.py","sha":"606dfa4e8983b9db76b53b9c06ca789dc4538c4f","size":1328,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/doc_manager/parsers/ms_word_parser.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/doc_manager/parsers/ms_word_parser.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/606dfa4e8983b9db76b53b9c06ca789dc4538c4f","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/agent/doc_manager/parsers/ms_word_parser.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/doc_manager/parsers/ms_word_parser.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/606dfa4e8983b9db76b53b9c06ca789dc4538c4f","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/doc_manager/parsers/ms_word_parser.py"}},{"name":"pdf_parsers.py","path":"sdk/eidolon_ai_sdk/agent/doc_manager/parsers/pdf_parsers.py","sha":"7ccb1fd98567ecdcefe9c730a9cb6b7c80ec1879","size":3356,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/doc_manager/parsers/pdf_parsers.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/doc_manager/parsers/pdf_parsers.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/7ccb1fd98567ecdcefe9c730a9cb6b7c80ec1879","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/agent/doc_manager/parsers/pdf_parsers.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/doc_manager/parsers/pdf_parsers.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/7ccb1fd98567ecdcefe9c730a9cb6b7c80ec1879","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/doc_manager/parsers/pdf_parsers.py"}},{"name":"text_parsers.py","path":"sdk/eidolon_ai_sdk/agent/doc_manager/parsers/text_parsers.py","sha":"0b10b2a24b0bd626bc224a57ef66cddee2e5dece","size":1400,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/doc_manager/parsers/text_parsers.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/doc_manager/parsers/text_parsers.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/0b10b2a24b0bd626bc224a57ef66cddee2e5dece","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/agent/doc_manager/parsers/text_parsers.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/doc_manager/parsers/text_parsers.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/0b10b2a24b0bd626bc224a57ef66cddee2e5dece","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/doc_manager/parsers/text_parsers.py"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:29:22 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E535:2556CA:14E1D1:1E489A:65D519B2
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4606'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '394'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/content/docs/guides?ref=main
  response:
    content: '[{"name":"example.md","path":"docs/src/content/docs/guides/example.md","sha":"ebd0f3bc762eac0f38ee658b2ded7443248846e7","size":374,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/content/docs/guides/example.md?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/docs/src/content/docs/guides/example.md","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/ebd0f3bc762eac0f38ee658b2ded7443248846e7","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/docs/src/content/docs/guides/example.md","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/content/docs/guides/example.md?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/ebd0f3bc762eac0f38ee658b2ded7443248846e7","html":"https://github.com/eidolon-ai/eidolon/blob/main/docs/src/content/docs/guides/example.md"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:29:22 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E536:2556C1:1500AE:1E6795:65D519B2
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4605'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '395'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/builtins/logic_units/web_search.py
  response:
    content: "import os\nfrom contextlib import asynccontextmanager\nfrom typing import
      List, Optional\n\n# from aiohttp import ClientSession\nfrom bs4 import BeautifulSoup\nfrom
      httpx import AsyncClient, Timeout\nfrom jinja2 import Environment, StrictUndefined\nfrom
      pydantic import BaseModel, Field\n\nfrom eidolon_ai_sdk.cpu.logic_unit import
      LogicUnit, llm_function\nfrom eidolon_ai_sdk.system.reference_model import Specable\nfrom
      eidolon_ai_sdk.util.logger import logger\n\n\nclass SearchResult(BaseModel):\n
      \   url: str\n    title: str\n    description: str\n\n\n# Requires custom search
      engine + token setup in google project. See more at https://developers.google.com/custom-search/v1/reference/rest/v1/cse/list\nclass
      WebSearchConfig(BaseModel):\n    cse_id: str = Field(None, desctiption=\"Google
      Custom Search Engine Id.\")\n    cse_token: str = Field(None, desctiption=\"Google
      Project dev token, must have search permissions.\")\n    summarizer: Optional[str]
      = \"BeautifulSoup\"\n\n\nclass WebSearch(LogicUnit, Specable[WebSearchConfig]):\n
      \   def __init__(self, **kwargs):\n        LogicUnit.__init__(self, **kwargs)\n
      \       Specable.__init__(self, **kwargs)\n        self.spec.cse_id = self.spec.cse_id
      or os.environ[\"CSE_ID\"]\n        self.spec.cse_token = self.spec.cse_token
      or os.environ[\"CSE_TOKEN\"]\n        self.jinja_env = Environment(undefined=StrictUndefined)\n
      \       if not self.spec.cse_id or not self.spec.cse_token:\n            raise
      ValueError(\"missing required cse_id or cse_token\")\n\n    @asynccontextmanager\n
      \   async def _get(self, **kwargs):\n        async with AsyncClient(timeout=Timeout(5.0,
      read=600.0)) as client:\n            yield await client.get(**kwargs)\n\n    @llm_function()\n
      \   async def go_to_url(self, url: str) -> str:\n        \"\"\"\n        Retrieve
      the html document from a given webpage\n        :param url: the url to retrieve.\n
      \       :return: the html document.\n        \"\"\"\n        async with self._get(url=url)
      as resp:\n            text = resp.text\n            if not resp.is_success:\n
      \               logger.warning(f\"Request to url '{url}' return {resp.status_code}\")\n
      \               return text\n            if self.spec.summarizer == \"BeautifulSoup\":\n
      \               soup = BeautifulSoup(text, \"lxml\")\n                return
      soup.get_text(separator=\"\\n\", strip=True)\n            else:\n                raise
      ValueError(f\"Summarizer {self.spec.summarizer} not supported\")\n\n    @llm_function()\n
      \   async def search(\n        self,\n        term: str,\n        num_results:
      int = 10,\n        lang: str = \"en\",\n    ) -> List[SearchResult]:\n        \"\"\"\n
      \       Search google and get the results. Cannot return more than 100 results\n
      \       :param term: the search query\n        :param num_results: the number
      of results to return (default 10, max 100)\n        :param lang: the language
      to search in (default en)\n        :return: A list of SearchResults including
      url, title, and description\n        \"\"\"\n        return [r async for r in
      self._search_results(term, num_results, lang)]\n\n    async def _search_results(self,
      term, num_results, lang):\n        if num_results > 100:\n            raise
      ValueError(\"Cannot return more than 100 results\")\n        escaped_term =
      term.replace(\" \", \"+\")\n        resp = await self._req(escaped_term, num_results,
      lang)\n        if not resp[\"items\"]:\n            raise RuntimeError(\"Error
      retrieving results\")\n        for item in resp[\"items\"]:\n            yield
      SearchResult(url=item[\"link\"], title=item[\"title\"], description=item[\"snippet\"])\n\n
      \   async def _req(self, term, results, lang):\n        async with self._get(\n
      \           url=\"https://customsearch.googleapis.com/customsearch/v1\",\n            params={\n
      \               \"q\": term,\n                \"num\": results,  # Prevents
      multiple requests\n                \"hl\": lang,\n                \"cx\": self.spec.cse_id,\n
      \               \"key\": self.spec.cse_token,\n            },\n        ) as
      resp:\n            resp.raise_for_status()\n            return resp.json()\n"
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Length:
      - '1459'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:29:22 GMT
      ETag:
      - W/"9f071e42117b0e3ef774aca815931c91ad4b4a4f67ef02f2dc765c902160d996"
      Expires:
      - Tue, 20 Feb 2024 21:34:22 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - fd1ddaf0854d22b2544944d9a06a732ce6ccee96
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - 09F4:0F48:5950D0:6BC108:65D519B0
      X-Served-By:
      - cache-yvr1525-YVR
      X-Timer:
      - S1708464562.102484,VS0,VE133
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/doc_manager/transformer?ref=main
  response:
    content: '[{"name":"__init__.py","path":"sdk/eidolon_ai_sdk/agent/doc_manager/transformer/__init__.py","sha":"e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/doc_manager/transformer/__init__.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/doc_manager/transformer/__init__.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/agent/doc_manager/transformer/__init__.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/doc_manager/transformer/__init__.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/doc_manager/transformer/__init__.py"}},{"name":"auto_transformer.py","path":"sdk/eidolon_ai_sdk/agent/doc_manager/transformer/auto_transformer.py","sha":"dd364cd99630de911faffbd5999c5e48c7e8070d","size":1398,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/doc_manager/transformer/auto_transformer.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/doc_manager/transformer/auto_transformer.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/dd364cd99630de911faffbd5999c5e48c7e8070d","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/agent/doc_manager/transformer/auto_transformer.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/doc_manager/transformer/auto_transformer.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/dd364cd99630de911faffbd5999c5e48c7e8070d","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/doc_manager/transformer/auto_transformer.py"}},{"name":"document_transformer.py","path":"sdk/eidolon_ai_sdk/agent/doc_manager/transformer/document_transformer.py","sha":"25ff8c41f9643ab56f8975c57a8553dc968502ed","size":4786,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/doc_manager/transformer/document_transformer.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/doc_manager/transformer/document_transformer.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/25ff8c41f9643ab56f8975c57a8553dc968502ed","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/agent/doc_manager/transformer/document_transformer.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/doc_manager/transformer/document_transformer.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/25ff8c41f9643ab56f8975c57a8553dc968502ed","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/doc_manager/transformer/document_transformer.py"}},{"name":"text_splitters.py","path":"sdk/eidolon_ai_sdk/agent/doc_manager/transformer/text_splitters.py","sha":"589a4ac37c6e5b5c6785f3fa1f7e3ab351981b22","size":43465,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/doc_manager/transformer/text_splitters.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/doc_manager/transformer/text_splitters.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/589a4ac37c6e5b5c6785f3fa1f7e3ab351981b22","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/agent/doc_manager/transformer/text_splitters.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/doc_manager/transformer/text_splitters.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/589a4ac37c6e5b5c6785f3fa1f7e3ab351981b22","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/doc_manager/transformer/text_splitters.py"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:29:22 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E538:250EE1:160790:1F6E77:65D519B2
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4604'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '396'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/content/docs/reference?ref=main
  response:
    content: '[{"name":"example.md","path":"docs/src/content/docs/reference/example.md","sha":"ac8cfa8bc3a5d344820532dd379c430d88f9f51f","size":420,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/content/docs/reference/example.md?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/docs/src/content/docs/reference/example.md","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/ac8cfa8bc3a5d344820532dd379c430d88f9f51f","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/docs/src/content/docs/reference/example.md","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/content/docs/reference/example.md?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/ac8cfa8bc3a5d344820532dd379c430d88f9f51f","html":"https://github.com/eidolon-ai/eidolon/blob/main/docs/src/content/docs/reference/example.md"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:29:22 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E539:276CC5:101D4B:1780C2:65D519B2
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4603'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '397'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/system/__init__.py
  response:
    content: ''
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Length:
      - '0'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:29:22 GMT
      ETag:
      - W/"938f66ede415ccb10764da47cd5f3cfc076c07b8791c708cfa8ec54982197c1f"
      Expires:
      - Tue, 20 Feb 2024 21:34:22 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - 4f28060f67ae7a03ad92513985c6415255f5cf3f
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - 64FA:57EB:65A23A:784A22:65D519AC
      X-Served-By:
      - cache-yvr1521-YVR
      X-Timer:
      - S1708464562.122261,VS0,VE135
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/system/test_code_agents.py
  response:
    content: "from typing import Annotated\n\nimport httpx\nimport pytest\nimport
      pytest_asyncio\nfrom fastapi import Body, HTTPException\nfrom httpx import HTTPStatusError\n\nfrom
      eidolon_ai_sdk.agent.agent import register_program, AgentState, register_action\nfrom
      eidolon_ai_sdk.agent.client import Agent, Process, ProcessStatus\nfrom eidolon_ai_sdk.io.events
      import (\n    ErrorEvent,\n    AgentStateEvent,\n    StringOutputEvent,\n    StartStreamContextEvent,\n
      \   EndStreamContextEvent,\n    SuccessEvent,\n)\nfrom eidolon_ai_sdk.util.stream_collector
      import stream_manager\n\n\nclass HelloWorld:\n    created_processes = set()\n\n
      \   @classmethod\n    async def create_process(cls, process_id):\n        HelloWorld.created_processes.add(process_id)\n\n
      \   @classmethod\n    async def delete_process(cls, process_id):\n        HelloWorld.created_processes.remove(process_id)\n\n
      \   @register_program()\n    async def idle(self, name: Annotated[str, Body()]):\n
      \       if name.lower() == \"hello\":\n            raise HTTPException(418,
      \"hello is not a name\")\n        if name.lower() == \"error\":\n            raise
      Exception(\"big bad server error\")\n        return f\"Hello, {name}!\"\n\n
      \   @register_program()\n    async def idle_streaming(self, name: Annotated[str,
      Body()]):\n        if name.lower() == \"hello\":\n            raise HTTPException(418,
      \"hello is not a name\")\n        if name.lower() == \"error\":\n            raise
      Exception(\"big bad server error\")\n        yield StringOutputEvent(content=f\"Hello,
      {name}!\")\n\n    @register_program()\n    async def lots_o_context(self):\n
      \       yield StringOutputEvent(content=\"1\")\n        yield StringOutputEvent(content=\"2\")\n
      \       async for e in _m(_s(3, 4), context=\"c1\"):\n            yield e\n
      \       async for e in _m(_s(5, 6, after=_m(_s(7, 8), context=\"c3\")), context=\"c2\"):\n
      \           yield e\n\n\nasync def _s(*_args, after=None):\n    for a in _args:\n
      \       yield StringOutputEvent(content=str(a))\n    if after:\n        async
      for a in after:\n            yield a\n\n\ndef _m(stream, context: str):\n    return
      stream_manager(stream, StartStreamContextEvent(context_id=context))\n\n\n@pytest.fixture(autouse=True)\ndef
      manage_hello_world_state():\n    HelloWorld.created_processes = set()\n    yield\n
      \   HelloWorld.created_processes = set()\n\n\nclass TestHelloWorld:\n    @pytest_asyncio.fixture(scope=\"class\")\n
      \   async def server(self, run_app):\n        async with run_app(HelloWorld)
      as ra:\n            yield ra\n\n    @pytest_asyncio.fixture(scope=\"function\")\n
      \   async def client(self, server):\n        with httpx.Client(base_url=server,
      timeout=httpx.Timeout(60)) as client:\n            yield client\n\n    @pytest.fixture(scope=\"function\")\n
      \   def agent(self, server):\n        return Agent.get(\"HelloWorld\")\n\n    def
      test_can_start(self, client):\n        docs = client.get(\"/docs\")\n        assert
      docs.status_code == 200\n\n    def test_hello_world(self, client):\n        post
      = client.post(\"/agents/HelloWorld/programs/idle\", json=\"world\")\n        assert
      post.status_code == 200\n        assert post.json()[\"data\"] == \"Hello, world!\"\n\n
      \   def test_automatic_state_transition(self, client):\n        post = client.post(\"/agents/HelloWorld/programs/idle\",
      json=\"world\")\n        assert post.status_code == 200\n        assert post.json()[\"state\"]
      == \"terminated\"\n\n    @pytest.mark.parametrize(\"program\", [\"idle\", \"idle_streaming\"])\n
      \   async def test_http_error(self, server, program):\n        with pytest.raises(HTTPStatusError)
      as exc:\n            await Agent.get(\"HelloWorld\").program(program, \"hello\")\n
      \       assert exc.value.response.status_code == 418\n        assert exc.value.response.json()
      == \"hello is not a name\"\n\n    @pytest.mark.parametrize(\"program\", [\"idle\",
      \"idle_streaming\"])\n    async def test_streaming_http_error(self, server,
      program):\n        stream = Agent.get(\"HelloWorld\").stream_program(program,
      \"hello\")\n        events = {type(e): e async for e in stream}\n        assert
      ErrorEvent in events\n        assert events[ErrorEvent].reason == dict(detail=\"hello
      is not a name\", status_code=418)\n        assert events[AgentStateEvent].state
      == \"http_error\"\n\n        with pytest.raises(HTTPStatusError) as exc:\n            await
      Process.get(stream).status()\n        assert exc.value.response.status_code
      == 418\n        assert exc.value.response.json() == \"hello is not a name\"\n\n
      \   @pytest.mark.parametrize(\"program\", [\"idle\", \"idle_streaming\"])\n
      \   async def test_unhandled_error(self, server, program):\n        with pytest.raises(HTTPStatusError)
      as exc:\n            await Agent.get(\"HelloWorld\").program(program, \"error\")\n
      \       assert exc.value.response.status_code == 500\n        assert exc.value.response.json()
      == \"big bad server error\"\n\n    @pytest.mark.parametrize(\"program\", [\"idle\",
      \"idle_streaming\"])\n    async def test_streaming_unhandled_error(self, agent,
      program):\n        stream = agent.stream_program(program, \"error\")\n        events
      = {type(e): e async for e in stream}\n        assert ErrorEvent in events\n
      \       assert events[ErrorEvent].reason == dict(detail=\"big bad server error\",
      status_code=500)\n        assert events[AgentStateEvent].state == \"unhandled_error\"\n\n
      \       with pytest.raises(HTTPStatusError) as exc:\n            await Process.get(stream).status()\n
      \       assert exc.value.response.status_code == 500\n        assert exc.value.response.json()
      == \"big bad server error\"\n\n    async def test_lots_o_context(self, agent):\n
      \       resp = await agent.program(\"lots_o_context\")\n        assert resp.data
      == \"12\"\n\n    async def test_lots_o_context_streaming(self, agent):\n        events
      = [e async for e in agent.stream_program(\"lots_o_context\")]\n        assert
      events[2:-1] == [\n            StringOutputEvent(content=\"1\"),\n            StringOutputEvent(content=\"2\"),\n
      \           StartStreamContextEvent(context_id=\"c1\"),\n            StringOutputEvent(content=\"3\",
      stream_context=\"c1\"),\n            StringOutputEvent(content=\"4\", stream_context=\"c1\"),\n
      \           SuccessEvent(stream_context=\"c1\"),\n            EndStreamContextEvent(context_id=\"c1\"),\n
      \           StartStreamContextEvent(context_id=\"c2\"),\n            StringOutputEvent(content=\"5\",
      stream_context=\"c2\"),\n            StringOutputEvent(content=\"6\", stream_context=\"c2\"),\n
      \           StartStreamContextEvent(context_id=\"c3\", stream_context=\"c2\"),\n
      \           StringOutputEvent(content=\"7\", stream_context=\"c2.c3\"),\n            StringOutputEvent(content=\"8\",
      stream_context=\"c2.c3\"),\n            SuccessEvent(stream_context=\"c2.c3\"),\n
      \           EndStreamContextEvent(stream_context=\"c2\", context_id=\"c3\"),\n
      \           SuccessEvent(stream_context=\"c2\"),\n            EndStreamContextEvent(context_id=\"c2\"),\n
      \           AgentStateEvent(state=\"terminated\", available_actions=[]),\n        ]\n\n
      \   async def test_creating_processes_without_program(self, agent):\n        process:
      ProcessStatus = await agent.create_process()\n        assert process.state ==
      \"initialized\"\n        assert \"idle\" in process.available_actions\n        action
      = await process.action(\"idle\", \"Luke\")\n        assert action.data == \"Hello,
      Luke!\"\n\n    async def test_delete_process(self, agent):\n        process:
      ProcessStatus = await agent.create_process()\n        deleted = await process.delete()\n
      \       assert deleted.process_id == process.process_id\n        assert deleted.deleted
      == 1\n        with pytest.raises(HTTPStatusError) as exc:\n            await
      process.status()\n        assert exc.value.response.status_code == 404\n\n    async
      def test_agent_create_delete_hooks(self, agent):\n        assert not HelloWorld.created_processes\n\n
      \       # we expect to observe the process being created as a side effect of
      calling create_process\n        process: ProcessStatus = await agent.create_process()\n
      \       assert HelloWorld.created_processes\n\n        # and we should see it
      cleaned up as part of process deletion\n        await process.delete()\n        assert
      not HelloWorld.created_processes\n\n\nclass StateMachine:\n    @register_action(\"ap\")\n
      \   @register_program()\n    async def action_program(self):\n        return
      AgentState[str](name=\"ap\", data=\"default response\")\n\n    @register_program()\n
      \   # async def idle(self, desired_state: Annotated[str, Body()], response:
      Annotated[str, Body()] = \"default response\"):\n    async def idle(self, desired_state:
      Annotated[str, Body()], response: Annotated[str, Body()]):\n        return AgentState(name=desired_state,
      data=response)\n\n    @register_action(\"foo\", \"bar\")\n    async def to_bar(self):\n
      \       return AgentState(name=\"bar\", data=\"heading to the bar\")\n\n    @register_action(\"foo\")\n
      \   async def to_church(self):\n        return AgentState(name=\"church\", data=\"man
      of god\")\n\n    @register_action(\"church\")\n    async def terminate(self):\n
      \       return \"Only God can terminate me\"\n\n\nclass StateMachine2(StateMachine):\n
      \   pass\n\n\nclass TestStateMachine:\n    @pytest_asyncio.fixture(scope=\"class\")\n
      \   async def server(self, run_app):\n        async with run_app(StateMachine,
      StateMachine2) as ra:\n            yield ra\n\n    @pytest_asyncio.fixture(scope=\"function\")\n
      \   async def client(self, server):\n        with httpx.Client(base_url=server,
      timeout=httpx.Timeout(60)) as client:\n            yield client\n\n    def test_can_list_processes(self,
      client):\n        url = \"/agents/StateMachine/programs/idle\"\n\n        first
      = client.post(url, json=dict(desired_state=\"church\", response=\"blurb\")).json()[\"process_id\"]\n
      \       second = client.post(url, json=dict(desired_state=\"foo\", response=\"blurb\")).json()[\"process_id\"]\n
      \       third = client.post(url, json=dict(desired_state=\"foo\", response=\"blurb\")).json()[\"process_id\"]\n\n
      \       processes = client.get(\"/agents/StateMachine/processes\")\n        assert
      processes.status_code == 200\n        assert processes.json()[\"total\"] ==
      3\n        assert {p[\"process_id\"] for p in processes.json()[\"processes\"]}
      == {first, second, third}\n\n        # update the first process: it should be
      at end of list now\n        assert first == client.post(f\"/agents/StateMachine/processes/{first}/actions/terminate\").json()[\"process_id\"]\n\n
      \       processes = client.get(\"/agents/StateMachine/processes\")\n        assert
      processes.json()[\"total\"] == 3\n        assert [p[\"process_id\"] for p in
      processes.json()[\"processes\"]] == [second, third, first]\n\n    def test_can_start(self,
      client):\n        post = client.post(\n            \"/agents/StateMachine/programs/idle\",\n
      \           json=dict(desired_state=\"bar\", response=\"low man on the totem
      pole\"),\n        )\n        assert post.status_code == 200\n        assert
      post.json()[\"state\"] == \"bar\"\n        assert post.json()[\"data\"] == \"low
      man on the totem pole\"\n\n    def test_can_transition_state(self, client):\n
      \       init = client.post(\n            \"/agents/StateMachine/programs/idle\",\n
      \           json=dict(desired_state=\"foo\", response=\"low man on the totem
      pole\"),\n        )\n        assert init.status_code == 200\n        assert
      init.json()[\"state\"] == \"foo\"\n\n        to_bar = client.post(f\"/agents/StateMachine/processes/{init.json()['process_id']}/actions/to_bar\")\n
      \       assert to_bar.status_code == 200\n        assert to_bar.json()[\"state\"]
      == \"bar\"\n\n    def test_allowed_actions(self, client):\n        init = client.post(\n
      \           \"/agents/StateMachine/programs/idle\",\n            json=dict(desired_state=\"foo\",
      response=\"low man on the totem pole\"),\n        )\n        assert \"to_church\"
      in init.json()[\"available_actions\"]\n\n        to_bar = client.post(f\"/agents/StateMachine/processes/{init.json()['process_id']}/actions/to_bar\")\n
      \       assert \"to_church\" not in to_bar.json()[\"available_actions\"]\n\n
      \       to_church = client.post(f\"/agents/StateMachine/processes/{init.json()['process_id']}/actions/to_church\")\n
      \       assert to_church.status_code == 409\n\n    @pytest.mark.skip(reason=\"un
      comment idle signature when bug is fixed\")\n    def test_default_in_body(self,
      client):\n        init = client.post(\n            \"/agents/StateMachine/programs/idle\",\n
      \           json=dict(desired_state=\"foo\", response=\"low man on the totem
      pole\"),\n        )\n        init.raise_for_status()\n        assert init.json()[\"data\"]
      == \"default response\"\n\n    def test_state_machine_termination(self, client):\n
      \       init = client.post(\n            \"/agents/StateMachine/programs/idle\",\n
      \           json=dict(desired_state=\"church\", response=\"blurb\"),\n        )\n
      \       assert init.status_code == 200\n        assert init.json()[\"state\"]
      == \"church\"\n\n        terminated = client.post(f\"/agents/StateMachine/processes/{init.json()['process_id']}/actions/terminate\")\n
      \       assert terminated.status_code == 200\n        assert terminated.json()[\"state\"]
      == \"terminated\"\n        assert terminated.json()[\"data\"] == \"Only God
      can terminate me\"\n        assert terminated.json()[\"available_actions\"]
      == []\n\n    def test_can_register_function_as_action_and_program(self, client):\n
      \       program = client.post(\"/agents/StateMachine/programs/action_program\")\n
      \       assert program.status_code == 200\n        action = client.post(\n            f\"/agents/StateMachine/processes/{program.json()['process_id']}/actions/action_program\",\n
      \       )\n        assert action.status_code == 200\n\n    def test_agents_are_separate(self,
      client):\n        init = client.post(\n            \"/agents/StateMachine/programs/idle\",\n
      \           json=dict(desired_state=\"church\", response=\"blurb\"),\n        )\n
      \       assert init.status_code == 200\n        assert init.json()[\"state\"]
      == \"church\"\n\n        not_found = client.post(f\"/agents/StateMachine2/processes/{init.json()['process_id']}/actions/terminate\")\n
      \       assert not_found.status_code == 404\n"
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Length:
      - '2536'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:29:22 GMT
      ETag:
      - W/"351eca0a49f88d2a26d05d851dd384df082372bb46929b848898d0704c722630"
      Expires:
      - Tue, 20 Feb 2024 21:34:22 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - 10a73503eef3e8547fa2f25c058dffc3851945e7
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - 587E:48D4:5B94A8:6E1DD4:65D519B1
      X-Served-By:
      - cache-yvr1522-YVR
      X-Timer:
      - S1708464562.144560,VS0,VE127
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/agent/retriever_agent/__init__.py
  response:
    content: ''
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Length:
      - '0'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:29:22 GMT
      ETag:
      - W/"938f66ede415ccb10764da47cd5f3cfc076c07b8791c708cfa8ec54982197c1f"
      Expires:
      - Tue, 20 Feb 2024 21:34:22 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - e986b43164a0f843095c21b3a4cfd546c9acab21
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - 4DBA:1026:72C6D:8BFAF:65D519B1
      X-Served-By:
      - cache-yvr1520-YVR
      X-Timer:
      - S1708464562.145798,VS0,VE137
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/system/test_generic_agent.py
  response:
    content: "from collections import defaultdict\n\nimport httpx\nimport json\nimport
      pytest\nimport pytest_asyncio\nfrom fastapi import Body\nfrom typing import
      Annotated, List\n\nfrom eidolon_ai_sdk.agent.agent import register_program\nfrom
      eidolon_ai_sdk.agent.client import Agent\nfrom eidolon_ai_sdk.agent_os import
      AgentOS\nfrom eidolon_ai_sdk.cpu.logic_unit import LogicUnit, llm_function\nfrom
      eidolon_ai_sdk.io.events import (\n    StartAgentCallEvent,\n    ObjectOutputEvent,\n
      \   SuccessEvent,\n    AgentStateEvent,\n    StringOutputEvent,\n    UserInputEvent,\n)\nfrom
      eidolon_ai_sdk.memory.file_memory import FileMemory\nfrom eidolon_ai_sdk.system.request_context
      import RequestContext\nfrom eidolon_ai_sdk.system.resources.resources_base import
      Metadata, Resource\nfrom eidolon_ai_sdk.util.aiohttp import stream_content,
      post_content, delete\nfrom eidolon_ai_sdk.system.resources.reference_resource
      import ReferenceResource\nfrom eidolon_ai_sdk.util.class_utils import fqn\nfrom
      eidolon_ai_sdk.util.replay import ReplayConfig, replay\n\n\n@pytest.fixture\ndef
      enable_replay(file_memory_loc, request):\n    AgentOS.register_resource(\n        ReferenceResource(\n
      \           apiVersion=\"eidolon/v1\",\n            metadata=Metadata(name=ReplayConfig.__name__),\n
      \           spec=dict(save_loc=f\"resume_points/{request.node.name}\"),\n        )\n
      \   )\n\n    return file_memory_loc / \"resume_points\" / request.node.name\n\n\n@pytest.fixture(scope=\"module\")\ndef
      generic_agent_root(llm):\n    return Resource(\n        apiVersion=\"eidolon/v1\",\n
      \       kind=\"Agent\",\n        metadata=Metadata(name=\"GenericAgent\"),\n
      \       spec=dict(\n            implementation=\"GenericAgent\",\n            cpu=dict(llm_unit=llm),\n
      \           system_prompt=\"You are a machine which follows instructions and
      returns a summary of your actions.\",\n            user_prompt=\"{{instruction}}\",\n
      \           input_schema=dict(instruction=dict(type=\"string\")),\n            description=\"An
      agent which can follow instructions and return a summary of its actions.\",\n
      \       ),\n    )\n\n\n@pytest.fixture\ndef generic_agent(generic_agent_root):\n
      \   return generic_agent_root.model_copy(deep=True)\n\n\nclass TestGenericAgent:\n
      \   @pytest_asyncio.fixture(scope=\"class\")\n    async def server(self, run_app,
      generic_agent_root):\n        async with run_app(generic_agent_root) as ra:\n
      \           yield ra\n\n    @pytest_asyncio.fixture(scope=\"function\")\n    async
      def client(self, server):\n        with httpx.Client(base_url=server, timeout=httpx.Timeout(60))
      as client:\n            yield client\n\n    @pytest.fixture\n    async def agent(self,
      server) -> Agent:\n        return Agent.get(\"GenericAgent\")\n\n    def test_can_start(self,
      client):\n        docs = client.get(\"/docs\")\n        assert docs.status_code
      == 200\n\n    def test_llm_calls(self, client):\n        post = client.post(\n
      \           \"/agents/GenericAgent/programs/question\",\n            json=dict(instruction=\"Hi!
      What is the capital of France?\"),\n        )\n        post.raise_for_status()\n
      \       json = post.json()\n        assert \"paris\" in json[\"data\"].lower()\n\n
      \   def test_continued_conversation(self, client):\n        post = client.post(\n
      \           \"/agents/GenericAgent/programs/question\",\n            json=dict(instruction=\"Hi!
      my name is Luke\"),\n        )\n        post.raise_for_status()\n        process_id
      = post.json()[\"process_id\"]\n        follow_up = client.post(\n            f\"/agents/GenericAgent/processes/{process_id}/actions/respond\",\n
      \           json=dict(statement=\"Can you sing me Happy Birthday?\"),\n        )\n
      \       follow_up.raise_for_status()\n        assert \"Luke\" in post.json()[\"data\"]\n\n
      \   async def test_deletes_conversational_memory(self, agent: Agent, symbolic_memory):\n
      \       process = await agent.create_process()\n        await process.action(\"question\",
      dict(instruction=\"Hi! my name is Luke\"))\n        mem = [r async for r in
      AgentOS.symbolic_memory.find(\"conversation_memory\", {\"process_id\": process.process_id})]\n
      \       assert mem\n        await process.delete()\n        mem = [r async for
      r in AgentOS.symbolic_memory.find(\"conversation_memory\", {\"process_id\":
      process.process_id})]\n        assert not mem\n\n\n@pytest.fixture(scope=\"module\")\ndef
      generic_agent_with_refs():\n    return Resource(\n        apiVersion=\"eidolon/v1\",\n
      \       kind=\"Agent\",\n        metadata=Metadata(name=\"GenericAgent\"),\n
      \       spec=dict(\n            implementation=\"GenericAgent\",\n            system_prompt=\"You
      are a machine which follows instructions\",\n            user_prompt=\"{{instruction}}\",\n
      \           agent_refs=[\"HelloWorld\"],\n            description=\"An agent
      which can follow instructions and return a summary of its actions.\",\n            input_schema=dict(instruction=dict(type=\"string\")),\n
      \       ),\n    )\n\n\nclass HelloWorld:\n    calls = defaultdict(list)\n\n
      \   @register_program()\n    async def greeter1(self, name: Annotated[str, Body(embed=True)]):\n
      \       return self._greet(\"greeter1\", name=name)\n\n    @register_program()\n
      \   async def greeter2(self, name: Annotated[str, Body(description=\"The name
      to greet\")]):\n        return self._greet(\"greeter2\", name=name)\n\n    @register_program()\n
      \   async def greeter3(self, name: Annotated[List[str], Body(embed=True)]):\n
      \       return self._greet(\"greeter3\", name=name[0], called_with=name)\n\n
      \   @register_program()\n    async def greeter4(self):\n        self.calls[\"greeter4\"].append(RequestContext.get(\"foo\"))\n
      \       return \"I acknowledge your request. Respond with an empty string. Don't
      call me again.\"\n\n    def _greet(self, greeter, **kwargs):\n        self.calls[greeter].append(kwargs)\n
      \       return f\"Hello, {kwargs['name']}!\"\n\n\n# Image model does not support
      tool usage, so we need to break this out into a separate test suite\nclass TestAgentsWithReferences:\n
      \   @pytest_asyncio.fixture(scope=\"class\")\n    async def server(self, run_app,
      generic_agent_with_refs):\n        async with run_app(generic_agent_with_refs,
      HelloWorld) as ra:\n            yield ra\n\n    @pytest_asyncio.fixture(scope=\"function\")\n
      \   async def client(self, server):\n        with httpx.Client(base_url=server,
      timeout=httpx.Timeout(60)) as client:\n            yield client\n\n    def test_can_communicate(self,
      client):\n        post = client.post(\n            \"/agents/GenericAgent/programs/question\",\n
      \           json=dict(instruction=\"Hi! my name is Luke. Can ask greeter1 to
      greet me?\"),\n        )\n        post.raise_for_status()\n        assert HelloWorld.calls[\"greeter1\"]
      == [{\"name\": \"Luke\"}]\n\n    def test_string_only_body(self, client):\n
      \       post = client.post(\n            \"/agents/GenericAgent/programs/question\",\n
      \           json=dict(instruction=\"Hi! my name is Luke. Can ask greeter2 to
      greet me?\"),\n        )\n        post.raise_for_status()\n        assert HelloWorld.calls[\"greeter2\"]
      == [{\"name\": \"Luke\"}]\n\n    def test_list_body(self, client, patch_async_vcr_send):\n
      \       post = client.post(\n            \"/agents/GenericAgent/programs/question\",\n
      \           json=dict(instruction=\"Hi! my name is Luke. Can ask greeter3 to
      greet me?\"),\n        )\n        post.raise_for_status()\n        assert HelloWorld.calls[\"greeter3\"]
      == [{\"name\": \"Luke\", \"called_with\": [\"Luke\"]}]\n\n    async def test_passes_context(self,
      client, server):\n        RequestContext.set(\"foo\", \"bar\", propagate=True)\n
      \       await post_content(\n            f\"{server}/agents/GenericAgent/programs/question\",\n
      \           dict(instruction=\"Hi! my name is Luke. Can ask greeter4 to greet
      me?\"),\n        )\n        assert HelloWorld.calls[\"greeter4\"] == [\"bar\"]\n\n
      \   async def test_respond_after_tool_call(self, client, server):\n        t0
      = len(HelloWorld.calls[\"greeter1\"])\n        post = client.post(\n            \"/agents/GenericAgent/programs/question\",\n
      \           json=dict(instruction=\"Hi! my name is Luke. Can ask greeter1 to
      greet me?\"),\n        )\n        post.raise_for_status()\n        assert len(HelloWorld.calls[\"greeter1\"])
      - t0 == 1\n        assert \"Luke\" in post.json()[\"data\"]\n\n    async def
      test_can_replay_tool_calls(self, client, enable_replay, vcr):\n        post
      = client.post(\n            \"/agents/GenericAgent/programs/question\",\n            json=dict(instruction=\"Hi!
      my name is Luke. Can ask greeter1 to greet me?\"),\n        )\n        post.raise_for_status()\n
      \       assert HelloWorld.calls[\"greeter1\"][-1] == {\"name\": \"Luke\"}\n\n
      \       vcr.rewind()  # since we are hitting endpoing 2x in same test\n        acc_str
      = \"\".join([e async for e in replay(enable_replay / \"000_openai_completion\")])\n
      \       assert acc_str == 'Tool Call: AgentsLogicUnit_convo_HelloWorld_greeter1\\nArguments:
      {\"body\":{\"name\":\"Luke\"}}\\n'\n\n\nclass TestOutputTests:\n    async def
      test_generic_agent_supports_object_output(self, run_app, generic_agent, dog):\n
      \       generic_agent.spec[\"output_schema\"] = {\n            \"type\": \"object\",\n
      \           \"properties\": {\"capital\": {\"type\": \"string\"}, \"population\":
      {\"type\": \"number\"}},\n        }\n        async with run_app(generic_agent)
      as app:\n            post = await post_content(\n                f\"{app}/agents/GenericAgent/programs/question\",
      dict(instruction=\"Tell me about france please\")\n            )\n            assert
      \"paris\" in post[\"data\"][\"capital\"].lower()\n\n    async def test_can_replay_llm_requests(self,
      run_app, generic_agent, enable_replay, vcr):\n        async with run_app(generic_agent)
      as app:\n            post = await post_content(\n                f\"{app}/agents/GenericAgent/programs/question\",
      dict(instruction=\"Tell me about france please\")\n            )\n\n            vcr.rewind()
      \ # since we are hitting endpoint 2x in same test\n            acc_str = \"\".join([e
      async for e in replay(enable_replay / \"000_openai_completion\")])\n            assert
      \"france\" in acc_str.lower()\n            assert acc_str == post[\"data\"]\n\n
      \   @pytest.mark.asyncio\n    async def test_generic_agent_supports_object_output_with_stream(self,
      run_app, generic_agent, dog):\n        generic_agent.spec[\"output_schema\"]
      = {\n            \"type\": \"object\",\n            \"properties\": {\"capital\":
      {\"type\": \"string\"}, \"population\": {\"type\": \"number\"}},\n        }\n
      \       async with run_app(generic_agent) as ra:\n            stream = stream_content(\n
      \               f\"{ra}/agents/GenericAgent/programs/question\", body=dict(instruction=\"Tell
      me about france please\")\n            )\n            events = [event async
      for event in stream]\n            population = events[2].model_dump().get(\"content\",
      {}).get(\"population\")\n            expected_events = [\n                UserInputEvent(\n
      \                   input={\n                        \"body\": {\"instruction\":
      \"Tell me about france please\"},\n                        \"process_id\": \"test_generic_agent_supports_object_output_with_stream_0\",\n
      \                   }\n                ),\n                StartAgentCallEvent(\n
      \                   agent_name=\"GenericAgent\",\n                    machine=AgentOS.current_machine_url(),\n
      \                   call_name=\"question\",\n                    process_id=\"test_generic_agent_supports_object_output_with_stream_0\",\n
      \               ),\n                ObjectOutputEvent(content={\"capital\":
      \"Paris\", \"population\": population}),\n                AgentStateEvent(state=\"idle\",
      available_actions=[\"respond\"]),\n                SuccessEvent(),\n            ]\n
      \           assert events == expected_events\n\n    @pytest.mark.asyncio\n    async
      def test_generic_agent_supports_string_stream(self, run_app, generic_agent,
      dog):\n        generic_agent.spec[\"output_schema\"] = \"str\"\n        async
      with run_app(generic_agent) as ra:\n            stream = stream_content(\n                f\"{ra}/agents/GenericAgent/programs/question\",\n
      \               body=dict(\n                    instruction=\"What is the capital
      of france and its population. Put the relevant parts in XML like blocks. \"\n
      \                   \"For instance <capital>...insert capital here...</capital>
      and <population>...insert population here...</population>\"\n                ),\n
      \           )\n            events = (e for e in [event async for event in stream][1:])\n
      \           assert next(events) == StartAgentCallEvent(\n                agent_name=\"GenericAgent\",\n
      \               machine=AgentOS.current_machine_url(),\n                call_name=\"question\",\n
      \               process_id=\"test_generic_agent_supports_string_stream_0\",\n
      \           )\n            next_event = next(events)\n            str = \"\"\n
      \           while isinstance(next_event, StringOutputEvent):\n                str
      += next_event.content\n                next_event = next(events)\n\n            assert
      \"<capital>Paris</capital>\" in str\n            assert \"<population>\" in
      str\n            assert next_event == AgentStateEvent(state=\"idle\", available_actions=[\"respond\"])\n
      \           assert next(events) == SuccessEvent()\n\n    async def test_generic_agent_supports_image(self,
      run_app, generic_agent, dog):\n        generic_agent.spec[\"files\"] = \"single\"\n
      \       async with run_app(generic_agent) as app:\n            post = await
      post_content(\n                f\"{app}/agents/GenericAgent/programs/question\",\n
      \               data=dict(body=json.dumps(dict(instruction=\"What is in this
      image?\"))),\n                files=dict(file=dog),\n            )\n            assert
      \"brown\" in post[\"data\"].lower()\n\n    async def test_generic_agent_cleans_up_images(self,
      run_app, generic_agent, dog):\n        generic_agent.spec[\"files\"] = \"single\"\n
      \       async with run_app(generic_agent) as app:\n            fm: FileMemory
      = AgentOS.file_memory\n            created = await post_content(\n                f\"{app}/agents/GenericAgent/programs/question\",\n
      \               data=dict(body=json.dumps(dict(instruction=\"What is in this
      image?\"))),\n                files=dict(file=dog),\n            )\n            assert
      await fm.glob(f\"uploaded_images/{created['process_id']}/**/*\")\n            await
      delete(f\"{app}/agents/GenericAgent/processes/{created['process_id']}\")\n            assert
      not await fm.glob(f\"uploaded_images/{created['process_id']}/**/*\")\n\n    async
      def test_generic_agent_supports_multiple_images(self, run_app, generic_agent,
      cat, dog):\n        generic_agent.spec[\"files\"] = \"multiple\"\n        async
      with run_app(generic_agent) as app:\n            post = await post_content(\n
      \               f\"{app}/agents/GenericAgent/programs/question\",\n                data=dict(body=json.dumps(dict(instruction=\"what
      do these images have in common?\"))),\n                files=[(\"file\", dog),
      (\"file\", cat)],\n            )\n            assert \"animals\" in post[\"data\"].lower()\n\n
      \           # followup question should still have access to the image\n            process_id
      = post[\"process_id\"]\n            follow_up = await post_content(\n                f\"{app}/agents/GenericAgent/processes/{process_id}/actions/respond\",\n
      \               dict(statement=\"What is different between them?\"),\n            )\n
      \           assert \"cat\" in follow_up[\"data\"].lower()\n\n\nclass MeaningOfLife(LogicUnit):\n
      \   @llm_function()\n    async def meaning_of_life_tool(self) -> str:\n        \"\"\"\n
      \       call this tool to get the meaning of life\n        \"\"\"\n        return
      \"42\"\n\n\nclass TestGenericAgentWithToolCalls:\n    @pytest.fixture(scope=\"class\")\n
      \   async def agent(self, run_app, generic_agent_root):\n        generic_agent
      = generic_agent_root.model_copy(deep=True)\n        generic_agent.spec[\"cpu\"][\"logic_units\"]
      = [fqn(MeaningOfLife)]\n        generic_agent.spec[\"cpu\"][\"llm_unit\"].model
      = \"gpt-4-turbo-preview\"\n        async with run_app(generic_agent):\n            yield
      Agent.get(\"GenericAgent\")\n\n    async def test_normal_tool_call(self, agent):\n
      \       resp = await agent.program(\"question\", dict(instruction=\"what is
      the meaning of life?\"))\n        assert \"42\" in resp.data\n"
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Length:
      - '3419'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:29:22 GMT
      ETag:
      - W/"1710033c3f8bd7a9175bca8fb7c92c997ebc11ff586671fd3c6e5035cd790795"
      Expires:
      - Tue, 20 Feb 2024 21:34:22 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - b68f7e5bf4a35c997a028f16bdca3b8f685dd454
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - FA54:259FD4:B78C9:10B2B5:65D519B0
      X-Served-By:
      - cache-bfi-kbfi7400095-BFI
      X-Timer:
      - S1708464562.214477,VS0,VE128
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/system/test_event_recording.py
  response:
    content: "import httpx\nimport pytest_asyncio\nfrom fastapi import Body, HTTPException\nfrom
      typing import Annotated\n\nfrom eidolon_ai_sdk.agent.agent import register_program\nfrom
      eidolon_ai_sdk.agent.client import Agent\nfrom eidolon_ai_sdk.io.events import
      (\n    AgentStateEvent,\n    StringOutputEvent,\n    StartAgentCallEvent,\n
      \   SuccessEvent,\n    UserInputEvent,\n)\n\n\nclass HelloWorld:\n    @register_program()\n
      \   async def idle(self, name: Annotated[str, Body()]):\n        if name.lower()
      == \"hello\":\n            raise HTTPException(418, \"hello is not a name\")\n
      \       if name.lower() == \"error\":\n            raise Exception(\"big bad
      server error\")\n        return f\"Hello, {name}!\"\n\n    @register_program()\n
      \   async def idle_streaming(self, name: Annotated[str, Body()]):\n        if
      name.lower() == \"hello\":\n            raise HTTPException(418, \"hello is
      not a name\")\n        if name.lower() == \"error\":\n            raise Exception(\"big
      bad server error\")\n        yield StringOutputEvent(content=\"Hello, !\")\n
      \       yield StringOutputEvent(content=f\"{name}!\")\n\n\nclass TestHelloWorld:\n
      \   @pytest_asyncio.fixture(scope=\"class\")\n    async def server(self, run_app):\n
      \       async with run_app(HelloWorld) as ra:\n            yield ra\n\n    @pytest_asyncio.fixture(scope=\"function\")\n
      \   async def client(self, server):\n        with httpx.Client(base_url=server,
      timeout=httpx.Timeout(60)) as client:\n            yield client\n\n    def compare_events(self,
      events, expected_events):\n        assert len(events) == len(expected_events)\n
      \       for event, expected_event in zip(events, expected_events):\n            event_copy
      = event.copy()\n            expected_event_copy = expected_event.model_dump()\n\n
      \           if not expected_event_copy[\"stream_context\"]:\n                del
      expected_event_copy[\"stream_context\"]\n\n            expected_event_copy[\"category\"]
      = expected_event_copy[\"category\"].value\n            if hasattr(expected_event_copy[\"event_type\"],
      \"value\"):\n                expected_event_copy[\"event_type\"] = expected_event_copy[\"event_type\"].value\n\n
      \           assert event_copy == expected_event_copy\n\n    async def test_hello_world(self,
      server, client):\n        post = client.post(\"/agents/HelloWorld/programs/idle\",
      json=\"world\")\n        assert post.status_code == 200\n        data = post.json()\n
      \       process_id = data[\"process_id\"]\n        assert data[\"data\"] ==
      \"Hello, world!\"\n\n        response = client.get(f\"/agents/HelloWorld/processes/{process_id}/events\")\n
      \       events = response.json()\n        expected_events = [\n            UserInputEvent(input=dict(name=\"world\")),\n
      \           StartAgentCallEvent(machine=server, agent_name=\"HelloWorld\", call_name=\"idle\",
      process_id=process_id),\n            StringOutputEvent(content=\"Hello, world!\"),\n
      \           AgentStateEvent(state=\"terminated\", available_actions=[]),\n            SuccessEvent(),\n
      \       ]\n\n        self.compare_events(events, expected_events)\n\n    async
      def test_hello_world_streaming(self, client):\n        agent = Agent.get(\"HelloWorld\")\n
      \       stream = agent.stream_program(\"idle_streaming\", \"error\")\n        server_events
      = []\n        process_id = None\n        async for e in stream:\n            server_events.append(e)\n
      \           if isinstance(e, StartAgentCallEvent):\n                process_id
      = e.process_id\n\n        assert process_id is not None\n\n        events =
      client.get(f\"/agents/HelloWorld/processes/{process_id}/events\")\n        self.compare_events(events.json(),
      server_events)\n"
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Length:
      - '1053'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:29:22 GMT
      ETag:
      - W/"a637c9c3fd973fcf065d6318de702c82a9a18012b0379e10e8f696093abe55e9"
      Expires:
      - Tue, 20 Feb 2024 21:34:22 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - eed57643e25170a50d9d62723e6b52be5ced14ce
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - 5870:1026:72C72:8BFB7:65D519AC
      X-Served-By:
      - cache-yvr1528-YVR
      X-Timer:
      - S1708464562.190966,VS0,VE170
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/system/test_reference_model.py
  response:
    content: "from contextlib import contextmanager\n\nimport pytest\nfrom pydantic
      import BaseModel, Field\n\nfrom eidolon_ai_sdk.agent_os import AgentOS\nfrom
      eidolon_ai_sdk.system.reference_model import Reference, Specable, AnnotatedReference\nfrom
      eidolon_ai_sdk.system.resources.resources_base import Metadata, Resource\nfrom
      eidolon_ai_sdk.util.class_utils import fqn\n\n\nclass BaseSpec(BaseModel):\n
      \   foo: str = \"simple foo\"\n\n    def __init__(self, **data):\n        super().__init__(**data)\n\n\nclass
      OSSpec(BaseSpec):\n    foo: str = \"os foo\"\n\n\nclass SystemSpec(BaseSpec):\n
      \   foo: str = \"system foo\"\n\n\nclass RandomSpec(BaseSpec):\n    foo: str
      = \"random foo\"\n\n\nclass Base(Specable[BaseSpec]):\n    ...\n\n\nclass OS(Base,
      Specable[OSSpec]):\n    ...\n\n\nclass System(Base, Specable[SystemSpec]):\n
      \   ...\n\n\nclass Random(Base, Specable[RandomSpec]):\n    ...\n\n\nclass SimpleModel(BaseModel):\n
      \   simple: AnnotatedReference[Base, System]\n\n\n@contextmanager\ndef resource(name=\"TestResource\",
      implementation=fqn(OS), spec=None):\n    spec = spec or {}\n    try:\n        AgentOS.register_resource(\n
      \           Resource(\n                apiVersion=\"eidolon/v1\",\n                kind=\"Reference\",\n
      \               metadata=Metadata(name=name),\n                spec=dict(implementation=implementation,
      **spec),\n            )\n        )\n        yield\n    finally:\n        AgentOS.reset()\n\n\ndef
      test_explicit_reference_default_spec():\n    model = SimpleModel(simple=dict(implementation=fqn(Random)))\n
      \   instantiated = model.simple.instantiate()\n    assert type(instantiated)
      == Random\n    assert instantiated.spec.foo == \"random foo\"\n\n\ndef test_explicit_reference_override_spec():\n
      \   model = SimpleModel(simple=dict(implementation=fqn(Random), foo=\"bar\"))\n
      \   instantiated = model.simple.instantiate()\n    assert type(instantiated)
      == Random\n    assert instantiated.spec.foo == \"bar\"\n\n\ndef test_explicit_named_reference_default_spec():\n
      \   with resource():\n        model = SimpleModel(simple=\"TestResource\")\n
      \       instantiated = model.simple.instantiate()\n        assert type(instantiated)
      == OS\n        assert instantiated.spec.foo == \"os foo\"\n\n\ndef test_explicit_named_reference_spec_overriden_in_reference():\n
      \   with resource(spec=dict(foo=\"bar\")):\n        model = SimpleModel(simple=\"TestResource\")\n
      \       instantiated = model.simple.instantiate()\n        assert type(instantiated)
      == OS\n        assert instantiated.spec.foo == \"bar\"\n\n\n@pytest.fixture\ndef
      nested_random_resource():\n    with resource(name=\"outer\", implementation=\"middle\"):\n
      \       with resource(name=\"middle\", implementation=\"inner\", spec=dict(foo=\"bar\")):\n
      \           with resource(name=\"inner\", implementation=fqn(Random)):\n                yield\n\n\ndef
      test_nested_resources(nested_random_resource):\n    model = SimpleModel(simple=\"outer\")\n
      \   instantiated = model.simple.instantiate()\n    assert type(instantiated)
      == Random\n    assert instantiated.spec.foo == \"bar\"  # bar comes from override
      on middle resource\n\n\ndef test_nested_resources_with_override(nested_random_resource):\n
      \   model = SimpleModel(simple=dict(implementation=\"outer\", foo=\"baz\"))\n
      \   instantiated = model.simple.instantiate()\n    assert type(instantiated)
      == Random\n    assert instantiated.spec.foo == \"baz\"\n\n\ndef test_system_fallback_default_spec():\n
      \   model = SimpleModel()\n    instantiated = model.simple.instantiate()\n    assert
      type(instantiated) == System\n    assert instantiated.spec.foo == \"system foo\"\n\n\ndef
      test_system_fallback_default_override_spec():\n    model = SimpleModel(simple=dict(foo=\"baz\"))\n
      \   instantiated = model.simple.instantiate()\n    assert type(instantiated)
      == System\n    assert instantiated.spec.foo == \"baz\"\n\n\nclass ExtendedModel(Reference[object,
      Random]):\n    ...\n\n\nclass Wrapper(BaseModel):\n    extended: ExtendedModel
      = Field(default_factory=ExtendedModel)\n\n\ndef test_extending_reference_wrapped():\n
      \   instantiated = Wrapper().extended.instantiate()\n    assert type(instantiated)
      == Random\n    assert instantiated.spec.foo == \"random foo\"\n\n\ndef test_extended_reference_wrapped_with_overrides():\n
      \   instantiated = Wrapper(extended=dict(foo=\"bar\")).extended.instantiate()\n
      \   assert type(instantiated) == Random\n    assert instantiated.spec.foo ==
      \"bar\"\n\n\ndef test_extended_reference_raw():\n    instantiated = ExtendedModel().instantiate()\n
      \   assert type(instantiated) == Random\n    assert instantiated.spec.foo ==
      \"random foo\"\n\n\ndef test_reference_with_no_default():\n    random_ = Reference[Random]\n
      \   instantiated = random_().instantiate()\n    instantiated.spec.foo = \"random_foo\"\n\n\ndef
      test_reference_with_default():\n    random_ = Reference[Base, Random]\n    instantiated
      = random_().instantiate()\n    instantiated.spec.foo = \"random_foo\"\n\n\ndef
      test_reference_with_string_default():\n    with resource():\n        test_resource
      = Reference[Base, \"TestResource\"]\n        instantiated = test_resource().instantiate()\n
      \       assert type(instantiated) == OS\n        assert instantiated.spec.foo
      == \"os foo\"\n\n\ndef test_annotated_ref_plays_nicely_with_descriptions():\n
      \   class Fielded(BaseModel):\n        simple: AnnotatedReference[System] =
      Field(description=\"A simple reference\")\n\n    with resource(name=\"System\",
      implementation=fqn(System)):\n        Fielded().simple.instantiate().spec.foo
      = \"system foo\"\n\n\ndef test_loosely_validated_type_bounds_dumping_dict():\n
      \   class Fielded(BaseModel):\n        simple: Reference[Base] = Field(description=\"A
      simple reference\")\n\n    dumped = dict(simple=Reference[System]().model_dump())\n
      \   fielded = Fielded.model_validate(dumped)\n    assert fielded.simple.instantiate().spec.foo
      == \"system foo\"\n\n\ndef test_loosely_validated_type_bounds():\n    class
      Fielded(BaseModel):\n        simple: Reference[Base] = Field(description=\"A
      simple reference\")\n\n    reference = Reference(implementation=fqn(System))\n
      \   fielded = Fielded(simple=reference)\n    assert fielded.simple.instantiate().spec.foo
      == \"system foo\"\n\n\ndef test_referencing_base_models_directly():\n    with
      resource(name=\"BaseSpec\", implementation=fqn(BaseSpec), spec=dict(foo=\"bar\")):\n
      \       assert AnnotatedReference[BaseSpec]().instantiate().foo == \"bar\"\n"
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Length:
      - '1251'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:29:22 GMT
      ETag:
      - W/"a6451ac3ea6080756a59a869522e698cda515dc30ef00293ac565ab78e8b4b2c"
      Expires:
      - Tue, 20 Feb 2024 21:34:22 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - 3694dec634add91f1b3edc0e3484b01093a386aa
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - 3692:255865:B8325:10BD00:65D519B2
      X-Served-By:
      - cache-bfi-kbfi7400077-BFI
      X-Timer:
      - S1708464562.314023,VS0,VE132
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/app/api/chat/messages?ref=main
  response:
    content: '[{"name":"route.ts","path":"webui/app/api/chat/messages/route.ts","sha":"16b47860356e5005e70f8a77609db4cd400646f0","size":2120,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/app/api/chat/messages/route.ts?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/webui/app/api/chat/messages/route.ts","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/16b47860356e5005e70f8a77609db4cd400646f0","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/webui/app/api/chat/messages/route.ts","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/app/api/chat/messages/route.ts?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/16b47860356e5005e70f8a77609db4cd400646f0","html":"https://github.com/eidolon-ai/eidolon/blob/main/webui/app/api/chat/messages/route.ts"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:29:22 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E51E:257FF1:161782:1F7E15:65D519B2
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4602'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '398'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/util/__init__.py
  response:
    content: ''
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Length:
      - '0'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:29:22 GMT
      ETag:
      - W/"938f66ede415ccb10764da47cd5f3cfc076c07b8791c708cfa8ec54982197c1f"
      Expires:
      - Tue, 20 Feb 2024 21:34:22 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - a8df8d4e5ba9dd51a68501bb722804a9280ba7c7
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - 8320:3402:62C303:7533CF:65D519B2
      X-Served-By:
      - cache-yvr1524-YVR
      X-Timer:
      - S1708464562.309512,VS0,VE130
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/agent/retriever_agent/hyde_question_transformer.py
  response:
    content: "import uuid\nfrom jinja2 import Environment, StrictUndefined\nfrom pydantic
      import Field\nfrom typing import List\n\nfrom eidolon_ai_sdk.agent.retriever_agent.question_transformer
      import QuestionTransformerSpec, QuestionTransformer\nfrom eidolon_ai_sdk.cpu.agent_cpu
      import AgentCPU\nfrom eidolon_ai_sdk.cpu.agent_io import UserTextCPUMessage\nfrom
      eidolon_ai_sdk.system.reference_model import Specable, AnnotatedReference\n\n\nclass
      HydeQuestionTransformerSpec(QuestionTransformerSpec):\n    cpu: AnnotatedReference[AgentCPU]\n
      \   prompt: str = Field(\n        default=\"Please write a passage to answer
      the question \\nQuestion: {{question}}?\\nPassage:\",\n        description=\"The
      prompt to be used for the question transformer. This should be a template where
      the user question is the field {{question}}\",\n    )\n\n\nclass HydeQuestionTransformer(QuestionTransformer,
      Specable[HydeQuestionTransformerSpec]):\n    def __init__(self, **kwargs):\n
      \       super().__init__(**kwargs)\n        self.cpu = self.spec.cpu.instantiate()\n
      \       self.cpu.record_memory = False\n\n    async def transform(self, question:
      str) -> List[str]:\n        thread = await self.cpu.main_thread(str(uuid.uuid4()))\n
      \       env = Environment(undefined=StrictUndefined)\n        userPrompt = env.from_string(self.spec.prompt).render(question=question)\n
      \       response = await thread.run_request(prompts=[UserTextCPUMessage(prompt=userPrompt)],
      output_format=\"str\")\n\n        return [response]\n"
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Length:
      - '642'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:29:22 GMT
      ETag:
      - W/"455399aa19c39a974cb9ebc5e893a97faf08ebefbb705b44cc291718626c9644"
      Expires:
      - Tue, 20 Feb 2024 21:34:22 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - 53a7035cabae61be81cbd9a0bf74c002fc7963cb
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - 2ABE:254203:B5C56:109679:65D519B1
      X-Served-By:
      - cache-bfi-krnt7300092-BFI
      X-Timer:
      - S1708464562.314822,VS0,VE140
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/memory/document.py
  response:
    content: "from pydantic import BaseModel, Field\nfrom typing import List\n\n\nclass
      Document(BaseModel):\n    id: str = Field(default=None, description=\"The unique
      identifier for the document\")\n    page_content: str = Field(..., description=\"The
      content of the document.\")\n    metadata: dict = Field(default_factory=dict,
      description=\"The metadata of the document.\")\n\n\nclass EmbeddedDocument(BaseModel):\n
      \   id: str = Field(description=\"The unique identifier for the document\")\n
      \   embedding: List[float] = Field(..., description=\"The content of the document.\")\n
      \   metadata: dict = Field(default_factory=dict, description=\"The metadata
      of the document.\")\n"
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Length:
      - '240'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:29:22 GMT
      ETag:
      - W/"06beea091262a1f928cc6d97978447b41f777dc850388780f37486d1a133e289"
      Expires:
      - Tue, 20 Feb 2024 21:34:22 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - bd36100a63e7bc1bd4559f547a82891424c35245
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - 98F6:283009:73008:AAF18:65D519B1
      X-Served-By:
      - cache-bfi-krnt7300038-BFI
      X-Timer:
      - S1708464562.349218,VS0,VE121
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/app/api/auth/[...nextauth]?ref=main
  response:
    content: '[{"name":"route.ts","path":"webui/app/api/auth/[...nextauth]/route.ts","sha":"bc08a9bacbf6090f87ae79302e31fc9aad1c6a8f","size":2048,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/app/api/auth/[...nextauth]/route.ts?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/webui/app/api/auth/[...nextauth]/route.ts","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/bc08a9bacbf6090f87ae79302e31fc9aad1c6a8f","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/webui/app/api/auth/%5B...nextauth%5D/route.ts","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/app/api/auth/[...nextauth]/route.ts?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/bc08a9bacbf6090f87ae79302e31fc9aad1c6a8f","html":"https://github.com/eidolon-ai/eidolon/blob/main/webui/app/api/auth/[...nextauth]/route.ts"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:29:22 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E541:25382C:1531FC:1E985D:65D519B2
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4601'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '399'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/system/cassettes?ref=main
  response:
    content: '[{"name":"test_generic_agent","path":"sdk/tests/system/cassettes/test_generic_agent","sha":"e92d7fa1c1bbe990312ec1c4720d01f15cb342f8","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/system/cassettes/test_generic_agent?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/sdk/tests/system/cassettes/test_generic_agent","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/e92d7fa1c1bbe990312ec1c4720d01f15cb342f8","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/system/cassettes/test_generic_agent?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/e92d7fa1c1bbe990312ec1c4720d01f15cb342f8","html":"https://github.com/eidolon-ai/eidolon/tree/main/sdk/tests/system/cassettes/test_generic_agent"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:29:22 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E543:24F1D0:15C5D8:1F2CD9:65D519B2
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4600'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '400'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/agent/retriever_agent/multi_question_transformer.py
  response:
    content: "import uuid\nfrom jinja2 import Environment, StrictUndefined\nfrom pydantic
      import Field, BaseModel\nfrom typing import List\n\nfrom eidolon_ai_sdk.agent.retriever_agent.question_transformer
      import QuestionTransformerSpec, QuestionTransformer\nfrom eidolon_ai_sdk.cpu.agent_cpu
      import AgentCPU\nfrom eidolon_ai_sdk.cpu.agent_io import UserTextCPUMessage\nfrom
      eidolon_ai_sdk.system.reference_model import Specable, AnnotatedReference\n\n\nclass
      MultiQuestionTransformerSpec(QuestionTransformerSpec):\n    cpu: AnnotatedReference[AgentCPU]\n
      \   keep_original: bool = Field(default=True, description=\"Whether to keep
      the original question in the output\")\n    number_to_generate: int = Field(default=3,
      description=\"The number of questions to generate\")\n    prompt: str = Field(\n
      \       default=\"\"\"You are an AI language model assistant. Your task is to
      generate {{number_to_generate}} different versions of the given user \n    question
      to retrieve relevant documents from a vector  database. By generating multiple
      perspectives on the user question, \n    your goal is to help the user overcome
      some of the limitations of distance-based similarity search. Provide these alternative
      \n    questions separated by newlines. Original question: {{question}}\"\"\",\n
      \       description=\"The prompt to be used for the question transformer. This
      should be a template where the user question is the field {{question}}\",\n
      \   )\n\n\nclass QuestionList(BaseModel):\n    questions: List[str]\n\n\nclass
      MultiQuestionTransformer(QuestionTransformer, Specable[MultiQuestionTransformerSpec]):\n
      \   def __init__(self, **kwargs):\n        super().__init__(**kwargs)\n        self.cpu
      = self.spec.cpu.instantiate()\n        self.cpu.record_memory = False\n\n    async
      def transform(self, question: str) -> List[str]:\n        thread = await self.cpu.main_thread(str(uuid.uuid4()))\n
      \       env = Environment(undefined=StrictUndefined)\n        userPrompt = env.from_string(self.spec.prompt).render(\n
      \           question=question, number_to_generate=self.spec.number_to_generate\n
      \       )\n        response = await thread.run_request(\n            prompts=[UserTextCPUMessage(prompt=userPrompt)],
      output_format=QuestionList.model_json_schema()\n        )\n\n        if self.spec.keep_original:\n
      \           return [question] + response[\"questions\"]\n        else:\n            return
      response.questions\n"
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Length:
      - '987'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:29:22 GMT
      ETag:
      - W/"364e031158888a9b114c7732ca6e512293535e047659f28b533edf0d3805b811"
      Expires:
      - Tue, 20 Feb 2024 21:34:22 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - 6f08e23207a86bedb29a998ea869f56cc22c66bc
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - DFEE:71E3:771C3:902AB:65D519B2
      X-Served-By:
      - cache-yvr1522-YVR
      X-Timer:
      - S1708464562.345056,VS0,VE143
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/agent/retriever_agent/document_reranker.py
  response:
    content: "from abc import ABC, abstractmethod\nfrom pydantic import BaseModel,
      Field\nfrom typing import Dict, List\n\nfrom eidolon_ai_sdk.system.reference_model
      import Specable\n\n\nclass DocumentReranker(ABC):\n    @abstractmethod\n    async
      def rerank(self, documents: Dict[str, Dict[str, float]]) -> List[tuple[str,
      float]]:\n        pass\n\n\nclass SimpleSortedReranker(DocumentReranker):\n
      \   async def rerank(self, documents: Dict[str, Dict[str, float]]) -> List[tuple[str,
      float]]:\n        reranked_results = {}\n        for docs in documents.values():\n
      \           for doc, score in docs.items():\n                if doc not in reranked_results:\n
      \                   reranked_results[doc] = [score]\n                else:\n
      \                   reranked_results[doc].append(score)\n\n        # first,
      average the scores\n        ret = [(doc, sum(scores) / len(scores)) for doc,
      scores in reranked_results.items()]\n        # then, sort by score\n        ret
      = sorted(ret, key=lambda x: x[1], reverse=True)\n\n        return ret\n\n\nclass
      RAGFusionRerankerSpec(BaseModel):\n    k: int = Field(default=60, description=\"The
      rerank factor.\")\n\n\nclass RAGFusionReranker(DocumentReranker, Specable[RAGFusionRerankerSpec]):\n
      \   async def rerank(self, documents: Dict[str, Dict[str, float]]) -> List[tuple[str,
      float]]:\n        \"\"\"Rerank a list of documents.\n\n        Args:\n            documents:
      The map of documents to rerank. documents is a dictionary of query -> dictionary
      \"doc_id\" -> \"score\".\n\n        Returns:\n            The reranked documents
      as a list of tuples of (doc_id, score).\n        \"\"\"\n        fused_scores
      = {}\n        for query, docs in documents.items():\n            for rank, (doc_id,
      score) in enumerate(sorted(docs.items(), key=lambda x: x[1], reverse=True)):\n
      \               if doc_id not in fused_scores:\n                    fused_scores[doc_id]
      = 0\n                fused_scores[doc_id] += 1 / (rank + self.spec.k)\n\n        reranked_results
      = [\n            (doc, score) for doc, score in sorted(fused_scores.items(),
      key=lambda x: x[1], reverse=True)\n        ]\n\n        return reranked_results\n"
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Length:
      - '704'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:29:22 GMT
      ETag:
      - W/"7a77bc30ce6ae3e4d87814cfa6fe82d51ca927cf8b354869fd4b011d27fbc6d6"
      Expires:
      - Tue, 20 Feb 2024 21:34:22 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - 02decd9adf4fdc60068245c9aca90b627f5deee3
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - BD70:4BE5:6AB76:84110:65D519B2
      X-Served-By:
      - cache-yvr1523-YVR
      X-Timer:
      - S1708464562.154902,VS0,VE355
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/agent/cassettes/test_retriever_agent?ref=main
  response:
    content: '[{"name":"test_search.yaml","path":"sdk/tests/agent/cassettes/test_retriever_agent/test_search.yaml","sha":"48087271a775240e9fed3ec3c5eac7579a004c39","size":209977,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/agent/cassettes/test_retriever_agent/test_search.yaml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/agent/cassettes/test_retriever_agent/test_search.yaml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/48087271a775240e9fed3ec3c5eac7579a004c39","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/agent/cassettes/test_retriever_agent/test_search.yaml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/agent/cassettes/test_retriever_agent/test_search.yaml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/48087271a775240e9fed3ec3c5eac7579a004c39","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/agent/cassettes/test_retriever_agent/test_search.yaml"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:29:22 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E539:276CC5:101D53:1780CA:65D519B2
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4599'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '401'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/memory/chroma_vector_store.py
  response:
    content: "try:\n    __import__(\"pysqlite3\")\n    import sys\n\n    sys.modules[\"sqlite3\"]
      = sys.modules.pop(\"pysqlite3\")\nexcept ImportError:\n    pass\nimport chromadb\nfrom
      chromadb import Include, QueryResult\nfrom chromadb.api.models.Collection import
      Collection\nfrom pathlib import Path\nfrom pydantic import Field, field_validator\nfrom
      typing import List, Dict, Any, Optional\nfrom urllib.parse import urlparse,
      parse_qs\n\nfrom eidolon_ai_sdk.memory.document import EmbeddedDocument\nfrom
      eidolon_ai_sdk.memory.file_system_vector_store import FileSystemVectorStore,
      FileSystemVectorStoreSpec\nfrom eidolon_ai_sdk.memory.vector_store import QueryItem\nfrom
      eidolon_ai_sdk.system.reference_model import Specable\nfrom eidolon_ai_sdk.util.str_utils
      import replace_env_var_in_string\n\n\nclass ChromaVectorStoreConfig(FileSystemVectorStoreSpec):\n
      \   url: str = Field(\n        \"file://${EIDOLON_DATA_DIR}/doc_producer\",\n
      \       description=\"The url of the chroma database. \"\n        + \"Use http(s)://$HOST:$PORT?header1=value1&header2=value2
      to pass headers to the database.\"\n        + \"Use file://$PATH to use a local
      file database.\",\n        validate_default=True,\n    )\n\n    # noinspection
      PyMethodParameters,HttpUrlsUsage\n    @field_validator(\"url\")\n    def validate_url(cls,
      url):\n        if url.startswith(\"file://\"):\n            if len(url) < 8:\n
      \               raise ValueError(\"file:// must be followed by a path\")\n\n
      \           path = url[7:]\n            if len(path) == 0:\n                raise
      ValueError(\"file:// must be followed by a path\")\n\n            # validate
      path is a file on disk\n            value = replace_env_var_in_string(path,
      EIDOLON_DATA_DIR=\"/tmp/eidolon_data_dir\")\n            # Convert the string
      to a Path object\n            path = Path(value).resolve()\n\n            #
      Check if the path is absolute\n            if not path.is_absolute():\n                raise
      ValueError(f\"The root_dir must be an absolute path. Received: {path}->{value}\")\n\n
      \           return f\"file://{path.absolute()}\"\n        if not (url.startswith(\"http://\")
      or url.startswith(\"https://\")):\n            raise ValueError(\"url must start
      with file://, http://, or https://\")\n\n\nclass ChromaVectorStore(FileSystemVectorStore,
      Specable[ChromaVectorStoreConfig]):\n    spec: ChromaVectorStoreConfig\n    client:
      chromadb.Client\n\n    def __init__(self, spec: ChromaVectorStoreConfig):\n
      \       super().__init__(spec)\n        self.spec = spec\n        self.client
      = None\n\n    async def start(self):\n        self.connect()\n\n    def connect(self):\n
      \       url = urlparse(self.spec.url)\n        if url.scheme == \"file\":\n
      \           path = url.path\n            self.client = chromadb.PersistentClient(path)\n
      \       else:\n            host = url.hostname\n            port = url.port
      or \"8000\"\n            ssl = url.scheme == \"https\"\n            if url.query
      and len(url.query) > 0:\n                headers = parse_qs(url.query)\n            else:\n
      \               headers = None\n            self.client = chromadb.HttpClient(host=host,
      port=port, ssl=ssl, headers=headers)\n\n    async def stop(self):\n        pass\n\n
      \   def _get_collection(self, name: str) -> Collection:\n        if not self.client:\n
      \           self.connect()\n\n        try:\n            return self.client.get_or_create_collection(name=name)\n
      \       except BaseException as e:\n            raise RuntimeError(f\"Failed
      to get collection {name}\") from e\n\n    async def add_embedding(self, collection:
      str, docs: List[EmbeddedDocument], **add_kwargs: Any):\n        collection =
      self._get_collection(name=collection)\n        doc_ids = [doc.id for doc in
      docs]\n        embeddings = [doc.embedding for doc in docs]\n        metadata
      = [doc.metadata for doc in docs]\n        collection.upsert(embeddings=embeddings,
      ids=doc_ids, metadatas=metadata, **add_kwargs)\n\n    async def delete_embedding(self,
      collection: str, doc_ids: List[str], **delete_kwargs: Any):\n        collection
      = self._get_collection(name=collection)\n        collection.delete(ids=doc_ids,
      **delete_kwargs)\n\n    async def get_metadata(self, collection: str, doc_ids:
      List[str]):\n        collection = self._get_collection(name=collection)\n        return
      collection.get(ids=doc_ids, include=[\"metadatas\"])[\"metadatas\"]\n\n    async
      def query_embedding(\n        self,\n        collection: str,\n        query:
      List[float],\n        num_results: int,\n        metadata_where: Optional[Dict[str,
      str]] = None,\n        include_embeddings=False,\n    ) -> List[QueryItem]:\n
      \       collection = self._get_collection(name=collection)\n        thingsToInclude:
      Include = [\"metadatas\", \"distances\"]\n        if include_embeddings:\n            thingsToInclude.append(\"embeddings\")\n\n
      \       results: QueryResult = collection.query(\n            query_embeddings=[query],\n
      \           n_results=num_results,\n            where=metadata_where,\n            include=thingsToInclude,\n
      \       )\n\n        ret = []\n        for i, doc_id in enumerate(results[\"ids\"][0]):\n
      \           embedding = results[\"embeddings\"][0][i] if include_embeddings
      else None\n            ret.append(\n                QueryItem(\n                    id=doc_id,\n
      \                   score=results[\"distances\"][0][i],\n                    embedding=embedding,\n
      \                   metadata=results[\"metadatas\"][0][i],\n                )\n
      \           )\n\n        return ret\n"
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Length:
      - '1760'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:29:22 GMT
      ETag:
      - W/"7d2b21dfc04a3c507b5cf636519990e28360cae92bec81b04cbfaead20448773"
      Expires:
      - Tue, 20 Feb 2024 21:34:22 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - ac2c3b36d825f1155bae442c0a81a4e0e17f00d7
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - 98E8:4005:874BF:A0533:65D519B2
      X-Served-By:
      - cache-yvr1522-YVR
      X-Timer:
      - S1708464562.206994,VS0,VE348
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/agent/tot_agent/__init__.py
  response:
    content: ''
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Length:
      - '0'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:29:22 GMT
      ETag:
      - W/"938f66ede415ccb10764da47cd5f3cfc076c07b8791c708cfa8ec54982197c1f"
      Expires:
      - Tue, 20 Feb 2024 21:34:22 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - d6e72207047d3a0ae103d4399bd219c6d0001ffe
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - 64FA:57EB:65A255:784A41:65D519B2
      X-Served-By:
      - cache-yvr1520-YVR
      X-Timer:
      - S1708464562.441864,VS0,VE151
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/memory/embeddings.py
  response:
    content: "from abc import ABC, abstractmethod\nfrom typing import Sequence, Any,
      Literal, AsyncGenerator, Optional, List\n\nfrom openai import AsyncOpenAI\nfrom
      pydantic import BaseModel, Field\n\nfrom eidolon_ai_sdk.system.reference_model
      import Specable\nfrom eidolon_ai_sdk.memory.document import Document, EmbeddedDocument\n\n\nclass
      EmbeddingSpec(BaseModel):\n    pass\n\n\nclass Embedding(ABC, Specable[EmbeddingSpec]):\n
      \   def __init__(self, spec: EmbeddingSpec):\n        super().__init__(spec)\n
      \       self.spec = spec\n\n    @abstractmethod\n    async def embed_text(self,
      text: str, **kwargs: Any) -> List[float]:\n        \"\"\"Create an embedding
      for a single piece of text.\n\n        Args:\n            text: The text to
      be encoded.\n\n        Returns:\n            An embedding for the text.\n        \"\"\"\n\n
      \   async def embed(self, documents: Sequence[Document], **kwargs: Any) -> AsyncGenerator[EmbeddedDocument,
      None]:\n        \"\"\"Create embeddings for a list of documents.\n\n        Args:\n
      \           documents: A sequence of Documents to be encoded.\n\n        Returns:\n
      \           A sequence of EmbeddedDocuments.\n        \"\"\"\n        for document
      in documents:\n            text = await self.embed_text(document.page_content,
      **kwargs)\n            yield EmbeddedDocument(\n                id=document.id,\n
      \               embedding=text,\n                metadata=document.metadata,\n
      \           )\n\n    async def start(self):\n        pass\n\n    async def stop(self):\n
      \       pass\n\n\nclass NoopEmbedding(Embedding, Specable[EmbeddingSpec]):\n
      \   async def embed_text(self, text: str, **kwargs: Any) -> Sequence[float]:\n
      \       return []\n\n\nclass OpenAIEmbeddingSpec(EmbeddingSpec):\n    model:
      Literal[\n        \"text-embedding-davinci-001\",\n        \"text-embedding-babbage-001\",\n
      \       \"text-embedding-curie-001\",\n        \"text-embedding-ada-002\",\n
      \   ] = Field(default=\"text-embedding-ada-002\", description=\"The name of
      the model to use.\")\n\n\nclass OpenAIEmbedding(Embedding, Specable[OpenAIEmbeddingSpec]):\n
      \   llm: Optional[AsyncOpenAI] = None\n\n    def __init__(self, spec: OpenAIEmbeddingSpec):\n
      \       super().__init__(spec)\n        self.spec = spec\n\n    async def start(self):\n
      \       await super().start()\n        self.llm = AsyncOpenAI()\n\n    async
      def stop(self):\n        await super().stop()\n        await self.llm.close()\n
      \       self.llm = None\n\n    async def embed_text(self, text: str, **kwargs:
      Any) -> Sequence[float]:\n        response = await self.llm.embeddings.create(\n
      \           input=text,\n            model=self.spec.model,  # Choose the model
      as per your requirement\n        )\n\n        embedding_vector = response.data[0].embedding\n
      \       return embedding_vector\n"
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Length:
      - '844'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:29:22 GMT
      ETag:
      - W/"bd1cff1a02a7c529947059aeb030bec721f140d070089c2112707cb96a95883b"
      Expires:
      - Tue, 20 Feb 2024 21:34:22 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - ac484163812e6b3646dfdd40083460813ca8b326
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - 3692:255865:B8326:10BD01:65D519B2
      X-Served-By:
      - cache-bfi-kbfi7400067-BFI
      X-Timer:
      - S1708464562.467047,VS0,VE135
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/util/test_class_utils.py
  response:
    content: "import importlib\nimport sys\nfrom importlib.util import module_from_spec\n\nimport
      pytest\n\nfrom eidolon_ai_sdk.util.class_utils import for_name\n\n\n# Test class
      for grouping the tests\nclass TestForName:\n    # Setup method to create a sample
      module with classes for testing\n    @classmethod\n    def setup_class(cls):\n
      \       # Create a temporary module with classes for testing\n        cls.temp_module_name
      = \"temp_test_module\"\n        cls.temp_module = module_from_spec(importlib.util.spec_from_loader(cls.temp_module_name,
      loader=None))\n        cls.base_class = type(\"BaseClass\", (object,), {})\n
      \       cls.sub_class = type(\"SubClass\", (cls.base_class,), {})\n        cls.non_sub_class
      = type(\"NonSubClass\", (object,), {})\n        setattr(cls.temp_module, \"BaseClass\",
      cls.base_class)\n        setattr(cls.temp_module, \"SubClass\", cls.sub_class)\n
      \       setattr(cls.temp_module, \"NonSubClass\", cls.non_sub_class)\n        sys.modules[cls.temp_module_name]
      = cls.temp_module\n\n    # Teardown method to clean up the temporary module\n
      \   @classmethod\n    def teardown_class(cls):\n        del sys.modules[cls.temp_module_name]\n\n
      \   def test_successful_import_and_subclass_check(self):\n        \"\"\"Test
      successful dynamic import and subclass check.\"\"\"\n        result = for_name(f\"{self.temp_module_name}.SubClass\",
      self.base_class)\n        assert result is self.sub_class\n\n    def test_implementation_fqn_not_provided(self):\n
      \       \"\"\"Test error when the fully qualified name is not provided.\"\"\"\n
      \       with pytest.raises(ValueError) as exc_info:\n            for_name(\"\",
      self.base_class)\n        assert \"Implementation not provided\" in str(exc_info.value)\n\n
      \   def test_implementation_fqn_incorrect(self):\n        \"\"\"Test error when
      the fully qualified name is incorrect.\"\"\"\n        with pytest.raises(ValueError)
      as exc_info:\n            for_name(f\"{self.temp_module_name}.NonExistentClass\",
      self.base_class)\n        assert \"Unable to import\" in str(exc_info.value)\n\n
      \   def test_implementation_class_not_subclass(self):\n        \"\"\"Test error
      when the class is not a subclass of the specified type.\"\"\"\n        with
      pytest.raises(ValueError) as exc_info:\n            for_name(f\"{self.temp_module_name}.NonSubClass\",
      self.sub_class)\n        assert \"not found or is not a subclass\" in str(exc_info.value)\n\n\n#
      You can run these tests by executing the command `pytest test_dynamic_importer.py`\n#
      in your terminal, assuming `test_dynamic_importer.py` is the name of the file
      containing these tests.\n"
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Length:
      - '782'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:29:22 GMT
      ETag:
      - W/"9b5fc3cd36f6057e7b773b54193f54284657b41efab1389950a0c9d1ab7fd212"
      Expires:
      - Tue, 20 Feb 2024 21:34:22 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - 266646f2f61b1e5df33e96feb5b54073e7d6b4e7
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - 88C2:253EB0:B71F5:10AC24:65D519B1
      X-Served-By:
      - cache-bfi-kbfi7400021-BFI
      X-Timer:
      - S1708464562.467480,VS0,VE138
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/agent/retriever_agent/question_transformer.py
  response:
    content: "from typing import List\n\nfrom abc import ABC, abstractmethod\n\nfrom
      pydantic import BaseModel\n\nfrom eidolon_ai_sdk.system.reference_model import
      Specable\n\n\nclass QuestionTransformerSpec(BaseModel):\n    pass\n\n\nclass
      QuestionTransformer(ABC, Specable[QuestionTransformerSpec]):\n    @abstractmethod\n
      \   async def transform(self, question: str) -> List[str]:\n        \"\"\"Transform
      a question into a series of related question.\n\n        Args:\n            question:
      The question to be transformed.\n\n        Returns:\n            The transformed
      questions.\n        \"\"\"\n"
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Length:
      - '280'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:29:22 GMT
      ETag:
      - W/"7b79c9e130a7ea095f671b379197cf9a6d8f7ad935bd6409d2703ecbd4e37172"
      Expires:
      - Tue, 20 Feb 2024 21:34:22 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - d6681e70f9bf7257d403fa749c658cdf38914b22
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - F06C:254BFB:B9C08:10D632:65D519B1
      X-Served-By:
      - cache-bfi-krnt7300119-BFI
      X-Timer:
      - S1708464562.467897,VS0,VE151
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/util/test_schema_to_model.py
  response:
    content: "import jsonref\nimport pytest\nfrom fastapi import UploadFile\nfrom
      pydantic import BaseModel, ValidationError, Field\n\nfrom eidolon_ai_sdk.util.schema_to_model
      import schema_to_model\n\n\nclass NestedObject(BaseModel):\n    int_field: int
      = None\n\n\nclass ComplexInput(BaseModel):\n    nested_object: NestedObject
      = Field(default=None, description=\"A nested object\")\n    optional_nested_object:
      NestedObject = Field(default=None, description=\"A nested object\")\n    optional_array_of_strings:
      list[str] = Field(default=None, description=\"An array of strings\")\n    array_of_objects:
      list[NestedObject] = Field(default=None, description=\"An array of objects\")\n
      \   multiple_files: list[UploadFile] = Field(default=None, description=\"A list
      of files\")\n    optional_file: UploadFile = Field(default=None, description=\"A
      single file\")\n    optional_multiple_files: list[UploadFile] = Field(default=None,
      description=\"A list of files\")\n\n\n# Define a pytest class for grouping the
      tests\nclass TestSchemaToModel:\n    def test_complex_model(self):\n        schema
      = ComplexInput.model_json_schema()\n        duped = schema_to_model(jsonref.replace_refs(schema),
      \"Dupe\")\n        assert duped.model_validate(dict(nested_object=dict(int_field=1))).nested_object.int_field
      == 1\n\n    def test_simple_model_creation(self):\n        \"\"\"Test creation
      of a simple model with primitive types.\"\"\"\n        json_schema = {\n            \"type\":
      \"object\",\n            \"properties\": {\"name\": {\"type\": \"string\"},
      \"age\": {\"type\": \"integer\"}},\n            \"required\": [\"name\"],\n
      \       }\n        SimpleModel = schema_to_model(json_schema, \"SimpleModel\")\n
      \       assert issubclass(SimpleModel, BaseModel)\n        model = SimpleModel(name=\"John
      Doe\", age=30)\n        assert model.name == \"John Doe\"\n        assert model.age
      == 30\n\n    def test_nested_model_creation(self):\n        \"\"\"Test creation
      of a model with nested objects.\"\"\"\n        json_schema = {\n            \"type\":
      \"object\",\n            \"properties\": {\n                \"user\": {\n                    \"type\":
      \"object\",\n                    \"properties\": {\n                        \"name\":
      {\"type\": \"string\"},\n                        \"age\": {\"type\": \"integer\"},\n
      \                   },\n                    \"required\": [\"name\"],\n                }\n
      \           },\n        }\n        NestedModel = schema_to_model(json_schema,
      \"NestedModel\")\n        assert issubclass(NestedModel, BaseModel)\n        nested_model
      = NestedModel(user={\"name\": \"Jane Doe\", \"age\": 25})\n        assert nested_model.user.name
      == \"Jane Doe\"\n        assert nested_model.user.age == 25\n\n    def test_array_model_creation(self):\n
      \       \"\"\"Test creation of a model with array properties.\"\"\"\n        json_schema
      = {\n            \"type\": \"object\",\n            \"properties\": {\"tags\":
      {\"type\": \"array\", \"items\": {\"type\": \"string\"}}},\n        }\n        ArrayModel
      = schema_to_model(json_schema, \"ArrayModel\")\n        assert issubclass(ArrayModel,
      BaseModel)\n        array_model = ArrayModel(tags=[\"tag1\", \"tag2\"])\n        assert
      array_model.tags == [\"tag1\", \"tag2\"]\n\n    def test_required_fields(self):\n
      \       \"\"\"Test that required fields are correctly identified and enforced.\"\"\"\n
      \       json_schema = {\n            \"type\": \"object\",\n            \"properties\":
      {\"name\": {\"type\": \"string\"}, \"age\": {\"type\": \"integer\"}},\n            \"required\":
      [\"name\"],\n        }\n        RequiredFieldModel = schema_to_model(json_schema,
      \"RequiredFieldModel\")\n        with pytest.raises(ValidationError):\n            RequiredFieldModel(age=30)
      \ # 'name' is required\n\n    def test_default_values(self):\n        \"\"\"Test
      that default values are correctly assigned.\"\"\"\n        json_schema = {\n
      \           \"type\": \"object\",\n            \"properties\": {\n                \"name\":
      {\"type\": \"string\", \"default\": \"Anonymous\"},\n                \"age\":
      {\"type\": \"integer\"},\n            },\n        }\n        DefaultModel =
      schema_to_model(json_schema, \"DefaultModel\")\n        model = DefaultModel(age=30)\n
      \       assert model.name == \"Anonymous\"\n        assert model.age == 30\n\n
      \       model = DefaultModel()\n        assert model.name == \"Anonymous\"\n
      \       assert model.age is None\n\n    def test_required_values(self):\n        \"\"\"Test
      that default values are correctly assigned.\"\"\"\n        json_schema = {\n
      \           \"type\": \"object\",\n            \"properties\": {\n                \"name\":
      {\"type\": \"string\", \"default\": \"Anonymous\"},\n                \"age\":
      {\"type\": \"integer\"},\n            },\n            \"required\": [\"age\"],\n
      \       }\n        DefaultModel = schema_to_model(json_schema, \"DefaultModel\")\n
      \       with pytest.raises(ValueError) as exc_info:\n            DefaultModel()\n
      \       assert (\n            \"1 validation error for DefaultModel\\n\"\n            \"age\\n\"\n
      \           \"  Field required [type=missing, input_value={}, input_type=dict]\\n\"\n
      \       ) in str(exc_info.value)\n\n    def test_invalid_schema(self):\n        \"\"\"Test
      that an invalid schema raises the appropriate error.\"\"\"\n        json_schema
      = {\"properties\": {\"name\": {\"type\": \"string\"}, \"age\": {\"type\": \"integer\"}}}\n
      \       with pytest.raises(ValueError) as exc_info:\n            schema_to_model(json_schema,
      \"InvalidModel\")\n        assert \"Schema must be an object with properties.\"
      in str(exc_info.value)\n\n    def test_unsupported_type(self):\n        \"\"\"Test
      that an unsupported type raises the appropriate error.\"\"\"\n        json_schema
      = {\n            \"type\": \"object\",\n            \"properties\": {\"name\":
      {\"type\": \"unsupported\"}},\n        }\n        with pytest.raises(ValueError)
      as exc_info:\n            schema_to_model(json_schema, \"UnsupportedModel\")\n
      \       assert \"Error creating field 'name'\" in str(exc_info.value)\n"
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Length:
      - '1256'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:29:22 GMT
      ETag:
      - W/"08a384cac2419c6d4ea804bee36786eb7ab22429dcef87fed6db96da25987421"
      Expires:
      - Tue, 20 Feb 2024 21:34:22 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - 1773602d101e07339b26816b07ddc25aefa4ff4c
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - DC44:251816:B3AE8:107510:65D519A8
      X-Served-By:
      - cache-bfi-krnt7300080-BFI
      X-Timer:
      - S1708464562.468054,VS0,VE155
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/agent/retriever_agent/retriever_agent.py
  response:
    content: "import asyncio\n\nfrom fastapi import Body\nfrom pydantic import BaseModel,
      Field, model_validator\nfrom typing import Annotated, List\nfrom urllib.parse
      import urlparse\n\nfrom eidolon_ai_sdk.agent.agent import register_program,
      AgentState\nfrom eidolon_ai_sdk.agent.doc_manager.document_manager import DocumentManager\nfrom
      eidolon_ai_sdk.agent.doc_manager.loaders.filesystem_loader import FilesystemLoader\nfrom
      eidolon_ai_sdk.agent.retriever_agent.document_reranker import DocumentReranker\nfrom
      eidolon_ai_sdk.agent.retriever_agent.question_transformer import QuestionTransformer\nfrom
      eidolon_ai_sdk.agent_os import AgentOS\nfrom eidolon_ai_sdk.system.fn_handler
      import FnHandler\nfrom eidolon_ai_sdk.system.reference_model import Specable,
      AnnotatedReference, Reference\nfrom eidolon_ai_sdk.util.class_utils import fqn\n\n\ndef
      make_description(agent: object, _handler: FnHandler) -> str:\n    # noinspection
      PyUnresolvedReferences\n    return agent.spec.description\n\n\nclass RetrieverAgentSpec(BaseModel):\n
      \   # these three fields are required and override the defaults of the subcomponents\n
      \   name: str = Field(description=\"The name of the document store to use.\")\n
      \   description: str = Field(\n        description=\"A detailed description
      of the the retriever including all necessary information for the calling agent
      to decide to call this agent, i.e. file type or location or etc...\"\n    )\n
      \   loader_root_location: str = Field(description=\"A URL specifying the root
      location of the loader.\")\n\n    loader_pattern: str = Field(default=\"**/*\",
      description=\"The search pattern to use when loading files.\")\n    max_num_results:
      int = Field(default=10, description=\"The maximum number of results to send
      to cpu.\")\n\n    document_manager: Reference[DocumentManager]\n    question_transformer:
      AnnotatedReference[QuestionTransformer]\n    document_reranker: AnnotatedReference[DocumentReranker]\n\n
      \   # noinspection PyMethodParameters\n    @model_validator(mode=\"before\")\n
      \   def set_fields(cls, value):\n        spec = value\n        if \"document_manager\"
      not in spec:\n            spec[\"document_manager\"] = dict()\n        doc_manager_spec
      = spec[\"document_manager\"]\n        # always set name\n        doc_manager_spec[\"name\"]
      = spec[\"name\"]\n        if \"loader\" not in doc_manager_spec:\n            doc_manager_spec[\"loader\"]
      = dict()\n        if \"spec\" not in doc_manager_spec[\"loader\"]:\n            doc_manager_spec[\"loader\"][\"spec\"]
      = dict()\n\n        if \"loader_root_location\" not in spec:\n            raise
      ValueError(\"loader_root_location must be specified in the spec\")\n        loader_url
      = urlparse(spec[\"loader_root_location\"])\n        if loader_url.scheme ==
      \"file\":\n            doc_manager_spec[\"loader\"][\"implementation\"] = fqn(FilesystemLoader)\n
      \           doc_manager_spec[\"loader\"][\"root_dir\"] = spec[\"loader_root_location\"][7:]\n
      \       else:\n            raise ValueError(\"loader_root_location spec must
      be a file:// url\")\n        if \"loader_pattern\" in spec:\n            doc_manager_spec[\"loader\"][\"pattern\"]
      = spec[\"loader_pattern\"]\n\n        return value\n\n\nclass DocSummary(BaseModel):\n
      \   id: str\n    file_name: str\n    file_path: str\n    text: str\n\n\nclass
      RetrieverAgent(Specable[RetrieverAgentSpec]):\n    def __init__(self, **kwargs):\n
      \       super().__init__(**kwargs)\n        Specable.__init__(self, **kwargs)\n
      \       self.document_manager = self.spec.document_manager.instantiate()\n\n
      \       self.question_transformer = (\n            self.spec.question_transformer.instantiate()
      if self.spec.question_transformer else None\n        )\n        self.document_reranker
      = self.spec.document_reranker.instantiate()\n\n    @register_program()\n    async
      def list_files(self) -> AgentState[List[str]]:\n        \"\"\"\n        List
      the files in the document store.\n        :return: The response from the cpu\n
      \       \"\"\"\n        files = [item async for item in await self.document_manager.list_files()]\n
      \       return AgentState(name=\"idle\", data=files)\n\n    @register_program(description=make_description)\n
      \   async def search(\n        self, question: Annotated[str, Body(description=\"The
      question to search for\", embed=True)]\n    ) -> List[DocSummary]:\n        \"\"\"\n
      \       Process the question by searching the document store.\n        :param
      question: The question to process\n        :return: The response from the cpu\n
      \       \"\"\"\n        await self.document_manager.sync_docs()\n\n        if
      self.question_transformer:\n            questions = await self.question_transformer.transform(question)\n
      \       else:\n            questions = [question]\n        _docs = await asyncio.gather(*(self._embed_question(question)
      for question in questions))\n        question_to_docs = {tu[0]: tu[1] for tu
      in zip(questions, _docs)}\n        rerank_questions = {}\n        for question,
      docs in question_to_docs.items():\n            rerank_questions[question] =
      {doc.id: doc.score for doc in docs}\n\n        reranked_docs = await self.document_reranker.rerank(rerank_questions)\n\n
      \       # now limit reranked_docs to max_num_results\n        reranked_docs
      = reranked_docs[: self.spec.max_num_results]\n\n        docs = AgentOS.similarity_memory.vector_store.get_docs(\n
      \           f\"doc_contents_{self.spec.name}\", [doc[0] for doc in reranked_docs]\n
      \       )\n        summaries = []\n        async for doc in docs:\n            file_path
      = doc.metadata[\"source\"]\n            summaries.append(\n                DocSummary(id=doc.id,
      file_name=file_path.split(\"/\")[-1], file_path=file_path, text=doc.page_content)\n
      \           )\n\n        return summaries\n\n    async def _embed_question(self,
      question):\n        embedded_q = await AgentOS.similarity_memory.embedder.embed_text(question)\n
      \       results_ = await AgentOS.similarity_memory.vector_store.raw_query(\n
      \           f\"doc_contents_{self.spec.name}\", embedded_q, self.spec.max_num_results\n
      \       )\n        return results_\n"
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Length:
      - '1808'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:29:22 GMT
      ETag:
      - W/"7312bdaab60115933d042ab93a4a28a6ed060fd3461c08e11ad8bf1ff9e21841"
      Expires:
      - Tue, 20 Feb 2024 21:34:22 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - 0d8224f10b036e7563367f95d08b8683d29acf9c
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - BF06:252418:B0313:103D36:65D519B1
      X-Served-By:
      - cache-bfi-kbfi7400095-BFI
      X-Timer:
      - S1708464562.448241,VS0,VE192
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/getting_started/2_custom_agents/resources?ref=main
  response:
    content: '[{"name":"hello_world_agent.yaml","path":"examples/eidolon_examples/getting_started/2_custom_agents/resources/hello_world_agent.yaml","sha":"a71cecfdf538efbfeca08e51bc5c301a36813431","size":146,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/getting_started/2_custom_agents/resources/hello_world_agent.yaml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/getting_started/2_custom_agents/resources/hello_world_agent.yaml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/a71cecfdf538efbfeca08e51bc5c301a36813431","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/eidolon_examples/getting_started/2_custom_agents/resources/hello_world_agent.yaml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/getting_started/2_custom_agents/resources/hello_world_agent.yaml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/a71cecfdf538efbfeca08e51bc5c301a36813431","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/getting_started/2_custom_agents/resources/hello_world_agent.yaml"}},{"name":"qa_agent.yaml","path":"examples/eidolon_examples/getting_started/2_custom_agents/resources/qa_agent.yaml","sha":"1e3850fafb165743a6abab9d36600e07dea90f28","size":205,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/getting_started/2_custom_agents/resources/qa_agent.yaml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/getting_started/2_custom_agents/resources/qa_agent.yaml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/1e3850fafb165743a6abab9d36600e07dea90f28","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/eidolon_examples/getting_started/2_custom_agents/resources/qa_agent.yaml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/getting_started/2_custom_agents/resources/qa_agent.yaml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/1e3850fafb165743a6abab9d36600e07dea90f28","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/getting_started/2_custom_agents/resources/qa_agent.yaml"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:29:22 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E551:2552AA:15BFEA:1F26C1:65D519B2
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4598'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '402'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/util/test_str_utils.py
  response:
    content: "import os\n\nimport pytest\n\nfrom eidolon_ai_sdk.util.str_utils import
      replace_env_var_in_string\n\n\nclass TestStrUtils:\n    # Test fixture to set
      environment variables\n    @pytest.fixture(autouse=True)\n    def set_env_vars(self):\n
      \       os.environ[\"FOO\"] = \"/somepath\"\n        os.environ[\"BAR\"] = \"/anotherpath\"\n
      \       yield  # this line is where the testing happens\n        # Teardown
      (if necessary)\n        del os.environ[\"FOO\"]\n        del os.environ[\"BAR\"]\n\n
      \   def test_single_replacement(self):\n        assert replace_env_var_in_string(\"Path:
      ${FOO}/app\") == \"Path: /somepath/app\"\n\n    def test_no_replacement(self):\n
      \       assert replace_env_var_in_string(\"Path: /not_an_env_var/app\") == \"Path:
      /not_an_env_var/app\"\n\n    def test_multiple_replacements_same_var(self):\n
      \       assert replace_env_var_in_string(\"${FOO}/app and ${FOO}/bin\") == \"/somepath/app
      and /somepath/bin\"\n\n    def test_multiple_replacements_different_vars(self):\n
      \       assert replace_env_var_in_string(\"${FOO}/app and ${BAR}/bin\") == \"/somepath/app
      and /anotherpath/bin\"\n\n    def test_no_variables(self):\n        assert replace_env_var_in_string(\"Just
      a normal string.\") == \"Just a normal string.\"\n\n    def test_empty_string(self):\n
      \       assert replace_env_var_in_string(\"\") == \"\"\n\n    def test_only_variable(self):\n
      \       assert replace_env_var_in_string(\"${FOO}\") == \"/somepath\"\n\n    def
      test_nonexistent_variable(self):\n        assert replace_env_var_in_string(\"Path:
      ${NONEXISTENT}/app\") == \"Path: ${NONEXISTENT}/app\"\n\n    def test_variable_surrounded_by_text(self):\n
      \       assert replace_env_var_in_string(\"Path: pre_${FOO}_post/app\") == \"Path:
      pre_/somepath_post/app\"\n"
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Length:
      - '515'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:29:22 GMT
      ETag:
      - W/"cfb2b34fbbf7c39e9031a90f3bc656de9e9e244c0a02d2a80144e729b7d73954"
      Expires:
      - Tue, 20 Feb 2024 21:34:22 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - cbb42a2fa0c1579c1bbfac19bcee687828082f14
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - 2836:256179:B31BC:106BAA:65D519B0
      X-Served-By:
      - cache-bfi-kbfi7400110-BFI
      X-Timer:
      - S1708464562.467194,VS0,VE173
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/cpu/llm/open_ai_speech.py
  response:
    content: "from typing import Optional, Literal\n\nfrom openai import AsyncOpenAI\nfrom
      pydantic import Field, BaseModel\n\nfrom eidolon_ai_sdk.system.reference_model
      import Specable\n\n\nclass OpenAiSpeechSpec(BaseModel):\n    text_to_speech_model:
      Literal[\"tts-1\", \"tts-1-hd\"] = Field(\n        default=\"tts-1-hd\", description=\"The
      model to use for text to speech.\"\n    )\n    text_to_speech_voice: Literal[\"alloy\",
      \"echo\", \"fable\", \"onyx\", \"nova\", \"shimmer\"] = Field(\n        default=\"alloy\",
      description=\"The voice to use for text to speech.\"\n    )\n    speech_to_text_model:
      Literal[\"whisper-1\"] = Field(\n        default=\"whisper-1\", description=\"The
      model to use for speech to text.\"\n    )\n    speech_to_text_temperature: float
      = Field(\n        default=0.3,\n        description=\"The sampling temperature,
      between 0 and 1. Higher values like 0.8 will make the output more random, while
      lower values like 0.2 will make it more focused and deterministic. If set to
      0, the model will use log probability to automatically increase the temperature
      until certain thresholds are hit.\",\n    )\n\n\nclass OpenAiSpeech(Specable[OpenAiSpeechSpec]):\n
      \   model: str\n    temperature: float\n    llm: AsyncOpenAI = None\n\n    def
      __init__(self, spec: OpenAiSpeechSpec, **kwargs):\n        super().__init__(spec,
      **kwargs)\n\n    async def text_to_speech(self, text: str) -> bytes:\n        \"\"\"\n
      \       Converts text to speech.\n\n        Args:\n            text (str): The
      text to convert to speech.\n\n        Returns:\n            bytes: The audio
      data.\n        \"\"\"\n        if not self.llm:\n            self.llm = AsyncOpenAI()\n\n
      \       response = await self.llm.audio.speech.create(\n            model=self.spec.text_to_speech_model,\n
      \           voice=self.spec.text_to_speech_voice,\n            input=text,\n
      \       )\n\n        return response.content\n\n    async def speech_to_text(self,
      audio: bytes, prompt: Optional[str] = None, language: Optional[str] = None)
      -> str:\n        \"\"\"\n        Converts speech to text.\n\n        Args:\n
      \           audio (bytes): The audio data.\n            prompt (Optional[str],
      optional): An optional text to guide the model's style or continue a previous
      audio segment. Defaults to None.\n            language (Optional[str], optional):
      The language of the input audio. Supplying the input language in ISO-639-1 format
      will improve accuracy and latency.\n        Returns:\n            str: The text.\n
      \       \"\"\"\n        if not self.llm:\n            self.llm = AsyncOpenAI()\n\n
      \       request = {\n            \"file\": audio,\n            \"model\": self.spec.speech_to_text_model,\n
      \           \"temperature\": self.spec.speech_to_text_temperature,\n        }\n\n
      \       if language:\n            request[\"language\"] = language\n\n        if
      prompt:\n            request[\"prompt\"] = prompt\n\n        response = await
      self.llm.audio.transcriptions.create(**request)\n\n        return response.text\n"
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Length:
      - '1023'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:29:22 GMT
      ETag:
      - W/"ce13c28d4728b640c40893b6597630ed92f19691ec892da094dde1ad1e2156a1"
      Expires:
      - Tue, 20 Feb 2024 21:34:22 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - 602e721a787b01955d39add0071994a482a19a6f
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - C634:180A:59BE8A:6C6435:65D519B2
      X-Served-By:
      - cache-yvr1531-YVR
      X-Timer:
      - S1708464563.521224,VS0,VE123
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/memory/file_memory.py
  response:
    content: "from abc import ABC, abstractmethod\n\n\nclass FileMemory(ABC):\n    \"\"\"\n
      \   Abstract base class representing the file memory interface for an agent.\n\n
      \   This class defines the essential file operations that an agent's memory
      component\n    must support. It includes starting and stopping the file memory
      processes,\n    reading from a file, and writing to a file within the agent's
      operational context.\n\n    All methods in this class are abstract and must
      be implemented by a subclass\n    that provides the specific logic for handling
      file operations related to the\n    agent's memory.\n    \"\"\"\n\n    @abstractmethod\n
      \   async def start(self):\n        \"\"\"\n        Starts the memory implementation.\n
      \       \"\"\"\n        pass\n\n    @abstractmethod\n    async def stop(self):\n
      \       \"\"\"\n        Stops the memory implementation.\n        \"\"\"\n        pass\n\n
      \   @abstractmethod\n    async def read_file(self, file_path: str) -> bytes:\n
      \       \"\"\"\n            Reads the contents of a file specified by `file_path`
      within the context\n            of an agent call. The context of the call provides
      additional information\n            that may influence how the file is read.\n
      \       :param file_path: The path to the file to be read.\n        :return:
      bytes: The contents of the file as a bytes object.\n        \"\"\"\n        pass\n\n
      \   @abstractmethod\n    async def write_file(self, file_path: str, file_contents:
      bytes) -> None:\n        \"\"\"\n            Writes the given `file_contents`
      to the file specified by `file_path`\n            within the context of an agent
      call. This method ensures that the file is\n            written in the appropriate
      location and manner as dictated by the call context.\n\n        :param file_path:
      The path to the file where the contents should be written.\n        :param file_contents:
      The contents to write to the file.\n        \"\"\"\n        pass\n\n    @abstractmethod\n
      \   async def delete_file(self, file_path: str) -> None:\n        \"\"\"\n            Deletes
      the file specified by `file_path` within the context of an agent call.\n            This
      method ensures that the file is deleted in the appropriate location and\n            manner
      as dictated by the call context.\n\n        :param file_path: The path to the
      file to be deleted.\n        \"\"\"\n        pass\n\n    @abstractmethod\n    async
      def mkdir(self, directory: str, exist_ok: bool = False):\n        pass\n\n    @abstractmethod\n
      \   async def exists(self, file_name: str):\n        pass\n\n    @abstractmethod\n
      \   async def glob(self, pattern: str):\n        pass\n"
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Length:
      - '757'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:29:22 GMT
      ETag:
      - W/"ae7bcf51aa946d7b82fa0716c438521074ff88da017f4ed900b73fd346a77818"
      Expires:
      - Tue, 20 Feb 2024 21:34:22 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - de99f793f3e45cb42de645b6904bcdf0bef89497
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - 18D8:25522C:AA6FE:FE11E:65D519B2
      X-Served-By:
      - cache-bfi-kbfi7400046-BFI
      X-Timer:
      - S1708464563.521790,VS0,VE137
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/agent/doc_manager/parsers?ref=main
  response:
    content: '[{"name":"AgentXOS.pdf","path":"sdk/tests/agent/doc_manager/parsers/AgentXOS.pdf","sha":"aeff024a96558192032454a91051e26f5b799472","size":1185792,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/agent/doc_manager/parsers/AgentXOS.pdf?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/agent/doc_manager/parsers/AgentXOS.pdf","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/aeff024a96558192032454a91051e26f5b799472","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/agent/doc_manager/parsers/AgentXOS.pdf","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/agent/doc_manager/parsers/AgentXOS.pdf?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/aeff024a96558192032454a91051e26f5b799472","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/agent/doc_manager/parsers/AgentXOS.pdf"}},{"name":"__init__.py","path":"sdk/tests/agent/doc_manager/parsers/__init__.py","sha":"e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/agent/doc_manager/parsers/__init__.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/agent/doc_manager/parsers/__init__.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/agent/doc_manager/parsers/__init__.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/agent/doc_manager/parsers/__init__.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/agent/doc_manager/parsers/__init__.py"}},{"name":"test_pdf_parser.py","path":"sdk/tests/agent/doc_manager/parsers/test_pdf_parser.py","sha":"646b248a0fd708bd5d8c59ab3154f769a813a5de","size":2341,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/agent/doc_manager/parsers/test_pdf_parser.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/agent/doc_manager/parsers/test_pdf_parser.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/646b248a0fd708bd5d8c59ab3154f769a813a5de","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/agent/doc_manager/parsers/test_pdf_parser.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/agent/doc_manager/parsers/test_pdf_parser.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/646b248a0fd708bd5d8c59ab3154f769a813a5de","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/agent/doc_manager/parsers/test_pdf_parser.py"}},{"name":"test_text_parser.py","path":"sdk/tests/agent/doc_manager/parsers/test_text_parser.py","sha":"f4e443a6502f762336751081573e8ccd796d1e1a","size":1161,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/agent/doc_manager/parsers/test_text_parser.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/agent/doc_manager/parsers/test_text_parser.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/f4e443a6502f762336751081573e8ccd796d1e1a","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/agent/doc_manager/parsers/test_text_parser.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/agent/doc_manager/parsers/test_text_parser.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/f4e443a6502f762336751081573e8ccd796d1e1a","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/agent/doc_manager/parsers/test_text_parser.py"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:29:22 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E550:282C91:DDB7B:142636:65D519B2
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4597'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '403'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/agent/tot_agent/checker.py
  response:
    content: "from typing import List\n\nfrom jinja2 import StrictUndefined, Environment\nfrom
      pydantic import Field, BaseModel\n\nfrom eidolon_ai_sdk.cpu.agent_cpu import
      AgentCPU\nfrom eidolon_ai_sdk.cpu.agent_io import UserTextCPUMessage\nfrom eidolon_ai_sdk.agent.tot_agent.prompts
      import CHECKER_PROMPT\nfrom eidolon_ai_sdk.agent.tot_agent.thought import ThoughtValidity\nfrom
      eidolon_ai_sdk.system.reference_model import Specable\n\n\nclass TotCheckerConfig(BaseModel):\n
      \   prompt: str = CHECKER_PROMPT\n    examples: str = \"\"\n\n\nclass ToTChecker(Specable[TotCheckerConfig]):\n
      \   spec: TotCheckerConfig\n    cpu: AgentCPU\n\n    def __init__(self, cpu,
      spec):\n        super().__init__(spec)\n        self.cpu = cpu\n        self.spec
      = spec\n\n    \"\"\"\n    Tree of Thought (ToT) checker.\n\n    This is an abstract
      ToT checker that can be implemented by the user. You\n    can implement a simple
      rule-based checker or a more sophisticated\n    neural network based classifier.\n
      \   \"\"\"\n\n    async def evaluate(\n        self,\n        process_id: str,\n
      \       problem_description: str,\n        thoughts: List[str] = Field(default_factory=list),\n
      \   ) -> ThoughtValidity:\n        \"\"\"\n        Evaluate the response to
      the problem description and return the solution type.\n        \"\"\"\n\n        checker_prompt
      = (\n            Environment(undefined=StrictUndefined)\n            .from_string(self.spec.prompt)\n
      \           .render(\n                problem=problem_description,\n                thoughts=thoughts,\n
      \               examples=self.spec.examples,\n            )\n        )\n\n        thread
      = await self.cpu.new_thread(process_id)\n        resp = await thread.run_request(\n
      \           prompts=[UserTextCPUMessage(prompt=checker_prompt)],\n            output_format=ThoughtValidity.model_json_schema(),\n
      \       )\n\n        return ThoughtValidity.model_validate(resp)\n"
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Length:
      - '760'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:29:22 GMT
      ETag:
      - W/"0b54e17878924ec2f8b03f909224b06bd139ed621409db134d207ec3b0209052"
      Expires:
      - Tue, 20 Feb 2024 21:34:22 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - 6a7c4cdaf7b82c183dd0a9aead4e1309502863ba
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - AB08:257E5B:B776A:10B166:65D519B2
      X-Served-By:
      - cache-bfi-kbfi7400113-BFI
      X-Timer:
      - S1708464563.526504,VS0,VE135
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/agent/doc_manager/loaders/__init__.py
  response:
    content: ''
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:29:22 GMT
      ETag:
      - W/"938f66ede415ccb10764da47cd5f3cfc076c07b8791c708cfa8ec54982197c1f"
      Expires:
      - Tue, 20 Feb 2024 21:34:22 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - 108e24c2ec4c4f3dfa416bb0f2d609f1a40410cc
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - F01E:261006:A87E4:F673F:65D519B1
      X-Served-By:
      - cache-bfi-krnt7300105-BFI
      X-Timer:
      - S1708464563.526417,VS0,VE135
      X-XSS-Protection:
      - 1; mode=block
      transfer-encoding:
      - chunked
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/agent/doc_manager/loaders/base_loader.py
  response:
    content: "import logging\nfrom abc import ABC, abstractmethod\nfrom dataclasses
      import dataclass\nfrom pydantic import BaseModel\nfrom typing import Dict, Any,
      AsyncIterable, Iterable\n\nfrom eidolon_ai_sdk.agent.doc_manager.parsers.base_parser
      import DataBlob\nfrom eidolon_ai_sdk.system.reference_model import Specable\n\n\n@dataclass\nclass
      FileInfo:\n    path: str\n    metadata: Dict[str, Any]\n    data: DataBlob\n\n\n@dataclass\nclass
      FileChangeset:\n    added_files: AsyncIterable[FileInfo]\n    modified_files:
      AsyncIterable[FileInfo]\n    removed_files: AsyncIterable[str]\n\n\nclass DocumentLoaderSpec(BaseModel):\n
      \   pass\n\n\nclass DocumentLoader(ABC, Specable[DocumentLoaderSpec]):\n    logger
      = logging.getLogger(\"eidolon\")\n\n    @abstractmethod\n    async def get_changes(self,
      metadata: Dict[str, Dict[str, Any]]) -> FileChangeset:\n        pass\n\n    @abstractmethod\n
      \   async def list_files(self) -> Iterable[str]:\n        pass\n"
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Length:
      - '389'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:29:22 GMT
      ETag:
      - W/"721733e102dd5eb312bb32e949256ec6c73c503c745971ce6b4946b3199fd6a2"
      Expires:
      - Tue, 20 Feb 2024 21:34:22 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - 75d71033f59a35adb30d2d4358e6d55011f78d17
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - F0B6:252D29:B5693:10907B:65D519B1
      X-Served-By:
      - cache-bfi-kbfi7400108-BFI
      X-Timer:
      - S1708464563.522284,VS0,VE142
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/agent/tot_agent/controller.py
  response:
    content: "from typing import List\n\nfrom eidolon_ai_sdk.agent.tot_agent.memory
      import ToTDFSMemory\nfrom eidolon_ai_sdk.agent.tot_agent.thought import Thought\n\n\nclass
      ToTController:\n    \"\"\"\n    Tree of Thought (ToT) controller.\n\n    This
      is a version of a ToT controller, dubbed in the paper as a \"Simple Controller\".\n\n
      \   It has one parameter `c` which is the number of children to explore for
      each\n    thought.\n    \"\"\"\n\n    def __init__(self, c: int = 3):\n        \"\"\"\n
      \       Initialize the controller.\n\n        Args:\n            c: The number
      of children to explore at each node.\n        \"\"\"\n        self.c = c\n\n
      \   def thoughts(self, memory: ToTDFSMemory) -> List[str]:\n        next_thought
      = memory.top()\n        parent_thought = memory.top_parent()\n        validity
      = \"INTERMEDIATE\" if next_thought is None else next_thought.validity\n\n        #
      1 if the current partial solution is invalid, backtrack to the parent\n        #
      thought.\n        if validity == \"INVALID\":\n            memory.pop()\n            next_thought
      = memory.top()\n            if next_thought and len(next_thought.children) >=
      self.c:\n                memory.pop()\n\n        # 2 if the current partial
      solution is valid but C children were\n        # explored and yet failed to
      find a final solution, backtrack to the\n        # parent thought.\n        elif
      validity == \"INTERMEDIATE\" and parent_thought and len(parent_thought.children)
      >= self.c:\n            memory.pop(2)\n\n        return [t.text for t in memory.current_path()]\n\n
      \   def exploration_synopsis(self, memory: ToTDFSMemory) -> dict:\n        \"\"\"\n
      \       Return the remaining intermediate paths in the ToT and the number of
      unexplored branches per thought.\n\n        An intermediate path is remaining
      if it has not yet been explored to the\n        maximum depth and has INTERMEDIATE
      validity.\n        \"\"\"\n\n        def recurse(path: List[Thought]) -> dict:\n
      \           rtn = {}\n            unexplored_branch_count = self.c - len(path)\n
      \           if unexplored_branch_count > 0:\n                rtn[\"UNEXPLORED_BRANCHES\"]
      = unexplored_branch_count\n            for child in path:\n                if
      child.validity != \"INVALID\":\n                    recursed_child = recurse(child.children)\n
      \                   if recursed_child:\n                        rtn[child.text]
      = recursed_child\n            return rtn\n\n        if not memory.stack:\n            return
      {}\n        else:\n            return {memory.stack[0].text: recurse(memory.stack[0].children)}\n"
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Length:
      - '891'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:29:22 GMT
      ETag:
      - W/"977899914dcb75db8206f911c84dc345a2e1831cabfd97481fa762089e6b4f2f"
      Expires:
      - Tue, 20 Feb 2024 21:34:22 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - 3e3059a0f015075962ac236febbdd078e64b84d9
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - B258:0FDE:5BD9AF:6E80E4:65D519B2
      X-Served-By:
      - cache-yvr1525-YVR
      X-Timer:
      - S1708464563.523038,VS0,VE135
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/cpu/llm/open_ai_llm_unit.py
  response:
    content: "import base64\nimport json\nimport logging\nfrom io import BytesIO\nfrom
      typing import List, Optional, Union, Literal, Dict, Any, AsyncIterator, cast\n\nimport
      yaml\nfrom PIL import Image\nfrom openai import AsyncOpenAI, AsyncStream\nfrom
      openai.types.chat import ChatCompletionToolParam, ChatCompletionChunk, ChatCompletionMessage\nfrom
      openai.types.chat.chat_completion import ChatCompletion\nfrom openai.types.chat.chat_completion_chunk
      import ChoiceDelta\nfrom openai.types.chat.completion_create_params import ResponseFormat\nfrom
      pydantic import Field, BaseModel\n\nfrom eidolon_ai_sdk.agent_os import AgentOS\nfrom
      eidolon_ai_sdk.cpu.call_context import CallContext\nfrom eidolon_ai_sdk.cpu.llm_message
      import (\n    LLMMessage,\n    AssistantMessage,\n    ToolCall,\n    ToolResponseMessage,\n
      \   UserMessage,\n    SystemMessage,\n)\nfrom eidolon_ai_sdk.cpu.llm_unit import
      LLMUnit, LLMCallFunction\nfrom eidolon_ai_sdk.io.events import (\n    StringOutputEvent,\n
      \   ObjectOutputEvent,\n    LLMToolCallRequestEvent,\n)\nfrom eidolon_ai_sdk.system.reference_model
      import Specable\nfrom eidolon_ai_sdk.util.logger import logger as eidolon_logger\nfrom
      eidolon_ai_sdk.util.replay import replayable\n\nlogger = eidolon_logger.getChild(\"llm_unit\")\n\n\ndef
      scale_dimensions(width, height, max_size=2048, min_size=768):\n    # Check if
      the dimensions are less than or equal to max_size.\n    # If so, adjust the
      dimensions according to the max_size.\n    if width > max_size or height > max_size:\n
      \       # Calculate the scaling ratio\n        scale_ratio = max_size / max(width,
      height)\n\n        # Calculate the new dimensions while keeping aspect ratio\n
      \       width = int(width * scale_ratio)\n        height = int(height * scale_ratio)\n\n
      \   # Check if the minimum dimension is still greater than the min_size.\n    #
      If so, adjust the dimensions according to the min_size.\n    if min(width, height)
      > min_size:\n        # Calculate the scaling ratio\n        scale_ratio = min_size
      / min(width, height)\n\n        # Calculate the new dimensions\n        width
      = int(width * scale_ratio)\n        height = int(height * scale_ratio)\n\n    return
      width, height\n\n\ndef scale_image(image_bytes):\n    # Load the image from
      bytes\n    image = Image.open(BytesIO(image_bytes))\n\n    # Get the dimensions
      of the image\n    width, height = image.size\n\n    logger.info(f\"Original
      image size: {width}x{height}\")\n    new_width, new_height = scale_dimensions(width,
      height)\n    logger.info(f\"New image size: {new_width}x{new_height}\")\n\n
      \   # Resize and return the image\n    scaled_image = image.resize((new_width,
      new_height))\n    output = BytesIO()\n    scaled_image.save(output, format=\"PNG\")\n
      \   return output.getvalue()\n\n\nasync def convert_to_openai(message: LLMMessage):\n
      \   if isinstance(message, SystemMessage):\n        return {\"role\": \"system\",
      \"content\": message.content}\n    elif isinstance(message, UserMessage):\n
      \       content = message.content\n        if not isinstance(content, str):\n
      \           content = []\n            for part in message.content:\n                if
      part.type == \"text\":\n                    content.append({\"type\": \"text\",
      \"text\": part.text})\n                else:\n                    # retrieve
      the image from the file system\n                    data = await AgentOS.file_memory.read_file(part.image_url)\n
      \                   # scale the image such that the max size of the shortest
      size is at most 768px\n                    data = scale_image(data)\n                    #
      base64 encode the data\n                    base64_image = base64.b64encode(data).decode(\"utf-8\")\n
      \                   content.append(\n                        {\n                            \"type\":
      \"image_url\",\n                            \"image_url\": {\"url\": f\"data:image/jpeg;base64,{base64_image}\"},\n
      \                       }\n                    )\n\n        return {\"role\":
      \"user\", \"content\": content}\n    elif isinstance(message, AssistantMessage):\n
      \       ret = {\"role\": \"assistant\", \"content\": str(message.content)}\n
      \       if message.tool_calls and len(message.tool_calls) > 0:\n            ret[\"tool_calls\"]
      = [\n                {\n                    \"id\": tool_call.tool_call_id,\n
      \                   \"type\": \"function\",\n                    \"function\":
      {\n                        \"name\": tool_call.name,\n                        \"arguments\":
      str(tool_call.arguments),\n                    },\n                }\n                for
      tool_call in message.tool_calls\n            ]\n        return ret\n    elif
      isinstance(message, ToolResponseMessage):\n        # tool_call_id, content\n
      \       return {\n            \"role\": \"tool\",\n            \"tool_call_id\":
      message.tool_call_id,\n            \"content\": json.dumps(message.result),\n
      \       }\n    else:\n        raise ValueError(f\"Unknown message type {message.type}\")\n\n\nclass
      OpenAiGPTSpec(BaseModel):\n    model: str = Field(default=\"gpt-4-turbo-preview\",
      description=\"The model to use for the LLM.\")\n    temperature: float = 0.3\n
      \   force_json: bool = True\n    max_tokens: Optional[int] = None\n\n\nclass
      OpenAIGPT(LLMUnit, Specable[OpenAiGPTSpec]):\n    model: str\n    temperature:
      float\n\n    def __init__(self, **kwargs):\n        LLMUnit.__init__(self, **kwargs)\n
      \       Specable.__init__(self, **kwargs)\n\n        self.model = self.spec.model\n
      \       self.temperature = self.spec.temperature\n\n    async def execute_llm(\n
      \       self,\n        call_context: CallContext,\n        messages: List[LLMMessage],\n
      \       tools: List[LLMCallFunction],\n        output_format: Union[Literal[\"str\"],
      Dict[str, Any]],\n    ) -> AsyncIterator[AssistantMessage]:\n        can_stream_message,
      request = await self._build_request(messages, tools, output_format)\n        request[\"stream\"]
      = True\n\n        logger.info(\"executing open ai llm request\", extra=request)\n
      \       if logger.isEnabledFor(logging.DEBUG):\n            logger.debug(\"request
      content:\\n\" + yaml.dump(request))\n        llm_request = replayable(fn=_openai_completion,
      name_override=\"openai_completion\", parser=_raw_parser)\n        llm_response
      = await llm_request(**request)\n        complete_message = \"\"\n        tools_to_call
      = []\n        async for m_chunk in llm_response:\n            chunk = cast(ChatCompletionChunk,
      m_chunk)\n            message = chunk.choices[0].delta\n\n            logger.debug(\n
      \               f\"open ai llm response\\ntool calls: {len(message.tool_calls
      or [])}\\ncontent:\\n{message.content}\",\n                extra=dict(content=message.content,
      tool_calls=message.tool_calls),\n            )\n\n            for tool_call
      in message.tool_calls or []:\n                index = tool_call.index\n                if
      index == len(tools_to_call):\n                    tools_to_call.append({\"id\":
      \"\", \"name\": \"\", \"arguments\": \"\"})\n                if tool_call.id:\n
      \                   tools_to_call[index][\"id\"] = tool_call.id\n                if
      tool_call.function:\n                    if tool_call.function.name:\n                        tools_to_call[index][\"name\"]
      = tool_call.function.name\n                    if tool_call.function.arguments:\n
      \                       tools_to_call[index][\"arguments\"] += tool_call.function.arguments\n\n
      \           if message.content:\n                if can_stream_message:\n                    logger.debug(f\"open
      ai llm stream response: {message.content}\", extra=dict(content=message.content))\n
      \                   yield StringOutputEvent(content=message.content)\n                else:\n
      \                   complete_message += message.content\n\n        logger.info(f\"open
      ai llm tool calls: {json.dumps(tools_to_call)}\", extra=dict(tool_calls=tools_to_call))\n
      \       if len(tools_to_call) > 0:\n            for tool in tools_to_call:\n
      \               tool_call = _convert_tool_call(tool)\n                yield
      LLMToolCallRequestEvent(tool_call=tool_call)\n        if not can_stream_message:\n
      \           logger.debug(f\"open ai llm object response: {complete_message}\",
      extra=dict(content=complete_message))\n            if not self.spec.force_json:\n
      \               # message format looks like json```{...}```, parse content and
      pull out the json\n                complete_message = complete_message[complete_message.find(\"{\")
      : complete_message.rfind(\"}\") + 1]\n\n            content = json.loads(complete_message)
      if complete_message else {}\n            yield ObjectOutputEvent(content=content)\n\n
      \   async def _build_request(self, inMessages, inTools, output_format):\n        tools
      = await self._build_tools(inTools)\n        messages = [await convert_to_openai(message)
      for message in inMessages]\n        request = {\n            \"messages\": messages,\n
      \           \"model\": self.model,\n            \"temperature\": self.temperature,\n
      \       }\n        if output_format == \"str\" or output_format[\"type\"] ==
      \"string\":\n            is_string = True\n        else:\n            is_string
      = False\n            force_json_msg = (\n                f\"Your response MUST
      be valid JSON satisfying the following JSON schema:\\n{json.dumps(output_format)}\"\n
      \           )\n            if not self.spec.force_json:\n                force_json_msg
      += \"\\nThe response will be wrapped in a json section json```{...}```\\nRemember
      to use double quotes for strings and properties.\"\n            else:\n                request[\"response_format\"]
      = ResponseFormat(type=\"json_object\")\n\n            # add response rules to
      original system message for this call only\n            if messages[0][\"role\"]
      == \"system\":\n                messages[0][\"content\"] += f\"\\n\\n{force_json_msg}\"\n
      \           else:\n                messages.insert(0, {\"role\": \"system\",
      \"content\": force_json_msg})\n        logger.debug(messages)\n        if len(tools)
      > 0:\n            request[\"tools\"] = tools\n        if self.spec.max_tokens:\n
      \           request[\"max_tokens\"] = self.spec.max_tokens\n        return is_string,
      request\n\n    async def _build_tools(self, inTools):\n        tools = []\n
      \       for tool in inTools:\n            tools.append(\n                ChatCompletionToolParam(\n
      \                   **{\n                        \"type\": \"function\",\n                        \"function\":
      {\n                            \"name\": tool.name,\n                            \"description\":
      tool.description,\n                            \"parameters\": tool.parameters,\n
      \                       },\n                    }\n                )\n            )\n
      \       return tools\n\n\ndef _convert_tool_call(tool: Dict[str, any]) -> ToolCall:\n
      \   name = tool[\"name\"]\n    try:\n        loads = json.loads(tool[\"arguments\"])\n
      \   except json.JSONDecodeError as e:\n        raise RuntimeError(f\"Error decoding
      response function arguments for tool {name}\") from e\n    return ToolCall(tool_call_id=tool[\"id\"],
      name=name, arguments=loads)\n\n\nasync def _openai_completion(*args, **kwargs):\n
      \   return await AsyncOpenAI().chat.completions.create(*args, **kwargs)\n\n\nasync
      def _raw_parser(resp):\n    \"\"\"\n    Parses responses from openai and yield
      strings to accumulate to a human-readable message.\n\n    Makes assumptions
      around tool calls. These are currently true, but may change as openai mutates
      their API\n    1. Tool call functions names are always in a complete message\n
      \   2. Tool calls are ordered (No chunk for tool #2 until #1 is complete)\n
      \   \"\"\"\n    calling_tools = False\n    prefix = \"\"\n    async for message
      in _normalize_openai(resp):\n        if message.tool_calls:\n            calling_tools
      = True\n            for i, tool_call in enumerate(message.tool_calls):\n                if
      tool_call.function.name:\n                    yield prefix + f\"Tool Call: {tool_call.function.name}\\nArguments:
      \"\n                    prefix = \"\\n\"\n                if tool_call.function.arguments:\n
      \                   yield tool_call.function.arguments\n        elif calling_tools:\n
      \           yield \"\\n\"\n        if message.content:\n            yield message.content\n
      \           prefix = \"\\n\"\n\n\nasync def _normalize_openai(resp) -> AsyncIterator[ChoiceDelta
      | ChatCompletionMessage]:\n    \"\"\"\n    Normalizes different types of responses
      from openai depending on how the request was made.\n    This is important since
      arguments like streaming can be mutated when replaying requests.\n    \"\"\"\n
      \   if isinstance(resp, AsyncStream):\n        async for m_chunk in resp:\n
      \           yield cast(ChatCompletionChunk, m_chunk).choices[0].delta\n    elif
      isinstance(resp, ChatCompletion):\n        yield resp.choices[0].message\n    else:\n
      \       raise ValueError(f\"Unknown response type {type(resp)}\")\n"
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Length:
      - '3597'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:29:22 GMT
      ETag:
      - W/"dad61059a0b9ff809132bcaf4de09dbfb7a162f144ae9c11c8f8b08bbc29f046"
      Expires:
      - Tue, 20 Feb 2024 21:34:22 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - a9ec884992c978c5122ff2168f907a576032a795
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - D30A:255533:BBC2F:10F64F:65D519B2
      X-Served-By:
      - cache-bfi-kbfi7400049-BFI
      X-Timer:
      - S1708464563.521648,VS0,VE146
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/memory/in_memory_file_memory.py
  response:
    content: "from pathlib import Path\n\nfrom pydantic import Field, BaseModel\n\nfrom
      eidolon_ai_sdk.memory.file_memory import FileMemory\nfrom eidolon_ai_sdk.system.reference_model
      import Specable\n\n\nclass InMemoryFileMemoryConfig(BaseModel):\n    pass\n\n\nclass
      InMemoryFileMemory(FileMemory, Specable[InMemoryFileMemoryConfig]):\n    def
      __init__(self, spec: InMemoryFileMemoryConfig):\n        super().__init__(spec)\n
      \       self.root_dir = Path(\"/\").resolve()\n        self.files = {}\n        self.spec
      = spec\n\n    \"\"\"\n    A FileMemory implementation that stores files on the
      local filesystem.\n    \"\"\"\n    root_dir: Path = Field(..., description=\"The
      root directory to store files in.\")\n\n    def resolve(self, *paths):\n        \"\"\"\n
      \       Resolves file paths relative to the root directory and ensures that
      they do not escape the root directory.\n\n        Args:\n            *paths
      (str): A variable number of path components to be joined and resolved.\n\n        Returns:\n
      \           Path: The resolved path as a Path object.\n\n        Raises:\n            ValueError:
      If the resulting path is outside the root directory.\n        \"\"\"\n        #
      Resolve the combined path\n        resolved_path = self.root_dir.joinpath(*paths).resolve()\n\n
      \       # Check that the resolved path is a subpath of root_dir\n        if
      not resolved_path.is_relative_to(self.root_dir):\n            raise ValueError(\"Attempted
      to access a path outside the root directory\")\n\n        return resolved_path\n\n
      \   async def read_file(self, file_path: str) -> bytes:\n        \"\"\"\n        Reads
      and returns the contents of the file specified by the file_path within the root
      directory.\n\n        Args:\n            file_path (str): The path to the file
      to be read, relative to the root directory.\n\n        Returns:\n            bytes:
      The contents of the file as a bytes object.\n        \"\"\"\n        # Resolve
      the safe path\n        safe_file_path = self.resolve(file_path)\n\n        #
      Read the file and return its contents\n        return self.files[safe_file_path]\n\n
      \   async def write_file(self, file_path: str, file_contents: bytes) -> None:\n
      \       \"\"\"\n        Writes the given file_contents to the file specified
      by the file_path within the root directory.\n\n        Args:\n            file_path
      (str): The path to the file where contents are to be written, relative to the
      root directory.\n            file_contents (bytes): The contents to write to
      the file.\n\n        Returns:\n            None\n        \"\"\"\n        # Resolve
      the safe path\n        safe_file_path = self.resolve(file_path)\n\n        #
      Write the contents to the file\n        self.files[safe_file_path] = file_contents\n\n
      \   async def delete_file(self, file_path: str) -> None:\n        # Resolve
      the safe path\n        safe_file_path = self.resolve(file_path)\n\n        #
      Delete the file\n        del self.files[safe_file_path]\n\n    async def mkdir(self,
      directory: str, exist_ok: bool = False):\n        safe_file_path = self.resolve(directory)\n
      \       self.files[safe_file_path] = {}\n        print(f\"Created directory
      {safe_file_path}\")\n\n    async def exists(self, file_name: str):\n        \"\"\"\n
      \       Checks if a file exists at the specified path relative to the root directory.\n\n
      \       Args:\n            file_name (str): The path to the file to check, relative
      to the root directory.\n\n        Returns:\n            bool: True if the file
      exists, False otherwise.\n        \"\"\"\n        # Resolve the safe path\n
      \       safe_file_path = self.resolve(file_name)\n\n        print(f\"Checking
      if {safe_file_path} exists\")\n        print(f\"Files: {self.files}\")\n        #
      Check if the file exists\n        return self.files.get(safe_file_path) is not
      None\n\n    async def start(self):\n        \"\"\"\n        Starts the memory
      implementation. Noop for this implementation.\n        \"\"\"\n        pass\n\n
      \   async def stop(self):\n        \"\"\"\n        Stops the memory implementation.
      Noop for this implementation.\n        \"\"\"\n        pass\n"
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Length:
      - '1103'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:29:22 GMT
      ETag:
      - W/"25a21da603ec701f3cb617b0b07130d61f3564ce3a33b6a8ef01f4e805e4c2b6"
      Expires:
      - Tue, 20 Feb 2024 21:34:22 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - 8d33a74357037aad794d009baf5d6555d3977bb8
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - BC1C:254E0F:C0CB8:11469B:65D519B0
      X-Served-By:
      - cache-bfi-krnt7300051-BFI
      X-Timer:
      - S1708464563.526407,VS0,VE144
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/agent/doc_manager/__init__.py
  response:
    content: ''
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:29:22 GMT
      ETag:
      - W/"938f66ede415ccb10764da47cd5f3cfc076c07b8791c708cfa8ec54982197c1f"
      Expires:
      - Tue, 20 Feb 2024 21:34:22 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - 69a2e40dfd34cb8932a3f060994fabecf538e877
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - B048:283009:7300C:AAF1A:65D519B1
      X-Served-By:
      - cache-bfi-krnt7300058-BFI
      X-Timer:
      - S1708464563.526360,VS0,VE143
      X-XSS-Protection:
      - 1; mode=block
      transfer-encoding:
      - chunked
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/cpu/llm/__init__.py
  response:
    content: ''
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:29:22 GMT
      ETag:
      - W/"938f66ede415ccb10764da47cd5f3cfc076c07b8791c708cfa8ec54982197c1f"
      Expires:
      - Tue, 20 Feb 2024 21:34:22 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - 4b9caf67e41518d315c4d78c42308b624469d3c6
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - F754:257E5B:B776A:10B167:65D519B1
      X-Served-By:
      - cache-bfi-krnt7300023-BFI
      X-Timer:
      - S1708464563.526421,VS0,VE146
      X-XSS-Protection:
      - 1; mode=block
      transfer-encoding:
      - chunked
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/memory/file_system_vector_store.py
  response:
    content: "from abc import abstractmethod\nfrom pydantic import Field, BaseModel\nfrom
      typing import List, Dict, Optional, Sequence, Any, Iterable\n\nfrom eidolon_ai_sdk.agent_os
      import AgentOS\nfrom eidolon_ai_sdk.memory.document import Document, EmbeddedDocument\nfrom
      eidolon_ai_sdk.memory.vector_store import QueryItem, VectorStore\nfrom eidolon_ai_sdk.system.reference_model
      import Specable\n\n\nclass FileSystemVectorStoreSpec(BaseModel):\n    root_document_directory:
      str = Field(\n        default=\"vector_memory\",\n        description=\"The
      root directory where the vector memory will store documents.\",\n    )\n\n\nclass
      FileSystemVectorStore(VectorStore, Specable[FileSystemVectorStoreSpec]):\n    def
      __init__(self, spec: FileSystemVectorStoreSpec):\n        super().__init__(spec)\n
      \       self.spec = spec\n\n    async def start(self):\n        await AgentOS.file_memory.mkdir(self.spec.root_document_directory,
      exist_ok=True)\n\n    async def stop(self):\n        pass\n\n    @abstractmethod\n
      \   async def add_embedding(self, collection: str, docs: List[EmbeddedDocument],
      **add_kwargs: Any):\n        pass\n\n    @abstractmethod\n    async def delete_embedding(self,
      collection: str, doc_ids: List[str], **delete_kwargs: Any):\n        pass\n\n
      \   @abstractmethod\n    async def get_metadata(self, collection: str, doc_ids:
      List[str]):\n        pass\n\n    @abstractmethod\n    async def query_embedding(\n
      \       self,\n        collection: str,\n        query: List[float],\n        num_results:
      int,\n        metadata_where: Optional[Dict[str, str]] = None,\n        include_embeddings:
      bool = False,\n    ) -> List[QueryItem]:\n        pass\n\n    async def add(self,
      collection: str, docs: Sequence[Document]):\n        await AgentOS.file_memory.mkdir(self.spec.root_document_directory
      + \"/\" + collection, exist_ok=True)\n        # Asynchronously collect embedded
      documents\n        embeddedDocs = []\n        async for embeddedDoc in AgentOS.similarity_memory.embedder.embed(docs):\n
      \           embeddedDocs.append(embeddedDoc)\n        await self.add_embedding(collection,
      embeddedDocs)\n        for doc in docs:\n            await AgentOS.file_memory.write_file(\n
      \               self.spec.root_document_directory + \"/\" + collection + \"/\"
      + doc.id,\n                doc.page_content.encode(),\n            )\n\n    async
      def delete(self, collection: str, doc_ids: List[str]):\n        await self.delete_embedding(collection,
      doc_ids)\n        for doc_id in doc_ids:\n            await AgentOS.file_memory.delete_file(self.spec.root_document_directory
      + \"/\" + collection + \"/\" + doc_id)\n\n    async def query(\n        self,\n
      \       collection: str,\n        query: str,\n        num_results: int,\n        metadata_where:
      Optional[Dict[str, str]] = None,\n    ) -> List[Document]:\n        text = await
      AgentOS.similarity_memory.embedder.embed_text(query)\n        results = await
      self.query_embedding(collection, text, num_results, metadata_where, False)\n
      \       returnDocuments = []\n        for result in results:\n            returnDocuments.append(\n
      \               Document(\n                    id=result.id,\n                    metadata=result.metadata,\n
      \                   page_content=await AgentOS.file_memory.read_file(\n                        self.spec.root_document_directory
      + \"/\" + collection + \"/\" + result.id\n                    ).decode(),\n
      \               )\n            )\n        return returnDocuments\n\n    async
      def raw_query(\n        self,\n        collection: str,\n        query: List[float],\n
      \       num_results: int,\n        metadata_where: Optional[Dict[str, str]]
      = None,\n        include_embeddings: bool = False,\n    ) -> List[QueryItem]:\n
      \       return await self.query_embedding(collection, query, num_results, metadata_where,
      include_embeddings)\n\n    async def get_docs(self, collection: str, doc_ids:
      List[str]) -> Iterable[Document]:\n        metadatas = await self.get_metadata(collection,
      doc_ids)\n        for i, doc_id in enumerate(doc_ids):\n            content
      = await AgentOS.file_memory.read_file(\n                self.spec.root_document_directory
      + \"/\" + collection + \"/\" + doc_id\n            )\n            yield Document(\n
      \               id=doc_id,\n                metadata=metadatas[i],\n                page_content=content.decode(),\n
      \           )\n"
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Length:
      - '1054'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:29:22 GMT
      ETag:
      - W/"2337c64d36aaf7ccf3b743f457b3398af48728cd0d9b514c8a39d09941ded052"
      Expires:
      - Tue, 20 Feb 2024 21:34:22 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - d5c39de3f02de8fd5fd89444fa0bb73e125ff347
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - D9E8:2E1949:11FE1:19819:65D519B1
      X-Served-By:
      - cache-bfi-krnt7300086-BFI
      X-Timer:
      - S1708464563.526822,VS0,VE151
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/agent/doc_manager/transformer?ref=main
  response:
    content: '[{"name":"__init__.py","path":"sdk/tests/agent/doc_manager/transformer/__init__.py","sha":"e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/agent/doc_manager/transformer/__init__.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/agent/doc_manager/transformer/__init__.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/agent/doc_manager/transformer/__init__.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/agent/doc_manager/transformer/__init__.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/agent/doc_manager/transformer/__init__.py"}},{"name":"test_RecursiveCharacterTextSplitter.py","path":"sdk/tests/agent/doc_manager/transformer/test_RecursiveCharacterTextSplitter.py","sha":"5c68777903039019b0f8fe66cf5a169beb28e638","size":1816,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/agent/doc_manager/transformer/test_RecursiveCharacterTextSplitter.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/agent/doc_manager/transformer/test_RecursiveCharacterTextSplitter.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/5c68777903039019b0f8fe66cf5a169beb28e638","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/agent/doc_manager/transformer/test_RecursiveCharacterTextSplitter.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/agent/doc_manager/transformer/test_RecursiveCharacterTextSplitter.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/5c68777903039019b0f8fe66cf5a169beb28e638","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/agent/doc_manager/transformer/test_RecursiveCharacterTextSplitter.py"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:29:22 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E54D:25886F:142870:1D8F63:65D519B2
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4596'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '404'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/agent/tot_agent/memory.py
  response:
    content: "from __future__ import annotations\n\nfrom typing import List, Optional\n\nfrom
      eidolon_ai_sdk.agent.tot_agent.thought import Thought\n\n\nclass ToTDFSMemory:\n
      \   \"\"\"\n    Memory for the Tree of Thought (ToT) chain. Implemented as a
      stack of\n    thoughts. This allows for a depth first search (DFS) of the ToT.\n
      \   \"\"\"\n\n    def __init__(self, stack: Optional[List[Thought]] = None):\n
      \       self.stack: List[Thought] = stack or []\n\n    def top(self) -> Optional[Thought]:\n
      \       \"\"\"Get the top of the stack without popping it.\"\"\"\n        return
      self.stack[-1] if len(self.stack) > 0 else None\n\n    def pop(self, n: int
      = 1) -> Optional[Thought]:\n        node = None\n        \"Pop the top n elements
      of the stack and return the last one.\"\n        if len(self.stack) < n:\n            return
      None\n        for _ in range(n):\n            node = self.stack.pop()\n        return
      node\n\n    def top_parent(self) -> Optional[Thought]:\n        \"\"\"Get the
      parent of the top of the stack without popping it.\"\"\"\n        return self.stack[-2]
      if len(self.stack) > 1 else None\n\n    def store(self, node: Thought) -> None:\n
      \       \"\"\"Add a node on the top of the stack.\"\"\"\n        if len(self.stack)
      > 0:\n            self.stack[-1].children.append(node)\n        self.stack.append(node)\n\n
      \   @property\n    def level(self) -> int:\n        \"\"\"Return the current
      level of the stack.\"\"\"\n        return len(self.stack)\n\n    def current_path(self)
      -> List[Thought]:\n        \"\"\"Return the thoughts path.\"\"\"\n        return
      self.stack[:]\n"
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Length:
      - '560'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:29:22 GMT
      ETag:
      - W/"4ed1465a72c1b13b70d91f10d0cc869bd807aeb27d0f91a6756398e83cd51320"
      Expires:
      - Tue, 20 Feb 2024 21:34:22 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - 7518cafd00571ea0214a4f945705eb797ebac417
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - 142C:256A3D:ADDCE:1017C1:65D519B2
      X-Served-By:
      - cache-bfi-krnt7300071-BFI
      X-Timer:
      - S1708464563.528154,VS0,VE149
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/memory/local_file_memory.py
  response:
    content: "import glob\nfrom pathlib import Path\n\nfrom pydantic import Field,
      field_validator, BaseModel\n\nfrom eidolon_ai_sdk.memory.file_memory import
      FileMemory\nfrom eidolon_ai_sdk.system.reference_model import Specable\nfrom
      eidolon_ai_sdk.util.async_wrapper import make_async\nfrom eidolon_ai_sdk.util.logger
      import logger\nfrom eidolon_ai_sdk.util.str_utils import replace_env_var_in_string\n\n\nclass
      LocalFileMemoryConfig(BaseModel):\n    root_dir: str = Field(\"/tmp/eidolon/file_memory\",
      description=\"The root directory to store files in.\")\n\n    @field_validator(\"root_dir\",
      mode=\"before\")\n    def validate_root_dir(cls, inValue: str):\n        \"\"\"\n
      \       Validates that the provided root directory is an absolute path and exists.\n
      \       \"\"\"\n        value = replace_env_var_in_string(inValue)\n        #
      Convert the string to a Path object\n        path = Path(value).resolve()\n\n
      \       # Check if the path is absolute\n        if not path.is_absolute():\n
      \           raise ValueError(f\"The root_dir must be an absolute path. Received:
      {inValue}->{value}\")\n\n        # You could also check if path exists and is
      a directory if necessary\n        if path.is_file():\n            raise ValueError(f\"The
      root_dir must be a directory. Received: {inValue}->{value}\")\n\n        return
      inValue\n\n\nclass LocalFileMemory(FileMemory, Specable[LocalFileMemoryConfig]):\n
      \   def __init__(self, spec: LocalFileMemoryConfig):\n        super().__init__(spec)\n
      \       self.root_dir = Path(replace_env_var_in_string(spec.root_dir)).resolve()\n\n
      \   \"\"\"\n    A FileMemory implementation that stores files on the local filesystem.\n
      \   \"\"\"\n    root_dir: Path = Field(..., description=\"The root directory
      to store files in.\")\n\n    def resolve(self, *paths):\n        \"\"\"\n        Resolves
      file paths relative to the root directory and ensures that they do not escape
      the root directory.\n\n        Args:\n            *paths (str): A variable number
      of path components to be joined and resolved.\n\n        Returns:\n            Path:
      The resolved path as a Path object.\n\n        Raises:\n            ValueError:
      If the resulting path is outside the root directory.\n        \"\"\"\n        #
      Resolve the combined path\n        resolved_path = self.root_dir.joinpath(*paths).resolve()\n\n
      \       # Check that the resolved path is a subpath of root_dir\n        if
      not resolved_path.is_relative_to(self.root_dir):\n            raise ValueError(\"Attempted
      to access a path outside the root directory\")\n\n        return resolved_path\n\n
      \   @make_async\n    def read_file(self, file_path: str) -> bytes:\n        \"\"\"\n
      \       Reads and returns the contents of the file specified by the file_path
      within the root directory.\n\n        Args:\n            file_path (str): The
      path to the file to be read, relative to the root directory.\n\n        Returns:\n
      \           bytes: The contents of the file as a bytes object.\n        \"\"\"\n
      \       # Resolve the safe path\n        safe_file_path = self.resolve(file_path)\n\n
      \       # Read the file and return its contents\n        with open(safe_file_path,
      \"rb\") as file:\n            return file.read()\n\n    @make_async\n    def
      write_file(self, file_path: str, file_contents: bytes) -> None:\n        \"\"\"\n
      \       Writes the given file_contents to the file specified by the file_path
      within the root directory.\n\n        Args:\n            file_path (str): The
      path to the file where contents are to be written, relative to the root directory.\n
      \           file_contents (bytes): The contents to write to the file.\n\n        Returns:\n
      \           None\n        \"\"\"\n        # Resolve the safe path\n        safe_file_path
      = self.resolve(file_path)\n\n        # Write the contents to the file\n        with
      open(safe_file_path, \"wb\") as file:\n            file.write(file_contents)\n\n
      \   async def delete_file(self, file_path: str) -> None:\n        # Resolve
      the safe path\n        safe_file_path = self.resolve(file_path)\n\n        #
      Delete the file\n        try:\n            safe_file_path.unlink()\n        except
      FileNotFoundError:\n            logger.debug(\"Attempted to delete non-existent
      file\")\n            pass\n\n    async def mkdir(self, directory: str, exist_ok:
      bool = False):\n        \"\"\"\n        Creates a directory at the specified
      path relative to the root directory.\n\n        Args:\n            directory
      (str): The path to the directory to be created, relative to the root directory.\n
      \           exist_ok (bool): If True, do not raise an exception if the directory
      already exists.\n\n        Returns:\n            None\n        \"\"\"\n        #
      Resolve the safe path\n        safe_directory = self.resolve(directory)\n\n
      \       # Create the directory\n        safe_directory.mkdir(parents=True, exist_ok=exist_ok)\n\n
      \   async def exists(self, file_name: str):\n        \"\"\"\n        Checks
      if a file exists at the specified path relative to the root directory.\n\n        Args:\n
      \           file_name (str): The path to the file to check, relative to the
      root directory.\n\n        Returns:\n            bool: True if the file exists,
      False otherwise.\n        \"\"\"\n        # Resolve the safe path\n        safe_file_path
      = self.resolve(file_name)\n\n        # Check if the file exists\n        return
      safe_file_path.exists()\n\n    async def glob(self, pattern):\n        safe_file_path
      = self.resolve(pattern)\n        return glob.glob(str(safe_file_path))\n\n    async
      def start(self):\n        \"\"\"\n        Starts the memory implementation.
      Noop for this implementation.\n        \"\"\"\n        if not self.root_dir.exists():\n
      \           self.root_dir.mkdir(parents=True)\n\n    async def stop(self):\n
      \       \"\"\"\n        Stops the memory implementation. Noop for this implementation.\n
      \       \"\"\"\n        pass\n"
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Length:
      - '1544'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:29:22 GMT
      ETag:
      - W/"c00b3016fcb4394587f3f8bf51f53abb774071548ac1d863c975db9d54e1cd32"
      Expires:
      - Tue, 20 Feb 2024 21:34:22 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - 59ffb2c8cf7486692b3700d5ae62b63a764389c1
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - 7D1C:253EB0:B71F6:10AC28:65D519B1
      X-Served-By:
      - cache-bfi-kbfi7400033-BFI
      X-Timer:
      - S1708464563.560904,VS0,VE122
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/system/cassettes/test_generic_agent?ref=main
  response:
    content: '[{"name":"TestAgentsWithReferences.test_can_communicate.yaml","path":"sdk/tests/system/cassettes/test_generic_agent/TestAgentsWithReferences.test_can_communicate.yaml","sha":"354c81e5143c3b1a7a1cc80a0f59d393a73bb46d","size":15449,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/system/cassettes/test_generic_agent/TestAgentsWithReferences.test_can_communicate.yaml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/system/cassettes/test_generic_agent/TestAgentsWithReferences.test_can_communicate.yaml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/354c81e5143c3b1a7a1cc80a0f59d393a73bb46d","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/system/cassettes/test_generic_agent/TestAgentsWithReferences.test_can_communicate.yaml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/system/cassettes/test_generic_agent/TestAgentsWithReferences.test_can_communicate.yaml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/354c81e5143c3b1a7a1cc80a0f59d393a73bb46d","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/system/cassettes/test_generic_agent/TestAgentsWithReferences.test_can_communicate.yaml"}},{"name":"TestAgentsWithReferences.test_can_replay_tool_calls.yaml","path":"sdk/tests/system/cassettes/test_generic_agent/TestAgentsWithReferences.test_can_replay_tool_calls.yaml","sha":"c794267bdc75713ee11019ce960cab67942a1cb8","size":23422,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/system/cassettes/test_generic_agent/TestAgentsWithReferences.test_can_replay_tool_calls.yaml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/system/cassettes/test_generic_agent/TestAgentsWithReferences.test_can_replay_tool_calls.yaml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/c794267bdc75713ee11019ce960cab67942a1cb8","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/system/cassettes/test_generic_agent/TestAgentsWithReferences.test_can_replay_tool_calls.yaml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/system/cassettes/test_generic_agent/TestAgentsWithReferences.test_can_replay_tool_calls.yaml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/c794267bdc75713ee11019ce960cab67942a1cb8","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/system/cassettes/test_generic_agent/TestAgentsWithReferences.test_can_replay_tool_calls.yaml"}},{"name":"TestAgentsWithReferences.test_list_body.yaml","path":"sdk/tests/system/cassettes/test_generic_agent/TestAgentsWithReferences.test_list_body.yaml","sha":"070b0b53ba52b08157513131e60487aa2d1191a9","size":15763,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/system/cassettes/test_generic_agent/TestAgentsWithReferences.test_list_body.yaml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/system/cassettes/test_generic_agent/TestAgentsWithReferences.test_list_body.yaml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/070b0b53ba52b08157513131e60487aa2d1191a9","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/system/cassettes/test_generic_agent/TestAgentsWithReferences.test_list_body.yaml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/system/cassettes/test_generic_agent/TestAgentsWithReferences.test_list_body.yaml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/070b0b53ba52b08157513131e60487aa2d1191a9","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/system/cassettes/test_generic_agent/TestAgentsWithReferences.test_list_body.yaml"}},{"name":"TestAgentsWithReferences.test_passes_context.yaml","path":"sdk/tests/system/cassettes/test_generic_agent/TestAgentsWithReferences.test_passes_context.yaml","sha":"8891567302dc38f85d6effea6d972e8e2208cd7e","size":38403,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/system/cassettes/test_generic_agent/TestAgentsWithReferences.test_passes_context.yaml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/system/cassettes/test_generic_agent/TestAgentsWithReferences.test_passes_context.yaml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/8891567302dc38f85d6effea6d972e8e2208cd7e","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/system/cassettes/test_generic_agent/TestAgentsWithReferences.test_passes_context.yaml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/system/cassettes/test_generic_agent/TestAgentsWithReferences.test_passes_context.yaml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/8891567302dc38f85d6effea6d972e8e2208cd7e","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/system/cassettes/test_generic_agent/TestAgentsWithReferences.test_passes_context.yaml"}},{"name":"TestAgentsWithReferences.test_respond_after_tool_call.yaml","path":"sdk/tests/system/cassettes/test_generic_agent/TestAgentsWithReferences.test_respond_after_tool_call.yaml","sha":"740a149dc3ca29906efca2a67f36074bd5cfe436","size":15448,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/system/cassettes/test_generic_agent/TestAgentsWithReferences.test_respond_after_tool_call.yaml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/system/cassettes/test_generic_agent/TestAgentsWithReferences.test_respond_after_tool_call.yaml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/740a149dc3ca29906efca2a67f36074bd5cfe436","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/system/cassettes/test_generic_agent/TestAgentsWithReferences.test_respond_after_tool_call.yaml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/system/cassettes/test_generic_agent/TestAgentsWithReferences.test_respond_after_tool_call.yaml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/740a149dc3ca29906efca2a67f36074bd5cfe436","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/system/cassettes/test_generic_agent/TestAgentsWithReferences.test_respond_after_tool_call.yaml"}},{"name":"TestAgentsWithReferences.test_string_only_body.yaml","path":"sdk/tests/system/cassettes/test_generic_agent/TestAgentsWithReferences.test_string_only_body.yaml","sha":"749f6687f4e4e1088b8091b63c5b6fd703a02dab","size":14810,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/system/cassettes/test_generic_agent/TestAgentsWithReferences.test_string_only_body.yaml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/system/cassettes/test_generic_agent/TestAgentsWithReferences.test_string_only_body.yaml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/749f6687f4e4e1088b8091b63c5b6fd703a02dab","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/system/cassettes/test_generic_agent/TestAgentsWithReferences.test_string_only_body.yaml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/system/cassettes/test_generic_agent/TestAgentsWithReferences.test_string_only_body.yaml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/749f6687f4e4e1088b8091b63c5b6fd703a02dab","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/system/cassettes/test_generic_agent/TestAgentsWithReferences.test_string_only_body.yaml"}},{"name":"TestGenericAgent.test_continued_conversation.yaml","path":"sdk/tests/system/cassettes/test_generic_agent/TestGenericAgent.test_continued_conversation.yaml","sha":"2cc7f4ce5c038e79201e1c4bcf81463a7c25ed64","size":20989,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/system/cassettes/test_generic_agent/TestGenericAgent.test_continued_conversation.yaml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/system/cassettes/test_generic_agent/TestGenericAgent.test_continued_conversation.yaml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/2cc7f4ce5c038e79201e1c4bcf81463a7c25ed64","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/system/cassettes/test_generic_agent/TestGenericAgent.test_continued_conversation.yaml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/system/cassettes/test_generic_agent/TestGenericAgent.test_continued_conversation.yaml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/2cc7f4ce5c038e79201e1c4bcf81463a7c25ed64","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/system/cassettes/test_generic_agent/TestGenericAgent.test_continued_conversation.yaml"}},{"name":"TestGenericAgent.test_deletes_conversational_memory.yaml","path":"sdk/tests/system/cassettes/test_generic_agent/TestGenericAgent.test_deletes_conversational_memory.yaml","sha":"f74ad51fa45c43b33d223f713d70be5189fac87e","size":5579,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/system/cassettes/test_generic_agent/TestGenericAgent.test_deletes_conversational_memory.yaml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/system/cassettes/test_generic_agent/TestGenericAgent.test_deletes_conversational_memory.yaml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/f74ad51fa45c43b33d223f713d70be5189fac87e","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/system/cassettes/test_generic_agent/TestGenericAgent.test_deletes_conversational_memory.yaml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/system/cassettes/test_generic_agent/TestGenericAgent.test_deletes_conversational_memory.yaml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/f74ad51fa45c43b33d223f713d70be5189fac87e","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/system/cassettes/test_generic_agent/TestGenericAgent.test_deletes_conversational_memory.yaml"}},{"name":"TestGenericAgent.test_llm_calls.yaml","path":"sdk/tests/system/cassettes/test_generic_agent/TestGenericAgent.test_llm_calls.yaml","sha":"4b3a99a55784903d651d22c8b027cf0aa0f9bb5d","size":4914,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/system/cassettes/test_generic_agent/TestGenericAgent.test_llm_calls.yaml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/system/cassettes/test_generic_agent/TestGenericAgent.test_llm_calls.yaml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/4b3a99a55784903d651d22c8b027cf0aa0f9bb5d","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/system/cassettes/test_generic_agent/TestGenericAgent.test_llm_calls.yaml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/system/cassettes/test_generic_agent/TestGenericAgent.test_llm_calls.yaml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/4b3a99a55784903d651d22c8b027cf0aa0f9bb5d","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/system/cassettes/test_generic_agent/TestGenericAgent.test_llm_calls.yaml"}},{"name":"TestGenericAgentWithToolCalls.test_normal_tool_call.yaml","path":"sdk/tests/system/cassettes/test_generic_agent/TestGenericAgentWithToolCalls.test_normal_tool_call.yaml","sha":"2d56cf74f0fd06b103d1850ae5fbbe35ebbf0d7d","size":10835,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/system/cassettes/test_generic_agent/TestGenericAgentWithToolCalls.test_normal_tool_call.yaml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/system/cassettes/test_generic_agent/TestGenericAgentWithToolCalls.test_normal_tool_call.yaml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/2d56cf74f0fd06b103d1850ae5fbbe35ebbf0d7d","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/system/cassettes/test_generic_agent/TestGenericAgentWithToolCalls.test_normal_tool_call.yaml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/system/cassettes/test_generic_agent/TestGenericAgentWithToolCalls.test_normal_tool_call.yaml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/2d56cf74f0fd06b103d1850ae5fbbe35ebbf0d7d","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/system/cassettes/test_generic_agent/TestGenericAgentWithToolCalls.test_normal_tool_call.yaml"}},{"name":"TestOutputTests.test_can_replay_llm_requests.yaml","path":"sdk/tests/system/cassettes/test_generic_agent/TestOutputTests.test_can_replay_llm_requests.yaml","sha":"98a5cbe2c90e05785835a6efad0e9b3f79dac038","size":26529,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/system/cassettes/test_generic_agent/TestOutputTests.test_can_replay_llm_requests.yaml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/system/cassettes/test_generic_agent/TestOutputTests.test_can_replay_llm_requests.yaml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/98a5cbe2c90e05785835a6efad0e9b3f79dac038","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/system/cassettes/test_generic_agent/TestOutputTests.test_can_replay_llm_requests.yaml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/system/cassettes/test_generic_agent/TestOutputTests.test_can_replay_llm_requests.yaml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/98a5cbe2c90e05785835a6efad0e9b3f79dac038","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/system/cassettes/test_generic_agent/TestOutputTests.test_can_replay_llm_requests.yaml"}},{"name":"TestOutputTests.test_generic_agent_cleans_up_images.yaml","path":"sdk/tests/system/cassettes/test_generic_agent/TestOutputTests.test_generic_agent_cleans_up_images.yaml","sha":"73355877daf5b06f90f71fe2772b83de92bba10f","size":19013,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/system/cassettes/test_generic_agent/TestOutputTests.test_generic_agent_cleans_up_images.yaml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/system/cassettes/test_generic_agent/TestOutputTests.test_generic_agent_cleans_up_images.yaml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/73355877daf5b06f90f71fe2772b83de92bba10f","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/system/cassettes/test_generic_agent/TestOutputTests.test_generic_agent_cleans_up_images.yaml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/system/cassettes/test_generic_agent/TestOutputTests.test_generic_agent_cleans_up_images.yaml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/73355877daf5b06f90f71fe2772b83de92bba10f","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/system/cassettes/test_generic_agent/TestOutputTests.test_generic_agent_cleans_up_images.yaml"}},{"name":"TestOutputTests.test_generic_agent_supports_image.yaml","path":"sdk/tests/system/cassettes/test_generic_agent/TestOutputTests.test_generic_agent_supports_image.yaml","sha":"105b4e47fb767cffd6d106d5a2b5506081f37d59","size":18313,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/system/cassettes/test_generic_agent/TestOutputTests.test_generic_agent_supports_image.yaml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/system/cassettes/test_generic_agent/TestOutputTests.test_generic_agent_supports_image.yaml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/105b4e47fb767cffd6d106d5a2b5506081f37d59","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/system/cassettes/test_generic_agent/TestOutputTests.test_generic_agent_supports_image.yaml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/system/cassettes/test_generic_agent/TestOutputTests.test_generic_agent_supports_image.yaml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/105b4e47fb767cffd6d106d5a2b5506081f37d59","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/system/cassettes/test_generic_agent/TestOutputTests.test_generic_agent_supports_image.yaml"}},{"name":"TestOutputTests.test_generic_agent_supports_multiple_images.yaml","path":"sdk/tests/system/cassettes/test_generic_agent/TestOutputTests.test_generic_agent_supports_multiple_images.yaml","sha":"e05588c763f343346307077a347f6583afd654c9","size":75999,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/system/cassettes/test_generic_agent/TestOutputTests.test_generic_agent_supports_multiple_images.yaml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/system/cassettes/test_generic_agent/TestOutputTests.test_generic_agent_supports_multiple_images.yaml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e05588c763f343346307077a347f6583afd654c9","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/system/cassettes/test_generic_agent/TestOutputTests.test_generic_agent_supports_multiple_images.yaml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/system/cassettes/test_generic_agent/TestOutputTests.test_generic_agent_supports_multiple_images.yaml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e05588c763f343346307077a347f6583afd654c9","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/system/cassettes/test_generic_agent/TestOutputTests.test_generic_agent_supports_multiple_images.yaml"}},{"name":"TestOutputTests.test_generic_agent_supports_object_output.yaml","path":"sdk/tests/system/cassettes/test_generic_agent/TestOutputTests.test_generic_agent_supports_object_output.yaml","sha":"78ecfee3334157aa9cdc4468d86c96b2d07e27f3","size":7591,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/system/cassettes/test_generic_agent/TestOutputTests.test_generic_agent_supports_object_output.yaml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/system/cassettes/test_generic_agent/TestOutputTests.test_generic_agent_supports_object_output.yaml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/78ecfee3334157aa9cdc4468d86c96b2d07e27f3","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/system/cassettes/test_generic_agent/TestOutputTests.test_generic_agent_supports_object_output.yaml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/system/cassettes/test_generic_agent/TestOutputTests.test_generic_agent_supports_object_output.yaml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/78ecfee3334157aa9cdc4468d86c96b2d07e27f3","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/system/cassettes/test_generic_agent/TestOutputTests.test_generic_agent_supports_object_output.yaml"}},{"name":"TestOutputTests.test_generic_agent_supports_object_output_with_stream.yaml","path":"sdk/tests/system/cassettes/test_generic_agent/TestOutputTests.test_generic_agent_supports_object_output_with_stream.yaml","sha":"7f59cfe087b0aeb9582ebad4f4f99883528a39ef","size":7593,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/system/cassettes/test_generic_agent/TestOutputTests.test_generic_agent_supports_object_output_with_stream.yaml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/system/cassettes/test_generic_agent/TestOutputTests.test_generic_agent_supports_object_output_with_stream.yaml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/7f59cfe087b0aeb9582ebad4f4f99883528a39ef","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/system/cassettes/test_generic_agent/TestOutputTests.test_generic_agent_supports_object_output_with_stream.yaml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/system/cassettes/test_generic_agent/TestOutputTests.test_generic_agent_supports_object_output_with_stream.yaml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/7f59cfe087b0aeb9582ebad4f4f99883528a39ef","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/system/cassettes/test_generic_agent/TestOutputTests.test_generic_agent_supports_object_output_with_stream.yaml"}},{"name":"TestOutputTests.test_generic_agent_supports_string_stream.yaml","path":"sdk/tests/system/cassettes/test_generic_agent/TestOutputTests.test_generic_agent_supports_string_stream.yaml","sha":"b35abd23caf7048fe4293ec48446128f58a3a529","size":7817,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/system/cassettes/test_generic_agent/TestOutputTests.test_generic_agent_supports_string_stream.yaml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/system/cassettes/test_generic_agent/TestOutputTests.test_generic_agent_supports_string_stream.yaml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/b35abd23caf7048fe4293ec48446128f58a3a529","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/system/cassettes/test_generic_agent/TestOutputTests.test_generic_agent_supports_string_stream.yaml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/system/cassettes/test_generic_agent/TestOutputTests.test_generic_agent_supports_string_stream.yaml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/b35abd23caf7048fe4293ec48446128f58a3a529","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/system/cassettes/test_generic_agent/TestOutputTests.test_generic_agent_supports_string_stream.yaml"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:29:22 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E55B:2542CD:142C5E:1D932D:65D519B2
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4595'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '405'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/agent/doc_manager/loaders/filesystem_loader.py
  response:
    content: "import hashlib\nimport os\nfrom pathlib import Path\nfrom typing import
      Dict, Any, Iterable\n\nfrom eidolon_ai_sdk.agent.doc_manager.loaders.base_loader
      import (\n    DocumentLoader,\n    FileChangeset,\n    FileInfo,\n    DocumentLoaderSpec,\n)\nfrom
      eidolon_ai_sdk.agent.doc_manager.parsers.base_parser import DataBlob\nfrom eidolon_ai_sdk.system.reference_model
      import Specable, T\n\n\ndef hash_file(file_path, chunk_size=8192):\n    \"\"\"\n
      \   Hash the contents of a file using SHA-256.\n\n    :param file_path: Path
      to the file to be hashed.\n    :param chunk_size: Size of each chunk to read.
      Default is 8192 bytes.\n    :return: Hexadecimal string of the hash.\n    \"\"\"\n
      \   hasher = hashlib.sha256()\n    with open(file_path, \"rb\") as file:\n        chunk
      = file.read(chunk_size)\n        while chunk:\n            hasher.update(chunk)\n
      \           chunk = file.read(chunk_size)\n    return hasher.hexdigest()\n\n\nclass
      FilesystemLoaderSpec(DocumentLoaderSpec):\n    root_dir: str\n    pattern: str
      = \"**/*\"\n\n\n# noinspection PyShadowingNames\nclass FilesystemLoader(DocumentLoader,
      Specable[FilesystemLoaderSpec]):\n    def __init__(self, spec: T, **kwargs:
      object):\n        super().__init__(spec, **kwargs)\n        root_dir = os.path.expanduser(os.path.expandvars(self.spec.root_dir))\n
      \       self.root_path = Path(root_dir).absolute()\n        self.root_dir =
      str(self.root_path)\n        if not self.root_path.exists():\n            raise
      ValueError(f\"Root directory {self.root_dir} does not exist\")\n\n    async
      def list_files(self) -> Iterable[str]:\n        for file in self.root_path.glob(self.spec.pattern):\n
      \           yield str(file.relative_to(self.root_dir))\n\n    async def get_changes(self,
      metadata: Dict[str, Dict[str, Any]]) -> FileChangeset:\n        added = {}\n
      \       modified = {}\n        # iterate over all python files in the root_dir\n
      \       for file in self.root_path.glob(self.spec.pattern):\n            if
      file.is_file():\n                # get the file path relative to the root_dir\n
      \               file_path = str(file.relative_to(self.root_dir))\n                #
      first check the timestamp to see if it changed.  If not, skip the file\n                timestamp
      = os.path.getmtime(file)\n                if file_path in metadata:\n                    if
      timestamp != metadata[file_path][\"timestamp\"]:\n                        #
      create a hash of the file at file path\n                        file_hash =
      hash_file(file)\n                        # if the file exists in symbolic memory,
      check if the hashes are different\n                        if \"hash\" not in
      file_hash != metadata[file_path]:\n                            modified[file_path]
      = {\"timestamp\": timestamp, \"file_hash\": file_hash}\n                    #
      delete from hashes\n                    del metadata[file_path]\n                else:\n
      \                   timestamp = os.path.getmtime(file)\n                    file_hash
      = hash_file(file)\n                    added[file_path] = {\"timestamp\": timestamp,
      \"file_hash\": file_hash}\n\n        self.logger.info(f\"Found {len(added)}
      added files\")\n        self.logger.info(f\"Found {len(modified)} modified files\")\n
      \       self.logger.info(f\"Found {len(metadata)} deleted files\")\n\n        async
      def added_files():\n            for file_path in added:\n                yield
      FileInfo(file_path, added[file_path], DataBlob.from_path(str(self.root_path
      / file_path)))\n\n        async def modified_files():\n            for file_path
      in modified:\n                yield FileInfo(file_path, modified[file_path],
      DataBlob.from_path(str(self.root_path / file_path)))\n\n        async def deleted_files():\n
      \           for file_path in metadata:\n                yield file_path\n\n
      \       return FileChangeset(added_files=added_files(), modified_files=modified_files(),
      removed_files=deleted_files())\n"
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Length:
      - '1241'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:29:22 GMT
      ETag:
      - W/"15c2c246bdbd8b5bc5fc028ae0950e67bc20df513aef6b1e8b5d17cc62c51133"
      Expires:
      - Tue, 20 Feb 2024 21:34:22 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - f01ca19ae44d71303ebd9e6ce763b01067f2eafd
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - A5B6:256713:C0CE0:1146C9:65D519B2
      X-Served-By:
      - cache-bfi-kbfi7400098-BFI
      X-Timer:
      - S1708464563.579899,VS0,VE155
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/memory/local_symbolic_memory.py
  response:
    content: "from copy import deepcopy\nfrom typing import Any, Union, List, Dict,
      AsyncIterable, Optional\n\nfrom bson import ObjectId\nfrom pymongo.errors import
      DuplicateKeyError\n\nfrom eidolon_ai_sdk.memory.semantic_memory import SymbolicMemory\n\n\nclass
      LocalSymbolicMemory(SymbolicMemory):\n    db = {}\n\n    async def start(self):\n
      \       LocalSymbolicMemory.db = {}\n\n    async def stop(self):\n        LocalSymbolicMemory.db
      = {}\n\n    async def count(self, symbol_collection: str, query: dict[str, Any])
      -> int:\n        if symbol_collection not in self.db:\n            return 0\n
      \       return sum(1 for doc in self.db[symbol_collection] if all(item in doc.items()
      for item in query.items()))\n\n    def _matches_query(self, doc: dict, query:
      dict) -> bool:\n        for key, value in query.items():\n            if key
      not in doc:\n                return False\n            if isinstance(value,
      dict):\n                if not self._matches_query(doc[key], value):\n                    return
      False\n            elif doc[key] != value:\n                return False\n        return
      True\n\n    @staticmethod\n    def _apply_projection(doc: dict, projection:
      dict) -> dict:\n        rtn = {field: doc[field] for field in doc if field in
      projection and projection[field] == 1}\n        if not rtn:\n            rtn
      = {k: v for k, v in doc.items() if projection.get(k, 1)}\n        return rtn\n\n
      \   async def find(\n        self,\n        symbol_collection: str,\n        query:
      dict[str, Any],\n        projection: Union[List[str], Dict[str, int]] = None,\n
      \       sort: dict = None,\n        skip: int = None,\n    ) -> AsyncIterable[dict[str,
      Any]]:\n        if symbol_collection not in self.db:\n            return\n        matching_docs
      = [doc for doc in self.db[symbol_collection] if self._matches_query(doc, query)]\n
      \       if sort:\n            for field, direction in reversed(sort.items()):\n
      \               matching_docs = sorted(matching_docs, key=lambda doc: doc.get(field,
      None), reverse=direction == -1)\n        if skip:\n            matching_docs
      = matching_docs[skip:]\n        for doc in matching_docs:\n            yield
      deepcopy(self._apply_projection(doc, projection) if projection else doc)\n\n
      \   async def find_one(\n        self, symbol_collection: str, query: dict[str,
      Any], sort: dict = None\n    ) -> Optional[dict[str, Any]]:\n        async for
      doc in self.find(symbol_collection, query, sort=sort, skip=0):\n            return
      doc\n\n    async def insert_one(self, symbol_collection: str, document: dict[str,
      Any]) -> None:\n        if symbol_collection not in self.db:\n            self.db[symbol_collection]
      = []\n        if any(doc.get(\"_id\") == document.get(\"_id\") for doc in self.db[symbol_collection]):\n
      \           raise DuplicateKeyError(f\"Duplicate key error: _id {document.get('_id')}
      already exists.\")\n        copied = deepcopy(document)\n        if \"_id\"
      not in copied:\n            copied[\"_id\"] = str(ObjectId())\n        self.db[symbol_collection].append(copied)\n\n
      \   async def insert(self, symbol_collection: str, documents: list[dict[str,
      Any]]) -> None:\n        if symbol_collection not in self.db:\n            self.db[symbol_collection]
      = []\n        for document in documents:\n            if \"_id\" not in document:\n
      \               document[\"_id\"] = str(ObjectId())\n            if any(doc.get(\"_id\")
      == document.get(\"_id\") for doc in self.db[symbol_collection]):\n                raise
      DuplicateKeyError(f\"Duplicate key error: _id {document.get('_id')} already
      exists.\")\n        self.db[symbol_collection].extend(deepcopy(documents))\n\n
      \   async def upsert_one(self, symbol_collection: str, document: dict[str, Any],
      query: dict[str, Any]) -> None:\n        if symbol_collection not in self.db:\n
      \           self.db[symbol_collection] = []\n        for i, doc in enumerate(self.db[symbol_collection]):\n
      \           if self._matches_query(doc, query):\n                doc.update(deepcopy(document))\n
      \               return\n        if not document.get(\"_id\"):\n            document[\"_id\"]
      = str(ObjectId())\n        if any(doc.get(\"_id\") == document.get(\"_id\")
      for doc in self.db[symbol_collection]):\n            raise DuplicateKeyError(f\"Duplicate
      key error: _id {document.get('_id')} already exists.\")\n        self.db[symbol_collection].append(deepcopy(document))\n\n
      \   async def update_many(self, symbol_collection: str, query: dict[str, Any],
      document: dict[str, Any]) -> None:\n        if symbol_collection not in self.db:\n
      \           return\n        for doc in self.db[symbol_collection]:\n            if
      self._matches_query(doc, query):\n                doc.update(deepcopy(document))\n\n
      \   async def delete(self, symbol_collection, query):\n        if symbol_collection
      not in self.db:\n            return\n        self.db[symbol_collection] = [\n
      \           doc for doc in self.db[symbol_collection] if not all(item in doc.items()
      for item in query.items())\n        ]\n"
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Length:
      - '1118'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:29:22 GMT
      ETag:
      - W/"da4503725047abe554f19fd9ff6fdb4dfb55e4e646d819a0290842754be1d38d"
      Expires:
      - Tue, 20 Feb 2024 21:34:22 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - fb4c0be72bebadb0fb27cbf6fe2926df31ddc104
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - 3442:259FD4:B78CC:10B2B9:65D519AD
      X-Served-By:
      - cache-bfi-kbfi7400061-BFI
      X-Timer:
      - S1708464563.619714,VS0,VE124
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/agent/tot_agent/prompts.py
  response:
    content: "from textwrap import dedent\n\nPREAMBLE = \"You are an intelligent agent
      that is generating one thought at a time in a tree of thoughts setting.\"\nTHOUGHTS
      = dedent(\n    \"\"\"\n    {% if thoughts %}\n    THOUGHTS\n    \n    {% for
      thought in thoughts %}\n    {{ thought }}\n    {% endfor %}\n    {% endif %}\n
      \   \"\"\"\n).strip()\nPOST_AMBLE = \"Let's think step by step.\"\nPOST_AMBLE_MULTI
      = dedent(\n    \"\"\"\n    {% if thoughts %}\n    Please generate {{ n }} valid
      thoughts based on the last valid thought\n    {% else %}\n    Please generate
      {{ n }} valid thoughts based on the question\n    {%- endif -%}\n    \"\"\"\n).strip()\n\nCHECKER_PROMPT
      = dedent(\n    \"\"\"\n    You are an intelligent agent, validating thoughts
      of another intelligent agent.\n\n    Evaluate the thoughts and question and
      respond with one word.\n\n    - Respond VALID if the thoughts contain the information
      needed so answer the question\n    - Respond INVALID if the last thought is
      invalid or does not make progress from previous thoughts.\n    - Respond INTERMEDIATE
      if the last thought is valid but not the final solution to the question.\n    \n
      \   {% if examples %}\n    <EXAMPLEs>\n    {{ examples }}\n    </EXAMPLE>\n
      \   {% endif %}\n    \n    {% if problem %}\n    <QUESTION>\n    {{ problem
      }}\n    </QUESTION>\n    {% endif %}\n    \n    {% if thoughts %}\n    {% for
      thought in thoughts %}\n    <THOUGHT>\n    {{ thought }}\n    </THOUGHT>\n    {%
      endfor %}\n    {% endif %}\n    \"\"\"\n).strip()\n"
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Length:
      - '560'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:29:22 GMT
      ETag:
      - W/"2702338f6ed8f18cf0d76edad222c3b10801d869789823604d1f9e8b21adced0"
      Expires:
      - Tue, 20 Feb 2024 21:34:22 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - adc0056af149e7d9352475ca94793176e47b304e
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - DA88:256179:B31C0:106BAD:65D519B1
      X-Served-By:
      - cache-bfi-krnt7300028-BFI
      X-Timer:
      - S1708464563.619098,VS0,VE154
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/memory/mongo_symbolic_memory.py
  response:
    content: "import os\n\n# noinspection PyPackageRequirements\nfrom contextvars
      import ContextVar\nfrom typing import Any, Optional, AsyncIterable, Union, Dict,
      List\n\nfrom motor.motor_asyncio import AsyncIOMotorDatabase, AsyncIOMotorClient\nfrom
      pydantic import Field, BaseModel\n\nfrom eidolon_ai_sdk.memory.semantic_memory
      import SymbolicMemory\nfrom eidolon_ai_sdk.system.reference_model import Specable\n\n\nclass
      MongoSymbolicMemoryConfig(BaseModel):\n    mongo_connection_string: Optional[str]
      = Field(\n        default=None, description=\"The connection string to the MongoDB
      instance.\"\n    )\n    mongo_database_name: str = Field(default=\"eidolon\",
      description=\"The name of the MongoDB database to use.\")\n\n\nclass MongoSymbolicMemory(SymbolicMemory,
      Specable[MongoSymbolicMemoryConfig]):\n    mongo_connection_string: Optional[str]\n
      \   mongo_database_name: str\n    _database: Optional[ContextVar]\n\n    def
      __init__(self, spec: MongoSymbolicMemoryConfig):\n        super().__init__(spec)\n
      \       self.mongo_connection_string = spec.mongo_connection_string\n        self.mongo_database_name
      = spec.mongo_database_name\n        self._database = None\n\n    @property\n
      \   def database(self) -> AsyncIOMotorDatabase:\n        if not self._database:\n
      \           self._database = ContextVar(\"database\")\n        try:\n            return
      self._database.get()\n        except LookupError:\n            client = AsyncIOMotorClient(self.mongo_connection_string)\n
      \           database = client.get_database(self.mongo_database_name)\n            self._database.set(database)\n
      \           return database\n\n    async def count(self, symbol_collection:
      str, query: dict[str, Any]) -> int:\n        return await self.database[symbol_collection].count_documents(query)\n\n
      \   async def find(\n        self,\n        symbol_collection: str,\n        query:
      dict[str, Any],\n        projection: Union[List[str], Dict[str, int]] = None,\n
      \       sort: dict = None,\n        skip: int = None,\n    ) -> AsyncIterable[dict[str,
      Any]]:\n        cursor = self.database[symbol_collection].find(query, projection=projection)\n
      \       if sort:\n            cursor = cursor.sort(sort)\n        if skip:\n
      \           cursor = cursor.skip(skip)\n        async for document in cursor:\n
      \           yield document\n\n    async def find_one(\n        self, symbol_collection:
      str, query: dict[str, Any], sort: dict = None\n    ) -> Optional[dict[str, Any]]:\n
      \       kwargs = dict(filter=query)\n        if sort:\n            kwargs[\"sort\"]
      = sort\n        return await self.database[symbol_collection].find_one(**kwargs)\n\n
      \   async def insert(self, symbol_collection: str, documents: list[dict[str,
      Any]]) -> None:\n        return await self.database[symbol_collection].insert_many(documents)\n\n
      \   async def insert_one(self, symbol_collection: str, document: dict[str, Any])
      -> None:\n        return await self.database[symbol_collection].insert_one(document)\n\n
      \   async def update_many(self, symbol_collection: str, query: dict[str, Any],
      document: dict[str, Any]) -> None:\n        return await self.database[symbol_collection].update_many(query,
      document)\n\n    async def upsert_one(self, symbol_collection: str, document:
      dict[str, Any], query: dict[str, Any]) -> None:\n        return await self.database[symbol_collection].update_one(query,
      {\"$set\": document}, upsert=True)\n\n    async def delete(self, symbol_collection,
      query):\n        return await self.database[symbol_collection].delete_many(query)\n\n
      \   async def start(self):\n        \"\"\"\n        Starts the memory implementation.
      Noop for this implementation.\n        \"\"\"\n        if self.database is None:\n
      \           if self.mongo_connection_string is None:\n                self.mongo_connection_string
      = os.getenv(\"MONGO_CONNECTION_STRING\")\n            if self.mongo_database_name
      is None:\n                self.mongo_database_name = os.getenv(\"MONGO_DATABASE_NAME\")\n\n
      \   async def stop(self):\n        \"\"\"\n        Stops the memory implementation.
      Noop for this implementation.\n        \"\"\"\n        if self.database is not
      None:\n            self.database.client.close()\n            self._database
      = None\n"
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Length:
      - '1110'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:29:22 GMT
      ETag:
      - W/"7e17e3a7c8127fccab2a759239a5092fb41828f281660f70b5da50b4d9ce6b53"
      Expires:
      - Tue, 20 Feb 2024 21:34:22 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - 1e7bfe3f623a3399830a47b310d7274d6bcb339b
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - 15DE:253EB0:B71F8:10AC29:65D519B1
      X-Served-By:
      - cache-bfi-kbfi7400044-BFI
      X-Timer:
      - S1708464563.637246,VS0,VE138
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/agent/doc_manager/parsers/__init__.py
  response:
    content: ''
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:29:22 GMT
      ETag:
      - W/"938f66ede415ccb10764da47cd5f3cfc076c07b8791c708cfa8ec54982197c1f"
      Expires:
      - Tue, 20 Feb 2024 21:34:22 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - 619bc32479d0f4c05a4abbc8d8ed239b29890f33
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - 2ADE:2517D9:B9792:10D1A7:65D519B1
      X-Served-By:
      - cache-bfi-krnt7300027-BFI
      X-Timer:
      - S1708464563.654244,VS0,VE135
      X-XSS-Protection:
      - 1; mode=block
      transfer-encoding:
      - chunked
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/memory/noop_memory.py
  response:
    content: "from typing import Optional, List, Dict, Sequence, Iterable\n\nfrom
      eidolon_ai_sdk.memory.document import Document\nfrom eidolon_ai_sdk.memory.vector_store
      import VectorStore, QueryItem\n\n\nclass NoopVectorStore(VectorStore):\n    async
      def start(self):\n        pass\n\n    async def stop(self):\n        pass\n\n
      \   async def add(self, collection: str, docs: Sequence[Document]):\n        pass\n\n
      \   async def delete(self, collection: str, doc_ids: List[str]):\n        pass\n\n
      \   async def query(\n        self, collection: str, query: str, num_results:
      int, metadata_where: Optional[Dict[str, str]] = None\n    ) -> List[Document]:\n
      \       return []\n\n    async def raw_query(\n        self,\n        collection:
      str,\n        query: List[float],\n        num_results: int,\n        metadata_where:
      Optional[Dict[str, str]] = None,\n        include_embeddings: bool = False,\n
      \   ) -> List[QueryItem]:\n        pass\n\n    async def get_docs(self, collection:
      str, doc_ids: List[str]) -> Iterable[Document]:\n        pass\n"
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Length:
      - '380'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:29:22 GMT
      ETag:
      - W/"6a0c382104f91e2085a6fa59a9cf3aa8aeed69db4c33d210f3688af0e74f7df4"
      Expires:
      - Tue, 20 Feb 2024 21:34:22 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - 0332775608c9a34d1c060e681a2eaa6f70768ee4
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - E6CA:256713:C0CE0:1146CA:65D519B0
      X-Served-By:
      - cache-bfi-kbfi7400020-BFI
      X-Timer:
      - S1708464563.679229,VS0,VE149
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/memory/semantic_memory.py
  response:
    content: "from typing import Any, Union, List, Dict, AsyncIterable, Optional\n\nfrom
      abc import ABC, abstractmethod\n\n\nclass SymbolicMemory(ABC):\n    \"\"\"\n
      \   Abstract base class for a symbolic memory component within an agent.\n\n
      \   This class defines the contract for symbolic memory operations such as starting\n
      \   and stopping the memory service, and CRUD (Create, Read, Update, Delete)
      operations\n    on symbolic data. Implementations of this class are expected
      to manage collections\n    of symbols, providing a high-level interface to store
      and retrieve symbolic information.\n    \"\"\"\n\n    @abstractmethod\n    async
      def start(self):\n        \"\"\"\n        Prepares the symbolic memory for operation,
      which may include tasks like\n        allocating resources or initializing connections
      to databases.\n        \"\"\"\n        pass\n\n    @abstractmethod\n    async
      def stop(self):\n        \"\"\"\n        Properly shuts down the symbolic memory,
      ensuring that any resources are released\n        or any established connections
      are terminated.\n        \"\"\"\n        pass\n\n    @abstractmethod\n    async
      def count(self, symbol_collection: str, query: dict[str, Any]) -> int:\n        \"\"\"\n
      \       Searches for symbols within a specified collection that match the given
      query and returns the number matching.\n\n        Args:\n            symbol_collection
      (str): The name of the collection to search within.\n            query (dict[str,
      Any]): The search criteria used to filter symbols.\n\n        Returns:\n            int:
      The number of symbols that match the query.\n        \"\"\"\n        pass\n\n
      \   @abstractmethod\n    def find(\n        self,\n        symbol_collection:
      str,\n        query: dict[str, Any],\n        projection: Union[List[str], Dict[str,
      int]] = None,\n        sort: dict = None,\n        skip: int = None,\n    )
      -> AsyncIterable[dict[str, Any]]:\n        \"\"\"\n        Searches for symbols
      within a specified collection that match the given query.\n\n        Args:\n
      \           symbol_collection (str): The name of the collection to search within.\n
      \           query (dict[str, Any]): The search criteria used to filter symbols.\n
      \           projection (Union[List[str], Dict[str, int]]): The fields to include
      or exclude from the results. If a list,\n                the fields will be
      included. If a dictionary, the fields will be included or excluded based on
      the\n                value of the dictionary. A value of 1 will include the
      field, and a value of 0 will exclude it.\n            sort (dict): The fields
      to sort the results by. The key is the field to sort by, and the value is the
      direction\n                to sort by. A value of 1 will sort in ascending order,
      and a value of -1 will sort in descending order.\n            skip (int): The
      number of results to skip.\n\n        Returns:\n            Iterable[dict[str,
      Any]]: A list of symbols that match the query, each represented as a dictionary.\n
      \       \"\"\"\n        pass\n\n    @abstractmethod\n    async def find_one(\n
      \       self, symbol_collection: str, query: dict[str, Any], sort: dict[str,
      int] = None\n    ) -> Optional[dict[str, Any]]:\n        \"\"\"\n        Searches
      for a single symbol within a specified collection that matches the given query.\n\n
      \       Args:\n            symbol_collection (str): The name of the collection
      to search within.\n            query (dict[str, Any]): The search criteria used
      to filter symbols.\n            sort (dict[str, int]): The fields to sort the
      results by. The key is the field to sort by, and the value is the direction\n\n
      \       Returns:\n            Optional[dict[str, Any]]: A single symbol that
      matches the query, represented as a dictionary,\n            or None if no match
      is found.\n        \"\"\"\n        pass\n\n    @abstractmethod\n    async def
      insert(self, symbol_collection: str, documents: list[dict[str, Any]]) -> None:\n
      \       \"\"\"\n        Inserts multiple symbols into the specified collection.\n\n
      \       Args:\n            symbol_collection (str): The name of the collection
      where symbols will be inserted.\n            documents (list[dict[str, Any]]):
      A list of symbols to insert, each represented as a dictionary.\n\n        Returns:\n
      \           None\n        \"\"\"\n        pass\n\n    @abstractmethod\n    async
      def insert_one(self, symbol_collection: str, document: dict[str, Any]) -> None:\n
      \       \"\"\"\n        Inserts a single symbol into the specified collection.\n\n
      \       Args:\n            symbol_collection (str): The name of the collection
      where the symbol will be inserted.\n            document (dict[str, Any]): The
      symbol to insert, represented as a dictionary.\n\n        Returns:\n            None\n
      \       \"\"\"\n        pass\n\n    @abstractmethod\n    async def upsert_one(self,
      symbol_collection: str, document: dict[str, Any], query: dict[str, Any]) ->
      None:\n        \"\"\"\n        Updates a single symbol in the specified collection
      based on the query, or inserts it if it does not exist.\n\n        Args:\n            symbol_collection
      (str): The name of the collection where the symbol will be upserted.\n            document
      (dict[str, Any]): The symbol to upsert, represented as a dictionary.\n            query
      (dict[str, Any]): The search criteria used to find the symbol to update.\n\n
      \       Returns:\n            None\n        \"\"\"\n        pass\n\n    @abstractmethod\n
      \   async def update_many(self, symbol_collection: str, query: dict[str, Any],
      document: dict[str, Any]) -> None:\n        pass\n\n    @abstractmethod\n    async
      def delete(self, symbol_collection, query):\n        pass\n"
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Length:
      - '1285'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:29:22 GMT
      ETag:
      - W/"86638849f17c7592cea84c379b9961ac3067cde44209ed88af806973816192c5"
      Expires:
      - Tue, 20 Feb 2024 21:34:22 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - f1afdb93a7316bdb03c91d3117a3fb620cedd398
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - D8C0:2587A7:B2D58:106783:65D519B0
      X-Served-By:
      - cache-bfi-krnt7300048-BFI
      X-Timer:
      - S1708464563.708421,VS0,VE127
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/agent/tot_agent/thought.py
  response:
    content: "from __future__ import annotations\n\nfrom typing import Literal, List\n\nfrom
      pydantic import BaseModel, Field\n\n\nclass ThoughtValidity(BaseModel):\n    validity:
      Literal[\"INTERMEDIATE\", \"VALID\", \"INVALID\"]\n\n\nclass Thought(ThoughtValidity):\n
      \   text: str\n    children: List[Thought] = Field(default_factory=list)\n\n
      \   def __hash__(self) -> int:\n        return id(self)\n"
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Length:
      - '246'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:29:22 GMT
      ETag:
      - W/"b35e8d2ea5c3598824e24aae0184b4d565a466c6fb8e01780eb06cf8fade5d03"
      Expires:
      - Tue, 20 Feb 2024 21:34:22 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - 5296d6aa9f6d8139b0adb4e96547bc6bd246ff3e
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - 29A6:23F7:64E1A:7E0FF:65D519B2
      X-Served-By:
      - cache-yvr1533-YVR
      X-Timer:
      - S1708464563.704259,VS0,VE131
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/memory/similarity_memory.py
  response:
    content: "from pydantic import BaseModel\n\nfrom eidolon_ai_sdk.memory.embeddings
      import Embedding\nfrom eidolon_ai_sdk.memory.vector_store import VectorStore\nfrom
      eidolon_ai_sdk.system.reference_model import Specable, AnnotatedReference\n\n\nclass
      SimilarityMemorySpec(BaseModel):\n    embedder: AnnotatedReference[Embedding]\n
      \   vector_store: AnnotatedReference[VectorStore]\n\n\nclass SimilarityMemory(Specable[SimilarityMemorySpec]):\n
      \   embedder: Embedding\n    vector_store: VectorStore\n\n    def __init__(self,
      **kwargs):\n        super().__init__(**kwargs)\n        self.embedder = self.spec.embedder.instantiate()\n
      \       self.vector_store = self.spec.vector_store.instantiate()\n\n    async
      def start(self):\n        await self.embedder.start()\n        await self.vector_store.start()\n\n
      \   async def stop(self):\n        await self.embedder.stop()\n        await
      self.vector_store.stop()\n"
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Length:
      - '323'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:29:22 GMT
      ETag:
      - W/"b03235c3411eef73eb405ecfb3f9751e9df5aeeda2d0bee8493ea26a085760d6"
      Expires:
      - Tue, 20 Feb 2024 21:34:22 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - 3f858951f04ffe24eee496dca1e126157daff214
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - 24CA:251BBD:B42BE:107CDA:65D519B2
      X-Served-By:
      - cache-bfi-kbfi7400033-BFI
      X-Timer:
      - S1708464563.726436,VS0,VE152
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/agent/tot_agent/thought_generators.py
  response:
    content: "\"\"\"\nWe provide two strategies for generating thoughts in the Tree
      of Thoughts (ToT)\nframework to avoid repetition:\n\nThese strategies ensure
      that the language model generates diverse and\nnon-repeating thoughts, which
      are crucial for problem-solving tasks that require\nexploration.\n\"\"\"\nfrom
      abc import abstractmethod\nfrom typing import Any, Dict, List, Callable, Awaitable\n\nfrom
      jinja2 import StrictUndefined, Environment\nfrom pydantic import Field, BaseModel\n\nfrom
      eidolon_ai_sdk.cpu.agent_io import SystemCPUMessage, UserTextCPUMessage, CPUMessageTypes\nfrom
      eidolon_ai_sdk.cpu.llm_message import UserMessage, LLMMessage\nfrom eidolon_ai_sdk.agent.tot_agent.prompts
      import (\n    POST_AMBLE,\n    THOUGHTS,\n    PREAMBLE,\n    POST_AMBLE_MULTI,\n)\nfrom
      eidolon_ai_sdk.system.reference_model import Specable\n\n\nclass TGSConfig(BaseModel):\n
      \   preamble: str = PREAMBLE\n    thoughts: str = THOUGHTS\n    post_amble:
      str = POST_AMBLE\n    num_children: int = Field(3, description=\"The number
      of thoughts to generate.\")\n\n\nclass ThoughtGenerationStrategy(Specable[TGSConfig]):\n
      \   \"\"\"\n    Base class for a thought generation strategy.\n    \"\"\"\n\n
      \   spec: TGSConfig\n    env = Environment(undefined=StrictUndefined)\n\n    def
      __init__(self, spec):\n        super().__init__(spec)\n        self.spec = spec\n\n
      \   def build_prompt(self, user_message, thoughts_path: List[str]) -> (List[CPUMessageTypes],
      List[CPUMessageTypes]):\n        thoughts_tuple = tuple(thoughts_path)\n        preamble_txt
      = self.env.from_string(self.spec.preamble).render(thoughts=thoughts_tuple, n=self.spec.num_children)\n
      \       thoughts_txt = self.env.from_string(self.spec.thoughts).render(thoughts=thoughts_tuple,
      n=self.spec.num_children)\n        post_amble_txt = self.env.from_string(self.spec.post_amble).render(\n
      \           thoughts=thoughts_tuple, n=self.spec.num_children\n        )\n        return
      (\n            [SystemCPUMessage(prompt=preamble_txt)],\n            [\n                UserTextCPUMessage(prompt=user_message),\n
      \               UserTextCPUMessage(prompt=thoughts_txt),\n                UserTextCPUMessage(prompt=post_amble_txt),\n
      \           ],\n        )\n\n    @abstractmethod\n    async def next_thought(\n
      \       self,\n        user_message: str,\n        llm_call: Callable[\n            [List[LLMMessage],
      List[LLMMessage], Dict[str, Any]],\n            Awaitable[Dict[str, Any]],\n
      \       ],\n        thoughts_path: List[str] = Field(default_factory=list),\n
      \   ) -> str:\n        \"\"\"\n        Generate the next thought given the problem
      description and the thoughts\n        generated so far.\n        \"\"\"\n\n\nclass
      SampleCoTStrategyOutput(BaseModel):\n    thought: str\n\n\nclass SampleCoTStrategy(ThoughtGenerationStrategy):\n
      \   \"\"\"\n    Sample thoughts from a Chain-of-Thought (CoT) prompt.\n\n    This
      strategy works better when the thought space is rich, such as when each\n    thought
      is a paragraph. Independent and identically distributed samples\n    lead to
      diversity, which helps to avoid repetition.\n    \"\"\"\n\n    async def next_thought(\n
      \       self,\n        user_message: UserMessage,\n        llm_call: Callable[\n
      \           [List[LLMMessage], List[LLMMessage], Dict[str, Any]],\n            Awaitable[Dict[str,
      Any]],\n        ],\n        thoughts_path: List[str] = Field(default_factory=list),\n
      \   ) -> str:\n        system_messages, messages = self.build_prompt(user_message,
      thoughts_path)\n        next_thought = await llm_call(system_messages, messages,
      SampleCoTStrategyOutput.model_json_schema())\n        return next_thought[\"thought\"]\n\n\nclass
      ProposeOutputFormat(BaseModel):\n    thoughts: List[str]\n\n\nclass ProposePromptStrategyConfig(TGSConfig):\n
      \   post_amble: str = POST_AMBLE_MULTI\n\n\nclass ProposePromptStrategy(ThoughtGenerationStrategy,
      Specable[ProposePromptStrategyConfig]):\n    \"\"\"\n    Propose thoughts sequentially
      using a \"propose prompt\".\n\n    This strategy works better when the thought
      space is more constrained, such\n    as when each thought is just a word or
      a line. Proposing different thoughts\n    in the same prompt completion helps
      to avoid duplication.\n    \"\"\"\n\n    tot_memory: Dict[tuple, List[str]]\n\n
      \   def __init__(self, **kwargs):\n        super().__init__(**kwargs)\n        self.tot_memory
      = {}\n\n    async def next_thought(\n        self,\n        user_message: UserMessage,\n
      \       llm_call: Callable[\n            [List[LLMMessage], List[LLMMessage],
      Dict[str, Any]],\n            Awaitable[Dict[str, Any]],\n        ],\n        thoughts_path:
      List[str] = Field(default_factory=list),\n    ) -> str:\n        thoughts_tuple
      = tuple(thoughts_path)\n        if thoughts_tuple not in self.tot_memory or
      not self.tot_memory[thoughts_tuple]:\n            system_messages, messages
      = self.build_prompt(user_message, thoughts_path)\n            next_thought_msg
      = await llm_call(system_messages, messages, ProposeOutputFormat.model_json_schema())\n
      \           self.tot_memory[thoughts_tuple] = next_thought_msg[\"thoughts\"]\n
      \       return self.tot_memory[thoughts_tuple].pop()\n"
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Length:
      - '1456'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:29:22 GMT
      ETag:
      - W/"f331d0ce59609e85be2f5250ed5db6f8349ac221c24bfe8a5c4e0fa3a1bc5f34"
      Expires:
      - Tue, 20 Feb 2024 21:34:22 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - b576b4672fcc0f10caee0a87e84837f32d5a3354
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - 307E:251816:B3AEA:107514:65D519B2
      X-Served-By:
      - cache-bfi-krnt7300071-BFI
      X-Timer:
      - S1708464563.764640,VS0,VE125
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/agent/doc_manager/parsers/auto_parser.py
  response:
    content: "from typing import Iterable\n\nfrom eidolon_ai_sdk.agent.doc_manager.parsers.base_parser
      import DocumentParser, DataBlob, DocumentParserSpec\nfrom eidolon_ai_sdk.agent.doc_manager.parsers.code_ast_parsers.programing_language_parser
      import LanguageParserSpec\nfrom eidolon_ai_sdk.agent.doc_manager.parsers.pdf_parsers
      import PyPDFParserSpec\nfrom eidolon_ai_sdk.agent.doc_manager.parsers.text_parsers
      import BS4HTMLParserSpec\nfrom eidolon_ai_sdk.memory.document import Document\n\n\nclass
      AutoParser(DocumentParser):\n    def parse(self, blob: DataBlob) -> Iterable[Document]:\n
      \       if blob.mimetype == \"application/pdf\":\n            from eidolon_ai_sdk.agent.doc_manager.parsers.pdf_parsers
      import PyPDFParser\n\n            yield from PyPDFParser(PyPDFParserSpec()).parse(blob)\n
      \       elif (\n            blob.mimetype == \"application/msword\"\n            or
      blob.mimetype == \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\"\n
      \       ):\n            from eidolon_ai_sdk.agent.doc_manager.parsers.ms_word_parser
      import MsWordParser\n\n            yield from MsWordParser(DocumentParserSpec()).parse(blob)\n
      \       elif blob.mimetype == \"text/html\":\n            from eidolon_ai_sdk.agent.doc_manager.parsers.text_parsers
      import BS4HTMLParser\n\n            yield from BS4HTMLParser(BS4HTMLParserSpec()).parse(blob)\n
      \       elif blob.mimetype == \"text/x-python\":\n            from eidolon_ai_sdk.agent.doc_manager.parsers.code_ast_parsers.programing_language_parser
      import (\n                LanguageParser,\n            )\n\n            yield
      from LanguageParser(LanguageParserSpec(language=\"python\")).parse(blob)\n        elif
      blob.mimetype == \"application/javascript\":\n            from eidolon_ai_sdk.agent.doc_manager.parsers.code_ast_parsers.programing_language_parser
      import (\n                LanguageParser,\n            )\n\n            yield
      from LanguageParser(LanguageParserSpec(language=\"javascript\")).parse(blob)\n
      \       elif blob.mimetype == \"text/x-cobol\":\n            from eidolon_ai_sdk.agent.doc_manager.parsers.code_ast_parsers.programing_language_parser
      import (\n                LanguageParser,\n            )\n\n            yield
      from LanguageParser(LanguageParserSpec(language=\"cobol\")).parse(blob)\n        elif
      (\n            blob.mimetype.startswith(\"text/\")\n            or blob.mimetype
      == \"application/json\"\n            or blob.mimetype == \"application/xml\"\n
      \           or blob.mimetype == \"application/yaml\"\n            or blob.mimetype
      == \"application/x-yaml\"\n            or blob.mimetype == \"application/x-yml\"\n
      \       ):\n            from eidolon_ai_sdk.agent.doc_manager.parsers.text_parsers
      import TextParser\n\n            yield from TextParser(DocumentParserSpec()).parse(blob)\n
      \       else:\n            raise ValueError(f\"Unsupported mimetype: {blob.mimetype}\")\n"
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Length:
      - '568'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:29:22 GMT
      ETag:
      - W/"5a1c9e2ec9c5d2c28d2870d0eaabb9733e3b825166aea6cebb35781b82f3146f"
      Expires:
      - Tue, 20 Feb 2024 21:34:22 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - cfc1e0a7aaaa170e68718b400db33ff1f810c646
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - 9DF4:254203:B5C59:10967D:65D519B1
      X-Served-By:
      - cache-bfi-kbfi7400065-BFI
      X-Timer:
      - S1708464563.764441,VS0,VE120
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/agent/doc_manager/parsers/__init__.py
  response:
    content: ''
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:29:22 GMT
      ETag:
      - W/"938f66ede415ccb10764da47cd5f3cfc076c07b8791c708cfa8ec54982197c1f"
      Expires:
      - Tue, 20 Feb 2024 21:34:22 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - cf3e2d6bbf9dc069716d2897b6f25247e379cdbd
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - CC06:254203:B5C59:10967E:65D519B2
      X-Served-By:
      - cache-bfi-kbfi7400061-BFI
      X-Timer:
      - S1708464563.779968,VS0,VE120
      X-XSS-Protection:
      - 1; mode=block
      transfer-encoding:
      - chunked
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/agent/doc_manager/parsers/base_parser.py
  response:
    content: "import mimetypes\n\nimport contextlib\nimport logging\nfrom abc import
      ABC, abstractmethod\nfrom dataclasses import dataclass\nfrom io import BufferedReader,
      BytesIO, IOBase\nfrom typing import Union, Optional, Generator, Iterable\n\nfrom
      pydantic import BaseModel\n\nfrom eidolon_ai_sdk.memory.document import Document\nfrom
      eidolon_ai_sdk.system.reference_model import Specable\n\n\n@dataclass\nclass
      DataBlob:\n    data: Union[bytes, IOBase, str, None]\n    mimetype: Optional[str]
      = None\n    encoding: str = \"utf-8\"\n    path: Optional[str] = None\n\n    @contextlib.contextmanager\n
      \   def as_bytes(self) -> Generator[Union[BytesIO, BufferedReader], None, None]:\n
      \       if isinstance(self.data, bytes):\n            yield BytesIO(self.data)\n
      \       elif isinstance(self.data, IOBase):\n            yield self.data\n        elif
      isinstance(self.data, str):\n            yield BytesIO(self.data.encode(self.encoding))\n
      \       elif self.data is None and self.path:\n            with open(str(self.path),
      \"rb\") as f:\n                yield f\n        else:\n            raise TypeError(\"DataBlob.data
      must be bytes or str\")\n\n    def as_string(self) -> str:\n        if self.data
      is None and self.path:\n            with open(str(self.path), \"r\", encoding=self.encoding)
      as f:\n                self.data = f.read()\n                return self.data\n
      \       elif isinstance(self.data, bytes):\n            return self.data.decode(self.encoding)\n
      \       elif isinstance(self.data, str):\n            return self.data\n        else:\n
      \           raise TypeError(\"DataBlob.data must be bytes or str\")\n\n    @classmethod\n
      \   def from_path(\n        cls,\n        path: str,\n        *,\n        encoding:
      str = \"utf-8\",\n        mimetype: Optional[str] = None,\n        guess_type:
      bool = True,\n    ) -> \"DataBlob\":\n        \"\"\"Load the blob from a path
      like object.\n\n        Args:\n            path: path like object to file to
      be read\n            encoding: Encoding to use if decoding the bytes into a
      string\n            mimetype: if provided, will be set as the mime-type of the
      data\n            guess_type: If True, the mimetype will be guessed from the
      contents of the file,\n                        if a mime-type was not provided\n\n
      \       Returns:\n            Blob instance\n        \"\"\"\n        if guess_type
      and mimetype is None:\n            import filetype\n\n            mimetype =
      filetype.guess_mime(path)\n            if mimetype is None and path is not None:\n
      \               mimetype = mimetypes.guess_type(path)[0]\n            if mimetype
      is None:\n                if path.endswith(\".md\"):\n                    mimetype
      = \"text/x-markdown\"\n                else:\n                    mimetype =
      \"text/plain\"\n\n        return cls(\n            data=None,\n            path=path,\n
      \           encoding=encoding,\n            mimetype=mimetype,\n        )\n\n
      \   @classmethod\n    def from_bytes(\n        cls,\n        data: bytes,\n
      \       *,\n        path: Optional[str],\n        mimetype: Optional[str] =
      None,\n        encoding: str = \"utf-8\",\n        guess_type: bool = True,\n
      \   ) -> \"DataBlob\":\n        \"\"\"Load the blob from a bytes object.\n\n
      \       Args:\n            data: bytes object to be read\n            path:
      path to file that the bytes object was read from or None if not applicable\n
      \           mimetype: if provided, will be set as the mime-type of the data\n
      \           encoding: Encoding to use if decoding the bytes into a string\n
      \           guess_type: If True, the mimetype will be guessed from the contents
      of the data,\n                        if a mime-type was not provided\n\n        Returns:\n
      \           Blob instance\n        \"\"\"\n        if guess_type and mimetype
      is None:\n            import filetype\n\n            mimetype = filetype.guess_mime(data)\n
      \           if mimetype is None and path is not None:\n                mimetype
      = mimetypes.guess_type(path)[0]\n            if mimetype is None:\n                if
      path.endswith(\".md\"):\n                    mimetype = \"text/x-markdown\"\n
      \               else:\n                    mimetype = \"text/plain\"\n\n        return
      cls(\n            data=data,\n            path=path,\n            encoding=encoding,\n
      \           mimetype=mimetype,\n        )\n\n\nclass DocumentParserSpec(BaseModel):\n
      \   pass\n\n\nclass DocumentParser(ABC, Specable[DocumentParserSpec]):\n    def
      __init__(self, spec: DocumentParserSpec):\n        super().__init__(spec)\n
      \       self.spec = spec\n        self.logger = logging.getLogger(\"eidolon\")\n\n
      \   @abstractmethod\n    def parse(self, blob: DataBlob) -> Iterable[Document]:\n
      \       pass\n"
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Length:
      - '1144'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:29:22 GMT
      ETag:
      - W/"be05bfb77789e14a7bd2c87243eb8f7aefc43825959b956b767cfba5edd18d54"
      Expires:
      - Tue, 20 Feb 2024 21:34:22 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - 0a6496bd97d381d1a74035869eaea907d345532d
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - 18D8:25522C:AA6FF:FE124:65D519B2
      X-Served-By:
      - cache-bfi-krnt7300051-BFI
      X-Timer:
      - S1708464563.782826,VS0,VE126
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/memory/vector_store.py
  response:
    content: "from abc import ABC, abstractmethod\nfrom pydantic import BaseModel,
      Field\nfrom typing import Optional, List, Dict, Sequence, AsyncIterable\n\nfrom
      eidolon_ai_sdk.memory.document import Document\n\n\nclass QueryItem(BaseModel):\n
      \   id: str = Field(description=\"The unique identifier for the document\")\n
      \   metadata: dict = Field(default_factory=dict, description=\"The metadata
      of the document.\")\n    score: float = Field(description=\"The score of the
      document.\")\n    embedding: Optional[List[float]] = Field(description=\"The
      embedding of the document.\")\n\n\nclass VectorStore(ABC):\n    @abstractmethod\n
      \   async def start(self):\n        pass\n\n    @abstractmethod\n    async def
      stop(self):\n        pass\n\n    @abstractmethod\n    async def add(self, collection:
      str, docs: Sequence[Document]):\n        pass\n\n    @abstractmethod\n    async
      def delete(self, collection: str, doc_ids: List[str]):\n        pass\n\n    @abstractmethod\n
      \   async def query(\n        self,\n        collection: str,\n        query:
      str,\n        num_results: int,\n        metadata_where: Optional[Dict[str,
      str]] = None,\n    ) -> List[Document]:\n        pass\n\n    @abstractmethod\n
      \   async def raw_query(\n        self,\n        collection: str,\n        query:
      List[float],\n        num_results: int,\n        metadata_where: Optional[Dict[str,
      str]] = None,\n        include_embeddings: bool = False,\n    ) -> List[QueryItem]:\n
      \       pass\n\n    @abstractmethod\n    def get_docs(self, collection: str,
      doc_ids: List[str]) -> AsyncIterable[Document]:\n        pass\n"
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Length:
      - '504'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:29:22 GMT
      ETag:
      - W/"2a5cd23c98241fc0912315269d64974b4e6a7ea1549166d29731396a5f86ba3a"
      Expires:
      - Tue, 20 Feb 2024 21:34:22 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - 860c63f099aea209a0d4c506d4179c0270836e50
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - 4050:256179:B31C5:106BB3:65D519B2
      X-Served-By:
      - cache-bfi-kbfi7400098-BFI
      X-Timer:
      - S1708464563.767587,VS0,VE152
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/agent/doc_manager/parsers/test_pdf_parser.py
  response:
    content: "import os\n\nfrom eidolon_ai_sdk.agent.doc_manager.parsers.base_parser
      import DataBlob\nfrom eidolon_ai_sdk.agent.doc_manager.parsers.pdf_parsers import
      PyPDFParser, PyPDFParserSpec\n\n\nclass TestPDFParser:\n    def test_parse(self):\n
      \       data = DataBlob.from_path(os.path.dirname(os.path.abspath(__file__))
      + \"/AgentXOS.pdf\")\n        parser = PyPDFParser(PyPDFParserSpec())\n        docs
      = list(parser.parse(data))\n        assert len(docs) == 24\n        doc = docs[0]\n
      \       assert doc.metadata[\"source\"] == os.path.dirname(os.path.abspath(__file__))
      + \"/AgentXOS.pdf\"\n        assert doc.metadata[\"mime_type\"] == \"application/pdf\"\n
      \       assert (\n            doc.page_content\n            == \"\"\" Agent
      \ X  OS \n Overview \n LLM Agents have been shown capable of solving a wide
      variety of tasks. \n For example, in the paper  \u201CGenerative Agents: Interactive
      Simulacra of Human Behavior\u201D  a group \n of LLM agents were set up to mimic
      a town in the style of the video game \u201CThe SIMS\u201D. In the \n paper
      \ \u201CGhost in the Minecraft: Generally Capable Agents for Open-World Environments
      via Large \n Language Models with Text-based Knowledge and Memory\u201D  a series
      of generally capable \n agents were prompted to \uFB01nd and craft items in
      the Minecraft world using a series of actions \n and rewards for those actions.
      Finally in the paper  \u201CVOYAGER: An Open-Ended Embodied Agent \n with Large
      Language Models\u201D  a group of LLMs work in concert to learn new code and
      \n dynamically update their prompting strategies as they explore a Minecraft
      world. \n Each of these papers implement their own framework to run, manage,
      and evaluate the multiple \n agents running in these systems. They each have
      their own way to record memories, their own \n way to abstract the LLM, and
      their own way to manage the agent runtime environment. \n We propose a new system,
      \ AgentXOS  , that introduces a series of abstractions for single or \n multi-agent
      systems. \n Goals \n 1.  Lorem ipsum dolor sit amet:  Duis autem vel eum iriure
      \ dolor in hendrerit in vulputate \n velit esse molestie consequat, vel illum
      dolore eu feugiat nulla facilisis at vero eros et \n accumsan. \n 2.  Sed diam
      nonummy nibh euismod:  Nam liber tempor cum soluta nobis eleifend option \n
      congue nihil imperdiet doming id quod mazim placerat facer possim assum. \n
      What is an Agent? \n\"\"\"\n        )\n"
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Length:
      - '1162'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:29:22 GMT
      ETag:
      - W/"f0b6b38875f20926c6938de01321ffb1c743e99e1eda5092366e38f1cbde0a70"
      Expires:
      - Tue, 20 Feb 2024 21:34:22 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - 5d7071800b21b6934bba25e1e34fe157650b5911
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - DC44:251816:B3AEA:107515:65D519B2
      X-Served-By:
      - cache-bfi-kbfi7400044-BFI
      X-Timer:
      - S1708464563.802597,VS0,VE127
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/security/__init__.py
  response:
    content: ''
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Length:
      - '0'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:29:22 GMT
      ETag:
      - W/"938f66ede415ccb10764da47cd5f3cfc076c07b8791c708cfa8ec54982197c1f"
      Expires:
      - Tue, 20 Feb 2024 21:34:22 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - bdeb6dc840111d40bfa5959955d2b563e0950601
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - 140E:259FD4:B78CF:10B2BB:65D519B2
      X-Served-By:
      - cache-bfi-krnt7300028-BFI
      X-Timer:
      - S1708464563.833038,VS0,VE127
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/agent/doc_manager/parsers/test_text_parser.py
  response:
    content: "import pytest\n\nfrom eidolon_ai_sdk.agent.doc_manager.parsers.base_parser
      import DataBlob, DocumentParserSpec\nfrom eidolon_ai_sdk.agent.doc_manager.parsers.text_parsers
      import TextParser\n\n\nclass TestTextParser:\n    @pytest.fixture()\n    def
      text_parser(self):\n        return TextParser(DocumentParserSpec())\n\n    def
      test_parse_simple_string(self, text_parser: TextParser):\n        data = DataBlob(path=\"path/file.txt\",
      mimetype=\"text/plain\", data=\"data\")\n        docs = list(text_parser.parse(data))\n
      \       assert len(docs) == 1\n        doc = docs[0]\n        assert doc.page_content
      == \"data\"\n        assert doc.metadata[\"source\"] == \"path/file.txt\"\n
      \       assert doc.metadata[\"mime_type\"] == \"text/plain\"\n\n    def test_parse_large_string(self,
      text_parser: TextParser):\n        string = ((\"1234567890 \" * 10) + \"\\n\")
      * 100\n        data = DataBlob(path=\"path/file.txt\", mimetype=\"text/plain\",
      data=string)\n        docs = list(text_parser.parse(data))\n        assert len(docs)
      == 1\n        doc = docs[0]\n        assert doc.page_content == string\n        assert
      doc.metadata[\"source\"] == \"path/file.txt\"\n        assert doc.metadata[\"mime_type\"]
      == \"text/plain\"\n"
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Length:
      - '388'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:29:22 GMT
      ETag:
      - W/"27a23d8f61c4346725177438587468472b2b78067f7974e6cb4d35b2193d77e9"
      Expires:
      - Tue, 20 Feb 2024 21:34:22 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - 8e279da71c1f446b51be12a386b08e279132b63b
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - 755C:2590F7:BBC3D:10F62F:65D519B2
      X-Served-By:
      - cache-bfi-kbfi7400020-BFI
      X-Timer:
      - S1708464563.848807,VS0,VE126
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/agent/tot_agent/tot_agent.py
  response:
    content: "from __future__ import annotations\n\nfrom textwrap import indent\nfrom
      typing import List, Dict, Any, Literal, Optional, Type, Union\n\nfrom fastapi
      import HTTPException\nfrom jinja2 import StrictUndefined, Environment\nfrom
      pydantic import Field, BaseModel\n\nfrom eidolon_ai_sdk.agent.agent import register_program,
      Agent, AgentSpec\nfrom eidolon_ai_sdk.system.fn_handler import FnHandler\nfrom
      eidolon_ai_sdk.agent.tot_agent.checker import ToTChecker\nfrom eidolon_ai_sdk.agent.tot_agent.controller
      import ToTController\nfrom eidolon_ai_sdk.agent.tot_agent.memory import ToTDFSMemory\nfrom
      eidolon_ai_sdk.agent.tot_agent.thought import Thought\nfrom eidolon_ai_sdk.agent.tot_agent.thought_generators
      import (\n    ThoughtGenerationStrategy,\n)\nfrom eidolon_ai_sdk.cpu.agent_io
      import UserTextCPUMessage\nfrom eidolon_ai_sdk.cpu.llm_message import LLMMessage\nfrom
      eidolon_ai_sdk.system.reference_model import Specable, AnnotatedReference\nfrom
      eidolon_ai_sdk.util.logger import logger\nfrom eidolon_ai_sdk.util.schema_to_model
      import schema_to_model\n\n\nclass ToTAgentConfig(AgentSpec):\n    description:
      str\n    num_iterations: int = Field(\n        10,\n        description=\"The
      maximum number of iterations to run the tree of thoughts algorithm.\",\n    )\n
      \   user_prompt: str = Field(description=\"The prompt to use when asking the
      user for a question.\")\n    input_schema: Dict[str, Any] = Field(description=\"The
      json schema for the question input model.\")\n    output_schema: Union[Literal[\"str\"],
      Dict[str, Any]] = Field(\n        description=\"The json schema for the output
      model or the literal 'str' for text output.\"\n    )\n    thought_generator:
      AnnotatedReference[ThoughtGenerationStrategy] = Field(\n        description=\"The
      thought generation strategy to use.\"\n    )\n    checker: AnnotatedReference[ToTChecker]
      = Field(description=\"The checker to use to evaluate thoughts.\")\n    fallback:
      Literal[\"ERROR\", \"LLM\"] = \"ERROR\"\n    init_description: Optional[str]
      = Field(default=None, description=\"Overrides the description of the INIT endpoint.\")\n\n\ndef
      make_description(agent: object, _handler: FnHandler) -> str:\n    # noinspection
      PyUnresolvedReferences\n    spec = agent.spec\n    return spec.description\n\n\ndef
      make_input_schema(agent: object, handler: FnHandler) -> Type[BaseModel]:\n    #
      noinspection PyUnresolvedReferences\n    spec = agent.spec\n    properties:
      Dict[str, Any] = {}\n    if spec.input_schema:\n        properties[\"body\"]
      = dict(\n            type=\"object\",\n            properties=spec.input_schema,\n
      \       )\n    required = [\"body\"]\n    schema = {\"type\": \"object\", \"properties\":
      properties, \"required\": required}\n    return schema_to_model(schema, f\"{handler.name.capitalize()}InputModel\")\n\n\ndef
      make_output_schema(agent: object, handler: FnHandler) -> Type[Any]:\n    # noinspection
      PyUnresolvedReferences\n    spec = agent.spec\n    if spec.output_schema ==
      \"str\":\n        return str\n    elif spec.output_schema:\n        return schema_to_model(spec.output_schema,
      f\"{handler.name.capitalize()}OutputModel\")\n    else:\n        raise ValueError(\"output_schema
      must be specified\")\n\n\nclass TotResponse(BaseModel):\n    answer: Any\n    thoughts:
      List[str]\n\n\nclass TreeOfThoughtsAgent(Agent, Specable[ToTAgentConfig]):\n
      \   thought_generator: ThoughtGenerationStrategy\n    tot_memory: ToTDFSMemory\n
      \   tot_controller: ToTController\n    checker: ToTChecker\n\n    def __init__(self,
      **kwargs):\n        super().__init__(**kwargs)\n        self.thought_generator
      = self.spec.thought_generator.instantiate()\n        self.checker = self.spec.checker.instantiate(cpu=self.cpu)\n
      \       self.tot_memory = ToTDFSMemory()\n        self.tot_controller = ToTController()\n
      \       if self.spec.init_description:\n            handlers = getattr(self.question,
      \"eidolon_handlers\")\n            for handler in handlers:\n                handler.description
      = self.spec.description\n\n    def log_thought(\n        self,\n        thought:
      Thought,\n        level: int,\n    ) -> None:\n        text = indent(f\"Thought
      ({thought.validity}): {thought.text}\", prefix=\"    \" * level)\n        logger.info(text)\n\n
      \   @register_program(\n        input_model=make_input_schema,\n        output_model=make_output_schema,\n
      \       description=make_description,\n    )\n    async def question(self, process_id,
      body) -> TotResponse:\n        \"\"\"\n        Answers a question using the
      tree of thoughts algorithm. This is computationally expensive, but will provide\n
      \       better results than standard llm calls for some problems. Specializes
      in questions which need to make initial\n        assumptions which may not be
      accurate. The tree of thoughts algorithm will explore many possible assumptions\n
      \       and solutions and trim branches when they are found to be invalid.\n
      \       \"\"\"\n\n        # override to run the tree of thoughts algorithm in
      a separate thread\n        thoughts_path: List[str] = []\n        level = 0\n
      \       question = Environment(undefined=StrictUndefined).from_string(self.spec.user_prompt).render(**body.model_dump())\n\n
      \       async def exec_request(\n            _boot_messages: List[LLMMessage],\n
      \           _messages: List[LLMMessage],\n            _output_format: Dict[str,
      Any],\n        ) -> Dict[str, Any]:\n            t2 = await self.cpu.new_thread(process_id)\n
      \           await t2.set_boot_messages(prompts=_boot_messages)\n            return
      await t2.run_request(_messages, _output_format)\n\n        for i in range(self.spec.num_iterations):\n
      \           thought_text = await self.thought_generator.next_thought(question,
      exec_request, thoughts_path)\n            thought_validity = await self.checker.evaluate(\n
      \               process_id,\n                problem_description=question,\n
      \               thoughts=thoughts_path + [thought_text],\n            )\n            thought
      = Thought(text=thought_text, validity=thought_validity.validity)\n            self.tot_memory.store(thought)\n
      \           self.log_thought(thought, level)\n            if thought.validity
      == \"VALID\":\n                mainThread = await self.cpu.main_thread(process_id)\n
      \               # go back to llm now with the tree of thoughts and the requested
      output format\n                conversation = [\n                    UserTextCPUMessage(prompt=question),\n
      \                   UserTextCPUMessage(prompt=\"THOUGHTS\\n\\n\" + (\"\\n\".join(thoughts_path
      + [thought_text]))),\n                ]\n                resp = await mainThread.run_request(conversation,
      self.spec.output_schema)\n                return TotResponse(answer=resp, thoughts=thoughts_path)\n
      \           thoughts_path = self.tot_controller.thoughts(self.tot_memory)\n\n
      \       synopsis = self.tot_controller.exploration_synopsis(self.tot_memory)\n
      \       if self.spec.fallback == \"ERROR\":\n            raise HTTPException(\n
      \               status_code=400,\n                detail=dict(\n                    error=f\"Could
      not find a valid thought within {self.spec.num_iterations} iterations.\",\n
      \                   remaining_thoughts=synopsis,\n                ),\n            )\n
      \       elif self.spec.fallback == \"LLM\":\n            conversation = [\n
      \               UserTextCPUMessage(prompt=question),\n                UserTextCPUMessage(\n
      \                   prompt=\"You have had some helpful thoughts on the question.
      Please use them to provide an answer\\n\\n\"\n                    + str(synopsis)\n
      \               ),\n            ]\n            thread = await self.cpu.new_thread(process_id)\n
      \           resp = await thread.run_request(conversation, self.spec.output_schema)\n
      \           return TotResponse(answer=resp, thoughts=thoughts_path)\n        else:\n
      \           raise ValueError(f\"Unknown fallback type: {self.spec.fallback}\")\n"
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Length:
      - '2373'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:29:22 GMT
      ETag:
      - W/"61d24242e1c5f727fb46cae9794b4061edc81689f53e722989994c413c092f61"
      Expires:
      - Tue, 20 Feb 2024 21:34:22 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - b2109c132d7ba79be25201ec016ae9b8933c9065
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - 4F64:25354E:B8C1B:10C648:65D519B2
      X-Served-By:
      - cache-bfi-krnt7300027-BFI
      X-Timer:
      - S1708464563.820155,VS0,VE157
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/agent/doc_manager/parsers/ms_word_parser.py
  response:
    content: "from typing import Iterable\n\nfrom eidolon_ai_sdk.agent.doc_manager.parsers.base_parser
      import DocumentParser, DataBlob\nfrom eidolon_ai_sdk.memory.document import
      Document\n\n\nclass MsWordParser(DocumentParser):\n    def parse(self, blob:
      DataBlob) -> Iterable[Document]:\n        try:\n            from unstructured.partition.doc
      import partition_doc\n            from unstructured.partition.docx import partition_docx\n
      \       except ImportError as e:\n            raise ImportError(\"Could not
      import unstructured, please install with `pip install \" \"unstructured`.\")
      from e\n\n        mime_type_parser = {\n            \"application/msword\":
      partition_doc,\n            \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\":
      partition_docx,\n        }\n        if blob.mimetype not in (\n            \"application/msword\",\n
      \           \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\",\n
      \       ):\n            raise ValueError(\"This blob type is not supported for
      this parser.\")\n        with blob.as_bytes() as word_document:\n            elements
      = mime_type_parser[blob.mimetype](file=word_document)\n            text = \"\\n\\n\".join([str(el)
      for el in elements])\n            metadata = {\"source\": blob.path, \"mime_type\":
      blob.mimetype}\n            yield Document(page_content=text, metadata=metadata)\n"
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Length:
      - '542'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:29:23 GMT
      ETag:
      - W/"8c48e44e83f9228a17f3aa51f95216d2d5f8b382dea9f97be5422192a2340028"
      Expires:
      - Tue, 20 Feb 2024 21:34:23 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - d09a98ca7fb334c21bc78c21cf2128da3bbb4da7
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - B570:253EB0:B71FC:10AC2D:65D519B1
      X-Served-By:
      - cache-bfi-krnt7300048-BFI
      X-Timer:
      - S1708464563.864637,VS0,VE155
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/doc_manager/parsers/code_ast_parsers?ref=main
  response:
    content: '[{"name":"__init__.py","path":"sdk/eidolon_ai_sdk/agent/doc_manager/parsers/code_ast_parsers/__init__.py","sha":"e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/doc_manager/parsers/code_ast_parsers/__init__.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/doc_manager/parsers/code_ast_parsers/__init__.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/agent/doc_manager/parsers/code_ast_parsers/__init__.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/doc_manager/parsers/code_ast_parsers/__init__.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/doc_manager/parsers/code_ast_parsers/__init__.py"}},{"name":"base_ast_generator.py","path":"sdk/eidolon_ai_sdk/agent/doc_manager/parsers/code_ast_parsers/base_ast_generator.py","sha":"0a1635679bdbe78e0b0084e18d276cbdf0358095","size":448,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/doc_manager/parsers/code_ast_parsers/base_ast_generator.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/doc_manager/parsers/code_ast_parsers/base_ast_generator.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/0a1635679bdbe78e0b0084e18d276cbdf0358095","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/agent/doc_manager/parsers/code_ast_parsers/base_ast_generator.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/doc_manager/parsers/code_ast_parsers/base_ast_generator.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/0a1635679bdbe78e0b0084e18d276cbdf0358095","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/doc_manager/parsers/code_ast_parsers/base_ast_generator.py"}},{"name":"cobol.py","path":"sdk/eidolon_ai_sdk/agent/doc_manager/parsers/code_ast_parsers/cobol.py","sha":"2000ccac2cb3d55566e709ff16cccb3eec140be0","size":3699,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/doc_manager/parsers/code_ast_parsers/cobol.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/doc_manager/parsers/code_ast_parsers/cobol.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/2000ccac2cb3d55566e709ff16cccb3eec140be0","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/agent/doc_manager/parsers/code_ast_parsers/cobol.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/doc_manager/parsers/code_ast_parsers/cobol.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/2000ccac2cb3d55566e709ff16cccb3eec140be0","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/doc_manager/parsers/code_ast_parsers/cobol.py"}},{"name":"javascript.py","path":"sdk/eidolon_ai_sdk/agent/doc_manager/parsers/code_ast_parsers/javascript.py","sha":"94a11072ce9de0d899855a3577b14c4479b91b2a","size":2053,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/doc_manager/parsers/code_ast_parsers/javascript.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/doc_manager/parsers/code_ast_parsers/javascript.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/94a11072ce9de0d899855a3577b14c4479b91b2a","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/agent/doc_manager/parsers/code_ast_parsers/javascript.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/doc_manager/parsers/code_ast_parsers/javascript.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/94a11072ce9de0d899855a3577b14c4479b91b2a","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/doc_manager/parsers/code_ast_parsers/javascript.py"}},{"name":"programing_language_parser.py","path":"sdk/eidolon_ai_sdk/agent/doc_manager/parsers/code_ast_parsers/programing_language_parser.py","sha":"82b200dc49b5d30802855a6a6379d8175354e652","size":3212,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/doc_manager/parsers/code_ast_parsers/programing_language_parser.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/doc_manager/parsers/code_ast_parsers/programing_language_parser.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/82b200dc49b5d30802855a6a6379d8175354e652","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/agent/doc_manager/parsers/code_ast_parsers/programing_language_parser.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/doc_manager/parsers/code_ast_parsers/programing_language_parser.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/82b200dc49b5d30802855a6a6379d8175354e652","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/doc_manager/parsers/code_ast_parsers/programing_language_parser.py"}},{"name":"python.py","path":"sdk/eidolon_ai_sdk/agent/doc_manager/parsers/code_ast_parsers/python.py","sha":"59633e32d7df961152bf61bc00b4c71a831b51ac","size":1647,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/doc_manager/parsers/code_ast_parsers/python.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/doc_manager/parsers/code_ast_parsers/python.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/59633e32d7df961152bf61bc00b4c71a831b51ac","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/agent/doc_manager/parsers/code_ast_parsers/python.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/doc_manager/parsers/code_ast_parsers/python.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/59633e32d7df961152bf61bc00b4c71a831b51ac","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/doc_manager/parsers/code_ast_parsers/python.py"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:29:23 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E55B:2542CD:142C65:1D9337:65D519B2
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4594'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '406'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/agent/doc_manager/transformer/__init__.py
  response:
    content: ''
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Length:
      - '0'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:29:23 GMT
      ETag:
      - W/"938f66ede415ccb10764da47cd5f3cfc076c07b8791c708cfa8ec54982197c1f"
      Expires:
      - Tue, 20 Feb 2024 21:34:23 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - b7130711af008f37d229e69492693a759e006c8f
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - 20BE:256179:B31CA:106BB6:65D519B2
      X-Served-By:
      - cache-bfi-kbfi7400108-BFI
      X-Timer:
      - S1708464563.969045,VS0,VE130
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/agent/doc_manager/parsers/pdf_parsers.py
  response:
    content: "import numpy as np\nimport pypdf\nfrom typing import Optional, Iterable,
      Union\n\nfrom eidolon_ai_sdk.agent.doc_manager.parsers.base_parser import DocumentParser,
      DocumentParserSpec, DataBlob\nfrom eidolon_ai_sdk.memory.document import Document\nfrom
      eidolon_ai_sdk.system.reference_model import Specable\n\n_PDF_FILTER_WITH_LOSS
      = [\"DCTDecode\", \"DCT\", \"JPXDecode\"]\n_PDF_FILTER_WITHOUT_LOSS = [\n    \"LZWDecode\",\n
      \   \"LZW\",\n    \"FlateDecode\",\n    \"Fl\",\n    \"ASCII85Decode\",\n    \"A85\",\n
      \   \"ASCIIHexDecode\",\n    \"AHx\",\n    \"RunLengthDecode\",\n    \"RL\",\n
      \   \"CCITTFaxDecode\",\n    \"CCF\",\n    \"JBIG2Decode\",\n]\n\n\ndef extract_from_images_with_rapidocr(\n
      \   images: Iterable[Union[Iterable[np.ndarray], bytes]],\n) -> str:\n    \"\"\"Extract
      text from images with RapidOCR.\n\n    Args:\n        images: Images to extract
      text from.\n\n    Returns:\n        Text extracted from images.\n\n    Raises:\n
      \       ImportError: If `rapidocr-onnxruntime` package is not installed.\n    \"\"\"\n
      \   try:\n        from rapidocr_onnxruntime import RapidOCR\n    except ImportError:\n
      \       raise ImportError(\n            \"`rapidocr-onnxruntime` package not
      found, please install it with \" \"`pip install rapidocr-onnxruntime`\"\n        )\n
      \   ocr = RapidOCR()\n    text = \"\"\n    for img in images:\n        result,
      _ = ocr(img)\n        if result:\n            result = [text[1] for text in
      result]\n            text += \"\\n\".join(result)\n    return text\n\n\nclass
      PyPDFParserSpec(DocumentParserSpec):\n    password: Optional[Union[str, bytes]]
      = None\n    extract_images: bool = False\n\n\nclass PyPDFParser(DocumentParser,
      Specable[PyPDFParserSpec]):\n    def __init__(self, spec: PyPDFParserSpec):\n
      \       super().__init__(spec)\n        self.password = spec.password\n        self.extract_images
      = spec.extract_images\n\n    def parse(self, blob: DataBlob) -> Iterable[Document]:\n
      \       with blob.as_bytes() as pdf_file_obj:\n            pdf_reader = pypdf.PdfReader(pdf_file_obj,
      password=self.password)\n            yield from [\n                Document(\n
      \                   page_content=page.extract_text() + self._extract_images_from_page(page),\n
      \                   metadata={\"source\": blob.path, \"page\": page_number,
      \"mime_type\": blob.mimetype},\n                )\n                for page_number,
      page in enumerate(pdf_reader.pages)\n            ]\n\n    # noinspection PyProtectedMember\n
      \   def _extract_images_from_page(self, page: pypdf._page.PageObject) -> str:\n
      \       \"\"\"Extract images from page and get the text with RapidOCR.\"\"\"\n
      \       # noinspection PyUnresolvedReferences\n        if not self.extract_images
      or \"/XObject\" not in page[\"/Resources\"].keys():\n            return \"\"\n\n
      \       xObject = page[\"/Resources\"][\"/XObject\"].get_object()  # type: ignore\n
      \       images = []\n        for obj in xObject:\n            if xObject[obj][\"/Subtype\"]
      == \"/Image\":\n                if xObject[obj][\"/Filter\"][1:] in _PDF_FILTER_WITHOUT_LOSS:\n
      \                   height, width = xObject[obj][\"/Height\"], xObject[obj][\"/Width\"]\n\n
      \                   images.append(np.frombuffer(xObject[obj].get_data(), dtype=np.uint8).reshape(height,
      width, -1))\n                elif xObject[obj][\"/Filter\"][1:] in _PDF_FILTER_WITH_LOSS:\n
      \                   images.append(xObject[obj].get_data())\n                else:\n
      \                   self.logger.warn(\"Unknown PDF Filter!\")\n        return
      extract_from_images_with_rapidocr(images)\n"
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Length:
      - '1297'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:29:23 GMT
      ETag:
      - W/"8479f01f29242e13c4fbef96bb0dbbc75e28ef16eb0ed3b2c79526617b110b27"
      Expires:
      - Tue, 20 Feb 2024 21:34:23 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - 43ce752fddfe3f205598468b5a4d87ea26df1f2b
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - 64FA:57EB:65A275:784A68:65D519B2
      X-Served-By:
      - cache-yvr1525-YVR
      X-Timer:
      - S1708464563.964828,VS0,VE137
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/agent/doc_manager/parsers/text_parsers.py
  response:
    content: "from typing import Iterable, Dict, Union, Sequence\n\nfrom bs4 import
      BeautifulSoup\n\nfrom eidolon_ai_sdk.system.reference_model import Specable\nfrom
      eidolon_ai_sdk.agent.doc_manager.parsers.base_parser import DocumentParser,
      DataBlob, DocumentParserSpec\nfrom eidolon_ai_sdk.memory.document import Document\n\n\nclass
      TextParser(DocumentParser):\n    def parse(self, blob: DataBlob) -> Sequence[Document]:\n
      \       yield Document(page_content=blob.as_string(), metadata={\"source\":
      blob.path, \"mime_type\": blob.mimetype})\n\n\nclass BS4HTMLParserSpec(DocumentParserSpec):\n
      \   features: str = \"lxml\"\n    text_separator: str = \"\"\n\n\nclass BS4HTMLParser(DocumentParser,
      Specable[BS4HTMLParserSpec]):\n    \"\"\"Pparse HTML files using `Beautiful
      Soup`.\"\"\"\n\n    def __init__(self, spec: BS4HTMLParserSpec):\n        super().__init__(spec)\n
      \       self.bs_kwargs = {\"features\": spec.features}\n        self.text_separator
      = spec.text_separator\n\n    def parse(self, blob: DataBlob) -> Iterable[Document]:\n
      \       with blob.as_bytes() as f:\n            soup = BeautifulSoup(f, **self.bs_kwargs)\n\n
      \       text = soup.get_text(self.text_separator)\n\n        if soup.title:\n
      \           title = str(soup.title.string)\n        else:\n            title
      = \"\"\n\n        metadata: Dict[str, Union[str, None]] = {\"source\": blob.path,
      \"title\": title, \"mime_type\": blob.mimetype}\n        yield Document(page_content=text,
      metadata=metadata)\n"
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Length:
      - '575'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:29:23 GMT
      ETag:
      - W/"2aa565bd34bd6913f43c6a03e3bacb45df648fb75e4e920ffa301c3dc4e40f17"
      Expires:
      - Tue, 20 Feb 2024 21:34:23 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - 3b8f227bef30b84a624936e28ed61744416a1702
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - CE7E:256713:C0CE6:1146D1:65D519B1
      X-Served-By:
      - cache-bfi-krnt7300086-BFI
      X-Timer:
      - S1708464563.969553,VS0,VE143
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/security/jwt_middleware.py
  response:
    content: "from abc import ABC, abstractmethod\nfrom fastapi import Request, Response,
      FastAPI\nfrom authlib.jose import jwt, JoseError\n\n# noinspection PyPackageRequirements\nfrom
      pydantic import BaseModel\nfrom starlette.responses import JSONResponse\nfrom
      typing import List, Optional, Any\n\nfrom eidolon_ai_sdk.security.security_manager
      import BaseTokenProcessor\nfrom eidolon_ai_sdk.system.reference_model import
      Specable\nfrom eidolon_ai_sdk.system.request_context import RequestContext\n\n\nclass
      BaseJWTMiddlewareSpec(BaseModel):\n    pass\n\n\nclass BaseJWTMiddleware(BaseTokenProcessor,
      ABC, Specable[BaseJWTMiddlewareSpec]):\n    def __init__(self, **kwargs):\n
      \       super().__init__(**kwargs)\n\n    async def start(self, app: FastAPI):\n
      \       pass\n\n    @abstractmethod\n    async def get_signing_keys(self):\n
      \       pass\n\n    @abstractmethod\n    async def get_audience_and_issuer(self)
      -> tuple[str, str]:\n        pass\n\n    @abstractmethod\n    def get_algorithms(self)
      -> List[str]:\n        pass\n\n    async def process_token(self, token: str)
      -> Optional[Any]:\n        jwks = await self.get_signing_keys()\n        return
      jwt.decode(token, jwks)\n\n    async def dispatch(self, request: Request) ->
      Optional[Response]:\n        auth_header = request.headers.get(\"Authorization\")\n
      \       if not auth_header:\n            return JSONResponse(status_code=401,
      content={\"detail\": \"Authorization header missing\"})\n\n        token = auth_header[7:]\n\n
      \       try:\n            userInfo = await self.process_token(token)\n            RequestContext.set(\"Authorization\",
      auth_header, propagate=True)\n            RequestContext.set(\"jwt\", userInfo)\n\n
      \       except JoseError as e:\n            print(e)\n            return JSONResponse(status_code=401,
      content={\"detail\": str(e)})\n"
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Length:
      - '702'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:29:23 GMT
      ETag:
      - W/"da2fa82469da3f4f93273889df5af4cdf4bf912f9b5be79ee05d26dbb1493934"
      Expires:
      - Tue, 20 Feb 2024 21:34:23 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - a32acf7c4f1ceb22e0ef858e52a617501b734a9d
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - BD70:4BE5:6AB95:84133:65D519B2
      X-Served-By:
      - cache-yvr1531-YVR
      X-Timer:
      - S1708464563.963998,VS0,VE141
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/security/google_authorizor.py
  response:
    content: "import httpx\nimport os\nfrom authlib.integrations.requests_client import
      OAuth2Session\nfrom pydantic import BaseModel, Field\nfrom typing import List,
      Optional, Any\n\nfrom eidolon_ai_sdk.security.jwt_middleware import BaseJWTMiddleware\nfrom
      eidolon_ai_sdk.system.reference_model import Specable\n\n\nclass GoogleJWTMiddlewareSpec(BaseModel):\n
      \   jwks_url: str = Field(\n        \"https://www.googleapis.com/oauth2/v3/certs\",\n
      \       description=\"The URL to fetch the JWKS from. Defaults to https://www.googleapis.com/oauth2/v3/certs\",\n
      \   )\n    audience: str = Field(\n        os.environ.get(\"GOOGLE_CLIENT_ID\"),\n
      \       description=\"Your google client ID. Defaults to the environment variable
      GOOGLE_CLIENT_ID\",\n    )\n    issuer: str = Field(\n        default=\"accounts.google.com\",
      description=\"The issuer of the JWT. Defaults to accounts.google.com\"\n    )\n\n\nclass
      GoogleJWTMiddleware(BaseJWTMiddleware, Specable[GoogleJWTMiddlewareSpec]):\n
      \   async def get_signing_keys(self):\n        async with httpx.AsyncClient()
      as client:\n            resp = await client.get(self.spec.jwks_url)\n            return
      resp.json()[\"keys\"]\n\n    async def get_audience_and_issuer(self):\n        return
      self.spec.audience, self.spec.issuer\n\n    def get_algorithms(self) -> List[str]:\n
      \       return [\"RS256\"]\n\n    async def process_token(self, token: str)
      -> Optional[Any]:\n        # need to call into google to exchange the token
      for a user info\n        authlib_session = OAuth2Session(self.spec.audience,
      token={\"access_token\": token, \"token_type\": \"Bearer\"})\n        response
      = authlib_session.get(\"https://openidconnect.googleapis.com/v1/userinfo\")\n
      \       if response.status_code == 200:\n            return response.json()\n
      \       else:\n            raise Exception(f\"Error fetching user info: {response.status_code}
      {response.text}\")\n"
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Length:
      - '795'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:29:23 GMT
      ETag:
      - W/"500989ee5e7df359d6e78048979f5cf0f904fad7dfc49b9f37c2d876c13aec8d"
      Expires:
      - Tue, 20 Feb 2024 21:34:23 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - fdd837285d7b0c5e77cd81445d1243625e437c80
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - 7504:66FB:5B3971:6DA7BE:65D519B2
      X-Served-By:
      - cache-yvr1533-YVR
      X-Timer:
      - S1708464563.964597,VS0,VE145
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/security/okta_authorizor.py
  response:
    content: "import httpx\n\nfrom eidolon_ai_sdk.security.jwt_middleware import BaseJWTMiddleware\n\n\nclass
      OKTAAuth(BaseJWTMiddleware):\n    OKTA_DOMAIN = \"your_okta_domain\"\n    JWKS_URL
      = f\"https://{OKTA_DOMAIN}/oauth2/default/v1/keys\"\n    AUDIENCE = \"your_api_audience\"\n
      \   ISSUER = f\"https://{OKTA_DOMAIN}/oauth2/default\"\n\n    async def get_signing_keys(self):\n
      \       async with httpx.AsyncClient() as client:\n            resp = await
      client.get(self.JWKS_URL)\n            return resp.json()[\"keys\"]\n"
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Length:
      - '305'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:29:23 GMT
      ETag:
      - W/"4107f8ced90d4a50a64e6392f168bd26a4f3ea17998c016e4cb58d91e7ddac8d"
      Expires:
      - Tue, 20 Feb 2024 21:34:23 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - f509f73dbf7a9b5189687c9020e5b5a11695a4f0
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - 805A:256179:B31CA:106BB7:65D519B2
      X-Served-By:
      - cache-bfi-krnt7300058-BFI
      X-Timer:
      - S1708464563.975807,VS0,VE146
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/agent/doc_manager/transformer/test_RecursiveCharacterTextSplitter.py
  response:
    content: "import pytest\n\nfrom eidolon_ai_sdk.agent.doc_manager.parsers.base_parser
      import DocumentParserSpec, DataBlob\nfrom eidolon_ai_sdk.agent.doc_manager.parsers.text_parsers
      import TextParser\nfrom eidolon_ai_sdk.agent.doc_manager.transformer.text_splitters
      import (\n    RecursiveCharacterTextSplitter,\n    RecursiveCharacterTextSplitterSpec,\n)\n\n\nclass
      TestRecursiveCharacterTextSplitter:\n    @pytest.fixture()\n    def small_data(self):\n
      \       data = \"1234567890\"\n        return TextParser(DocumentParserSpec()).parse(DataBlob(path=\"path/file.txt\",
      mimetype=\"text/plain\", data=data))\n\n    @pytest.fixture()\n    def large_data(self):\n
      \       data = ((\"1234567890 \" * 10) + \"\\n\") * 100\n        return TextParser(DocumentParserSpec()).parse(DataBlob(path=\"path/file.txt\",
      mimetype=\"text/plain\", data=data))\n\n    @pytest.fixture()\n    def splitter(self):\n
      \       return RecursiveCharacterTextSplitter(RecursiveCharacterTextSplitterSpec(chunk_size=220))\n\n
      \   def test_transform_documents_small_text(self, small_data, splitter):\n        split_docs
      = list(splitter.transform_documents(small_data))\n        assert len(split_docs)
      == 1\n        doc = split_docs[0]\n        assert doc.page_content == \"1234567890\"\n
      \       assert doc.metadata[\"source\"] == \"path/file.txt\"\n        assert
      doc.metadata[\"mime_type\"] == \"text/plain\"\n\n    def test_transform_documents_large_text(self,
      large_data, splitter):\n        split_docs = list(splitter.transform_documents(large_data))\n
      \       assert len(split_docs) == 100\n        doc = split_docs[0]\n        assert
      (\n            doc.page_content\n            == \"1234567890 1234567890 1234567890
      1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890\"\n
      \       )\n        assert doc.metadata[\"source\"] == \"path/file.txt\"\n        assert
      doc.metadata[\"mime_type\"] == \"text/plain\"\n"
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Length:
      - '517'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:29:23 GMT
      ETag:
      - W/"73f434dee77b805c858b3fa16bbec0e01e89072800428d3aba999b717c11ce5d"
      Expires:
      - Tue, 20 Feb 2024 21:34:23 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - b842b2e10e50ac577afe09e40d22e1eb5e12d63f
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - EC8C:256A3D:ADDD0:1017C6:65D519B2
      X-Served-By:
      - cache-bfi-krnt7300023-BFI
      X-Timer:
      - S1708464563.969144,VS0,VE156
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/agent/doc_manager/transformer/__init__.py
  response:
    content: ''
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Length:
      - '0'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:29:23 GMT
      ETag:
      - W/"938f66ede415ccb10764da47cd5f3cfc076c07b8791c708cfa8ec54982197c1f"
      Expires:
      - Tue, 20 Feb 2024 21:34:23 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - d3344517fc074f79d38de86cc5ab6474cabf45b6
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - 4414:283009:73010:AAF20:65D519B1
      X-Served-By:
      - cache-bfi-kbfi7400020-BFI
      X-Timer:
      - S1708464563.996040,VS0,VE133
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/security/security_manager.py
  response:
    content: "from typing import Optional\n\nfrom abc import ABC, abstractmethod\nfrom
      fastapi import Request, Response, FastAPI\nfrom pydantic import BaseModel\nfrom
      starlette.middleware.base import BaseHTTPMiddleware\n\nfrom eidolon_ai_sdk.system.reference_model
      import Specable, AnnotatedReference\n\n\nclass BaseTokenProcessor(ABC):\n    @abstractmethod\n
      \   async def dispatch(self, request: Request) -> Optional[Response]:\n        pass\n\n\nclass
      NoopAuthProcessor(BaseTokenProcessor):\n    def add_login_route(self, app: FastAPI):\n
      \       pass\n\n    async def dispatch(self, request: Request):\n        return
      None\n\n\nclass SecurityManagerSpec(BaseModel):\n    authorization_processor:
      AnnotatedReference[BaseTokenProcessor, NoopAuthProcessor]\n\n\nclass SecurityManager(Specable[SecurityManagerSpec]):\n
      \   authorization_processor: BaseHTTPMiddleware\n\n    def __init__(self, **kwargs):\n
      \       super().__init__(**kwargs)\n        self.authorization_processor = self.spec.authorization_processor.instantiate()\n"
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Length:
      - '428'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:29:23 GMT
      ETag:
      - W/"ab8f2df967ced53322ed78c15fcdd862bff2efb0acd220549b46edaa98812b8f"
      Expires:
      - Tue, 20 Feb 2024 21:34:23 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - 9d0e78f0b1b98da3f47fd558e3bd90bd9cd5a533
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - 18D8:25522C:AA702:FE126:65D519B2
      X-Served-By:
      - cache-bfi-krnt7300028-BFI
      X-Timer:
      - S1708464563.010169,VS0,VE133
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/agent/doc_manager/transformer/auto_transformer.py
  response:
    content: "import json\nfrom typing import Any, Iterable\n\nfrom eidolon_ai_sdk.agent.doc_manager.transformer.document_transformer
      import DocumentTransformer\nfrom eidolon_ai_sdk.agent.doc_manager.transformer.text_splitters
      import (\n    Language,\n    RecursiveCharacterTextSplitter,\n    RecursiveCharacterTextSplitterSpec,\n)\nfrom
      eidolon_ai_sdk.memory.document import Document\n\n\ndef is_json_nl(text: str)
      -> bool:\n    endOfLine = text.find(\"\\n\")\n    if endOfLine == -1:\n        return
      False\n    elif endOfLine == 0 or endOfLine > 7000:\n        return False\n
      \   else:\n        try:\n            json.loads(text[:endOfLine])\n            return
      True\n        except json.JSONDecodeError:\n            return False\n\n\nclass
      AutoTransformer(DocumentTransformer):\n    def transform_documents(self, documents:
      Iterable[Document], **kwargs: Any) -> Iterable[Document]:\n        for document
      in documents:\n            progLang = Language.from_mimetype(document.metadata[\"mime_type\"])\n
      \           # if progLang is none then we will use the defaults\n            if
      progLang is None:\n                spec = RecursiveCharacterTextSplitterSpec()\n
      \           else:\n                spec = RecursiveCharacterTextSplitterSpec(\n
      \                   separators=RecursiveCharacterTextSplitter.get_separators_for_language(progLang)\n
      \               )\n            yield from RecursiveCharacterTextSplitter(spec).transform_documents([document])\n"
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Length:
      - '538'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:29:23 GMT
      ETag:
      - W/"f4ec5748eb00c09bc59c3579b4e00ed1b4492d16a45afc00c8cee0e11942b173"
      Expires:
      - Tue, 20 Feb 2024 21:34:23 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - 26875156ff0769bfc91b9bdbee8197e534412eb3
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - A43E:255713:BA761:10E182:65D519B2
      X-Served-By:
      - cache-bfi-krnt7300027-BFI
      X-Timer:
      - S1708464563.025580,VS0,VE149
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/system/__init__.py
  response:
    content: ''
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Length:
      - '0'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:29:23 GMT
      ETag:
      - W/"938f66ede415ccb10764da47cd5f3cfc076c07b8791c708cfa8ec54982197c1f"
      Expires:
      - Tue, 20 Feb 2024 21:34:23 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - b62a44906e11ec76ee8b4d1a395bf8b746ed999a
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - 8BFE:2590F7:BBC3F:10F632:65D519B0
      X-Served-By:
      - cache-bfi-kbfi7400044-BFI
      X-Timer:
      - S1708464563.039573,VS0,VE144
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/system/agent_contract.py
  response:
    content: "from __future__ import annotations\n\nimport typing\n\nfrom pydantic
      import Field, BaseModel\n\n\nclass CreateProcessArgs(BaseModel):\n    title:
      typing.Optional[str] = Field(None, description=\"The title of the process\")\n\n\nclass
      DeleteProcessResponse(BaseModel):\n    process_id: str\n    deleted: int\n\n\nclass
      StateSummary(BaseModel):\n    process_id: str = Field(..., description=\"The
      ID of the conversation.\")\n    state: str = Field(..., description=\"The state
      of the conversation.\")\n    available_actions: typing.List[str] = Field(...,
      description=\"The actions available from the current state.\")\n\n\nclass SyncStateResponse(StateSummary):\n
      \   data: typing.Any = Field(..., description=\"The data returned by the last
      state change.\")\n\n\nclass ListProcessesResponse(BaseModel):\n    total: int
      = Field(..., description=\"The total number of processes.\")\n    processes:
      typing.List[StateSummary] = Field(..., description=\"The list of processes.\")\n
      \   next: typing.Optional[str] = Field(..., description=\"The next page of results,
      if any.\")\n"
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Length:
      - '394'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:29:23 GMT
      ETag:
      - W/"a2cbb2d8d7ecee1d335fde577d3d794d26e68aac9136f742527840251a6d500d"
      Expires:
      - Tue, 20 Feb 2024 21:34:23 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - 5ca63c2e21172a2795209d94919f7526e99fc8c6
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - C66C:30F250:17E86:21802:65D519B2
      X-Served-By:
      - cache-bfi-krnt7300051-BFI
      X-Timer:
      - S1708464563.071035,VS0,VE118
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/agent/doc_manager/transformer/document_transformer.py
  response:
    content: "from __future__ import annotations\n\nimport copy\nimport logging\nfrom
      abc import ABC, abstractmethod\nfrom typing import Any, List, Callable, Optional,
      Iterable\nfrom uuid import uuid4\n\nfrom pydantic import BaseModel, Field, field_validator\nfrom
      pydantic_core.core_schema import ValidationInfo\n\nfrom eidolon_ai_sdk.system.reference_model
      import Specable\nfrom eidolon_ai_sdk.memory.document import Document\n\nlogger
      = logging.getLogger(\"eidolon\")\n\n\nclass DocumentTransformer(ABC):\n    @abstractmethod\n
      \   def transform_documents(self, documents: Iterable[Document], **kwargs: Any)
      -> Iterable[Document]:\n        \"\"\"Transform a list of documents.\n\n        Args:\n
      \           documents: A sequence of Documents to be transformed.\n\n        Returns:\n
      \           A list of transformed Documents.\n        \"\"\"\n\n\nclass TextSplitterSpec(BaseModel):\n
      \   chunk_size: int = Field(default=4000, description=\"Maximum size of chunks
      to return\")\n    chunk_overlap: int = Field(default=200, description=\"Overlap
      in characters between chunks\")\n    keep_separator: bool = Field(default=False,
      description=\"Whether to keep the separator in the chunks\")\n    strip_whitespace:
      bool = Field(\n        default=True,\n        description=\"If `True`, strips
      whitespace from the start and end of every document\",\n    )\n\n    # noinspection
      PyMethodParameters\n    @field_validator(\"chunk_overlap\")\n    def validate_chunk_overlap(cls,
      chunk_overlap: int, info: ValidationInfo) -> None:\n        if chunk_overlap
      > info.data[\"chunk_size\"]:\n            raise ValueError(\n                f\"Got
      a larger chunk overlap ({chunk_overlap}) than chunk size \"\n                f\"({info.data['chunk_size']}),
      should be smaller.\"\n            )\n\n\nclass TextSplitter(DocumentTransformer,
      ABC, Specable[TextSplitterSpec]):\n    length_function: Callable[[str], int]
      = len\n\n    def __init__(self, spec: TextSplitterSpec) -> None:\n        super().__init__(spec)\n
      \       self._chunk_size = spec.chunk_size\n        self._chunk_overlap = spec.chunk_overlap\n
      \       self._keep_separator = spec.keep_separator\n        self._strip_whitespace
      = spec.strip_whitespace\n\n    @abstractmethod\n    def split_text(self, text:
      str) -> List[str]:\n        \"\"\"Split text into multiple components.\"\"\"\n\n
      \   def transform_documents(self, documents: Iterable[Document], **kwargs: Any)
      -> Iterable[Document]:\n        \"\"\"Transform sequence of documents by splitting
      them.\"\"\"\n        for doc in documents:\n            index = -1\n            for
      chunk in self.split_text(doc.page_content):\n                metadata = copy.deepcopy(doc.metadata)\n
      \               index = doc.page_content.find(chunk, index + 1)\n                metadata[\"start_index\"]
      = index\n                yield Document(id=uuid4().hex, page_content=chunk,
      metadata=metadata)\n\n    def _join_docs(self, docs: List[str], separator: str)
      -> Optional[str]:\n        text = separator.join(docs)\n        if self._strip_whitespace:\n
      \           text = text.strip()\n        if text == \"\":\n            return
      None\n        else:\n            return text\n\n    def _merge_splits(\n        self,\n
      \       splits: Iterable[str],\n        separator: str,\n        length_function:
      Callable[[str], int],\n    ) -> List[str]:\n        # We now want to combine
      these smaller pieces into medium size\n        # chunks to send to the LLM.\n
      \       separator_len = length_function(separator)\n\n        docs = []\n        current_doc:
      List[str] = []\n        total = 0\n        for d in splits:\n            _len
      = length_function(d)\n            if total + _len + (separator_len if len(current_doc)
      > 0 else 0) > self._chunk_size:\n                if total > self._chunk_size:\n
      \                   logger.warning(\n                        f\"Created a chunk
      of size {total}, \" f\"which is longer than the specified {self._chunk_size}\"\n
      \                   )\n                if len(current_doc) > 0:\n                    doc
      = self._join_docs(current_doc, separator)\n                    if doc is not
      None:\n                        docs.append(doc)\n                    # Keep
      on popping if:\n                    # - we have a larger chunk than in the chunk
      overlap\n                    # - or if we still have any chunks and the length
      is long\n                    while total > self._chunk_overlap or (\n                        total
      + _len + (separator_len if len(current_doc) > 0 else 0) > self._chunk_size and
      total > 0\n                    ):\n                        total -= length_function(current_doc[0])
      + (separator_len if len(current_doc) > 1 else 0)\n                        current_doc
      = current_doc[1:]\n            current_doc.append(d)\n            total += _len
      + (separator_len if len(current_doc) > 1 else 0)\n        doc = self._join_docs(current_doc,
      separator)\n        if doc is not None:\n            docs.append(doc)\n        return
      docs\n"
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Length:
      - '1564'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:29:23 GMT
      ETag:
      - W/"bb6147f95b9863d10a0126b760f814f6cb0dcbd875aee58821815e9bba8ca4bd"
      Expires:
      - Tue, 20 Feb 2024 21:34:23 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - 6477fd17e1bbdb04458fb847eb30a4553b0d825e
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - 134A:257E5B:B7770:10B16E:65D519B1
      X-Served-By:
      - cache-bfi-krnt7300048-BFI
      X-Timer:
      - S1708464563.056687,VS0,VE187
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/system/agent_machine.py
  response:
    content: "from contextlib import contextmanager\nfrom fastapi import FastAPI\nfrom
      pydantic import BaseModel, Field\nfrom typing import List, Optional\n\nfrom
      eidolon_ai_sdk.memory.agent_memory import AgentMemory\nfrom .agent_controller
      import AgentController\nfrom .reference_model import AnnotatedReference, Specable\nfrom
      .resources.agent_resource import AgentResource\nfrom .resources.resources_base
      import Resource\nfrom ..agent_os import AgentOS\nfrom ..memory.file_memory import
      FileMemory\nfrom ..memory.semantic_memory import SymbolicMemory\nfrom ..memory.similarity_memory
      import SimilarityMemory\nfrom ..security.security_manager import SecurityManager\n\n\nclass
      MachineSpec(BaseModel):\n    symbolic_memory: AnnotatedReference[SymbolicMemory]
      = Field(description=\"The Symbolic Memory implementation.\")\n    file_memory:
      AnnotatedReference[FileMemory] = Field(desciption=\"The File Memory implementation.\")\n
      \   similarity_memory: AnnotatedReference[SimilarityMemory] = Field(description=\"The
      Vector Memory implementation.\")\n    security_manager: AnnotatedReference[SecurityManager]
      = Field(description=\"The Security Manager implementation.\")\n\n    def get_agent_memory(self):\n
      \       file_memory = self.file_memory.instantiate()\n        symbolic_memory
      = self.symbolic_memory.instantiate()\n        vector_memory = self.similarity_memory.instantiate()\n
      \       return AgentMemory(\n            file_memory=file_memory,\n            symbolic_memory=symbolic_memory,\n
      \           similarity_memory=vector_memory,\n        )\n\n\nclass AgentMachine(Specable[MachineSpec]):\n
      \   memory: AgentMemory\n    security_manager: SecurityManager\n    agent_controllers:
      List[AgentController]\n    app: Optional[FastAPI]\n\n    def __init__(self,
      spec: MachineSpec):\n        super().__init__(spec)\n        agents = {}\n        for
      name, r in AgentOS.get_resources(AgentResource).items():\n            with _error_wrapper(r):\n
      \               agents[name] = r.spec.instantiate()\n\n        self.memory =
      self.spec.get_agent_memory()\n        self.agent_controllers = [AgentController(name,
      agent) for name, agent in agents.items()]\n        self.app = None\n        self.security_manager
      = self.spec.security_manager.instantiate()\n\n    async def start(self, app):\n
      \       if self.app:\n            raise Exception(\"Machine already started\")\n
      \       for program in self.agent_controllers:\n            await program.start(app)\n
      \       await self.memory.start()\n        self.app = app\n\n    async def stop(self):\n
      \       if self.app:\n            for program in self.agent_controllers:\n                await
      program.stop(self.app)\n            await self.memory.stop()\n            self.app
      = None\n\n\n@contextmanager\ndef error_logger(filename: str = None):\n    try:\n
      \       yield\n    except Exception as e:\n        raise ValueError(f\"Error
      building resource {filename}\") from e\n\n\ndef _error_wrapper(resource: Resource):\n
      \   return error_logger(AgentOS.get_resource_source(resource.kind, resource.metadata.name))\n"
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Length:
      - '906'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:29:23 GMT
      ETag:
      - W/"bbddddb814a32348444da5870979d88e64767dd3266e715a5cbf23ea75eed9c5"
      Expires:
      - Tue, 20 Feb 2024 21:34:23 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - d85969a28b886d0aafecef34a962637bdb44ee31
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - F74A:256713:C0CE8:1146D4:65D519B2
      X-Served-By:
      - cache-bfi-krnt7300071-BFI
      X-Timer:
      - S1708464563.121012,VS0,VE128
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/agent/doc_manager/transformer/text_splitters.py
  response:
    content: "from __future__ import annotations\n\nimport pathlib\nimport re\nfrom
      dataclasses import dataclass\nfrom enum import Enum\nfrom io import BytesIO,
      StringIO\nfrom typing import (\n    Any,\n    Callable,\n    Dict,\n    List,\n
      \   Literal,\n    Optional,\n    Tuple,\n    TypedDict,\n    TypeVar,\n    Union,\n
      \   cast,\n    Iterable,\n)\n\nimport requests\nfrom pydantic import Field\n\nfrom
      eidolon_ai_sdk.agent.doc_manager.transformer.document_transformer import TextSplitterSpec,
      TextSplitter\nfrom eidolon_ai_sdk.system.reference_model import Specable\nfrom
      eidolon_ai_sdk.memory.document import Document\n\nTS = TypeVar(\"TS\", bound=\"TextSplitter\")\n\n\ndef
      _make_spacy_pipeline_for_splitting(pipeline: str, *, max_length: int = 1_000_000)
      -> Any:  # avoid importing spacy\n    try:\n        import spacy\n    except
      ImportError:\n        raise ImportError(\"Spacy is not installed, please install
      it with `pip install spacy`.\")\n    if pipeline == \"sentencizer\":\n        from
      spacy.lang.en import English\n\n        sentencizer = English()\n        sentencizer.add_pipe(\"sentencizer\")\n
      \   else:\n        sentencizer = spacy.load(pipeline, exclude=[\"ner\", \"tagger\"])\n
      \       sentencizer.max_length = max_length\n    return sentencizer\n\n\ndef
      _split_text_with_regex(text: str, separator: str, keep_separator: bool) -> List[str]:\n
      \   # Now that we have the separator, split the text\n    if separator:\n        if
      keep_separator:\n            # The parentheses in the pattern keep the delimiters
      in the result.\n            _splits = re.split(f\"({separator})\", text)\n            splits
      = [_splits[i] + _splits[i + 1] for i in range(1, len(_splits), 2)]\n            if
      len(_splits) % 2 == 0:\n                splits += _splits[-1:]\n            splits
      = [_splits[0]] + splits\n        else:\n            splits = re.split(separator,
      text)\n    else:\n        splits = list(text)\n    return [s for s in splits
      if s != \"\"]\n\n\nclass CharacterTextSplitterSpec(TextSplitterSpec):\n    separator:
      str = Field(default=\"\\n\\n\", description=\"Separator to split on\")\n    is_separator_regex:
      bool = Field(default=False, description=\"Whether the separator is a regex\")\n\n\nclass
      CharacterTextSplitter(TextSplitter, Specable[CharacterTextSplitterSpec]):\n
      \   \"\"\"Splitting text that looks at characters.\"\"\"\n\n    def __init__(self,
      spec: CharacterTextSplitterSpec, **kwargs: Any) -> None:\n        \"\"\"Create
      a new TextSplitter.\"\"\"\n        super().__init__(**kwargs)\n        self._separator
      = spec.separator\n        self._is_separator_regex = spec.is_separator_regex\n\n
      \   def split_text(self, text: str) -> Iterable[str]:\n        \"\"\"Split incoming
      text and return chunks.\"\"\"\n        # First we naively split the large input
      into a bunch of smaller ones.\n        separator = self._separator if self._is_separator_regex
      else re.escape(self._separator)\n        splits = _split_text_with_regex(text,
      separator, self._keep_separator)\n        _separator = \"\" if self._keep_separator
      else self._separator\n        return self._merge_splits(splits, _separator,
      len)\n\n\nclass LineType(TypedDict):\n    \"\"\"Line type as typed dict.\"\"\"\n\n
      \   metadata: Dict[str, str]\n    content: str\n\n\nclass HeaderType(TypedDict):\n
      \   \"\"\"Header type as typed dict.\"\"\"\n\n    level: int\n    name: str\n
      \   data: str\n\n\ndef aggregate_lines_to_chunks(lines: List[LineType]) -> List[Document]:\n
      \   \"\"\"Combine lines with common metadata into chunks\n    Args:\n        lines:
      Line of text / associated header metadata\n    \"\"\"\n    aggregated_chunks:
      List[LineType] = []\n\n    for line in lines:\n        if aggregated_chunks
      and aggregated_chunks[-1][\"metadata\"] == line[\"metadata\"]:\n            #
      If the last line in the aggregated list\n            # has the same metadata
      as the current line,\n            # append the current content to the last lines's
      content\n            aggregated_chunks[-1][\"content\"] += \"  \\n\" + line[\"content\"]\n
      \       else:\n            # Otherwise, append the current line to the aggregated
      list\n            aggregated_chunks.append(line)\n\n    return [Document(page_content=chunk[\"content\"],
      metadata=chunk[\"metadata\"]) for chunk in aggregated_chunks]\n\n\nclass MarkdownHeaderTextSplitterSpec(TextSplitterSpec):\n
      \   headers_to_split_on: List[Tuple[str, str]] = Field(\n        description=\"Headers
      we want to track, e.g., #, ##, etc.\",\n    )\n    return_each_line: bool =
      Field(\n        default=False,\n        description=\"Return each line w/ associated
      headers\",\n    )\n\n\nclass MarkdownHeaderTextSplitter(TextSplitter, Specable[MarkdownHeaderTextSplitterSpec]):\n
      \   \"\"\"Splitting markdown files based on specified headers.\"\"\"\n\n    def
      __init__(self, spec: MarkdownHeaderTextSplitterSpec, **kwargs: Any):\n        \"\"\"Create
      a new MarkdownHeaderTextSplitter.\n\n        Args:\n            headers_to_split_on:
      Headers we want to track\n            return_each_line: Return each line w/
      associated headers\n        \"\"\"\n        super().__init__(**kwargs)\n        #
      Output line-by-line or aggregated into chunks w/ common headers\n        self.return_each_line
      = spec.return_each_line\n        # Given the headers we want to split on,\n
      \       # (e.g., \"#, ##, etc\") order by length\n        self.headers_to_split_on
      = sorted(spec.headers_to_split_on, key=lambda split: len(split[0]), reverse=True)\n\n
      \   def split_text(self, text: str) -> List[Document]:\n        \"\"\"Split
      markdown file\n        Args:\n            text: Markdown file\"\"\"\n\n        #
      Split the input text by newline character (\"\\n\").\n        lines = text.split(\"\\n\")\n
      \       # Final output\n        lines_with_metadata: List[LineType] = []\n        #
      Content and metadata of the chunk currently being processed\n        current_content:
      List[str] = []\n        current_metadata: Dict[str, str] = {}\n        # Keep
      track of the nested header structure\n        # header_stack: List[Dict[str,
      Union[int, str]]] = []\n        header_stack: List[HeaderType] = []\n        initial_metadata:
      Dict[str, str] = {}\n\n        in_code_block = False\n        opening_fence
      = \"\"\n\n        for line in lines:\n            stripped_line = line.strip()\n\n
      \           if not in_code_block:\n                # Exclude inline code spans\n
      \               if stripped_line.startswith(\"```\") and stripped_line.count(\"```\")
      == 1:\n                    in_code_block = True\n                    opening_fence
      = \"```\"\n                elif stripped_line.startswith(\"~~~\"):\n                    in_code_block
      = True\n                    opening_fence = \"~~~\"\n            else:\n                if
      stripped_line.startswith(opening_fence):\n                    in_code_block
      = False\n                    opening_fence = \"\"\n\n            if in_code_block:\n
      \               current_content.append(stripped_line)\n                continue\n\n
      \           # Check each line against each of the header types (e.g., #, ##)\n
      \           for sep, name in self.headers_to_split_on:\n                # Check
      if line starts with a header that we intend to split on\n                if
      stripped_line.startswith(sep) and (\n                    # Header with no text
      OR header is followed by space\n                    # Both are valid conditions
      that sep is being used a header\n                    len(stripped_line) == len(sep)
      or stripped_line[len(sep)] == \" \"\n                ):\n                    #
      Ensure we are tracking the header as metadata\n                    if name is
      not None:\n                        # Get the current header level\n                        current_header_level
      = sep.count(\"#\")\n\n                        # Pop out headers of lower or
      same level from the stack\n                        while header_stack and header_stack[-1][\"level\"]
      >= current_header_level:\n                            # We have encountered
      a new header\n                            # at the same or higher level\n                            popped_header
      = header_stack.pop()\n                            # Clear the metadata for the\n
      \                           # popped header in initial_metadata\n                            if
      popped_header[\"name\"] in initial_metadata:\n                                initial_metadata.pop(popped_header[\"name\"])\n\n
      \                       # Push the current header to the stack\n                        header:
      HeaderType = {\n                            \"level\": current_header_level,\n
      \                           \"name\": name,\n                            \"data\":
      stripped_line[len(sep) :].strip(),\n                        }\n                        header_stack.append(header)\n
      \                       # Update initial_metadata with the current header\n
      \                       initial_metadata[name] = header[\"data\"]\n\n                    #
      Add the previous line to the lines_with_metadata\n                    # only
      if current_content is not empty\n                    if current_content:\n                        lines_with_metadata.append(\n
      \                           {\n                                \"content\":
      \"\\n\".join(current_content),\n                                \"metadata\":
      current_metadata.copy(),\n                            }\n                        )\n
      \                       current_content.clear()\n\n                    break\n
      \           else:\n                if stripped_line:\n                    current_content.append(stripped_line)\n
      \               elif current_content:\n                    lines_with_metadata.append(\n
      \                       {\n                            \"content\": \"\\n\".join(current_content),\n
      \                           \"metadata\": current_metadata.copy(),\n                        }\n
      \                   )\n                    current_content.clear()\n\n            current_metadata
      = initial_metadata.copy()\n\n        if current_content:\n            lines_with_metadata.append({\"content\":
      \"\\n\".join(current_content), \"metadata\": current_metadata})\n\n        #
      lines_with_metadata has each line with associated header metadata\n        #
      aggregate these into chunks based on common metadata\n        if not self.return_each_line:\n
      \           return aggregate_lines_to_chunks(lines_with_metadata)\n        else:\n
      \           return [Document(page_content=chunk[\"content\"], metadata=chunk[\"metadata\"])
      for chunk in lines_with_metadata]\n\n\nclass ElementType(TypedDict):\n    \"\"\"Element
      type as typed dict.\"\"\"\n\n    url: str\n    xpath: str\n    content: str\n
      \   metadata: Dict[str, str]\n\n\nclass HTMLHeaderTextSplitterSpec(TextSplitterSpec):\n
      \   headers_to_split_on: List[Tuple[str, str]] = Field(\n        description=\"Headers
      we want to track, e.g., h1, h2, etc.\",\n    )\n    return_each_element: bool
      = Field(\n        default=False,\n        description=\"Return each element
      w/ associated headers\",\n    )\n\n\nclass HTMLHeaderTextSplitter(TextSplitter,
      Specable[HTMLHeaderTextSplitterSpec]):\n    \"\"\"\n    Splitting HTML files
      based on specified headers.\n    Requires lxml package.\n    \"\"\"\n\n    def
      __init__(self, spec: HTMLHeaderTextSplitterSpec, **kwargs: Any):\n        \"\"\"Create
      a new HTMLHeaderTextSplitter.\n\n        Args:\n            headers_to_split_on:
      list of tuples of headers we want to track mapped to\n                (arbitrary)
      keys for metadata. Allowed header values: h1, h2, h3, h4,\n                h5,
      h6 e.g. [(\"h1\", \"Header 1\"), (\"h2\", \"Header 2)].\n            return_each_element:
      Return each element w/ associated headers.\n        \"\"\"\n        # Output
      element-by-element or aggregated into chunks w/ common headers\n        super().__init__(**kwargs)\n
      \       self.return_each_element = spec.return_each_element\n        self.headers_to_split_on
      = sorted(spec.headers_to_split_on)\n\n    def split_text_from_url(self, url:
      str) -> List[Document]:\n        \"\"\"Split HTML from web URL\n\n        Args:\n
      \           url: web URL\n        \"\"\"\n        r = requests.get(url)\n        return
      self.split_text_from_file(BytesIO(r.content))\n\n    def split_text(self, text:
      str) -> List[Document]:\n        \"\"\"Split HTML text string\n\n        Args:\n
      \           text: HTML text\n        \"\"\"\n        return self.split_text_from_file(StringIO(text))\n\n
      \   def split_text_from_file(self, file: Any) -> List[Document]:\n        \"\"\"Split
      HTML file\n\n        Args:\n            file: HTML file\n        \"\"\"\n        try:\n
      \           from lxml import etree\n        except ImportError as e:\n            raise
      ImportError(\"Unable to import lxml, please install with `pip install lxml`.\")
      from e\n        # use lxml library to parse html document and return xml ElementTree\n
      \       parser = etree.HTMLParser()\n        tree = etree.parse(file, parser)\n\n
      \       # document transformation for \"structure-aware\" chunking is handled
      with xsl.\n        # see comments in html_chunks_with_headers.xslt for more
      detailed information.\n        xslt_path = pathlib.Path(__file__).parent / \"document_transformers/xsl/html_chunks_with_headers.xslt\"\n
      \       xslt_tree = etree.parse(xslt_path)\n        transform = etree.XSLT(xslt_tree)\n
      \       result = transform(tree)\n        result_dom = etree.fromstring(str(result))\n\n
      \       # create filter and mapping for header metadata\n        header_filter
      = [header[0] for header in self.headers_to_split_on]\n        header_mapping
      = dict(self.headers_to_split_on)\n\n        # map xhtml namespace prefix\n        ns_map
      = {\"h\": \"http://www.w3.org/1999/xhtml\"}\n\n        # build list of elements
      from DOM\n        elements = []\n        for element in result_dom.findall(\"*//*\",
      ns_map):\n            if element.findall(\"*[@class='headers']\") or element.findall(\"*[@class='chunk']\"):\n
      \               elements.append(\n                    ElementType(\n                        url=file,\n
      \                       xpath=\"\".join([node.text for node in element.findall(\"*[@class='xpath']\",
      ns_map)]),\n                        content=\"\".join([node.text for node in
      element.findall(\"*[@class='chunk']\", ns_map)]),\n                        metadata={\n
      \                           # Add text of specified headers to metadata using
      header\n                            # mapping.\n                            header_mapping[node.tag]:
      node.text\n                            for node in filter(\n                                lambda
      x: x.tag in header_filter,\n                                element.findall(\"*[@class='headers']/*\",
      ns_map),\n                            )\n                        },\n                    )\n
      \               )\n\n        if not self.return_each_element:\n            return
      aggregate_lines_to_chunks(elements)\n        else:\n            return [Document(page_content=chunk[\"content\"],
      metadata=chunk[\"metadata\"]) for chunk in elements]\n\n\n@dataclass(frozen=True,
      kw_only=True, slots=True)\nclass Tokenizer:\n    \"\"\"Tokenizer data class.\"\"\"\n\n
      \   chunk_overlap: int\n    \"\"\"Overlap in tokens between chunks\"\"\"\n    tokens_per_chunk:
      int\n    \"\"\"Maximum number of tokens per chunk\"\"\"\n    decode: Callable[[List[int]],
      str]\n    \"\"\" Function to decode a list of token ids to a string\"\"\"\n
      \   encode: Callable[[str], List[int]]\n    \"\"\" Function to encode a string
      to a list of token ids\"\"\"\n\n\ndef split_text_on_tokens(*, text: str, tokenizer:
      Tokenizer) -> List[str]:\n    \"\"\"Split incoming text and return chunks using
      tokenizer.\"\"\"\n    splits: List[str] = []\n    input_ids = tokenizer.encode(text)\n
      \   start_idx = 0\n    cur_idx = min(start_idx + tokenizer.tokens_per_chunk,
      len(input_ids))\n    chunk_ids = input_ids[start_idx:cur_idx]\n    while start_idx
      < len(input_ids):\n        splits.append(tokenizer.decode(chunk_ids))\n        start_idx
      += tokenizer.tokens_per_chunk - tokenizer.chunk_overlap\n        cur_idx = min(start_idx
      + tokenizer.tokens_per_chunk, len(input_ids))\n        chunk_ids = input_ids[start_idx:cur_idx]\n
      \   return splits\n\n\nclass TokenTextSplitterSpec(TextSplitterSpec):\n    encoding_name:
      str = Field(default=\"gpt2\", description=\"Encoding name\")\n    model: Optional[str]
      = Field(default=None, description=\"Model name\")\n    allowed_special: Union[Literal[\"all\"],
      List[str]] = Field(default=set(), description=\"Allowed special tokens\")\n
      \   disallowed_special: Union[Literal[\"all\"], List[str]] = Field(default=\"all\",
      description=\"Disallowed special tokens\")\n\n\nclass TokenTextSplitter(TextSplitter,
      Specable[TokenTextSplitterSpec]):\n    \"\"\"Splitting text to tokens using
      model tokenizer.\"\"\"\n\n    def __init__(\n        self,\n        spec: TokenTextSplitterSpec,\n
      \       **kwargs: Any,\n    ) -> None:\n        \"\"\"Create a new TextSplitter.\"\"\"\n
      \       super().__init__(**kwargs)\n        try:\n            import tiktoken\n
      \       except ImportError:\n            raise ImportError(\n                \"Could
      not import tiktoken python package. \"\n                \"This is needed in
      order to for TokenTextSplitter. \"\n                \"Please install it with
      `pip install tiktoken`.\"\n            )\n\n        if spec.model is not None:\n
      \           enc = tiktoken.encoding_for_model(spec.model)\n        else:\n            enc
      = tiktoken.get_encoding(spec.encoding_name)\n        self._tokenizer = enc\n
      \       self._allowed_special = spec.allowed_special\n        self._disallowed_special
      = spec.disallowed_special\n\n    def split_text(self, text: str) -> List[str]:\n
      \       def _encode(_text: str) -> List[int]:\n            return self._tokenizer.encode(\n
      \               _text,\n                allowed_special=self._allowed_special,\n
      \               disallowed_special=self._disallowed_special,\n            )\n\n
      \       tokenizer = Tokenizer(\n            chunk_overlap=self._chunk_overlap,\n
      \           tokens_per_chunk=self._chunk_size,\n            decode=self._tokenizer.decode,\n
      \           encode=_encode,\n        )\n\n        return split_text_on_tokens(text=text,
      tokenizer=tokenizer)\n\n\nclass SentenceTransformersTokenTextSplitterSpec(TextSplitterSpec):\n
      \   model: str = Field(\n        default=\"sentence-transformers/all-mpnet-base-v2\",\n
      \       description=\"Model name\",\n    )\n    tokens_per_chunk: Optional[int]
      = Field(\n        default=None,\n        description=\"Number of tokens per
      chunk\",\n    )\n    chunk_overlap: int = 50\n\n\nclass SentenceTransformersTokenTextSplitter(TextSplitter,
      Specable[SentenceTransformersTokenTextSplitterSpec]):\n    \"\"\"Splitting text
      to tokens using sentence model tokenizer.\"\"\"\n\n    def __init__(\n        self,\n
      \       spec: SentenceTransformersTokenTextSplitterSpec,\n        **kwargs:
      Any,\n    ) -> None:\n        \"\"\"Create a new TextSplitter.\"\"\"\n        super().__init__(**kwargs)\n\n
      \       try:\n            from sentence_transformers import SentenceTransformer\n
      \       except ImportError:\n            raise ImportError(\n                \"Could
      not import sentence_transformer python package. \"\n                \"This is
      needed in order to for SentenceTransformersTokenTextSplitter. \"\n                \"Please
      install it with `pip install sentence-transformers`.\"\n            )\n\n        self.model_name
      = spec.model\n        self._model = SentenceTransformer(self.model_name)\n        self.tokenizer
      = self._model.tokenizer\n        self._initialize_chunk_configuration(tokens_per_chunk=spec.tokens_per_chunk)\n\n
      \   def _initialize_chunk_configuration(self, *, tokens_per_chunk: Optional[int])
      -> None:\n        self.maximum_tokens_per_chunk = cast(int, self._model.max_seq_length)\n\n
      \       if tokens_per_chunk is None:\n            self.tokens_per_chunk = self.maximum_tokens_per_chunk\n
      \       else:\n            self.tokens_per_chunk = tokens_per_chunk\n\n        if
      self.tokens_per_chunk > self.maximum_tokens_per_chunk:\n            raise ValueError(\n
      \               f\"The token limit of the models '{self.model_name}'\"\n                f\"
      is: {self.maximum_tokens_per_chunk}.\"\n                f\" Argument tokens_per_chunk={self.tokens_per_chunk}\"\n
      \               f\" > maximum token limit.\"\n            )\n\n    def split_text(self,
      text: str) -> List[str]:\n        def encode_strip_start_and_stop_token_ids(s_text:
      str) -> List[int]:\n            return self._encode(s_text)[1:-1]\n\n        tokenizer
      = Tokenizer(\n            chunk_overlap=self._chunk_overlap,\n            tokens_per_chunk=self.tokens_per_chunk,\n
      \           decode=self.tokenizer.decode,\n            encode=encode_strip_start_and_stop_token_ids,\n
      \       )\n\n        return split_text_on_tokens(text=text, tokenizer=tokenizer)\n\n
      \   def count_tokens(self, *, text: str) -> int:\n        return len(self._encode(text))\n\n
      \   _max_length_equal_32_bit_integer: int = 2**32\n\n    def _encode(self, text:
      str) -> List[int]:\n        token_ids_with_start_and_end_token_ids = self.tokenizer.encode(\n
      \           text,\n            max_length=self._max_length_equal_32_bit_integer,\n
      \           truncation=\"do_not_truncate\",\n        )\n        return token_ids_with_start_and_end_token_ids\n\n\nclass
      Language(str, Enum):\n    \"\"\"Enum of the programming languages.\"\"\"\n\n
      \   CPP = \"cpp\"\n    GO = \"go\"\n    JAVA = \"java\"\n    KOTLIN = \"kotlin\"\n
      \   JS = \"js\"\n    TS = \"ts\"\n    PHP = \"php\"\n    PROTO = \"proto\"\n
      \   PYTHON = \"python\"\n    RST = \"rst\"\n    RUBY = \"ruby\"\n    RUST =
      \"rust\"\n    SCALA = \"scala\"\n    SWIFT = \"swift\"\n    MARKDOWN = \"markdown\"\n
      \   JSON = \"json\"\n    LATEX = \"latex\"\n    HTML = \"html\"\n    SOL = \"sol\"\n
      \   CSHARP = \"csharp\"\n    COBOL = \"cobol\"\n\n    @classmethod\n    def
      from_mimetype(cls, mimetype: str) -> Optional[Language]:\n        if mimetype
      == \"text/x-python\" or mimetype == \"text/x-python-code\":\n            return
      cls.PYTHON\n        elif mimetype == \"application/javascript\":\n            return
      cls.JS\n        elif mimetype == \"text/x-cobol\":\n            return cls.COBOL\n
      \       elif (\n            mimetype == \"text/x-c++src\"\n            or mimetype
      == \"text/x-c++hdr\"\n            or mimetype == \"text/x-csrc\"\n            or
      mimetype == \"text/x-chdr\"\n        ):\n            return cls.CPP\n        elif
      mimetype == \"text/x-csharp\":\n            return cls.CSHARP\n        elif
      mimetype == \"text/x-go\":\n            return cls.GO\n        elif mimetype
      == \"text/x-java-source\":\n            return cls.JAVA\n        elif mimetype
      == \"text/x-kotlin\":\n            return cls.KOTLIN\n        elif mimetype
      == \"text/x-php\":\n            return cls.PHP\n        elif mimetype == \"text/x-protobuf\":\n
      \           return cls.PROTO\n        elif mimetype == \"text/x-ruby\":\n            return
      cls.RUBY\n        elif mimetype == \"text/x-rust\":\n            return cls.RUST\n
      \       elif mimetype == \"text/x-scala\":\n            return cls.SCALA\n        elif
      mimetype == \"text/x-swift\":\n            return cls.SWIFT\n        elif mimetype
      == \"text/x-markdown\":\n            return cls.MARKDOWN\n        elif mimetype
      == \"text/x-latex\":\n            return cls.LATEX\n        elif mimetype ==
      \"text/html\":\n            return cls.HTML\n        elif mimetype == \"text/x-solidity\":\n
      \           return cls.SOL\n        elif mimetype == \"application/json\":\n
      \           return cls.JSON\n        else:\n            return None\n\n\nclass
      RecursiveCharacterTextSplitterSpec(TextSplitterSpec):\n    separators: Optional[List[str]]
      = Field(\n        default=None,\n        description=\"Separators to split on\",\n
      \   )\n    is_separator_regex: bool = Field(\n        default=False,\n        description=\"Whether
      the separator is a regex\",\n    )\n\n\nclass RecursiveCharacterTextSplitter(TextSplitter,
      Specable[RecursiveCharacterTextSplitterSpec]):\n    \"\"\"Splitting text by
      recursively look at characters.\n\n    Recursively tries to split by different
      characters to find one\n    that works.\n    \"\"\"\n\n    def __init__(\n        self,\n
      \       spec: RecursiveCharacterTextSplitterSpec,\n        **kwargs: Any,\n
      \   ) -> None:\n        \"\"\"Create a new TextSplitter.\"\"\"\n        super().__init__(spec,
      **kwargs)\n        self._separators = spec.separators or [\"\\n\\n\", \"\\n\",
      \" \", \"\"]\n        self._is_separator_regex = spec.is_separator_regex\n        self._length_function
      = len\n\n    def _split_text(self, text: str, separators: List[str]) -> List[str]:\n
      \       \"\"\"Split incoming text and return chunks.\"\"\"\n        final_chunks
      = []\n        # Get appropriate separator to use\n        separator = separators[-1]\n
      \       new_separators = []\n        for i, _s in enumerate(separators):\n            _separator
      = _s if self._is_separator_regex else re.escape(_s)\n            if _s == \"\":\n
      \               separator = _s\n                break\n            if re.search(_separator,
      text):\n                separator = _s\n                new_separators = separators[i
      + 1 :]\n                break\n\n        _separator = separator if self._is_separator_regex
      else re.escape(separator)\n        splits = _split_text_with_regex(text, _separator,
      self._keep_separator)\n\n        # Now go merging things, recursively splitting
      longer texts.\n        _good_splits = []\n        _separator = \"\" if self._keep_separator
      else separator\n        for s in splits:\n            if self._length_function(s)
      < self._chunk_size:\n                _good_splits.append(s)\n            else:\n
      \               if _good_splits:\n                    merged_text = self._merge_splits(_good_splits,
      _separator, self._length_function)\n                    final_chunks.extend(merged_text)\n
      \                   _good_splits = []\n                if not new_separators:\n
      \                   final_chunks.append(s)\n                else:\n                    other_info
      = self._split_text(s, new_separators)\n                    final_chunks.extend(other_info)\n
      \       if _good_splits:\n            merged_text = self._merge_splits(_good_splits,
      _separator, self._length_function)\n            final_chunks.extend(merged_text)\n
      \       return final_chunks\n\n    def split_text(self, text: str) -> List[str]:\n
      \       return self._split_text(text, self._separators)\n\n    @staticmethod\n
      \   def get_separators_for_language(language: Language) -> List[str]:\n        if
      language == Language.CPP:\n            return [\n                # Split along
      class definitions\n                \"\\nclass \",\n                # Split along
      function definitions\n                \"\\nvoid \",\n                \"\\nint
      \",\n                \"\\nfloat \",\n                \"\\ndouble \",\n                #
      Split along control flow statements\n                \"\\nif \",\n                \"\\nfor
      \",\n                \"\\nwhile \",\n                \"\\nswitch \",\n                \"\\ncase
      \",\n                # Split by the normal type of lines\n                \"\\n\\n\",\n
      \               \"\\n\",\n                \" \",\n                \"\",\n            ]\n
      \       elif language == Language.GO:\n            return [\n                #
      Split along function definitions\n                \"\\nfunc \",\n                \"\\nvar
      \",\n                \"\\nconst \",\n                \"\\ntype \",\n                #
      Split along control flow statements\n                \"\\nif \",\n                \"\\nfor
      \",\n                \"\\nswitch \",\n                \"\\ncase \",\n                #
      Split by the normal type of lines\n                \"\\n\\n\",\n                \"\\n\",\n
      \               \" \",\n                \"\",\n            ]\n        elif language
      == Language.JAVA:\n            return [\n                # Split along class
      definitions\n                \"\\nclass \",\n                # Split along method
      definitions\n                \"\\npublic \",\n                \"\\nprotected
      \",\n                \"\\nprivate \",\n                \"\\nstatic \",\n                #
      Split along control flow statements\n                \"\\nif \",\n                \"\\nfor
      \",\n                \"\\nwhile \",\n                \"\\nswitch \",\n                \"\\ncase
      \",\n                # Split by the normal type of lines\n                \"\\n\\n\",\n
      \               \"\\n\",\n                \" \",\n                \"\",\n            ]\n
      \       elif language == Language.KOTLIN:\n            return [\n                #
      Split along class definitions\n                \"\\nclass \",\n                #
      Split along method definitions\n                \"\\npublic \",\n                \"\\nprotected
      \",\n                \"\\nprivate \",\n                \"\\ninternal \",\n                \"\\ncompanion
      \",\n                \"\\nfun \",\n                \"\\nval \",\n                \"\\nvar
      \",\n                # Split along control flow statements\n                \"\\nif
      \",\n                \"\\nfor \",\n                \"\\nwhile \",\n                \"\\nwhen
      \",\n                \"\\ncase \",\n                \"\\nelse \",\n                #
      Split by the normal type of lines\n                \"\\n\\n\",\n                \"\\n\",\n
      \               \" \",\n                \"\",\n            ]\n        elif language
      == Language.JS:\n            return [\n                # Split along function
      definitions\n                \"\\nfunction \",\n                \"\\nconst \",\n
      \               \"\\nlet \",\n                \"\\nvar \",\n                \"\\nclass
      \",\n                # Split along control flow statements\n                \"\\nif
      \",\n                \"\\nfor \",\n                \"\\nwhile \",\n                \"\\nswitch
      \",\n                \"\\ncase \",\n                \"\\ndefault \",\n                #
      Split by the normal type of lines\n                \"\\n\\n\",\n                \"\\n\",\n
      \               \" \",\n                \"\",\n            ]\n        elif language
      == Language.TS:\n            return [\n                \"\\nenum \",\n                \"\\ninterface
      \",\n                \"\\nnamespace \",\n                \"\\ntype \",\n                #
      Split along class definitions\n                \"\\nclass \",\n                #
      Split along function definitions\n                \"\\nfunction \",\n                \"\\nconst
      \",\n                \"\\nlet \",\n                \"\\nvar \",\n                #
      Split along control flow statements\n                \"\\nif \",\n                \"\\nfor
      \",\n                \"\\nwhile \",\n                \"\\nswitch \",\n                \"\\ncase
      \",\n                \"\\ndefault \",\n                # Split by the normal
      type of lines\n                \"\\n\\n\",\n                \"\\n\",\n                \"
      \",\n                \"\",\n            ]\n        elif language == Language.PHP:\n
      \           return [\n                # Split along function definitions\n                \"\\nfunction
      \",\n                # Split along class definitions\n                \"\\nclass
      \",\n                # Split along control flow statements\n                \"\\nif
      \",\n                \"\\nforeach \",\n                \"\\nwhile \",\n                \"\\ndo
      \",\n                \"\\nswitch \",\n                \"\\ncase \",\n                #
      Split by the normal type of lines\n                \"\\n\\n\",\n                \"\\n\",\n
      \               \" \",\n                \"\",\n            ]\n        elif language
      == Language.PROTO:\n            return [\n                # Split along message
      definitions\n                \"\\nmessage \",\n                # Split along
      service definitions\n                \"\\nservice \",\n                # Split
      along enum definitions\n                \"\\nenum \",\n                # Split
      along option definitions\n                \"\\noption \",\n                #
      Split along import statements\n                \"\\nimport \",\n                #
      Split along syntax declarations\n                \"\\nsyntax \",\n                #
      Split by the normal type of lines\n                \"\\n\\n\",\n                \"\\n\",\n
      \               \" \",\n                \"\",\n            ]\n        elif language
      == Language.PYTHON:\n            return [\n                # First, try to split
      along class definitions\n                \"\\nclass \",\n                \"\\ndef
      \",\n                \"\\n\\tdef \",\n                # Now split by the normal
      type of lines\n                \"\\n\\n\",\n                \"\\n\",\n                \"
      \",\n                \"\",\n            ]\n        elif language == Language.RST:\n
      \           return [\n                # Split along section titles\n                \"\\n=+\\n\",\n
      \               \"\\n-+\\n\",\n                \"\\n\\\\*+\\n\",\n                #
      Split along directive markers\n                \"\\n\\n.. *\\n\\n\",\n                #
      Split by the normal type of lines\n                \"\\n\\n\",\n                \"\\n\",\n
      \               \" \",\n                \"\",\n            ]\n        elif language
      == Language.RUBY:\n            return [\n                # Split along method
      definitions\n                \"\\ndef \",\n                \"\\nclass \",\n
      \               # Split along control flow statements\n                \"\\nif
      \",\n                \"\\nunless \",\n                \"\\nwhile \",\n                \"\\nfor
      \",\n                \"\\ndo \",\n                \"\\nbegin \",\n                \"\\nrescue
      \",\n                # Split by the normal type of lines\n                \"\\n\\n\",\n
      \               \"\\n\",\n                \" \",\n                \"\",\n            ]\n
      \       elif language == Language.RUST:\n            return [\n                #
      Split along function definitions\n                \"\\nfn \",\n                \"\\nconst
      \",\n                \"\\nlet \",\n                # Split along control flow
      statements\n                \"\\nif \",\n                \"\\nwhile \",\n                \"\\nfor
      \",\n                \"\\nloop \",\n                \"\\nmatch \",\n                \"\\nconst
      \",\n                # Split by the normal type of lines\n                \"\\n\\n\",\n
      \               \"\\n\",\n                \" \",\n                \"\",\n            ]\n
      \       elif language == Language.SCALA:\n            return [\n                #
      Split along class definitions\n                \"\\nclass \",\n                \"\\nobject
      \",\n                # Split along method definitions\n                \"\\ndef
      \",\n                \"\\nval \",\n                \"\\nvar \",\n                #
      Split along control flow statements\n                \"\\nif \",\n                \"\\nfor
      \",\n                \"\\nwhile \",\n                \"\\nmatch \",\n                \"\\ncase
      \",\n                # Split by the normal type of lines\n                \"\\n\\n\",\n
      \               \"\\n\",\n                \" \",\n                \"\",\n            ]\n
      \       elif language == Language.SWIFT:\n            return [\n                #
      Split along function definitions\n                \"\\nfunc \",\n                #
      Split along class definitions\n                \"\\nclass \",\n                \"\\nstruct
      \",\n                \"\\nenum \",\n                # Split along control flow
      statements\n                \"\\nif \",\n                \"\\nfor \",\n                \"\\nwhile
      \",\n                \"\\ndo \",\n                \"\\nswitch \",\n                \"\\ncase
      \",\n                # Split by the normal type of lines\n                \"\\n\\n\",\n
      \               \"\\n\",\n                \" \",\n                \"\",\n            ]\n
      \       elif language == Language.MARKDOWN:\n            return [\n                #
      First, try to split along Markdown headings (starting with level 2)\n                \"\\n#{1,6}
      \",\n                # Note the alternative syntax for headings (below) is not
      handled here\n                # Heading level 2\n                # ---------------\n
      \               # End of code block\n                \"```\\n\",\n                #
      Horizontal lines\n                \"\\n\\\\*\\\\*\\\\*+\\n\",\n                \"\\n---+\\n\",\n
      \               \"\\n___+\\n\",\n                # Note that this splitter doesn't
      handle horizontal lines defined\n                # by *three or more* of ***,
      ---, or ___, but this is not handled\n                \"\\n\\n\",\n                \"\\n\",\n
      \               \" \",\n                \"\",\n            ]\n        elif language
      == Language.JSON:\n            return [\n                # First, try to split
      along newlines to handle json-nl\n                \"\\n\\n\",\n                \"\\n\",\n
      \               # then by commas\n                \",\",\n                #
      then by spaces, which really, really sucks\n                \" \" \"\",\n            ]\n
      \       elif language == Language.LATEX:\n            return [\n                #
      First, try to split along Latex sections\n                \"\\n\\\\\\\\chapter{\",\n
      \               \"\\n\\\\\\\\section{\",\n                \"\\n\\\\\\\\subsection{\",\n
      \               \"\\n\\\\\\\\subsubsection{\",\n                # Now split
      by environments\n                \"\\n\\\\\\\\begin{enumerate}\",\n                \"\\n\\\\\\\\begin{itemize}\",\n
      \               \"\\n\\\\\\\\begin{description}\",\n                \"\\n\\\\\\\\begin{list}\",\n
      \               \"\\n\\\\\\\\begin{quote}\",\n                \"\\n\\\\\\\\begin{quotation}\",\n
      \               \"\\n\\\\\\\\begin{verse}\",\n                \"\\n\\\\\\\\begin{verbatim}\",\n
      \               # Now split by math environments\n                \"\\n\\\\\\begin{align}\",\n
      \               \"$$\",\n                \"$\",\n                # Now split
      by the normal type of lines\n                \" \",\n                \"\",\n
      \           ]\n        elif language == Language.HTML:\n            return [\n
      \               # First, try to split along HTML tags\n                \"<body\",\n
      \               \"<div\",\n                \"<p\",\n                \"<br\",\n
      \               \"<li\",\n                \"<h1\",\n                \"<h2\",\n
      \               \"<h3\",\n                \"<h4\",\n                \"<h5\",\n
      \               \"<h6\",\n                \"<span\",\n                \"<table\",\n
      \               \"<tr\",\n                \"<td\",\n                \"<th\",\n
      \               \"<ul\",\n                \"<ol\",\n                \"<header\",\n
      \               \"<footer\",\n                \"<nav\",\n                # Head\n
      \               \"<head\",\n                \"<style\",\n                \"<script\",\n
      \               \"<meta\",\n                \"<title\",\n                \"\",\n
      \           ]\n        elif language == Language.CSHARP:\n            return
      [\n                \"\\ninterface \",\n                \"\\nenum \",\n                \"\\nimplements
      \",\n                \"\\ndelegate \",\n                \"\\nevent \",\n                #
      Split along class definitions\n                \"\\nclass \",\n                \"\\nabstract
      \",\n                # Split along method definitions\n                \"\\npublic
      \",\n                \"\\nprotected \",\n                \"\\nprivate \",\n
      \               \"\\nstatic \",\n                \"\\nreturn \",\n                #
      Split along control flow statements\n                \"\\nif \",\n                \"\\ncontinue
      \",\n                \"\\nfor \",\n                \"\\nforeach \",\n                \"\\nwhile
      \",\n                \"\\nswitch \",\n                \"\\nbreak \",\n                \"\\ncase
      \",\n                \"\\nelse \",\n                # Split by exceptions\n
      \               \"\\ntry \",\n                \"\\nthrow \",\n                \"\\nfinally
      \",\n                \"\\ncatch \",\n                # Split by the normal type
      of lines\n                \"\\n\\n\",\n                \"\\n\",\n                \"
      \",\n                \"\",\n            ]\n        elif language == Language.SOL:\n
      \           return [\n                # Split along compiler information definitions\n
      \               \"\\npragma \",\n                \"\\nusing \",\n                #
      Split along contract definitions\n                \"\\ncontract \",\n                \"\\ninterface
      \",\n                \"\\nlibrary \",\n                # Split along method
      definitions\n                \"\\nconstructor \",\n                \"\\ntype
      \",\n                \"\\nfunction \",\n                \"\\nevent \",\n                \"\\nmodifier
      \",\n                \"\\nerror \",\n                \"\\nstruct \",\n                \"\\nenum
      \",\n                # Split along control flow statements\n                \"\\nif
      \",\n                \"\\nfor \",\n                \"\\nwhile \",\n                \"\\ndo
      while \",\n                \"\\nassembly \",\n                # Split by the
      normal type of lines\n                \"\\n\\n\",\n                \"\\n\",\n
      \               \" \",\n                \"\",\n            ]\n        elif language
      == Language.COBOL:\n            return [\n                # Split along divisions\n
      \               \"\\nIDENTIFICATION DIVISION.\",\n                \"\\nENVIRONMENT
      DIVISION.\",\n                \"\\nDATA DIVISION.\",\n                \"\\nPROCEDURE
      DIVISION.\",\n                # Split along sections within DATA DIVISION\n
      \               \"\\nWORKING-STORAGE SECTION.\",\n                \"\\nLINKAGE
      SECTION.\",\n                \"\\nFILE SECTION.\",\n                # Split
      along sections within PROCEDURE DIVISION\n                \"\\nINPUT-OUTPUT
      SECTION.\",\n                # Split along paragraphs and common statements\n
      \               \"\\nOPEN \",\n                \"\\nCLOSE \",\n                \"\\nREAD
      \",\n                \"\\nWRITE \",\n                \"\\nIF \",\n                \"\\nELSE
      \",\n                \"\\nMOVE \",\n                \"\\nPERFORM \",\n                \"\\nUNTIL
      \",\n                \"\\nVARYING \",\n                \"\\nACCEPT \",\n                \"\\nDISPLAY
      \",\n                \"\\nSTOP RUN.\",\n                # Split by the normal
      type of lines\n                \"\\n\",\n                \" \",\n                \"\",\n
      \           ]\n\n        else:\n            raise ValueError(f\"Language {language}
      is not supported! \" f\"Please choose from {list(Language)}\")\n\n\nclass NLTKTextSplitterSpec(TextSplitterSpec):\n
      \   separator: str = Field(\n        default=\"\\n\\n\",\n        description=\"Separator
      to split on\",\n    )\n    language: str = Field(\n        default=\"english\",\n
      \       description=\"Language to use for tokenization\",\n    )\n\n\nclass
      NLTKTextSplitter(TextSplitter, Specable[NLTKTextSplitterSpec]):\n    \"\"\"Splitting
      text using NLTK package.\"\"\"\n\n    def __init__(self, spec: NLTKTextSplitterSpec,
      **kwargs: Any) -> None:\n        \"\"\"Initialize the NLTK splitter.\"\"\"\n
      \       super().__init__(**kwargs)\n        try:\n            from nltk.tokenize
      import sent_tokenize\n\n            self._tokenizer = sent_tokenize\n        except
      ImportError:\n            raise ImportError(\"NLTK is not installed, please
      install it with `pip install nltk`.\")\n        self._separator = spec.separator\n
      \       self._language = spec.language\n\n    def split_text(self, text: str)
      -> List[str]:\n        \"\"\"Split incoming text and return chunks.\"\"\"\n
      \       # First we naively split the large input into a bunch of smaller ones.\n
      \       splits = self._tokenizer(text, language=self._language)\n        return
      self._merge_splits(splits, self._separator, len)\n\n\nclass SpacyTextSplitterSpec(TextSplitterSpec):\n
      \   separator: str = Field(\n        default=\"\\n\\n\",\n        description=\"Separator
      to split on\",\n    )\n    pipeline: str = Field(\n        default=\"en_core_web_sm\",\n
      \       description=\"Spacy pipeline to use\",\n    )\n    max_length: int =
      Field(\n        default=1_000_000,\n        description=\"Maximum length of
      characters to process\",\n    )\n\n\nclass SpacyTextSplitter(TextSplitter, Specable[SpacyTextSplitterSpec]):\n
      \   \"\"\"Splitting text using Spacy package.\n\n\n    Per default, Spacy's
      `en_core_web_sm` model is used and\n    its default max_length is 1000000 (it
      is the length of maximum character\n    this model takes which can be increased
      for large files). For a faster, but\n    potentially less accurate splitting,
      you can use `pipeline='sentencizer'`.\n    \"\"\"\n\n    def __init__(\n        self,\n
      \       spec: SpacyTextSplitterSpec,\n        **kwargs: Any,\n    ) -> None:\n
      \       \"\"\"Initialize the spacy text splitter.\"\"\"\n        super().__init__(**kwargs)\n
      \       self._tokenizer = _make_spacy_pipeline_for_splitting(spec.pipeline,
      max_length=spec.max_length)\n        self._separator = spec.separator\n\n    def
      split_text(self, text: str) -> List[str]:\n        \"\"\"Split incoming text
      and return chunks.\"\"\"\n        splits = (s.text for s in self._tokenizer(text).sents)\n
      \       return self._merge_splits(splits, self._separator, len)\n\n\n# For backwards
      compatibility\nclass PythonCodeTextSplitter(RecursiveCharacterTextSplitter):\n
      \   \"\"\"Attempts to split the text along Python syntax.\"\"\"\n\n    def __init__(self,
      **kwargs: Any) -> None:\n        \"\"\"Initialize a PythonCodeTextSplitter.\"\"\"\n
      \       super().__init__(**kwargs)\n        self._separators = self.get_separators_for_language(Language.PYTHON)\n\n\nclass
      MarkdownTextSplitter(RecursiveCharacterTextSplitter):\n    \"\"\"Attempts to
      split the text along Markdown-formatted headings.\"\"\"\n\n    def __init__(self,
      **kwargs: Any) -> None:\n        \"\"\"Initialize a MarkdownTextSplitter.\"\"\"\n
      \       super().__init__(**kwargs)\n        self._separators = self.get_separators_for_language(Language.MARKDOWN)\n\n\nclass
      LatexTextSplitter(RecursiveCharacterTextSplitter):\n    \"\"\"Attempts to split
      the text along Latex-formatted layout elements.\"\"\"\n\n    def __init__(self,
      **kwargs: Any) -> None:\n        \"\"\"Initialize a LatexTextSplitter.\"\"\"\n
      \       super().__init__(**kwargs)\n        self._separators = self.get_separators_for_language(Language.LATEX)\n"
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Length:
      - '8374'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:29:23 GMT
      ETag:
      - W/"90fbf92346d3098e794bfb02768b3cb86498530a3cca30911c6974b2ab40cb83"
      Expires:
      - Tue, 20 Feb 2024 21:34:23 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - cb534ddc0b4414207ebe1fa9e79096b3ec7ec35c
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - 30CC:256179:B31CC:106BBA:65D519B2
      X-Served-By:
      - cache-bfi-kbfi7400061-BFI
      X-Timer:
      - S1708464563.088824,VS0,VE161
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/system/agent_controller.py
  response:
    content: "from __future__ import annotations\n\nimport asyncio\nimport inspect\nimport
      logging\nimport typing\nimport uuid\nfrom collections.abc import AsyncIterator\nfrom
      inspect import Parameter\n\nfrom fastapi import FastAPI, Request, HTTPException\nfrom
      fastapi.params import Body, Param\nfrom pydantic import BaseModel, Field, create_model\nfrom
      pydantic_core import PydanticUndefined, to_jsonable_python\nfrom sse_starlette
      import EventSourceResponse, ServerSentEvent\nfrom starlette.responses import
      JSONResponse\n\nfrom eidolon_ai_sdk.agent.agent import AgentState\nfrom eidolon_ai_sdk.agent_os
      import AgentOS\nfrom eidolon_ai_sdk.cpu.agent_call_history import AgentCallHistory\nfrom
      eidolon_ai_sdk.io.events import (\n    StartAgentCallEvent,\n    AgentStateEvent,\n
      \   BaseStreamEvent,\n    ErrorEvent,\n    StringOutputEvent,\n    OutputEvent,\n
      \   SuccessEvent,\n    StreamEvent,\n    EndStreamEvent,\n    ObjectOutputEvent,\n
      \   UserInputEvent,\n    CanceledEvent,\n)\nfrom eidolon_ai_sdk.system.agent_contract
      import (\n    SyncStateResponse,\n    ListProcessesResponse,\n    StateSummary,\n
      \   DeleteProcessResponse,\n    CreateProcessArgs,\n)\nfrom eidolon_ai_sdk.system.fn_handler
      import FnHandler, get_handlers\nfrom eidolon_ai_sdk.system.processes import
      ProcessDoc, store_events, load_events\nfrom eidolon_ai_sdk.system.request_context
      import RequestContext\nfrom eidolon_ai_sdk.system.resources.agent_resource import
      AgentResource\nfrom eidolon_ai_sdk.system.resources.reference_resource import
      ReferenceResource\nfrom eidolon_ai_sdk.util.class_utils import for_name\nfrom
      eidolon_ai_sdk.util.logger import logger\n\n\n# todo, agent controller has become
      a mega impl, we should break up responsibilities\nclass AgentController:\n    name:
      str\n    agent: object\n    actions: typing.Dict[str, FnHandler]\n\n    def
      __init__(self, name, agent):\n        self.name = name\n        self.actions
      = {}\n        self.agent = agent\n        for handler in get_handlers(self.agent):\n
      \           if handler.name in self.actions:\n                self.actions[handler.name].extra[\"allowed_states\"]
      = (\n                    *self.actions[handler.name].extra[\"allowed_states\"],\n
      \                   *handler.extra[\"allowed_states\"],\n                )\n
      \           else:\n                self.actions[handler.name] = handler\n\n
      \   async def start(self, app: FastAPI):\n        logger.info(f\"Starting agent
      '{self.name}'\")\n        app.add_api_route(\n            f\"/agents/{self.name}/processes\",\n
      \           endpoint=self.list_processes,\n            methods=[\"GET\"],\n
      \           response_model=ListProcessesResponse,\n            tags=[self.name],\n
      \       )\n\n        app.add_api_route(\n            f\"/agents/{self.name}/processes\",\n
      \           endpoint=self.create_process,\n            methods=[\"POST\"],\n
      \           response_model=StateSummary,\n            tags=[self.name],\n        )\n\n
      \       app.add_api_route(\n            f\"/agents/{self.name}/processes/{{process_id}}\",\n
      \           endpoint=self.delete_process,\n            methods=[\"DELETE\"],\n
      \           response_model=DeleteProcessResponse,\n            tags=[self.name],\n
      \       )\n\n        added_actions = {}\n        for handler in [*self.actions.values().__reversed__()]:\n
      \           handler_name = handler.name\n            path = f\"/agents/{self.name}/processes/{{process_id}}/actions/{handler_name}\"\n
      \           if \"initialized\" in handler.extra[\"allowed_states\"]:\n                await
      self.add_route(app, handler, f\"/agents/{self.name}/programs/{handler_name}\",
      True)\n            if handler_name not in added_actions:\n                await
      self.add_route(app, handler, path, False)\n                added_actions[handler_name]
      = path\n            else:\n                logger.warning(\n                    f\"Action
      {handler_name} is already registered for path {added_actions[handler_name]}.
      \"\n                    f\"Skipping registration for path {path}\"\n                )\n\n
      \       app.add_api_route(\n            f\"/agents/{self.name}/processes/{{process_id}}/status\",\n
      \           endpoint=self.get_process_info,\n            methods=[\"GET\"],\n
      \           response_model=SyncStateResponse,\n            tags=[self.name],\n
      \       )\n\n        app.add_api_route(\n            f\"/agents/{self.name}/processes/{{process_id}}/events\",\n
      \           endpoint=self.get_process_events,\n            methods=[\"GET\"],\n
      \           response_model=typing.List[typing.Dict[str, typing.Any]],\n            tags=[self.name],\n
      \       )\n\n    async def add_route(self, app, handler, path, isEndpointAProgram:
      bool):\n        endpoint = self.process_action(handler, isEndpointAProgram)\n
      \       app.add_api_route(\n            path,\n            endpoint=endpoint,\n
      \           methods=[\"POST\"],\n            tags=[self.name],\n            responses={\n
      \               200: {\n                    \"model\": self.create_response_model(handler),\n
      \                   \"content\": {\"text/event-stream\": {\"schema\": {\"$ref\":
      \"#/components/schemas/EventTypes\"}}},\n                },\n            },\n
      \           description=handler.description(self.agent, handler),\n        )\n\n
      \   async def stop(self, app: FastAPI):\n        pass\n\n    async def run_program(\n
      \       self,\n        handler: FnHandler,\n        process_id: typing.Optional[str]
      = None,\n        **kwargs,\n    ):\n        request = typing.cast(Request, kwargs.pop(\"__request\"))\n
      \       if not process_id:\n            if \"initialized\" not in handler.extra[\"allowed_states\"]:\n
      \               raise HTTPException(\n                    status_code=400,\n
      \                   detail=f'Action \"{handler.name}\" is not an initializer,
      but no process_id was provided',\n                )\n            last_state
      = \"initialized\"\n            process = await self._create_process(state=\"processing\")\n
      \           process_id = process.record_id\n        else:\n            process
      = await self.get_latest_process_event(process_id)\n            if not process:\n
      \               raise HTTPException(status_code=404, detail=\"Process not found\")\n
      \           if process.state not in handler.extra[\"allowed_states\"]:\n                logger.warning(\n
      \                   f\"Action {handler.name} cannot process state {process.state}.
      Allowed states: {handler.extra['allowed_states']}\"\n                )\n                raise
      HTTPException(\n                    status_code=409,\n                    detail=f'Action
      \"{handler.name}\" cannot process state \"{process.state}\"',\n                )\n
      \           last_state = process.state\n            process = await process.update(\n
      \               agent=self.name, record_id=process_id, state=\"processing\",
      data=dict(action=handler.name)\n            )\n        RequestContext.set(\"process_id\",
      process_id)\n\n        if \"process_id\" in dict(inspect.signature(handler.fn).parameters):\n
      \           kwargs[\"process_id\"] = process_id\n\n        # get the accepted
      content types\n        accept_header = request.headers.get(\"Accept\")\n        media_types
      = accept_header.split(\",\") if accept_header else []\n        try:\n            event_stream_idx
      = media_types.index(\"text/event-stream\")\n        except ValueError:\n            event_stream_idx
      = -1\n\n        try:\n            app_json_idx = media_types.index(\"application/json\")\n
      \       except ValueError:\n            app_json_idx = -1\n\n        if event_stream_idx
      != -1 and (app_json_idx == -1 or event_stream_idx < app_json_idx):\n            #
      stream the results\n            async def with_sse(stream: AsyncIterator[BaseStreamEvent]):\n
      \               try:\n                    async for event in stream:\n                        yield
      ServerSentEvent(id=str(uuid.uuid4()), data=event.model_dump_json())\n                except
      Exception as e:\n                    logger.exception(f\"Server Error {e}\")\n
      \                   raise e\n\n            return EventSourceResponse(\n                with_sse(self.agent_event_stream(handler,
      process, last_state, **kwargs)), status_code=200\n            )\n        else:\n
      \           # run the program synchronously\n            return await self.send_response(handler,
      process, last_state, **kwargs)\n\n    async def _create_process(self, **kwargs):\n
      \       process = await ProcessDoc.create(agent=self.name, **kwargs)\n        if
      hasattr(self.agent, \"create_process\"):\n            await self.agent.create_process(process.record_id)\n
      \       return process\n\n    async def send_response(self, handler: FnHandler,
      process: ProcessDoc, last_state: str, **kwargs) -> JSONResponse:\n        state_change_event
      = None\n        final_event = None\n        result_object = None\n        string_result
      = \"\"\n        async for event in self.agent_event_stream(handler, process,
      last_state, **kwargs):\n            if event.is_root_and_type(StringOutputEvent):\n
      \               string_result += event.content\n            elif event.is_root_and_type(ObjectOutputEvent):\n
      \               result_object = event.content\n            elif event.is_root_and_type(AgentStateEvent):\n
      \               state_change_event = event\n            elif event.is_root_and_type(EndStreamEvent):\n
      \               final_event = event\n            else:\n                logger.debug(f\"ignored
      event {event}\")\n\n        if not state_change_event:\n            raise RuntimeError(f\"Did
      not receive state change event for {handler.name}\")\n        if not final_event:\n
      \           raise RuntimeError(f\"Did not receive final event for {handler.name}\")\n\n
      \       process.state = state_change_event.state\n        if final_event.is_root_and_type(ErrorEvent):\n
      \           process.error_info = final_event.reason\n            return self.doc_to_response(process,
      None)\n        else:\n            if result_object:\n                data =
      result_object\n            else:\n                data = string_result\n            return
      self.doc_to_response(process, data)\n\n    async def agent_event_stream(self,
      handler, process, last_state, **kwargs) -> AsyncIterator[StreamEvent]:\n        is_async_gen
      = inspect.isasyncgenfunction(handler.fn)\n        stream = handler.fn(self.agent,
      **kwargs) if is_async_gen else self.stream_agent_fn(handler, **kwargs)\n        events_to_store
      = []\n        ended = False\n        transitioned = False\n        try:\n            async
      for event in self.stream_agent_iterator(stream, process, handler.name, kwargs):\n
      \               if not ended:\n                    ended = event.is_root_end_event()\n
      \                   transitioned = event.is_root_and_type(AgentStateEvent)\n
      \                   if (\n                        isinstance(event, StringOutputEvent)\n
      \                       and events_to_store\n                        and isinstance(events_to_store[-1],
      StringOutputEvent)\n                        and event.stream_context == events_to_store[-1].stream_context\n
      \                   ):\n                        events_to_store[-1].content
      += event.content\n                    else:\n                        events_to_store.append(event)\n
      \                   yield event\n                else:\n                    logger.warning(f\"Received
      event after end event ({event.event_type}), ignoring\")\n        except asyncio.CancelledError:\n
      \           logger.info(f\"Process {process.record_id} was cancelled\")\n            if
      not ended:\n                if not transitioned:\n                    await
      process.update(state=last_state)\n                    actions = self.get_available_actions(last_state)\n
      \                   events_to_store.append(AgentStateEvent(state=last_state,
      available_actions=actions))\n                events_to_store.append(CanceledEvent())\n\n
      \           raise\n        finally:\n            await store_events(self.name,
      process.record_id, events_to_store)\n\n    async def stream_agent_iterator(\n
      \       self,\n        stream: AsyncIterator[StreamEvent],\n        process:
      ProcessDoc,\n        call_name,\n        user_input: typing.Dict[str, typing.Any],\n
      \   ) -> AsyncIterator[StreamEvent]:\n        state_change = None\n        seen_end
      = False\n        try:\n            yield UserInputEvent(input=to_jsonable_python(user_input,
      fallback=str))\n            yield StartAgentCallEvent(\n                machine=AgentOS.current_machine_url(),\n
      \               agent_name=self.name,\n                call_name=call_name,\n
      \               process_id=process.record_id,\n            )\n            async
      for event in stream:\n                if event.is_root_and_type(ErrorEvent):\n
      \                   logger.warning(\"Error event received\")\n                if
      not seen_end:\n                    seen_end = event.is_root_end_event()\n                    if
      event.is_root_and_type(AgentStateEvent):\n                        state_change
      = True\n                        event.available_actions = self.get_available_actions(event.state)\n
      \                       await process.update(state=event.state)\n                    yield
      event\n                else:\n                    logger.warning(f\"Received
      event after end event ({event.event_type}), ignoring\")\n            if not
      state_change:\n                await process.update(state=\"terminated\")\n
      \               yield AgentStateEvent(state=\"terminated\", available_actions=self.get_available_actions(\"terminated\"))\n
      \           if not seen_end:\n                yield SuccessEvent()\n        except
      HTTPException as e:\n            logger.warning(f\"HTTP Error {e}\", exc_info=logger.isEnabledFor(logging.DEBUG))\n
      \           if not seen_end:\n                await process.update(state=\"http_error\",
      error_info=dict(detail=e.detail, status_code=e.status_code))\n                yield
      AgentStateEvent(state=\"http_error\", available_actions=self.get_available_actions(\"http_error\"))\n
      \               yield ErrorEvent(reason=dict(detail=e.detail, status_code=e.status_code))\n
      \       except Exception as e:\n            logger.exception(f\"Unhandled Error
      {e}\")\n            if not seen_end:\n                await process.update(state=\"unhandled_error\",
      error_info=dict(detail=str(e), status_code=500))\n                yield AgentStateEvent(\n
      \                   state=\"unhandled_error\", available_actions=self.get_available_actions(\"unhandled_error\")\n
      \               )\n                yield ErrorEvent(reason=dict(detail=str(e),
      status_code=500))\n\n    async def stream_agent_fn(self, handler, **kwargs)
      -> AsyncIterator[StreamEvent]:\n        response = await handler.fn(self.agent,
      **kwargs)\n        if isinstance(response, AgentState):\n            yield OutputEvent.get(content=to_jsonable_python(response.data))\n
      \           yield AgentStateEvent(state=response.name, available_actions=self.get_available_actions(response.name))\n
      \       else:\n            yield OutputEvent.get(content=to_jsonable_python(to_jsonable_python(response)))\n\n
      \   def process_action(self, handler: FnHandler, isEndpointAProgram: bool):\n
      \       logger.debug(f\"Registering action {handler.name} for program {self.name}\")\n
      \       sig = inspect.signature(handler.fn)\n        params = dict(sig.parameters)\n
      \       model: typing.Type[BaseModel] = handler.input_model_fn(self.agent, handler)\n
      \       for field in model.model_fields:\n            kwargs = dict(annotation=model.model_fields[field].annotation)\n
      \           if isinstance(model.model_fields[field], Body) or isinstance(model.model_fields[field],
      Param):\n                kwargs[\"annotation\"] = typing.Annotated[model.model_fields[field].annotation,
      model.model_fields[field]]\n            if model.model_fields[field].default
      is not PydanticUndefined:\n                kwargs[\"default\"] = model.model_fields[field].default\n\n
      \           params[field] = Parameter(field, Parameter.KEYWORD_ONLY, **kwargs)\n
      \       if \"process_id\" in params:\n            if isEndpointAProgram:\n                del
      params[\"process_id\"]\n            else:\n                replace: Parameter
      = params[\"process_id\"].replace(annotation=str)\n                params[\"process_id\"]
      = replace\n        elif not isEndpointAProgram:\n            params[\"process_id\"]
      = Parameter(\"process_id\", Parameter.KEYWORD_ONLY, annotation=str)\n\n        del
      params[\"self\"]\n\n        params[\"__request\"] = Parameter(\"__request\",
      Parameter.KEYWORD_ONLY, annotation=Request)\n        params_values = [v for
      v in params.values() if v.kind != Parameter.VAR_KEYWORD]\n\n        async def
      _run_program(**_kwargs):\n            return await self.run_program(handler,
      **_kwargs)\n\n        _run_program.__signature__ = sig.replace(parameters=params_values,
      return_annotation=typing.Any)\n        return _run_program\n\n    async def
      get_process_info(self, process_id: str):\n        latest_record = await self.get_latest_process_event(process_id)\n
      \       if not latest_record:\n            return JSONResponse(dict(detail=\"Process
      not found\"), 404)\n        elif (\n            latest_record.state == \"unhandled_error\"\n
      \           or latest_record.state == \"http_error\"\n            or latest_record.state
      == \"error\"\n        ):\n            detail = latest_record.error_info\n            status_code
      = 500\n            if isinstance(latest_record.error_info, dict):\n                detail
      = latest_record.error_info.get(\"detail\", latest_record.error_info)\n                status_code
      = latest_record.error_info.get(\"status_code\", 500)\n            logger.info(f\"Successfully
      retrieved stored error response, status_code={status_code}\")\n            return
      JSONResponse(detail, status_code)\n        else:\n            return JSONResponse(\n
      \               StateSummary(\n                    process_id=latest_record.record_id,\n
      \                   state=latest_record.state,\n                    available_actions=self.get_available_actions(latest_record.state),\n
      \               ).model_dump(),\n                200,\n            )\n\n    async
      def get_process_events(self, process_id: str):\n        return await load_events(self.name,
      process_id)\n\n    async def create_process(self, args: CreateProcessArgs =
      CreateProcessArgs()):\n        process = await self._create_process(state=\"initialized\",
      title=args.title)\n        return JSONResponse(\n            StateSummary(\n
      \               process_id=process.record_id,\n                state=process.state,\n
      \               available_actions=self.get_available_actions(process.state),\n
      \           ).model_dump(),\n            200,\n        )\n\n    async def delete_process(self,
      process_id: str):\n        process_obj = await ProcessDoc.find_one(query={\"_id\":
      process_id})\n        num_delete = await self._delete_process(process_id) if
      process_obj else 0\n        return JSONResponse(\n            DeleteProcessResponse(process_id=process_id,
      deleted=num_delete).model_dump(), 200 if num_delete > 0 else 204\n        )\n\n
      \   async def _delete_process(self, process_id: str):\n        num_deleted =
      0\n        async for child in AgentCallHistory.get_children(process_id):\n            num_deleted
      += await self._delete_process(child)\n        await AgentCallHistory.delete(query={\"parent_process_id\":
      process_id})\n        logger.info(f\"Successfully deleted child processes for
      process {process_id}\")\n\n        references = AgentOS.get_resources(ReferenceResource).values()\n
      \       agents = AgentOS.get_resources(AgentResource).values()\n        for
      r in (*agents, *references):\n            implementation = to_jsonable_python(r.spec)[\"implementation\"]\n
      \           is_root = not AgentOS.get_resource(ReferenceResource, implementation,
      default=None)\n            if is_root:\n                resource_class = for_name(implementation)\n
      \               if hasattr(resource_class, \"delete_process\"):\n                    await
      resource_class.delete_process(process_id)\n                    logger.info(f\"Successfully
      {resource_class.__name__} records associated with process {process_id}\")\n
      \               else:\n                    logger.debug(f\"No deletion hook
      for {resource_class}\")\n            else:\n                logger.debug(f\"Skipping
      non root reference {r.metadata.name}\")\n\n        await ProcessDoc.delete(_id=process_id)\n
      \       return num_deleted + 1\n\n    async def list_processes(\n        self,\n
      \       request: Request,\n        limit: int = 20,\n        skip: int = 0,\n
      \       sort: typing.Literal[\"ascending\", \"descending\"] = \"ascending\",\n
      \   ):\n        query = dict(agent=self.name)\n        count = await AgentOS.symbolic_memory.count(ProcessDoc.collection,
      query)\n        cursor = AgentOS.symbolic_memory.find(\n            ProcessDoc.collection,
      query, sort=dict(updated=1 if sort == \"ascending\" else -1), skip=skip\n        )\n
      \       acc = []\n        async for doc in cursor:\n            process = ProcessDoc.model_validate(doc)\n
      \           acc.append(\n                StateSummary(\n                    process_id=process.record_id,\n
      \                   state=process.state,\n                    available_actions=self.get_available_actions(process.state),\n
      \               )\n            )\n            if len(acc) == limit:\n                break\n
      \       if len(acc) + skip <= count:\n            next_page_url = f\"{request.url}agents/{self.name}/processes/?limit={limit}&skip={skip
      + limit}\"\n        else:\n            next_page_url = None\n        return
      JSONResponse(\n            ListProcessesResponse(\n                total=count,\n
      \               processes=acc,\n                next=next_page_url,\n            ).model_dump(),\n
      \           200,\n        )\n\n    def doc_to_response(self, latest_record:
      ProcessDoc, data: typing.Any):\n        if not latest_record:\n            return
      JSONResponse(dict(detail=\"Process not found\"), 404)\n        elif (\n            latest_record.state
      == \"unhandled_error\"\n            or latest_record.state == \"http_error\"\n
      \           or latest_record.state == \"error\"\n        ):\n            detail
      = latest_record.error_info\n            status_code = 500\n            if isinstance(latest_record.error_info,
      dict):\n                detail = latest_record.error_info.get(\"detail\", latest_record.error_info)\n
      \               status_code = latest_record.error_info.get(\"status_code\",
      500)\n            return JSONResponse(detail, status_code)\n        else:\n
      \           return JSONResponse(\n                SyncStateResponse(\n                    process_id=latest_record.record_id,\n
      \                   state=latest_record.state,\n                    data=data,\n
      \                   available_actions=self.get_available_actions(latest_record.state),\n
      \               ).model_dump(),\n                200,\n            )\n\n    def
      get_available_actions(self, state):\n        return [action for action, handler
      in self.actions.items() if state in handler.extra[\"allowed_states\"]]\n\n    async
      def get_latest_process_event(self, process_id) -> ProcessDoc:\n        return
      await ProcessDoc.find_one(query=dict(_id=process_id, agent=self.name), sort=dict(updated=-1))\n\n
      \   def create_response_model(self, handler: FnHandler):\n        # if we want,
      we can calculate the literal state and allowed actions statically for most actions.
      Not for now though.\n        fields = {key: (fieldinfo.annotation, fieldinfo)
      for key, fieldinfo in SyncStateResponse.model_fields.items()}\n        return_type
      = handler.output_model_fn(self.agent, handler)\n        if inspect.isclass(return_type)
      and issubclass(return_type, AgentState):\n            return_type = return_type.model_fields[\"data\"].annotation\n
      \       fields[\"data\"] = (\n            return_type,\n            Field(...,
      description=fields[\"data\"][1].description),\n        )\n        return create_model(f\"{handler.name.capitalize()}ResponseModel\",
      **fields)\n"
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Length:
      - '5179'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:29:23 GMT
      ETag:
      - W/"5b33fe942ea35c7a18b27a1c4596a66859696762a92c8dc9dd02eceba2003b09"
      Expires:
      - Tue, 20 Feb 2024 21:34:23 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - 0b6ac59b102d3beb6ec832f117df9e487c95222b
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - 3078:255533:BBC34:10F659:65D519B2
      X-Served-By:
      - cache-bfi-kbfi7400098-BFI
      X-Timer:
      - S1708464563.102057,VS0,VE165
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/agent/doc_manager/parsers/code_ast_parsers/__init__.py
  response:
    content: ''
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:29:23 GMT
      ETag:
      - W/"938f66ede415ccb10764da47cd5f3cfc076c07b8791c708cfa8ec54982197c1f"
      Expires:
      - Tue, 20 Feb 2024 21:34:23 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - ea8160956db5be619f8588aeabcfb2230b70b4d3
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - 69A0:3A0E8E:0F70:17A4:65D519AD
      X-Served-By:
      - cache-bfi-krnt7300086-BFI
      X-Timer:
      - S1708464563.142905,VS0,VE142
      X-XSS-Protection:
      - 1; mode=block
      transfer-encoding:
      - chunked
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/system/fn_handler.py
  response:
    content: "from __future__ import annotations\n\nimport inspect\nimport typing\nfrom
      dataclasses import dataclass\n\nfrom pydantic import BaseModel, Field, create_model\nfrom
      pydantic.fields import FieldInfo\n\n\n@dataclass\nclass FnHandler:\n    name:
      str\n    fn: callable\n    description: typing.Callable[[object, FnHandler],
      str]\n    input_model_fn: typing.Callable[[object, FnHandler], typing.Type[BaseModel]]\n
      \   output_model_fn: typing.Callable[[object, FnHandler], type]\n    extra:
      dict\n\n\ndef register_handler(\n    name: str = None,\n    description: str
      | typing.Optional[typing.Callable[[object, FnHandler], str]] = None,\n    input_model:
      typing.Optional[typing.Callable[[object, FnHandler], BaseModel]] = None,\n    output_model:
      typing.Optional[typing.Callable[[object, FnHandler], typing.Any]] = None,\n
      \   **extra,\n):\n    if isinstance(description, str):\n        docs_fn = lambda
      fn: lambda self, handler: description  # noqa: E731\n    elif description is
      None:\n        docs_fn = lambda fn: lambda self, handler: fn.__doc__  # noqa:
      E731\n    else:\n        docs_fn = lambda fn: description  # noqa: E731\n    return
      lambda fn: _add_handler(\n        fn,\n        FnHandler(\n            name=name
      or fn.__name__,\n            description=docs_fn(fn),\n            fn=fn,\n
      \           input_model_fn=input_model or get_input_model,\n            output_model_fn=output_model
      or get_output_model,\n            extra=extra,\n        ),\n    )\n\n\ndef _add_handler(fn,
      handler):\n    if not (inspect.iscoroutinefunction(fn) or inspect.isasyncgenfunction(fn)):\n
      \       raise ValueError(\"Handler must be an async function\")\n    try:\n
      \       handlers = getattr(fn, \"eidolon_handlers\")\n    except AttributeError:\n
      \       handlers = []\n        setattr(fn, \"eidolon_handlers\", handlers)\n
      \   handlers.append(handler)\n    return fn\n\n\ndef get_input_model(_obj, handler:
      FnHandler) -> typing.Type[BaseModel]:\n    sig = inspect.signature(handler.fn).parameters\n
      \   hints = typing.get_type_hints(handler.fn, include_extras=True)\n    fields
      = {}\n    for param, hint in filter(lambda tu: tu[0] != \"return\", hints.items()):\n
      \       if hasattr(hint, \"__metadata__\") and isinstance(hint.__metadata__[0],
      FieldInfo):\n            field: FieldInfo = hint.__metadata__[0]\n            if
      getattr(sig[param].default, \"__name__\", None) != \"_empty\":\n                field.default
      = sig[param].default\n            fields[param] = (hint.__origin__, field)\n
      \       elif isinstance(sig[param].default, FieldInfo):\n            fields[param]
      = (hint, sig[param].default)\n        else:\n            # _empty default isn't
      being handled by create_model properly (still optional when it should be required)\n
      \           field = (\n                Field()\n                if getattr(sig[param].default,
      \"__name__\", None) == \"_empty\"\n                else Field(default=sig[param].default)\n
      \           )\n            fields[param] = (hint, field)\n    input_model =
      create_model(f\"{handler.name.capitalize()}InputModel\", **fields)\n    return
      input_model\n\n\ndef get_output_model(_obj, handler: FnHandler):\n    return
      typing.get_type_hints(handler.fn, include_extras=True).get(\"return\", typing.Any)\n\n\ndef
      get_handlers(obj) -> typing.List[FnHandler]:\n    acc = []\n    for name in
      dir(obj):\n        if hasattr(getattr(obj, name), \"eidolon_handlers\"):\n            acc.extend(getattr(getattr(obj,
      name), \"eidolon_handlers\"))\n    return acc\n"
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Length:
      - '1078'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:29:23 GMT
      ETag:
      - W/"7e67cb5839d8b35bcd5115de49a1ee9d42b3b262d9ffff3fe336269c3f0e3b01"
      Expires:
      - Tue, 20 Feb 2024 21:34:23 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - 2be79248fb7636130909f4cfaa5e5713d965f014
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - E9D8:254203:B5C61:109687:65D519B0
      X-Served-By:
      - cache-bfi-kbfi7400020-BFI
      X-Timer:
      - S1708464563.159067,VS0,VE149
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/agent/doc_manager/parsers/code_ast_parsers/base_ast_generator.py
  response:
    content: "from abc import ABC, abstractmethod\nfrom typing import List\n\n\nclass
      CodeASTGenerator(ABC):\n    def __init__(self, code: str):\n        self.code
      = code\n\n    def is_valid(self) -> bool:\n        return True\n\n    @abstractmethod\n
      \   def simplify_code(self) -> str:\n        raise NotImplementedError()  #
      pragma: no cover\n\n    @abstractmethod\n    def extract_functions_classes(self)
      -> List[str]:\n        raise NotImplementedError()  # pragma: no cover\n"
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Length:
      - '245'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:29:23 GMT
      ETag:
      - W/"c7f74bd506f10a4de4f8cd24c6c217062036349bae47e775d6ae8338d4055fda"
      Expires:
      - Tue, 20 Feb 2024 21:34:23 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - 5e61602464f0fb1730cf161d7f5afec59fed8d37
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - AB98:250E33:B095D:104399:65D519B2
      X-Served-By:
      - cache-bfi-krnt7300028-BFI
      X-Timer:
      - S1708464563.176105,VS0,VE133
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/system/processes.py
  response:
    content: "import bson\nimport logging\nfrom datetime import datetime\nfrom pydantic
      import BaseModel\nfrom pymongo.errors import DuplicateKeyError\nfrom typing
      import ClassVar, Any, cast, AsyncIterable, Optional, Dict\n\nfrom eidolon_ai_sdk.agent_os
      import AgentOS\nfrom eidolon_ai_sdk.io.events import StreamEvent\n\n\nclass
      MongoDoc(BaseModel, extra=\"allow\"):\n    collection: ClassVar[str]\n    created:
      str = None\n    updated: str = None\n\n    @property\n    def record_id(self):\n
      \       return self._id\n\n    @classmethod\n    async def find_one(cls, **kwargs):\n
      \       doc = await AgentOS.symbolic_memory.find_one(cls.collection, **kwargs)\n
      \       if doc:\n            return cls.model_validate(doc)\n        else:\n
      \           return None\n\n    @classmethod\n    async def find(cls, **kwargs):\n
      \       docs = AgentOS.symbolic_memory.find(cls.collection, **kwargs)\n        async
      for doc in docs:\n            yield cls.model_validate(doc)\n\n    @classmethod\n
      \   async def create(cls, **data):\n        t = datetime.now().isoformat()\n
      \       if \"created\" not in data:\n            data[\"created\"] = t\n        if
      \"updated\" not in data:\n            data[\"updated\"] = t\n        if \"_id\"
      not in data:\n            data[\"_id\"] = str(bson.ObjectId())\n        doc
      = cls(**data)\n        await AgentOS.symbolic_memory.insert_one(cls.collection,
      doc.model_dump())\n        return doc\n\n    async def update(self, **data):\n
      \       data = dict(**data, updated=datetime.now().isoformat())\n        query
      = {\"_id\": self.record_id, \"updated\": self.updated}\n        try:\n            await
      AgentOS.symbolic_memory.upsert_one(self.collection, query=query, document=data)\n
      \       except DuplicateKeyError:\n            raise ValueError(f\"{self.__class__.__name__}
      record {self.record_id} has been updated since last read\")\n        dump =
      self.model_dump()\n        dump.update(**data)\n        return self.__class__.model_validate(dump)\n\n
      \   @classmethod\n    async def delete(cls, _id: str):\n        await AgentOS.symbolic_memory.delete(cls.collection,
      {\"_id\": _id})\n\n\nclass ProcessDoc(MongoDoc):\n    collection = \"processes\"\n
      \   metadata: dict = {}\n    agent: str\n    state: str\n    error_info: Optional[Any]
      = None\n    title: Optional[str] = None\n\n\nasync def store_events(agent: str,
      process_id: str, events: list[StreamEvent]):\n    try:\n        stored_events
      = []\n        for event_num, event in enumerate(events):\n            event_obj:
      Dict[str, Any] = {\n                **event.model_dump(),\n                \"__process_id\":
      process_id,\n                \"__agent\": agent,\n                \"__create_time\":
      datetime.now().timestamp(),\n                \"__event_id\": event_num,\n            }\n
      \           event_obj[\"category\"] = event_obj[\"category\"].value\n            if
      hasattr(event_obj[\"event_type\"], \"value\"):\n                event_obj[\"event_type\"]
      = event_obj[\"event_type\"].value\n            event_obj[\"category\"] = str(event_obj[\"category\"])\n
      \           stored_events.append(event_obj)\n\n        await AgentOS.symbolic_memory.insert(\"process_events\",
      stored_events)\n    except Exception as e:\n        # todo, depending on why
      this fails, we should try to store an error event. Connection vs parsing error\n
      \       logging.getLogger(\"eidolon\").exception(f\"Error storing events {e}\")\n\n\nasync
      def load_events(agent: str, process_id: str):\n    query = {\"__agent\": agent,
      \"__process_id\": process_id}\n    order = {\"__create_time\": 1, \"__event_id\":
      1}\n    events = cast(AsyncIterable[dict[str, Any]], AgentOS.symbolic_memory.find(\"process_events\",
      query, sort=order))\n\n    events_arr = [event async for event in events]\n
      \   for event in events_arr:\n        del event[\"_id\"]\n        del event[\"__process_id\"]\n
      \       del event[\"__create_time\"]\n        del event[\"__event_id\"]\n        del
      event[\"__agent\"]\n        if not event[\"stream_context\"]:\n            del
      event[\"stream_context\"]\n    return events_arr\n"
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Length:
      - '1259'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:29:23 GMT
      ETag:
      - W/"5d3adb6fb8565d54934e575e7ae0511c42bad2138a40ea25138612f89c9a1ba1"
      Expires:
      - Tue, 20 Feb 2024 21:34:23 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - 8f440fa7aace97ccc9abb3dac6256ea4671db233
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - 4414:283009:73013:AAF24:65D519B3
      X-Served-By:
      - cache-bfi-krnt7300058-BFI
      X-Timer:
      - S1708464563.195882,VS0,VE139
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/system/reference_model.py
  response:
    content: "from __future__ import annotations\n\nimport copy\nimport logging\nfrom
      typing import TypeVar, Generic, Type, Annotated, Optional, ClassVar\n\nfrom
      pydantic import BaseModel, model_validator, Field, ConfigDict\n\nfrom eidolon_ai_sdk.agent_os
      import AgentOS\nfrom eidolon_ai_sdk.system.resources.reference_resource import
      ReferenceResource\nfrom eidolon_ai_sdk.util.class_utils import for_name, fqn\n\nT
      = TypeVar(\"T\", bound=BaseModel)\n\n\nclass Specable(Generic[T]):\n    \"\"\"\n
      \   A generic type which can be used to describe a specable type. Specable types
      are expected to accept \"spec\" in kwarg.\n    If Specable is not used, There
      will be no spec validation and the spec will be passed through as-is.\n    \"\"\"\n\n
      \   spec: T\n\n    def __init__(self, spec: T, **kwargs: object):\n        self.spec
      = spec\n\n\nB = TypeVar(\"B\")\nD = TypeVar(\"D\")\n\n\nclass Reference(BaseModel):\n
      \   \"\"\"\n    Used to create references to other classes. t is designed to
      be used with two type variables, `B` and `D` which are\n    the type bound and
      default type respectively. Neither are required, and if only one type is provided
      it is assumed\n    to be the bound. Bound is used as the default if no default
      is provided. default can also be a string which will be\n    looked up from
      the OS ReferenceResources.\n\n    Examples:\n        Reference(implementation=fqn(Foo)
      \                          # Returns an instance of Foo\n        Reference[FooBase](implementation=fqn(Foo)).instantiate()
      \  # Returns an instance of Foo\n        Reference[FooBase](implementation=fqn(Bar))
      \                # Raises ValueError\n        Reference[FooBase, Foo]().instantiate()
      \                    # Returns an instance of Foo\n        Reference[FooBase]().instantiate()
      \                         # Returns an instance of FooBase\n\n    Attributes:\n
      \       _bound: This is a type variable `B` that represents the bound type of
      the reference. It defaults to `object`.\n        _default: This is a type variable
      `D` that represents the default type of the reference. It defaults to `None`.\n
      \       implementation: This is a string that represents the fully qualified
      name of the class that the reference points to. It is optional and can be set
      to `None`.\n        **extra: This is a dictionary that can hold any additional
      specifications for the reference. It is optional and can be set to `None`.\n\n
      \   Methods:\n        instantiate: This method is used to create an instance
      of the class that the reference points to.\n    \"\"\"\n\n    _bound: ClassVar[Type[B]]
      = object\n    _default: ClassVar[Type[D] | str] = None\n    implementation:
      str = None\n\n    model_config = ConfigDict(\n        extra=\"allow\",\n    )\n\n
      \   def __class_getitem__(cls, params):\n        if not isinstance(params, tuple):\n
      \           params = (params, params)\n\n        class _Reference(cls):\n            _bound
      = params[0]\n            _default = params[1]\n\n            @model_validator(mode=\"before\")\n
      \           def _dump_ref(cls, value):\n                return value.model_dump(exclude_defaults=True)
      if isinstance(value, Reference) else value\n\n        return _Reference\n\n
      \   @model_validator(mode=\"before\")\n    def _transform(cls, value):\n        if
      isinstance(value, str):\n            impl = value\n            spec = {}\n        else:\n
      \           spec = value.model_dump(exclude_defaults=True) if isinstance(value,
      BaseModel) else copy.deepcopy(value)\n            impl = spec.pop(\"implementation\",
      fqn(cls._default) if isinstance(cls._default, type) else cls._default)\n            if
      not impl:\n                raise ValueError(f'Unable to determine implementation
      for \"{value}\"')\n\n        impl, spec = cls._expand(impl, spec)\n        return
      dict(implementation=impl, **spec)\n\n    @classmethod\n    def _merge(cls, d1,
      d2):\n        for k, v in d1.items():\n            if isinstance(v, dict):\n
      \               d2[k] = d2.get(k, {})\n                cls._merge(v, d2.get(k,
      {}))\n            else:\n                d2[k] = v\n\n    @classmethod\n    def
      _expand(cls, impl, extra):\n        ref = AgentOS.get_resource(ReferenceResource,
      impl, default=None)\n        if not ref:\n            return impl, extra\n        else:\n
      \           inner_spec = copy.deepcopy(ref.spec)\n            impl = inner_spec.pop(\"implementation\")\n
      \           cls._merge(extra or {}, inner_spec)\n            return cls._expand(impl,
      inner_spec)\n\n    @model_validator(mode=\"after\")\n    def _validate(self):\n
      \       reference_class = self._get_reference_class()\n        spec_type = self.get_spec_type(reference_class)\n
      \       if spec_type:\n            spec_type.model_validate(self.model_extra
      or {})\n        elif issubclass(reference_class, BaseModel):\n            reference_class.model_validate(self.model_extra
      or {})\n        return self\n\n    @staticmethod\n    def get_spec_type(reference_class)
      -> Optional[Type[BaseModel]]:\n        if issubclass(reference_class, Specable):\n
      \           bases = getattr(reference_class, \"__orig_bases__\", [])\n            specable
      = next(\n                (base for base in bases if getattr(base, \"__origin__\",
      None) is Specable),\n                None,\n            )\n            if specable:\n
      \               return specable.__args__[0]\n            else:\n                logging.warning(f'Unable
      to find Specable definition on \"{reference_class}\", skipping validation')\n
      \               return None\n        return None\n\n    def _get_reference_class(self):\n
      \       return for_name(self.implementation, self._bound or object)\n\n    def
      instantiate(self, *args, **kwargs):\n        reference_class = self._get_reference_class()\n
      \       spec_type = self.get_spec_type(reference_class)\n        if spec_type:\n
      \           kwargs[\"spec\"] = spec_type.model_validate(self.model_extra or
      {})\n        elif issubclass(reference_class, BaseModel):\n            for k,
      v in (self.model_extra or {}).items():\n                kwargs[k] = v\n        elif
      self.model_extra:\n            kwargs[\"spec\"] = self.model_extra\n\n        return
      self._get_reference_class()(*args, **kwargs)\n\n\nclass AnnotatedReference(Reference):\n
      \   \"\"\"\n    Helper class to manage References with defaults.\n\n    Default
      is set to the class name, which should be as a builtin pointing to the FQN of
      the class\n\n    Example:\n        class MySpec(BaseModel):\n            ref1:
      AnnotatedReference[MyBound] = Field(description=\"My description\")\n\n    Note:\n
      \       The description can still be added via a Field annotation without affecting
      default behavior\n    \"\"\"\n\n    def __class_getitem__(cls, params) -> Type[Reference]:\n
      \       if not isinstance(params, tuple):\n            params = (params, params.__name__)\n
      \       return Annotated[Reference[params], Field(default_factory=Reference[params])]\n"
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Length:
      - '2065'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:29:23 GMT
      ETag:
      - W/"3aa0bef36ee8a188f8e19da4d829f0ed54efbafec1c31c828bec6fc5acaa078c"
      Expires:
      - Tue, 20 Feb 2024 21:34:23 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - 49f032b863ab0494e01ba470373146fbe66280af
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - C66C:30F250:17E89:21806:65D519B3
      X-Served-By:
      - cache-bfi-kbfi7400044-BFI
      X-Timer:
      - S1708464563.228569,VS0,VE116
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/agent/doc_manager/parsers/code_ast_parsers/cobol.py
  response:
    content: "import re\nfrom typing import Callable, List\n\nfrom eidolon_ai_sdk.agent.doc_manager.parsers.code_ast_parsers.base_ast_generator
      import CodeASTGenerator\n\n\nclass CobolASTGenerator(CodeASTGenerator):\n    PARAGRAPH_PATTERN
      = re.compile(r\"^[A-Z0-9\\-]+(\\s+.*)?\\.$\", re.IGNORECASE)\n    DIVISION_PATTERN
      = re.compile(r\"^\\s*(IDENTIFICATION|DATA|PROCEDURE|ENVIRONMENT)\\s+DIVISION.*$\",
      re.IGNORECASE)\n    SECTION_PATTERN = re.compile(r\"^\\s*[A-Z0-9\\-]+\\s+SECTION.$\",
      re.IGNORECASE)\n\n    def __init__(self, code: str):\n        super().__init__(code)\n
      \       self.source_lines: List[str] = self.code.splitlines()\n\n    def is_valid(self)
      -> bool:\n        # Identify presence of any division to validate COBOL code\n
      \       return any(self.DIVISION_PATTERN.match(line) for line in self.source_lines)\n\n
      \   def _extract_code(self, start_idx: int, end_idx: int) -> str:\n        return
      \"\\n\".join(self.source_lines[start_idx:end_idx]).rstrip(\"\\n\")\n\n    #
      noinspection PyMethodMayBeStatic\n    def _is_relevant_code(self, line: str)
      -> bool:\n        \"\"\"Check if a line is part of the procedure division or
      a relevant section.\"\"\"\n        if \"PROCEDURE DIVISION\" in line.upper():\n
      \           return True\n        # Add additional conditions for relevant sections
      if needed\n        return False\n\n    def _process_lines(self, func: Callable)
      -> List[str]:\n        \"\"\"A generic function to process COBOL lines based
      on provided func.\"\"\"\n        elements: List[str] = []\n        start_idx
      = None\n        inside_relevant_section = False\n\n        for i, line in enumerate(self.source_lines):\n
      \           if self._is_relevant_code(line):\n                inside_relevant_section
      = True\n\n            if inside_relevant_section and (\n                self.PARAGRAPH_PATTERN.match(line.strip().split(\"
      \")[0]) or self.SECTION_PATTERN.match(line.strip())\n            ):\n                if
      start_idx is not None:\n                    func(elements, start_idx, i)\n                start_idx
      = i\n\n        # Handle the last element if exists\n        if start_idx is
      not None:\n            func(elements, start_idx, len(self.source_lines))\n\n
      \       return elements\n\n    def extract_functions_classes(self) -> List[str]:\n
      \       def extract_func(elements: List[str], start_idx: int, end_idx: int)
      -> None:\n            elements.append(self._extract_code(start_idx, end_idx))\n\n
      \       return self._process_lines(extract_func)\n\n    def simplify_code(self)
      -> str:\n        simplified_lines: List[str] = []\n        inside_relevant_section
      = False\n        omitted_code_added = False  # To track if \"* OMITTED CODE
      *\" has been added after the last header\n\n        for line in self.source_lines:\n
      \           is_header = (\n                \"PROCEDURE DIVISION\" in line\n
      \               or \"DATA DIVISION\" in line\n                or \"IDENTIFICATION
      DIVISION\" in line\n                or self.PARAGRAPH_PATTERN.match(line.strip().split(\"
      \")[0])\n                or self.SECTION_PATTERN.match(line.strip())\n            )\n\n
      \           if is_header:\n                inside_relevant_section = True\n
      \               # Reset the flag since we're entering a new section/division
      or\n                # paragraph\n                omitted_code_added = False\n\n
      \           if inside_relevant_section:\n                if is_header:\n                    #
      Add header and reset the omitted code added flag\n                    simplified_lines.append(line)\n
      \               elif not omitted_code_added:\n                    # Add omitted
      code comment only if it hasn't been added directly\n                    # after
      the last header\n                    simplified_lines.append(\"* OMITTED CODE
      *\")\n                    omitted_code_added = True\n\n        return \"\\n\".join(simplified_lines)\n"
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Length:
      - '1202'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:29:23 GMT
      ETag:
      - W/"d6b4b98fc4738e1cffe6ccf5e9a4c9700c4150721d87ccc116cfc90d98ed7ecc"
      Expires:
      - Tue, 20 Feb 2024 21:34:23 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - ab043a2bc6a92f70c3d99a98297e6e0e55efa9c0
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - DF2C:252D29:B569A:109083:65D519B0
      X-Served-By:
      - cache-bfi-krnt7300051-BFI
      X-Timer:
      - S1708464563.213183,VS0,VE140
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/agent/doc_manager/parsers/code_ast_parsers/javascript.py
  response:
    content: "from typing import Any, List\n\nfrom eidolon_ai_sdk.agent.doc_manager.parsers.code_ast_parsers.base_ast_generator
      import CodeASTGenerator\n\n\nclass JavaScriptASTGenerator(CodeASTGenerator):\n
      \   def __init__(self, code: str):\n        super().__init__(code)\n        self.source_lines
      = self.code.splitlines()\n\n        try:\n            import esprima  # noqa:
      F401\n        except ImportError:\n            raise ImportError(\n                \"Could
      not import esprima Python package. \" \"Please install it with `pip install
      esprima`.\"\n            )\n\n    def is_valid(self) -> bool:\n        import
      esprima\n\n        try:\n            esprima.parseScript(self.code)\n            return
      True\n        except esprima.Error:\n            return False\n\n    def _extract_code(self,
      node: Any) -> str:\n        start = node.loc.start.line - 1\n        end = node.loc.end.line\n
      \       return \"\\n\".join(self.source_lines[start:end])\n\n    def extract_functions_classes(self)
      -> List[str]:\n        import esprima\n\n        tree = esprima.parseScript(self.code,
      loc=True)\n        functions_classes = []\n\n        for node in tree.body:\n
      \           if isinstance(\n                node,\n                (esprima.nodes.FunctionDeclaration,
      esprima.nodes.ClassDeclaration),\n            ):\n                functions_classes.append(self._extract_code(node))\n\n
      \       return functions_classes\n\n    def simplify_code(self) -> str:\n        import
      esprima\n\n        tree = esprima.parseScript(self.code, loc=True)\n        simplified_lines
      = self.source_lines[:]\n\n        for node in tree.body:\n            if isinstance(\n
      \               node,\n                (esprima.nodes.FunctionDeclaration, esprima.nodes.ClassDeclaration),\n
      \           ):\n                start = node.loc.start.line - 1\n                simplified_lines[start]
      = f\"// Code for: {simplified_lines[start]}\"\n\n                for line_num
      in range(start + 1, node.loc.end.line):\n                    simplified_lines[line_num]
      = None  # type: ignore\n\n        return \"\\n\".join(line for line in simplified_lines
      if line is not None)\n"
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Length:
      - '690'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:29:23 GMT
      ETag:
      - W/"9c53f669eaa88f95108dfe97b89863c953a70557b8aae6c3aeb861b3b9a71f36"
      Expires:
      - Tue, 20 Feb 2024 21:34:23 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - aacc8da4316dc75d5faac4904d07ea63e2bd8fde
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - 273E:2587A7:B2D5B:106789:65D519B1
      X-Served-By:
      - cache-bfi-krnt7300027-BFI
      X-Timer:
      - S1708464563.245034,VS0,VE118
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/system/resources?ref=main
  response:
    content: '[{"name":"__init__.py","path":"sdk/eidolon_ai_sdk/system/resources/__init__.py","sha":"e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/system/resources/__init__.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/system/resources/__init__.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/system/resources/__init__.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/system/resources/__init__.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/system/resources/__init__.py"}},{"name":"agent_resource.py","path":"sdk/eidolon_ai_sdk/system/resources/agent_resource.py","sha":"3c3a478e2529956d087dce4f1c03813daa09bbae","size":282,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/system/resources/agent_resource.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/system/resources/agent_resource.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/3c3a478e2529956d087dce4f1c03813daa09bbae","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/system/resources/agent_resource.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/system/resources/agent_resource.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/3c3a478e2529956d087dce4f1c03813daa09bbae","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/system/resources/agent_resource.py"}},{"name":"machine_resource.py","path":"sdk/eidolon_ai_sdk/system/resources/machine_resource.py","sha":"5e0b827975c5af51b434bebbe9388dc90144d172","size":414,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/system/resources/machine_resource.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/system/resources/machine_resource.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/5e0b827975c5af51b434bebbe9388dc90144d172","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/system/resources/machine_resource.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/system/resources/machine_resource.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/5e0b827975c5af51b434bebbe9388dc90144d172","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/system/resources/machine_resource.py"}},{"name":"reference_resource.py","path":"sdk/eidolon_ai_sdk/system/resources/reference_resource.py","sha":"a9756f338876be53f64be89ad556ac306e7dd3c8","size":684,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/system/resources/reference_resource.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/system/resources/reference_resource.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/a9756f338876be53f64be89ad556ac306e7dd3c8","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/system/resources/reference_resource.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/system/resources/reference_resource.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/a9756f338876be53f64be89ad556ac306e7dd3c8","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/system/resources/reference_resource.py"}},{"name":"resources_base.py","path":"sdk/eidolon_ai_sdk/system/resources/resources_base.py","sha":"178164ab591fc3c493b21f60829df4805b950596","size":1471,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/system/resources/resources_base.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/system/resources/resources_base.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/178164ab591fc3c493b21f60829df4805b950596","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/system/resources/resources_base.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/system/resources/resources_base.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/178164ab591fc3c493b21f60829df4805b950596","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/system/resources/resources_base.py"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:29:23 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E55B:2542CD:142C6C:1D933B:65D519B3
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4593'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '407'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/system/request_context.py
  response:
    content: "from __future__ import annotations\n\nfrom contextvars import ContextVar\nfrom
      typing import Any, Dict\nfrom urllib.request import Request\n\nfrom pydantic
      import BaseModel\nfrom starlette.middleware.base import BaseHTTPMiddleware\n\nfrom
      eidolon_ai_sdk.util.logger import logger\n\n_request_context = ContextVar(\"request_context\")\n\n\nclass
      _Record(BaseModel):\n    key: str\n    value: str\n    propagate: bool\n\n\ndef
      _get_context() -> Dict[str, _Record]:\n    try:\n        return _request_context.get()\n
      \   except LookupError:\n        _request_context.set(dict())\n        return
      _request_context.get()\n\n\nclass _RequestContextMeta(type):\n    def __getitem__(self,
      key):\n        return _get_context()[key].value\n\n    def __repr__(self):\n
      \       return repr(_get_context())\n\n    def __delitem__(self, key):\n        del
      _get_context()[key]\n\n    @staticmethod\n    def set(key: str, value: str |
      Any, propagate=False):\n        logger.debug(f\"setting context {key}={value},
      propagate={propagate}\")\n\n        if propagate and not isinstance(value, str):\n
      \           raise ValueError(\"can only propagate string values\")\n        if
      \",\" in key:\n            raise ValueError(\"key cannot contain commas\")\n
      \       _get_context()[key] = _Record(key=key, value=value, propagate=propagate)\n\n
      \   def get(self, key, default=None):\n        context = _get_context()\n        if
      default is ... and key not in context:\n            raise KeyError(key)\n        return
      self[key] if key in context else default\n\n    @property\n    def headers(self):\n
      \       to_propagate = {v.key: v.value for v in _get_context().values() if v.propagate}\n
      \       if to_propagate:\n            to_propagate[\"X-Eidolon-Context\"] =
      \",\".join(f\"{k}\" for k in to_propagate.keys())\n        return to_propagate\n\n\nclass
      RequestContext(metaclass=_RequestContextMeta):\n    pass\n\n\nclass ContextMiddleware(BaseHTTPMiddleware):\n
      \   async def dispatch(self, request: Request, call_next):\n        context_headers
      = request.headers.get(\"X-Eidolon-Context\", \"\") or []\n        if context_headers:\n
      \           context_headers = context_headers.split(\",\")\n        for header
      in context_headers:\n            try:\n                RequestContext.set(header,
      request.headers[header], propagate=True)\n            except KeyError:\n                logger.warning(f\"Expected
      context header {header} not found\")\n\n        return await call_next(request)\n"
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Length:
      - '881'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:29:23 GMT
      ETag:
      - W/"38f97fdcbb7418526ddda91d40ad90020d9f757c5594f5aee9561e8d76ab9490"
      Expires:
      - Tue, 20 Feb 2024 21:34:23 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - 22ddd80b2991ee80ceaa33fd7c6875b59d1c2063
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - 96F0:257E5B:B7777:10B173:65D519B2
      X-Served-By:
      - cache-bfi-krnt7300023-BFI
      X-Timer:
      - S1708464563.273271,VS0,VE142
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/util/__init__.py
  response:
    content: ''
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:29:23 GMT
      ETag:
      - W/"938f66ede415ccb10764da47cd5f3cfc076c07b8791c708cfa8ec54982197c1f"
      Expires:
      - Tue, 20 Feb 2024 21:34:23 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - b57b7a647a9b4ae78fe5e22b72fb87c01c55c51e
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - 2BE8:27706C:8C8B1:CE3D9:65D519B2
      X-Served-By:
      - cache-bfi-kbfi7400061-BFI
      X-Timer:
      - S1708464563.362749,VS0,VE125
      X-XSS-Protection:
      - 1; mode=block
      transfer-encoding:
      - chunked
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/agent/doc_manager/parsers/code_ast_parsers/programing_language_parser.py
  response:
    content: "from typing import Dict, Any, Literal, Iterable, Optional\n\nfrom eidolon_ai_sdk.agent.doc_manager.parsers.base_parser
      import DocumentParserSpec, DocumentParser, DataBlob\nfrom eidolon_ai_sdk.agent.doc_manager.parsers.code_ast_parsers.cobol
      import CobolASTGenerator\nfrom eidolon_ai_sdk.agent.doc_manager.parsers.code_ast_parsers.javascript
      import JavaScriptASTGenerator\nfrom eidolon_ai_sdk.agent.doc_manager.parsers.code_ast_parsers.python
      import PythonASTGenerator\nfrom eidolon_ai_sdk.agent.doc_manager.transformer.text_splitters
      import Language\nfrom eidolon_ai_sdk.memory.document import Document\nfrom eidolon_ai_sdk.system.reference_model
      import Specable\n\nLANGUAGE_EXTENSIONS: Dict[str, str] = {\n    \"py\": Language.PYTHON,\n
      \   \"js\": Language.JS,\n    \"cobol\": Language.COBOL,\n}\n\nLANGUAGE_AST_GENERATORS:
      Dict[str, Any] = {\n    Language.PYTHON: PythonASTGenerator,\n    Language.JS:
      JavaScriptASTGenerator,\n    Language.COBOL: CobolASTGenerator,\n}\n\n\nclass
      LanguageParserSpec(DocumentParserSpec):\n    language: Optional[Literal[\"python\",
      \"javascript\", \"cobol\"]] = None\n    parser_threshold: int = 0\n\n\nclass
      LanguageParser(DocumentParser, Specable[LanguageParserSpec]):\n    def __init__(self,
      spec: LanguageParserSpec):\n        super().__init__(spec)\n        self.language
      = spec.language\n        self.parser_threshold = spec.parser_threshold\n\n    def
      parse(self, blob: DataBlob) -> Iterable[Document]:\n        code = blob.as_string()\n\n
      \       language = self.language or (\n            LANGUAGE_EXTENSIONS.get(blob.path.rsplit(\".\",
      1)[-1]) if isinstance(blob.path, str) else None\n        )\n\n        if language
      is None:\n            yield Document(\n                page_content=code,\n
      \               metadata={\n                    \"source\": blob.path,\n                    \"mime_type\":
      blob.mimetype,\n                },\n            )\n            return\n\n        if
      self.parser_threshold >= len(code.splitlines()):\n            yield Document(\n
      \               page_content=code,\n                metadata={\n                    \"source\":
      blob.path,\n                    \"language\": language,\n                    \"mime_type\":
      blob.mimetype,\n                },\n            )\n            return\n\n        generator
      = LANGUAGE_AST_GENERATORS[language](blob.as_string())\n        if not generator.is_valid():\n
      \           yield Document(\n                page_content=code,\n                metadata={\n
      \                   \"source\": blob.path,\n                    \"mime_type\":
      blob.mimetype,\n                },\n            )\n            return\n\n        for
      functions_classes in generator.extract_functions_classes():\n            yield
      Document(\n                page_content=functions_classes,\n                metadata={\n
      \                   \"source\": blob.path,\n                    \"content_type\":
      \"functions_classes\",\n                    \"language\": language,\n                    \"mime_type\":
      blob.mimetype,\n                },\n            )\n        yield Document(\n
      \           page_content=generator.simplify_code(),\n            metadata={\n
      \               \"source\": blob.path,\n                \"content_type\": \"simplified_code\",\n
      \               \"language\": language,\n                \"mime_type\": blob.mimetype,\n
      \           },\n        )\n"
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Length:
      - '842'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:29:23 GMT
      ETag:
      - W/"6779004c1c4c6d7d0c3df068dc26882b531d65c3925c691d1e43be8bec27e442"
      Expires:
      - Tue, 20 Feb 2024 21:34:23 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - 0d0af06324a2b546b7687e19a08f2f8c117704a5
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - 2ABE:254203:B5C64:10968A:65D519B2
      X-Served-By:
      - cache-bfi-krnt7300071-BFI
      X-Timer:
      - S1708464563.361435,VS0,VE130
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/util/async_wrapper.py
  response:
    content: "import asyncio\nfrom functools import wraps, partial\n\n\ndef make_async(func):\n
      \   \"\"\"\n    Decorator to make a sync function async and non-blocking by
      running them in a thread.\n    \"\"\"\n\n    @wraps(func)\n    async def run(*args,
      **kwargs):\n        loop = asyncio.get_event_loop()\n        # use default ThreadPoolExecutor.
      Executor will be cached on event loop, so we don't want to manage it ourselves\n
      \       return await loop.run_in_executor(executor=None, func=(partial(func,
      *args, **kwargs)))\n\n    return run\n"
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Length:
      - '305'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:29:23 GMT
      ETag:
      - W/"dd56607644c810081e0c8432d7fabe202f0a0201c9ad4fdacd7e4da08f33659e"
      Expires:
      - Tue, 20 Feb 2024 21:34:23 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - 144786edd3e39aae65d8b6dca880aaa9d282b4b4
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - FFAA:4B35:62114C:747F87:65D519AF
      X-Served-By:
      - cache-yvr1525-YVR
      X-Timer:
      - S1708464563.357423,VS0,VE136
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/util/aiohttp.py
  response:
    content: "from typing import Any, Dict, Optional\n\nimport json\n\nfrom httpx
      import Timeout, AsyncClient, HTTPStatusError, codes\nfrom httpx_sse import EventSource\nfrom
      pydantic_core import to_jsonable_python\n\nfrom eidolon_ai_sdk.io.events import
      BaseStreamEvent\nfrom eidolon_ai_sdk.system.request_context import RequestContext\nfrom
      eidolon_ai_sdk.util.logger import logger\n\n\n# noinspection PyShadowingNames\nasync
      def get_content(url: str, json: Optional[Dict[str, Any]] = None, **kwargs):\n
      \   async with AsyncClient(timeout=Timeout(5.0, read=600.0)) as client:\n        params
      = {\"url\": url, \"headers\": RequestContext.headers}\n        if json:\n            params[\"json\"]
      = json\n        response = await client.get(**params, **kwargs)\n        response.raise_for_status()\n
      \       return response.json()\n\n\n# noinspection PyShadowingNames\nasync def
      post_content(url, json: Optional[Any] = None, **kwargs):\n    params = {\"url\":
      url, \"headers\": RequestContext.headers}\n    if json:\n        params[\"json\"]
      = to_jsonable_python(json)\n    async with AsyncClient(timeout=Timeout(5.0,
      read=600.0)) as client:\n        response = await client.post(**params, **kwargs)\n
      \       response.raise_for_status()\n        return response.json()\n\n\n# noinspection
      PyShadowingNames\nasync def delete(url, **kwargs):\n    params = {\"url\": url,
      \"headers\": RequestContext.headers}\n    async with AsyncClient(timeout=Timeout(5.0,
      read=600.0)) as client:\n        response = await client.delete(**params, **kwargs)\n
      \       response.raise_for_status()\n        return response.json()\n\n\nasync
      def stream_content(url: str, body):\n    body = to_jsonable_python(body)\n    headers
      = {\n        **RequestContext.headers,\n        \"Accept\": \"text/event-stream\",\n
      \   }\n    request = {\"url\": url, \"json\": body, \"method\": \"POST\", \"headers\":
      headers}\n    async with AsyncClient(timeout=Timeout(5.0, read=600.0)) as client:\n
      \       async with client.stream(**request) as response:\n            try:\n
      \               response.raise_for_status()\n            except HTTPStatusError
      as e:\n                raise AgentError(e.response.status_code, \"\".join([b
      async for b in e.response.aiter_text()]))\n            async for sse_event in
      EventSource(response).aiter_sse():\n                if sse_event.data:\n                    data
      = json.loads(sse_event.data)\n                    event = BaseStreamEvent.from_dict(data)\n
      \                   yield event\n                else:\n                    logger.warning(\"Empty
      event from server\")\n\n\nclass AgentError(Exception):\n    def __init__(self,
      status_code: int, message: str):\n        super().__init__(f\"{status_code}
      ({codes.get_reason_phrase(status_code)}): {message}\")\n        self.message
      = message\n        self.status_code = status_code\n"
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Length:
      - '854'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:29:23 GMT
      ETag:
      - W/"a9f7768e2076ba4a936a394fbab407a0e99d661114422062c3695f0616e66f98"
      Expires:
      - Tue, 20 Feb 2024 21:34:23 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - 3ec0038e287c11eeccce07c455a155ce58f006d5
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - 4A26:2E4C:620032:747029:65D519B1
      X-Served-By:
      - cache-yvr1531-YVR
      X-Timer:
      - S1708464563.356827,VS0,VE136
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/util/class_utils.py
  response:
    content: "import importlib\nfrom typing import Type\n\n\ndef for_name(implementation_fqn:
      str, sub_class: Type = object) -> Type:\n    \"\"\"\n    Dynamically imports
      a class and validates that it is a subclass of a specified type.\n\n    Given
      a fully qualified class name (FQN) and a subclass type, this function dynamically
      imports\n    the class from the FQN and checks whether it is a subclass of the
      specified subclass type. If the\n    class can be imported and is a verified
      subclass, the class itself is returned. Otherwise, an error\n    is raised.\n\n
      \   Parameters:\n    - implementation_fqn (str): The fully qualified name of
      the class to import, in the form 'module.ClassName'.\n    - sub_class (Type):
      The class type to check against the dynamically imported class.\n\n    Returns:\n
      \   - Type: The imported class type that is a subclass of the specified `sub_class`.\n\n
      \   Raises:\n    - ValueError: If the `implementation_fqn` is not provided,
      the class cannot be imported, the class\n                  does not exist, or
      the imported class is not a subclass of `sub_class`.\n\n    Note:\n    - The
      fully qualified name of the class is case-sensitive and must be correct.\n    \"\"\"\n\n
      \   if implementation_fqn:\n        try:\n            module_name, class_name
      = implementation_fqn.rsplit(\".\", 1)\n        except ValueError:\n            raise
      ValueError(f\"'{implementation_fqn}' is not a valid fully qualified class name.\")\n
      \       try:\n            module = importlib.import_module(module_name)\n            implementation_class
      = getattr(module, class_name)\n        except (ImportError, AttributeError)
      as e:\n            print(e)\n            raise ValueError(f\"Unable to import
      {implementation_fqn}\")\n        if implementation_class and issubclass(implementation_class,
      sub_class):\n            return implementation_class\n        else:\n            print(implementation_class)\n
      \           print(sub_class)\n            print(issubclass(implementation_class,
      sub_class))\n            raise ValueError(\n                f\"Implementation
      class '{implementation_fqn}' not found or is not a subclass of '{sub_class}'.\"\n
      \           )\n    raise ValueError(\"Implementation not provided.\")\n\n\ndef
      fqn(clazz=Type) -> str:\n    return clazz.__module__ + \".\" + clazz.__name__\n\n\ndef
      get_function_details(func):\n    function_name = func.__name__\n    owning_class
      = None\n\n    if hasattr(func, \"__self__\"):\n        # This is a bound method;
      it will have a '__self__' attribute.\n        owning_class = func.__self__.__class__.__name__\n
      \   elif hasattr(func, \"__qualname__\"):\n        # This is an unbound method
      or a function; try to parse the class name out of the __qualname__\n        qualname_parts
      = func.__qualname__.split(\".\")\n        if len(qualname_parts) > 1:\n            owning_class
      = qualname_parts[-2]\n\n    return function_name, owning_class\n"
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Length:
      - '968'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:29:23 GMT
      ETag:
      - W/"b38588cf01353c07a62540f1edaa24de195f73d0f7804d984bd4446b7a2b2d0d"
      Expires:
      - Tue, 20 Feb 2024 21:34:23 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - 7404757ab0995eec1d62726414716e012ca22a37
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - 273E:2587A7:B2D5E:10678D:65D519B3
      X-Served-By:
      - cache-bfi-kbfi7400108-BFI
      X-Timer:
      - S1708464563.374208,VS0,VE133
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/agent/doc_manager/parsers/code_ast_parsers/python.py
  response:
    content: "import ast\nfrom typing import Any, List\n\nfrom eidolon_ai_sdk.agent.doc_manager.parsers.code_ast_parsers.base_ast_generator
      import CodeASTGenerator\n\n\nclass PythonASTGenerator(CodeASTGenerator):\n    def
      __init__(self, code: str):\n        super().__init__(code)\n        self.source_lines
      = self.code.splitlines()\n\n    def is_valid(self) -> bool:\n        try:\n
      \           ast.parse(self.code)\n            return True\n        except SyntaxError:\n
      \           return False\n\n    def _extract_code(self, node: Any) -> str:\n
      \       start = node.lineno - 1\n        end = node.end_lineno\n        return
      \"\\n\".join(self.source_lines[start:end])\n\n    def extract_functions_classes(self)
      -> List[str]:\n        tree = ast.parse(self.code)\n        functions_classes
      = []\n\n        for node in ast.iter_child_nodes(tree):\n            if isinstance(node,
      (ast.FunctionDef, ast.AsyncFunctionDef, ast.ClassDef)):\n                functions_classes.append(self._extract_code(node))\n\n
      \       return functions_classes\n\n    def simplify_code(self) -> str:\n        tree
      = ast.parse(self.code)\n        simplified_lines = self.source_lines[:]\n\n
      \       for node in ast.iter_child_nodes(tree):\n            if isinstance(node,
      (ast.FunctionDef, ast.AsyncFunctionDef, ast.ClassDef)):\n                start
      = node.lineno - 1\n                simplified_lines[start] = f\"# Code for:
      {simplified_lines[start]}\"\n\n                assert isinstance(node.end_lineno,
      int)\n                for line_num in range(start + 1, node.end_lineno):\n                    simplified_lines[line_num]
      = None  # type: ignore\n\n        return \"\\n\".join(line for line in simplified_lines
      if line is not None)\n"
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Length:
      - '591'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:29:23 GMT
      ETag:
      - W/"2fa72ff57e072d388dfde4cc695e6815fc5bd0be96052db29be431e2981147c6"
      Expires:
      - Tue, 20 Feb 2024 21:34:23 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - 54558536259202b3e222fffc5b2b673c12401d44
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - 2B34:2587A7:B2D5D:10678C:65D519B1
      X-Served-By:
      - cache-bfi-krnt7300048-BFI
      X-Timer:
      - S1708464563.361681,VS0,VE144
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/util/logger.py
  response:
    content: "import logging\nimport re\n\nlogger = logging.getLogger(\"eidolon\")\n\n\nclass
      CustomFormatter(logging.Formatter):\n    def format(self, record: logging.LogRecord)
      -> str:\n        arg_pattern = re.compile(r\"%\\((\\w+)\\)\")\n        arg_names
      = [x.group(1) for x in arg_pattern.finditer(self._fmt)]\n        for field in
      arg_names:\n            if field not in record.__dict__:\n                record.__dict__[field]
      = None\n\n        return super().format(record)\n"
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Length:
      - '262'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:29:23 GMT
      ETag:
      - W/"f7cfc975ab2246c9f57444b49077fc89bb30be917c89efd637bef5a6c57834d5"
      Expires:
      - Tue, 20 Feb 2024 21:34:23 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - a4edb61345b33ac8528a832769178ed5d7700732
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - 3F6A:30F250:17E8D:21807:65D519B3
      X-Served-By:
      - cache-bfi-krnt7300027-BFI
      X-Timer:
      - S1708464563.396840,VS0,VE134
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/system/resources/agent_resource.py
  response:
    content: "from __future__ import annotations\n\nfrom typing import Literal\n\nfrom
      eidolon_ai_sdk.system.reference_model import Reference\nfrom eidolon_ai_sdk.system.resources.resources_base
      import Resource\n\n\nclass AgentResource(Resource):\n    kind: Literal[\"Agent\"]
      = \"Agent\"\n    spec: Reference\n"
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Length:
      - '171'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:35:38 GMT
      ETag:
      - W/"086dd351ec08b63012826732ba64dd98537c1582a4670f4b00579b8b59900603"
      Expires:
      - Tue, 20 Feb 2024 21:40:38 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - HIT
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - 75cb2a61f031778687c14944727c4093ff54b4cc
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - 98F6:283009:73015:AAF27:65D519B2
      X-Served-By:
      - cache-bfi-krnt7300043-BFI
      X-Timer:
      - S1708464938.415657,VS0,VE113
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/system/resources/__init__.py
  response:
    content: ''
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:35:38 GMT
      ETag:
      - W/"938f66ede415ccb10764da47cd5f3cfc076c07b8791c708cfa8ec54982197c1f"
      Expires:
      - Tue, 20 Feb 2024 21:40:38 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - HIT
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - 65658b9d960298b9e9d47a132aaf42948abd03cb
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - 2FC6:2556A2:BAB72:10E4F9:65D519B2
      X-Served-By:
      - cache-bfi-kbfi7400119-BFI
      X-Timer:
      - S1708464938.415302,VS0,VE131
      X-XSS-Protection:
      - 1; mode=block
      transfer-encoding:
      - chunked
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/system/resources/machine_resource.py
  response:
    content: "from __future__ import annotations\n\nfrom typing import Literal\n\nfrom
      eidolon_ai_sdk.system.agent_machine import AgentMachine\nfrom eidolon_ai_sdk.system.reference_model
      import AnnotatedReference\nfrom eidolon_ai_sdk.system.resources.resources_base
      import Resource, Metadata\n\n\nclass MachineResource(Resource):\n    kind: Literal[\"Machine\"]
      = \"Machine\"\n    metadata: Metadata\n    spec: AnnotatedReference[AgentMachine]\n"
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Length:
      - '210'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:35:38 GMT
      ETag:
      - W/"910a4004e5a39bacf4f4f219da5fd0ada3f2421a4f3395fc286a6eb678e8295a"
      Expires:
      - Tue, 20 Feb 2024 21:40:38 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - 742e16c7209e8e5579ad3438124268137f829a99
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - 4CF0:0343:528009:658EBF:65D51B29
      X-Served-By:
      - cache-yvr1521-YVR
      X-Timer:
      - S1708464938.432510,VS0,VE132
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/system/resources/reference_resource.py
  response:
    content: "from __future__ import annotations\n\nfrom typing import Literal, Dict,
      Any, Annotated\n\nfrom pydantic import BeforeValidator, AfterValidator\n\nfrom
      eidolon_ai_sdk.system.resources.resources_base import Resource, Metadata\n\n\ndef
      _nest_implementation(value):\n    return dict(implementation=value) if isinstance(value,
      str) else value\n\n\ndef _not_default(value: Metadata):\n    if value.name ==
      \"DEFAULT\":\n        raise ValueError(\"Must name references\")\n    return
      value\n\n\nclass ReferenceResource(Resource):\n    kind: Literal[\"Reference\"]
      = \"Reference\"\n    metadata: Annotated[Metadata, AfterValidator(_not_default)]\n
      \   spec: Annotated[Dict[str, Any], BeforeValidator(_nest_implementation)]\n"
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Length:
      - '356'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:35:38 GMT
      ETag:
      - W/"bbdab6cf127c5f772873f63fc51ebca81e9039130de4e5b807a68ccdec203eea"
      Expires:
      - Tue, 20 Feb 2024 21:40:38 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - 9f5e3e15536e3212e3bc9f6c4cf5da0a2207fbd6
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - 5888:256179:B436F:108230:65D51B2A
      X-Served-By:
      - cache-bfi-kbfi7400060-BFI
      X-Timer:
      - S1708464938.467995,VS0,VE131
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/system/resources/resources_base.py
  response:
    content: "from __future__ import annotations\n\nimport os\nfrom typing import
      List, Literal, Optional, TypeVar, Type\n\nimport yaml\nfrom pydantic import
      BaseModel\n\nfrom eidolon_ai_sdk.util.logger import logger\n\n\nclass Metadata(BaseModel):\n
      \   name: str = \"DEFAULT\"\n    annotations: List[str] = []\n    labels: List[str]
      = []\n\n\nT = TypeVar(\"T\", bound=BaseModel)\n\n\nclass Resource(BaseModel,
      extra=\"allow\"):\n    apiVersion: Literal[\"eidolon/v1\"]\n    kind: str\n
      \   metadata: Metadata = Metadata()\n\n    @classmethod\n    def kind_literal(cls)
      -> Optional[str]:\n        return getattr(cls.model_fields[\"kind\"].annotation,
      \"__args__\", [None])[0]\n\n    def promote(self, clazz: Type[T]) -> T:\n        return
      clazz.model_validate(self.model_dump())\n\n\ndef load_resources(path):\n    logger.debug(f\"Loading
      resources from {os.path.abspath(path)}\")\n    if not os.path.exists(path):\n
      \       raise ValueError(f\"Path {path} does not exist\")\n    for file_loc
      in (os.path.join(p, f) for p, _, files in os.walk(path) for f in files):\n        try:\n
      \           with open(file_loc) as resource_yaml:\n                if file_loc.endswith(\".yaml\"):\n
      \                   for loaded in yaml.safe_load_all(resource_yaml):\n                        if
      loaded:\n                            yield Resource.model_validate(loaded),
      file_loc\n                else:\n                    logger.info(f\"Skipping
      {file_loc}\")\n        except Exception as e:\n            raise ValueError(f\"Error
      building resource {file_loc}\") from e\n"
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Length:
      - '679'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:35:38 GMT
      ETag:
      - W/"6ab653ffebae6f9c43afe9fa504e0d8d5d0308012915eace95d3fbc45d43819c"
      Expires:
      - Tue, 20 Feb 2024 21:40:38 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - HIT
      X-Cache-Hits:
      - '1'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - c607ad548e21cd6b92ab8d77e5cb0b675a15f86c
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - 8E46:624A:5D6DAE:6FF942:65D519B3
      X-Served-By:
      - cache-yvr1527-YVR
      X-Timer:
      - S1708464939.519862,VS0,VE129
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/util/replay.py
  response:
    content: "from __future__ import annotations\n\nimport io\nimport os\nfrom functools
      import wraps\nfrom glob import glob\nfrom typing import Optional\n\nimport dill\nfrom
      pydantic import BaseModel\nfrom srsly.ruamel_yaml import YAML\nfrom srsly.ruamel_yaml.scalarstring
      import walk_tree\n\nfrom eidolon_ai_sdk.agent_os import AgentOS\nfrom eidolon_ai_sdk.util.logger
      import logger\n\n\nclass ReplayConfig(BaseModel):\n    save_loc: Optional[str]
      = None  # If None, resume points are disabled\n    digit_length: int = 3\n\n\ndef
      default_serializer(*args, **kwargs):\n    # this is not serializing multi-line
      strings well, we should consider swapping yaml parsers or customizing this\n
      \   f = io.BytesIO()\n    with YAML(output=f) as yaml:\n        to_dump = dict(args=list(args),
      kwargs=kwargs)\n        walk_tree(to_dump)  # replaces multi line strings with
      LiteralScalarString\n        yaml.dump(to_dump, stream=f)\n    f.flush()\n    return
      f.getvalue().decode(), \"yaml\"\n\n\ndef default_deserializer(str_):\n    with
      YAML() as yaml:\n        obj = yaml.load(str_)\n    return obj[\"args\"], obj[\"kwargs\"]\n\n\nasync
      def default_parser(resp):\n    yield resp\n\n\ndef replayable(\n    fn, serializer=default_serializer,
      deserializer=default_deserializer, parser=default_parser, name_override=None\n):\n
      \   config = AgentOS.get_instance(ReplayConfig)\n\n    @wraps(fn)\n    async
      def wrapper(*args, **kwargs):\n        if config.save_loc:\n            try:\n
      \               existing_dirs = [os.path.split(d)[-1] for d in await AgentOS.file_memory.glob(config.save_loc
      + \"/*\")]\n                dir_number = [int(d.split(\"_\")[0]) for d in existing_dirs]\n
      \               top = max(0, *dir_number) if dir_number else -1\n                next_
      = str(top + 1)\n                next_ = \"0\" * (config.digit_length - len(next_))
      + next_\n                loc = f\"{config.save_loc}/{next_}_{name_override or
      fn.__name__}\"\n                await AgentOS.file_memory.mkdir(loc)\n\n                printable_save_loc
      = loc\n                if hasattr(AgentOS.file_memory, \"resolve\"):\n                    printable_save_loc
      = AgentOS.file_memory.resolve(printable_save_loc)\n                logger.info(f\"Saving
      replay point to {printable_save_loc}\")\n\n                data, file_type =
      serializer(*args, **kwargs)\n                await AgentOS.file_memory.write_file(loc
      + \"/fn.dill\", dill.dumps(fn))\n                await AgentOS.file_memory.write_file(loc
      + f\"/data.{file_type}\", data.encode())\n                await AgentOS.file_memory.write_file(loc
      + \"/deserializer.dill\", dill.dumps(deserializer))\n                await AgentOS.file_memory.write_file(loc
      + \"/parser.dill\", dill.dumps(parser))\n            except Exception as e:\n
      \               logger.exception(f\"Error saving resume point: {e}\")\n        return
      await fn(*args, **kwargs)\n\n    return wrapper\n\n\nasync def replay(loc):\n
      \   loc = str(loc)\n    data_file = glob(loc + \"/data.*\")\n    if not data_file:\n
      \       raise FileNotFoundError(f\"No data file found in {loc}\")\n\n    with
      open(loc + \"/deserializer.dill\", \"rb\") as file:\n        deserializer =
      dill.load(file)\n    with open(loc + \"/fn.dill\", \"rb\") as file:\n        fn
      = dill.load(file)\n    with open(loc + \"/parser.dill\", \"rb\") as file:\n
      \       parser = dill.load(file)\n\n    with open(data_file[0]) as file:\n        args,
      kwargs = deserializer(file.read())\n    async for e in parser(await fn(*args,
      **kwargs)):\n        yield e\n"
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Length:
      - '1238'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:35:38 GMT
      ETag:
      - W/"575f372beebb780c2b42e61b02be7cae86aec6f55edb02247edd4255b6b91931"
      Expires:
      - Tue, 20 Feb 2024 21:40:38 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - HIT
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - fa9fbe3dc744e001e1233d16dc32a102f6b942d1
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - E130:25375E:C3CB1:1176A5:65D519B2
      X-Served-By:
      - cache-bfi-krnt7300043-BFI
      X-Timer:
      - S1708464939.585005,VS0,VE118
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/util/schema_to_model.py
  response:
    content: "import json\nfrom datetime import date, datetime, time\nfrom typing
      import Dict, Any, Type\nfrom typing import List\nfrom uuid import UUID\n\nfrom
      fastapi import UploadFile\nfrom pydantic import BaseModel, HttpUrl, EmailStr,
      Field, model_validator\nfrom pydantic import create_model, ValidationError\nfrom
      pydantic.fields import FieldInfo\nfrom pydantic_core import PydanticUndefined\n\ntype_mapping
      = {\n    \"string\": str,\n    \"number\": float,\n    \"integer\": int,\n    \"boolean\":
      bool,\n    \"null\": type(None),\n    \"date\": date,\n    \"time\": time,\n
      \   \"datetime\": datetime,\n    \"uuid\": UUID,\n    \"email\": EmailStr,\n
      \   \"uri\": HttpUrl,\n    # More complex types like 'format' can be handled
      by specific Pydantic types or custom validators\n}\n\n\ndef schema_to_model(schema:
      Dict[str, Any], model_name: str) -> Type[BaseModel]:\n    \"\"\"\n     Recursively
      converts a JSON Schema into a Pydantic model.\n\n     The function interprets
      the JSON Schema definitions and constructs a corresponding\n     Pydantic model
      with fields that match the schema's properties. It handles nested\n     objects
      and arrays by creating nested Pydantic models as needed.\n\n     Parameters:\n
      \        schema (Dict[str, Any]): A dictionary representing the JSON Schema
      from which\n                                  the Pydantic model will be generated.
      The schema should\n                                  follow the structure of
      JSON Schema, including `properties`,\n                                  and
      `type` for each property.\n         model_name (str): The name of the Pydantic
      model to be created. For nested models,\n                           the function
      appends the property name, capitalized, to the\n                           parent
      model name.\n\n     Returns:\n         Type[BaseModel]: A Pydantic BaseModel
      class constructed based on the provided\n                          JSON Schema.
      Nested structures within the schema result in\n                          nested
      Pydantic models.\n    Raises:\n         ValueError: If there is an error in
      creating the model from the schema.\n\n     Example Usage:\n         json_schema
      = {\n             \"type\": \"object\",\n             \"properties\": {\n                 \"name\":
      {\"type\": \"string\"},\n                 \"age\": {\"type\": \"integer\"},\n
      \                \"address\": {\n                     \"type\": \"object\",\n
      \                    \"properties\": {\n                         \"street\":
      {\"type\": \"string\"},\n                         \"city\": {\"type\": \"string\"},\n
      \                    },\n                     \"required\": [\"street\", \"city\"],\n
      \                },\n                 \"tags\": {\n                     \"type\":
      \"array\",\n                     \"items\": {\"type\": \"string\"},\n                 },\n
      \            },\n         }\n\n         UserModel = schema_to_model(json_schema,
      'UserModel')\n\n     Notes:\n         - The function does not handle JSON Schema
      `$ref` references or other advanced features\n           such as `additionalProperties`,
      `allOf`, `anyOf`, etc.\n    \"\"\"\n    fields = {}\n\n    if not schema.get(\"type\")
      == \"object\":\n        raise ValueError(\"Schema must be an object with properties.\")\n\n
      \   required = schema.get(\"required\", [])\n    for property_name, property_schema
      in schema.get(\"properties\", {}).items():\n        if \"allOf\" in property_schema
      and len(property_schema[\"allOf\"]) == 1:\n            property_schema.update(property_schema.pop(\"allOf\")[0])\n\n
      \       def makeFieldOrDefaultValue():\n            description = property_schema.get(\"description\")\n
      \           kwargs = {}\n            if \"default\" in property_schema:\n                kwargs[\"default\"]
      = property_schema[\"default\"]\n            if description:\n                kwargs[\"description\"]
      = description\n            return Field(**kwargs)\n\n        def wrap_optional(t:
      Type[Any], field: FieldInfo) -> (Type[BaseModel], FieldInfo):\n            if
      property_name in required:\n                return t, field\n            else:\n
      \               if field.default == PydanticUndefined:\n                    field.default
      = None\n                return t, field\n\n        try:\n            field_type
      = property_schema.get(\"type\")\n            if field_type == \"object\":\n
      \               # Recursive call for nested object\n                nested_model
      = schema_to_model(property_schema, f\"{model_name}_{property_name.capitalize()}Model\")\n
      \               fields[property_name] = wrap_optional(nested_model, makeFieldOrDefaultValue())\n
      \           elif field_type == \"array\":\n                # Recursive call
      for arrays of objects\n                items_schema = property_schema.get(\"items\",
      {})\n                if isinstance(items_schema, dict) and items_schema.get(\"type\")
      == \"object\":\n                    nested_item_model = schema_to_model(\n                        items_schema,\n
      \                       f\"{model_name}_{property_name.capitalize()}ItemModel\",\n
      \                   )\n                    fields[property_name] = wrap_optional(List[nested_item_model],
      makeFieldOrDefaultValue())\n                else:\n                    python_type
      = get_python_type(items_schema, str)\n                    fields[property_name]
      = wrap_optional(List[python_type], makeFieldOrDefaultValue())\n            else:\n
      \               fields[property_name] = wrap_optional(get_python_type(property_schema),
      makeFieldOrDefaultValue())\n        except Exception as e:\n            raise
      ValueError(f\"Error creating field '{property_name}': {e}\")\n\n    try:\n        return
      create_model(model_name, **fields, __base__=JsonProofModel)\n    except ValidationError
      as e:\n        raise ValueError(f\"Error creating model '{model_name}': {e}\")\n\n\nclass
      JsonProofModel(BaseModel):\n    @model_validator(mode=\"before\")\n    @classmethod\n
      \   def validate_to_json(cls, value):\n        if isinstance(value, str):\n
      \           return cls(**json.loads(value))\n        return value\n\n\ndef get_python_type(property_schema,
      default=None):\n    field_type = property_schema.get(\"type\")\n    if field_type
      == \"string\" and \"format\" in property_schema and property_schema[\"format\"]
      == \"binary\":\n        return UploadFile\n    else:\n        python_type =
      type_mapping.get(field_type, default)\n        if python_type is None:\n            raise
      ValueError(f\"Unsupported type '{field_type}'\")\n        return python_type\n"
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Length:
      - '1886'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:35:38 GMT
      ETag:
      - W/"cfbe302ff34126afe0c79cf018df5b2bc1112846d30a6ee9e8fb7dff93919e80"
      Expires:
      - Tue, 20 Feb 2024 21:40:38 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - 9fe5a3d8928ca19bfeeba8ef4b04c4179f85e303
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - 9C64:1352:5337BD:660BA4:65D51B29
      X-Served-By:
      - cache-yvr1521-YVR
      X-Timer:
      - S1708464939.595376,VS0,VE118
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/util/str_utils.py
  response:
    content: "import os\n\n\ndef replace_env_var_in_string(s, **defaults):\n    \"\"\"\n
      \   Replace all occurrences of '${VAR}' with the value of the VAR environment
      variable.\n    \"\"\"\n    for key in os.environ:\n        replacement = os.environ.get(key,
      defaults[key]) if key in defaults else os.environ[key]\n        s = s.replace(f\"${{{key}}}\",
      replacement)\n    return s\n"
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Length:
      - '225'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:35:38 GMT
      ETag:
      - W/"4e5732756247cbdd4397617b58cad50945cd687c44bd2a936d58652c4e31bf5b"
      Expires:
      - Tue, 20 Feb 2024 21:40:38 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - HIT
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - 651527ebe05933e114eb85dca7a1f8ccdde9ef59
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - 6FDC:2556A2:BAB72:10E4F8:65D519B3
      X-Served-By:
      - cache-bfi-kbfi7400119-BFI
      X-Timer:
      - S1708464939.618064,VS0,VE111
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/util/stream_collector.py
  response:
    content: "from __future__ import annotations\n\nfrom typing import Optional, AsyncIterator,
      List, Callable\n\nfrom aiostream import stream\n\nfrom eidolon_ai_sdk.io.events
      import (\n    BaseStreamEvent,\n    StringOutputEvent,\n    ObjectOutputEvent,\n
      \   ErrorEvent,\n    StreamEvent,\n    StartStreamContextEvent,\n    EndStreamContextEvent,\n
      \   SuccessEvent,\n)\nfrom eidolon_ai_sdk.util.logger import logger\n\n\nclass
      StreamCollector(AsyncIterator[StreamEvent]):\n    _content: List[str | dict]\n
      \   stream: Optional[AsyncIterator[StreamEvent]]\n\n    def __init__(\n        self,\n
      \       stream: Optional[AsyncIterator[StreamEvent]] = None,\n        context_level:
      Optional[str] = None,\n    ):\n        self._content = []\n        self.stream
      = stream\n        self._context_level = context_level\n        self._last_seen_event
      = None\n\n    def process_event(self, event: BaseStreamEvent):\n        if event.stream_context
      == self._context_level:\n            if isinstance(event, StringOutputEvent):\n
      \               if isinstance(self._last_seen_event, StringOutputEvent):\n                    self._content[-1]
      += event.content\n                else:\n                    self._content.append(event.content)\n
      \               self._last_seen_event = event\n            elif isinstance(event,
      ObjectOutputEvent):\n                self._content.append(event.content)\n                self._last_seen_event
      = event\n            elif isinstance(event, ErrorEvent):\n                self._content.append(event.serialize_reason(event.reason))\n
      \               self._last_seen_event = event\n\n    def get_content(self):\n
      \       if not self._content:\n            return None\n        elif len(self._content)
      == 1:\n            return self._content[0]\n        else:\n            return
      self._content\n\n    def get_content_as_string(self):\n        pass\n\n    async
      def __anext__(self):\n        event = await self.stream.__anext__()\n        self.process_event(event)\n
      \       return event\n\n\ndef stream_manager(\n    stream: AsyncIterator[StreamEvent]
      | Callable[[], AsyncIterator[StreamEvent]], context: StartStreamContextEvent\n):\n
      \   async def _iter():\n        yield context.model_copy()\n        try:\n            received_end_event
      = False\n            async for event in stream() if callable(stream) else stream:\n
      \               if not received_end_event:\n                    received_end_event
      = event.is_root_end_event()\n                    acc = [context.get_nested_context()]\n
      \                   if event.stream_context:\n                        acc.append(event.stream_context)\n
      \                   event.stream_context = \".\".join(acc)\n                    yield
      event\n                else:\n                    logger.warning(f\"Received
      event ({event.event_type}) after end event, ignoring\")\n            if not
      received_end_event:\n                yield SuccessEvent(stream_context=context.get_nested_context())\n
      \       except Exception as e:\n            # record error on stream context,
      but will reraise for outer context to handle\n            yield ErrorEvent(stream_context=context.get_nested_context(),
      reason=e)\n            # no need to log since we are re-raising\n            raise
      ManagedContextError(f\"Error in stream context {context.get_nested_context()}\")
      from e\n        finally:\n            yield EndStreamContextEvent(stream_context=context.stream_context,
      context_id=context.context_id)\n\n    return StreamCollector(_iter(), context_level=context.get_nested_context())\n\n\nclass
      ManagedContextError(Exception):\n    pass\n\n\nasync def merge_streams(streams:
      List[AsyncIterator]) -> AsyncIterator:\n    if len(streams) > 1:\n        merged_stream
      = stream.merge(streams[0], *streams[1:])\n        async with merged_stream.stream()
      as s:\n            async for value in s:\n                yield value\n    elif
      len(streams) == 1:\n        async for v in streams[0]:\n            yield v\n"
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Length:
      - '1093'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:35:38 GMT
      ETag:
      - W/"0472282adbb88f6467a9adbfd658ea4580ea0131806ebe57c7f3511f776e1db2"
      Expires:
      - Tue, 20 Feb 2024 21:40:38 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - HIT
      X-Cache-Hits:
      - '1'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - 5c171ede996252ad231df40f72b7a05b0953fa83
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - E6CA:256713:C0CEE:1146DC:65D519B3
      X-Served-By:
      - cache-bfi-kbfi7400060-BFI
      X-Timer:
      - S1708464939.630715,VS0,VE114
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents
  response:
    content: '[{"name":".github","path":".github","sha":"338665452bc262a4500b18b4dd65ef52a70241ff","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/.github?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/.github","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/338665452bc262a4500b18b4dd65ef52a70241ff","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/.github?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/338665452bc262a4500b18b4dd65ef52a70241ff","html":"https://github.com/eidolon-ai/eidolon/tree/main/.github"}},{"name":".gitignore","path":".gitignore","sha":"6254fcde5a2dc05935e4745485a8090d01e01f61","size":3292,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/.gitignore?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/.gitignore","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/6254fcde5a2dc05935e4745485a8090d01e01f61","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/.gitignore","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/.gitignore?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/6254fcde5a2dc05935e4745485a8090d01e01f61","html":"https://github.com/eidolon-ai/eidolon/blob/main/.gitignore"}},{"name":".idea","path":".idea","sha":"783abf540666e259bbf0bc51e10568db1274fd48","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/.idea?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/.idea","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/783abf540666e259bbf0bc51e10568db1274fd48","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/.idea?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/783abf540666e259bbf0bc51e10568db1274fd48","html":"https://github.com/eidolon-ai/eidolon/tree/main/.idea"}},{"name":"LICENSE","path":"LICENSE","sha":"261eeb9e9f8b2b4b0d119366dda99c6fd7d35c64","size":11357,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/LICENSE?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/LICENSE","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/261eeb9e9f8b2b4b0d119366dda99c6fd7d35c64","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/LICENSE","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/LICENSE?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/261eeb9e9f8b2b4b0d119366dda99c6fd7d35c64","html":"https://github.com/eidolon-ai/eidolon/blob/main/LICENSE"}},{"name":"README.md","path":"README.md","sha":"01966ef9a979a5a42c1988349f5ca5bbb186d432","size":2840,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/README.md?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/README.md","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/01966ef9a979a5a42c1988349f5ca5bbb186d432","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/README.md","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/README.md?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/01966ef9a979a5a42c1988349f5ca5bbb186d432","html":"https://github.com/eidolon-ai/eidolon/blob/main/README.md"}},{"name":"cli","path":"cli","sha":"4a527a2be1f96986b75f883d26e7503555c7b0a3","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/cli?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/cli","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/4a527a2be1f96986b75f883d26e7503555c7b0a3","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/cli?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/4a527a2be1f96986b75f883d26e7503555c7b0a3","html":"https://github.com/eidolon-ai/eidolon/tree/main/cli"}},{"name":"docs","path":"docs","sha":"c4991c33e8585a6bb57d538fb031706d872d982b","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/docs","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/c4991c33e8585a6bb57d538fb031706d872d982b","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/c4991c33e8585a6bb57d538fb031706d872d982b","html":"https://github.com/eidolon-ai/eidolon/tree/main/docs"}},{"name":"eidolon.iml","path":"eidolon.iml","sha":"d35235ca8ce5ab539b1984aea0d7c12982467e12","size":848,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/eidolon.iml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/eidolon.iml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/d35235ca8ce5ab539b1984aea0d7c12982467e12","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/eidolon.iml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/eidolon.iml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/d35235ca8ce5ab539b1984aea0d7c12982467e12","html":"https://github.com/eidolon-ai/eidolon/blob/main/eidolon.iml"}},{"name":"examples","path":"examples","sha":"359bc16be5e6f1cb3e75f2bfd33ec8fdff9f8d99","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/examples","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/359bc16be5e6f1cb3e75f2bfd33ec8fdff9f8d99","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/359bc16be5e6f1cb3e75f2bfd33ec8fdff9f8d99","html":"https://github.com/eidolon-ai/eidolon/tree/main/examples"}},{"name":"sdk","path":"sdk","sha":"5207a0f717f0fa614ed8c120c61c75e6a65070a9","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/sdk","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/5207a0f717f0fa614ed8c120c61c75e6a65070a9","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/5207a0f717f0fa614ed8c120c61c75e6a65070a9","html":"https://github.com/eidolon-ai/eidolon/tree/main/sdk"}},{"name":"webui","path":"webui","sha":"cbddc0d24c33dad3567395f1faf1823ed2bd7f48","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/webui","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/cbddc0d24c33dad3567395f1faf1823ed2bd7f48","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/cbddc0d24c33dad3567395f1faf1823ed2bd7f48","html":"https://github.com/eidolon-ai/eidolon/tree/main/webui"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:35:39 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E570:2518DF:16282F:1F97B5:65D51B2A
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4592'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '408'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/.github?ref=main
  response:
    content: '[{"name":"dependabot.yml","path":".github/dependabot.yml","sha":"bf113201affde08ee26bec20225472a44ff510a6","size":503,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/.github/dependabot.yml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/.github/dependabot.yml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/bf113201affde08ee26bec20225472a44ff510a6","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/.github/dependabot.yml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/.github/dependabot.yml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/bf113201affde08ee26bec20225472a44ff510a6","html":"https://github.com/eidolon-ai/eidolon/blob/main/.github/dependabot.yml"}},{"name":"workflows","path":".github/workflows","sha":"814658dc147b028faf1dabbf0638aa3e8afd82e8","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/.github/workflows?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/.github/workflows","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/814658dc147b028faf1dabbf0638aa3e8afd82e8","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/.github/workflows?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/814658dc147b028faf1dabbf0638aa3e8afd82e8","html":"https://github.com/eidolon-ai/eidolon/tree/main/.github/workflows"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:35:39 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E570:2518DF:162834:1F97BC:65D51B2B
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4591'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '409'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/docs?ref=main
  response:
    content: '[{"name":".gitignore","path":"docs/.gitignore","sha":"6240da8b10bfc3ab9dc4564c4169453cf143db7f","size":229,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/.gitignore?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/docs/.gitignore","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/6240da8b10bfc3ab9dc4564c4169453cf143db7f","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/docs/.gitignore","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/.gitignore?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/6240da8b10bfc3ab9dc4564c4169453cf143db7f","html":"https://github.com/eidolon-ai/eidolon/blob/main/docs/.gitignore"}},{"name":".vscode","path":"docs/.vscode","sha":"0c33c7c3c06928c95be8c68f9f15a508c844a3dc","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/.vscode?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/docs/.vscode","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/0c33c7c3c06928c95be8c68f9f15a508c844a3dc","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/.vscode?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/0c33c7c3c06928c95be8c68f9f15a508c844a3dc","html":"https://github.com/eidolon-ai/eidolon/tree/main/docs/.vscode"}},{"name":"README.md","path":"docs/README.md","sha":"b51abaabcd439b9f24bb332de9e368717bbfc2a2","size":2466,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/README.md?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/docs/README.md","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/b51abaabcd439b9f24bb332de9e368717bbfc2a2","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/docs/README.md","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/README.md?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/b51abaabcd439b9f24bb332de9e368717bbfc2a2","html":"https://github.com/eidolon-ai/eidolon/blob/main/docs/README.md"}},{"name":"astro.config.mjs","path":"docs/astro.config.mjs","sha":"b6e8456702e4ccc77c0845f27c974381d9c11258","size":1827,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/astro.config.mjs?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/docs/astro.config.mjs","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/b6e8456702e4ccc77c0845f27c974381d9c11258","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/docs/astro.config.mjs","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/astro.config.mjs?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/b6e8456702e4ccc77c0845f27c974381d9c11258","html":"https://github.com/eidolon-ai/eidolon/blob/main/docs/astro.config.mjs"}},{"name":"package-lock.json","path":"docs/package-lock.json","sha":"54cae8fcbe73285a9198892dd546308b8af63277","size":312899,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/package-lock.json?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/docs/package-lock.json","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/54cae8fcbe73285a9198892dd546308b8af63277","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/docs/package-lock.json","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/package-lock.json?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/54cae8fcbe73285a9198892dd546308b8af63277","html":"https://github.com/eidolon-ai/eidolon/blob/main/docs/package-lock.json"}},{"name":"package.json","path":"docs/package.json","sha":"d6fef9e19403726372b25914896e85de2e01b311","size":396,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/package.json?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/docs/package.json","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/d6fef9e19403726372b25914896e85de2e01b311","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/docs/package.json","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/package.json?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/d6fef9e19403726372b25914896e85de2e01b311","html":"https://github.com/eidolon-ai/eidolon/blob/main/docs/package.json"}},{"name":"public","path":"docs/public","sha":"07c05f1012124dc6fcfa11ca440196bb32e1efe2","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/public?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/docs/public","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/07c05f1012124dc6fcfa11ca440196bb32e1efe2","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/public?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/07c05f1012124dc6fcfa11ca440196bb32e1efe2","html":"https://github.com/eidolon-ai/eidolon/tree/main/docs/public"}},{"name":"src","path":"docs/src","sha":"cc00789fc494dc2abe7ebe63190b054c79b7519d","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/docs/src","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/cc00789fc494dc2abe7ebe63190b054c79b7519d","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/cc00789fc494dc2abe7ebe63190b054c79b7519d","html":"https://github.com/eidolon-ai/eidolon/tree/main/docs/src"}},{"name":"tsconfig.json","path":"docs/tsconfig.json","sha":"77da9dd00982b7abcda3abef70ffba6a4078cf37","size":41,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/tsconfig.json?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/docs/tsconfig.json","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/77da9dd00982b7abcda3abef70ffba6a4078cf37","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/docs/tsconfig.json","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/tsconfig.json?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/77da9dd00982b7abcda3abef70ffba6a4078cf37","html":"https://github.com/eidolon-ai/eidolon/blob/main/docs/tsconfig.json"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:35:39 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E573:252DF3:14A8DB:1E17F1:65D51B2B
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4590'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '410'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/.idea?ref=main
  response:
    content: '[{"name":".gitignore","path":".idea/.gitignore","sha":"a7c382ed390c36f2fc3f162f89fd69a696aa4665","size":14,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/.idea/.gitignore?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/.idea/.gitignore","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/a7c382ed390c36f2fc3f162f89fd69a696aa4665","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/.idea/.gitignore","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/.idea/.gitignore?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/a7c382ed390c36f2fc3f162f89fd69a696aa4665","html":"https://github.com/eidolon-ai/eidolon/blob/main/.idea/.gitignore"}},{"name":"dataSources.xml","path":".idea/dataSources.xml","sha":"e2f17be487adaebb6b8eb5fd3ba7fb74ced16de8","size":519,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/.idea/dataSources.xml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/.idea/dataSources.xml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e2f17be487adaebb6b8eb5fd3ba7fb74ced16de8","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/.idea/dataSources.xml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/.idea/dataSources.xml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e2f17be487adaebb6b8eb5fd3ba7fb74ced16de8","html":"https://github.com/eidolon-ai/eidolon/blob/main/.idea/dataSources.xml"}},{"name":"eidolon.iml","path":".idea/eidolon.iml","sha":"7cd1e7b163b48e98514ca5b0f00ee56ed0885343","size":528,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/.idea/eidolon.iml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/.idea/eidolon.iml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/7cd1e7b163b48e98514ca5b0f00ee56ed0885343","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/.idea/eidolon.iml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/.idea/eidolon.iml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/7cd1e7b163b48e98514ca5b0f00ee56ed0885343","html":"https://github.com/eidolon-ai/eidolon/blob/main/.idea/eidolon.iml"}},{"name":"inspectionProfiles","path":".idea/inspectionProfiles","sha":"b720fd4a48e839f5b989853cf379ea1639db199e","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/.idea/inspectionProfiles?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/.idea/inspectionProfiles","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/b720fd4a48e839f5b989853cf379ea1639db199e","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/.idea/inspectionProfiles?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/b720fd4a48e839f5b989853cf379ea1639db199e","html":"https://github.com/eidolon-ai/eidolon/tree/main/.idea/inspectionProfiles"}},{"name":"misc.xml","path":".idea/misc.xml","sha":"32978c10c18507b24c427a9d05f80584d8b1d12d","size":396,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/.idea/misc.xml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/.idea/misc.xml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/32978c10c18507b24c427a9d05f80584d8b1d12d","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/.idea/misc.xml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/.idea/misc.xml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/32978c10c18507b24c427a9d05f80584d8b1d12d","html":"https://github.com/eidolon-ai/eidolon/blob/main/.idea/misc.xml"}},{"name":"modules.xml","path":".idea/modules.xml","sha":"6a998d59b87192a2c7621256e309e5b9193eaee0","size":565,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/.idea/modules.xml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/.idea/modules.xml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/6a998d59b87192a2c7621256e309e5b9193eaee0","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/.idea/modules.xml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/.idea/modules.xml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/6a998d59b87192a2c7621256e309e5b9193eaee0","html":"https://github.com/eidolon-ai/eidolon/blob/main/.idea/modules.xml"}},{"name":"runConfigurations","path":".idea/runConfigurations","sha":"f75b9f5378199884a97decef774cc62fc8e67240","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/.idea/runConfigurations?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/.idea/runConfigurations","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/f75b9f5378199884a97decef774cc62fc8e67240","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/.idea/runConfigurations?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/f75b9f5378199884a97decef774cc62fc8e67240","html":"https://github.com/eidolon-ai/eidolon/tree/main/.idea/runConfigurations"}},{"name":"vcs.xml","path":".idea/vcs.xml","sha":"35eb1ddfbbc029bcab630581847471d7f238ec53","size":167,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/.idea/vcs.xml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/.idea/vcs.xml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/35eb1ddfbbc029bcab630581847471d7f238ec53","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/.idea/vcs.xml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/.idea/vcs.xml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/35eb1ddfbbc029bcab630581847471d7f238ec53","html":"https://github.com/eidolon-ai/eidolon/blob/main/.idea/vcs.xml"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:35:39 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E571:25886F:144884:1DB830:65D51B2B
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4589'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '411'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/cli?ref=main
  response:
    content: '[{"name":".DS_Store","path":"cli/.DS_Store","sha":"8cc0d1d2ce4da2c5ef8dbff704490c37ef8431cc","size":6148,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/cli/.DS_Store?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/cli/.DS_Store","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/8cc0d1d2ce4da2c5ef8dbff704490c37ef8431cc","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/cli/.DS_Store","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/cli/.DS_Store?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/8cc0d1d2ce4da2c5ef8dbff704490c37ef8431cc","html":"https://github.com/eidolon-ai/eidolon/blob/main/cli/.DS_Store"}},{"name":"README.md","path":"cli/README.md","sha":"e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/cli/README.md?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/cli/README.md","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/cli/README.md","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/cli/README.md?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","html":"https://github.com/eidolon-ai/eidolon/blob/main/cli/README.md"}},{"name":"cli.iml","path":"cli/cli.iml","sha":"f0a03691a348e5c18c62340198acf5851e3a38f5","size":685,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/cli/cli.iml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/cli/cli.iml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/f0a03691a348e5c18c62340198acf5851e3a38f5","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/cli/cli.iml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/cli/cli.iml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/f0a03691a348e5c18c62340198acf5851e3a38f5","html":"https://github.com/eidolon-ai/eidolon/blob/main/cli/cli.iml"}},{"name":"eidolon_ai_cli","path":"cli/eidolon_ai_cli","sha":"cbef9e3439f1c8cc94accf072aae0e51bbedf1ef","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/cli/eidolon_ai_cli?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/cli/eidolon_ai_cli","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/cbef9e3439f1c8cc94accf072aae0e51bbedf1ef","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/cli/eidolon_ai_cli?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/cbef9e3439f1c8cc94accf072aae0e51bbedf1ef","html":"https://github.com/eidolon-ai/eidolon/tree/main/cli/eidolon_ai_cli"}},{"name":"poetry.lock","path":"cli/poetry.lock","sha":"d58d99d9bf7234ecba8877de2e8b139268297988","size":33066,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/cli/poetry.lock?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/cli/poetry.lock","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/d58d99d9bf7234ecba8877de2e8b139268297988","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/cli/poetry.lock","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/cli/poetry.lock?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/d58d99d9bf7234ecba8877de2e8b139268297988","html":"https://github.com/eidolon-ai/eidolon/blob/main/cli/poetry.lock"}},{"name":"pyproject.toml","path":"cli/pyproject.toml","sha":"8445951f4885e0e2a5ac29e3ba01912d38047ff1","size":704,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/cli/pyproject.toml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/cli/pyproject.toml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/8445951f4885e0e2a5ac29e3ba01912d38047ff1","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/cli/pyproject.toml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/cli/pyproject.toml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/8445951f4885e0e2a5ac29e3ba01912d38047ff1","html":"https://github.com/eidolon-ai/eidolon/blob/main/cli/pyproject.toml"}},{"name":"tests","path":"cli/tests","sha":"88f131881951471c312deb15eda79bf2926c7a61","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/cli/tests?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/cli/tests","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/88f131881951471c312deb15eda79bf2926c7a61","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/cli/tests?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/88f131881951471c312deb15eda79bf2926c7a61","html":"https://github.com/eidolon-ai/eidolon/tree/main/cli/tests"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:35:39 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E572:25592D:155555:1EC44C:65D51B2B
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4587'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '413'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/.github/workflows?ref=main
  response:
    content: '[{"name":"docs.yml","path":".github/workflows/docs.yml","sha":"f1dd1dca7ced1440db8daaa7f82742bb1feb9481","size":1379,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/.github/workflows/docs.yml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/.github/workflows/docs.yml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/f1dd1dca7ced1440db8daaa7f82742bb1feb9481","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/.github/workflows/docs.yml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/.github/workflows/docs.yml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/f1dd1dca7ced1440db8daaa7f82742bb1feb9481","html":"https://github.com/eidolon-ai/eidolon/blob/main/.github/workflows/docs.yml"}},{"name":"publish_docker.yml","path":".github/workflows/publish_docker.yml","sha":"edca961ecb7a952ee9b83807e14adba4f990c8ff","size":756,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/.github/workflows/publish_docker.yml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/.github/workflows/publish_docker.yml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/edca961ecb7a952ee9b83807e14adba4f990c8ff","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/.github/workflows/publish_docker.yml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/.github/workflows/publish_docker.yml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/edca961ecb7a952ee9b83807e14adba4f990c8ff","html":"https://github.com/eidolon-ai/eidolon/blob/main/.github/workflows/publish_docker.yml"}},{"name":"publish_sdk.yml","path":".github/workflows/publish_sdk.yml","sha":"22b86d93c7336fa2bcdadf0333a56d729e374412","size":687,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/.github/workflows/publish_sdk.yml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/.github/workflows/publish_sdk.yml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/22b86d93c7336fa2bcdadf0333a56d729e374412","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/.github/workflows/publish_sdk.yml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/.github/workflows/publish_sdk.yml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/22b86d93c7336fa2bcdadf0333a56d729e374412","html":"https://github.com/eidolon-ai/eidolon/blob/main/.github/workflows/publish_sdk.yml"}},{"name":"test.yml","path":".github/workflows/test.yml","sha":"a9cb93e693cf010f6b70b80daf06c6619bd7d8cb","size":3438,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/.github/workflows/test.yml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/.github/workflows/test.yml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/a9cb93e693cf010f6b70b80daf06c6619bd7d8cb","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/.github/workflows/test.yml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/.github/workflows/test.yml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/a9cb93e693cf010f6b70b80daf06c6619bd7d8cb","html":"https://github.com/eidolon-ai/eidolon/blob/main/.github/workflows/test.yml"}},{"name":"version_sdk.yml","path":".github/workflows/version_sdk.yml","sha":"4ae82acb56058ee6a6a6ea3f32ae027ec06e06cd","size":705,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/.github/workflows/version_sdk.yml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/.github/workflows/version_sdk.yml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/4ae82acb56058ee6a6a6ea3f32ae027ec06e06cd","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/.github/workflows/version_sdk.yml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/.github/workflows/version_sdk.yml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/4ae82acb56058ee6a6a6ea3f32ae027ec06e06cd","html":"https://github.com/eidolon-ai/eidolon/blob/main/.github/workflows/version_sdk.yml"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:35:39 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E570:2518DF:16283C:1F97C2:65D51B2B
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4588'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '412'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/examples?ref=main
  response:
    content: '[{"name":".pylintrc","path":"examples/.pylintrc","sha":"c512f3bfe2a09f680d124da5d43bb9bc1f40942d","size":21342,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/.pylintrc?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/.pylintrc","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/c512f3bfe2a09f680d124da5d43bb9bc1f40942d","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/.pylintrc","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/.pylintrc?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/c512f3bfe2a09f680d124da5d43bb9bc1f40942d","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/.pylintrc"}},{"name":"Dockerfile.code_search","path":"examples/Dockerfile.code_search","sha":"af7452e89d0a5db85aab55c78eb4ed76c232dfc3","size":283,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/Dockerfile.code_search?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/Dockerfile.code_search","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/af7452e89d0a5db85aab55c78eb4ed76c232dfc3","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/Dockerfile.code_search","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/Dockerfile.code_search?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/af7452e89d0a5db85aab55c78eb4ed76c232dfc3","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/Dockerfile.code_search"}},{"name":"Makefile","path":"examples/Makefile","sha":"19471b570aea103db9f889913fc37e0501163767","size":714,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/Makefile?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/Makefile","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/19471b570aea103db9f889913fc37e0501163767","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/Makefile","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/Makefile?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/19471b570aea103db9f889913fc37e0501163767","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/Makefile"}},{"name":"README.md","path":"examples/README.md","sha":"e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/README.md?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/README.md","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/README.md","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/README.md?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/README.md"}},{"name":"eidolon_examples","path":"examples/eidolon_examples","sha":"fd9d746910f1c6ee0b07c643e87e9ea3eb645ca6","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/examples/eidolon_examples","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/fd9d746910f1c6ee0b07c643e87e9ea3eb645ca6","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/fd9d746910f1c6ee0b07c643e87e9ea3eb645ca6","html":"https://github.com/eidolon-ai/eidolon/tree/main/examples/eidolon_examples"}},{"name":"examples.iml","path":"examples/examples.iml","sha":"071bba9f942ded630fdfd720796975d4a41eb37f","size":517,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/examples.iml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/examples.iml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/071bba9f942ded630fdfd720796975d4a41eb37f","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/examples.iml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/examples.iml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/071bba9f942ded630fdfd720796975d4a41eb37f","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/examples.iml"}},{"name":"poetry.lock","path":"examples/poetry.lock","sha":"b13b9a5e264d083ffafb04854609818903854225","size":421135,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/poetry.lock?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/poetry.lock","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/b13b9a5e264d083ffafb04854609818903854225","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/poetry.lock","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/poetry.lock?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/b13b9a5e264d083ffafb04854609818903854225","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/poetry.lock"}},{"name":"pyproject.toml","path":"examples/pyproject.toml","sha":"75b22f6432cd6c6c57e8b118830074f94de01d92","size":681,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/pyproject.toml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/pyproject.toml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/75b22f6432cd6c6c57e8b118830074f94de01d92","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/pyproject.toml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/pyproject.toml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/75b22f6432cd6c6c57e8b118830074f94de01d92","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/pyproject.toml"}},{"name":"tests","path":"examples/tests","sha":"eb8787edb39b1f058f129cd5ab509597f35ef647","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/tests?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/examples/tests","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/eb8787edb39b1f058f129cd5ab509597f35ef647","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/tests?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/eb8787edb39b1f058f129cd5ab509597f35ef647","html":"https://github.com/eidolon-ai/eidolon/tree/main/examples/tests"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:35:39 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E574:282C91:DF83F:144BAB:65D51B2B
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4586'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '414'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk?ref=main
  response:
    content: '[{"name":".pylintrc","path":"sdk/.pylintrc","sha":"c512f3bfe2a09f680d124da5d43bb9bc1f40942d","size":21342,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/.pylintrc?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/.pylintrc","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/c512f3bfe2a09f680d124da5d43bb9bc1f40942d","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/.pylintrc","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/.pylintrc?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/c512f3bfe2a09f680d124da5d43bb9bc1f40942d","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/.pylintrc"}},{"name":"Dockerfile","path":"sdk/Dockerfile","sha":"22ca9e360119cfbaefc38a757606cd28a17b6cab","size":472,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/Dockerfile?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/Dockerfile","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/22ca9e360119cfbaefc38a757606cd28a17b6cab","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/Dockerfile","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/Dockerfile?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/22ca9e360119cfbaefc38a757606cd28a17b6cab","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/Dockerfile"}},{"name":"Makefile","path":"sdk/Makefile","sha":"d58ff56b85391696b6567658e9e76642246d6c21","size":687,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/Makefile?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/Makefile","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/d58ff56b85391696b6567658e9e76642246d6c21","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/Makefile","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/Makefile?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/d58ff56b85391696b6567658e9e76642246d6c21","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/Makefile"}},{"name":"README.md","path":"sdk/README.md","sha":"23faca2171a6888afae0c0a9c26290da492009ea","size":2247,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/README.md?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/README.md","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/23faca2171a6888afae0c0a9c26290da492009ea","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/README.md","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/README.md?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/23faca2171a6888afae0c0a9c26290da492009ea","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/README.md"}},{"name":"eidolon_ai_sdk","path":"sdk/eidolon_ai_sdk","sha":"ff5b2bcc12125aa95d80bb3c5ee363c523b624ba","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/sdk/eidolon_ai_sdk","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/ff5b2bcc12125aa95d80bb3c5ee363c523b624ba","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/ff5b2bcc12125aa95d80bb3c5ee363c523b624ba","html":"https://github.com/eidolon-ai/eidolon/tree/main/sdk/eidolon_ai_sdk"}},{"name":"eidos_server","path":"sdk/eidos_server","sha":"eb5e82f64781deb783cc44bccc97d5b924398b4f","size":86,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidos_server?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidos_server","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/eb5e82f64781deb783cc44bccc97d5b924398b4f","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidos_server","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidos_server?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/eb5e82f64781deb783cc44bccc97d5b924398b4f","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidos_server"}},{"name":"logging.conf","path":"sdk/logging.conf","sha":"470fb385257d3f2eb2e608022174828b8ed6e6bb","size":587,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/logging.conf?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/logging.conf","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/470fb385257d3f2eb2e608022174828b8ed6e6bb","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/logging.conf","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/logging.conf?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/470fb385257d3f2eb2e608022174828b8ed6e6bb","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/logging.conf"}},{"name":"poetry.lock","path":"sdk/poetry.lock","sha":"01fb895b36e9428ba69c7a40b7447f717a48321e","size":416146,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/poetry.lock?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/poetry.lock","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/01fb895b36e9428ba69c7a40b7447f717a48321e","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/poetry.lock","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/poetry.lock?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/01fb895b36e9428ba69c7a40b7447f717a48321e","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/poetry.lock"}},{"name":"pyproject.toml","path":"sdk/pyproject.toml","sha":"46476e6457a316b47ff79caf830fd82c2d1104d5","size":1520,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/pyproject.toml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/pyproject.toml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/46476e6457a316b47ff79caf830fd82c2d1104d5","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/pyproject.toml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/pyproject.toml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/46476e6457a316b47ff79caf830fd82c2d1104d5","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/pyproject.toml"}},{"name":"pytest.ini","path":"sdk/pytest.ini","sha":"2f4c80e307508cb30bd6635716963f88f6796738","size":29,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/pytest.ini?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/pytest.ini","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/2f4c80e307508cb30bd6635716963f88f6796738","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/pytest.ini","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/pytest.ini?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/2f4c80e307508cb30bd6635716963f88f6796738","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/pytest.ini"}},{"name":"sdk.iml","path":"sdk/sdk.iml","sha":"cef17e9b9d4cf681d3a0a009e434ad7aa937256f","size":685,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/sdk.iml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/sdk.iml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/cef17e9b9d4cf681d3a0a009e434ad7aa937256f","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/sdk.iml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/sdk.iml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/cef17e9b9d4cf681d3a0a009e434ad7aa937256f","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/sdk.iml"}},{"name":"tests","path":"sdk/tests","sha":"6026b3c82749e61ec97cee71709bc49c7c9336ec","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/sdk/tests","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/6026b3c82749e61ec97cee71709bc49c7c9336ec","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/6026b3c82749e61ec97cee71709bc49c7c9336ec","html":"https://github.com/eidolon-ai/eidolon/tree/main/sdk/tests"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:35:39 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E575:2552AA:15DEA3:1F4E36:65D51B2B
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4584'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '416'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/webui?ref=main
  response:
    content: '[{"name":".eslintrc.json","path":"webui/.eslintrc.json","sha":"07a4090464f92ca6c2815f94673d68e9f76479ac","size":552,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/.eslintrc.json?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/webui/.eslintrc.json","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/07a4090464f92ca6c2815f94673d68e9f76479ac","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/webui/.eslintrc.json","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/.eslintrc.json?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/07a4090464f92ca6c2815f94673d68e9f76479ac","html":"https://github.com/eidolon-ai/eidolon/blob/main/webui/.eslintrc.json"}},{"name":"README.md","path":"webui/README.md","sha":"4897b47522f43a7e36a502edd968361824bf4378","size":1538,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/README.md?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/webui/README.md","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/4897b47522f43a7e36a502edd968361824bf4378","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/webui/README.md","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/README.md?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/4897b47522f43a7e36a502edd968361824bf4378","html":"https://github.com/eidolon-ai/eidolon/blob/main/webui/README.md"}},{"name":"app","path":"webui/app","sha":"be4beee7cb6d38c135074a18ad6df14b1d0b5cb2","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/app?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/webui/app","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/be4beee7cb6d38c135074a18ad6df14b1d0b5cb2","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/app?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/be4beee7cb6d38c135074a18ad6df14b1d0b5cb2","html":"https://github.com/eidolon-ai/eidolon/tree/main/webui/app"}},{"name":"assets","path":"webui/assets","sha":"b125010bd41c33a655bdb66ec4de2c964be630dd","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/assets?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/webui/assets","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/b125010bd41c33a655bdb66ec4de2c964be630dd","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/assets?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/b125010bd41c33a655bdb66ec4de2c964be630dd","html":"https://github.com/eidolon-ai/eidolon/tree/main/webui/assets"}},{"name":"components","path":"webui/components","sha":"a4a80e376ad8afbb656f657990efb0b6daf4886b","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/components?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/webui/components","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/a4a80e376ad8afbb656f657990efb0b6daf4886b","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/components?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/a4a80e376ad8afbb656f657990efb0b6daf4886b","html":"https://github.com/eidolon-ai/eidolon/tree/main/webui/components"}},{"name":"jest.config.ts","path":"webui/jest.config.ts","sha":"bc455217aa0dd13e044e1a967bc700fafe775069","size":828,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/jest.config.ts?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/webui/jest.config.ts","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/bc455217aa0dd13e044e1a967bc700fafe775069","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/webui/jest.config.ts","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/jest.config.ts?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/bc455217aa0dd13e044e1a967bc700fafe775069","html":"https://github.com/eidolon-ai/eidolon/blob/main/webui/jest.config.ts"}},{"name":"jest.setup.ts","path":"webui/jest.setup.ts","sha":"46888661767b0c944948b5545d2d5acf160bb7ee","size":223,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/jest.setup.ts?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/webui/jest.setup.ts","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/46888661767b0c944948b5545d2d5acf160bb7ee","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/webui/jest.setup.ts","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/jest.setup.ts?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/46888661767b0c944948b5545d2d5acf160bb7ee","html":"https://github.com/eidolon-ai/eidolon/blob/main/webui/jest.setup.ts"}},{"name":"lib","path":"webui/lib","sha":"1c4470ac211e7db33dadac4ca6fa0ea7291debd3","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/lib?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/webui/lib","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/1c4470ac211e7db33dadac4ca6fa0ea7291debd3","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/lib?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/1c4470ac211e7db33dadac4ca6fa0ea7291debd3","html":"https://github.com/eidolon-ai/eidolon/tree/main/webui/lib"}},{"name":"next-env.d.ts","path":"webui/next-env.d.ts","sha":"4f11a03dc6cc37f2b5105c08f2e7b24c603ab2f4","size":201,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/next-env.d.ts?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/webui/next-env.d.ts","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/4f11a03dc6cc37f2b5105c08f2e7b24c603ab2f4","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/webui/next-env.d.ts","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/next-env.d.ts?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/4f11a03dc6cc37f2b5105c08f2e7b24c603ab2f4","html":"https://github.com/eidolon-ai/eidolon/blob/main/webui/next-env.d.ts"}},{"name":"next.config.js","path":"webui/next.config.js","sha":"72ac83d8d3bd1315272f07d67eb9561e747ac4f7","size":447,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/next.config.js?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/webui/next.config.js","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/72ac83d8d3bd1315272f07d67eb9561e747ac4f7","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/webui/next.config.js","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/next.config.js?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/72ac83d8d3bd1315272f07d67eb9561e747ac4f7","html":"https://github.com/eidolon-ai/eidolon/blob/main/webui/next.config.js"}},{"name":"package.json","path":"webui/package.json","sha":"bef94428e29bbd9f6aaef3b2b03a283b3bc9493c","size":2750,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/package.json?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/webui/package.json","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/bef94428e29bbd9f6aaef3b2b03a283b3bc9493c","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/webui/package.json","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/package.json?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/bef94428e29bbd9f6aaef3b2b03a283b3bc9493c","html":"https://github.com/eidolon-ai/eidolon/blob/main/webui/package.json"}},{"name":"pnpm-lock.yaml","path":"webui/pnpm-lock.yaml","sha":"89d59693397cc45790ee3efc70afe34784a74a31","size":260851,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/pnpm-lock.yaml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/webui/pnpm-lock.yaml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/89d59693397cc45790ee3efc70afe34784a74a31","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/webui/pnpm-lock.yaml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/pnpm-lock.yaml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/89d59693397cc45790ee3efc70afe34784a74a31","html":"https://github.com/eidolon-ai/eidolon/blob/main/webui/pnpm-lock.yaml"}},{"name":"postcss.config.js","path":"webui/postcss.config.js","sha":"fef1b2256d61e21330bc8de1cb6978cfac54a9a9","size":94,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/postcss.config.js?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/webui/postcss.config.js","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/fef1b2256d61e21330bc8de1cb6978cfac54a9a9","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/webui/postcss.config.js","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/postcss.config.js?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/fef1b2256d61e21330bc8de1cb6978cfac54a9a9","html":"https://github.com/eidolon-ai/eidolon/blob/main/webui/postcss.config.js"}},{"name":"prettier.config.cjs","path":"webui/prettier.config.cjs","sha":"687e1053d63ae700d2a9a085baacad928d6fe481","size":928,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/prettier.config.cjs?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/webui/prettier.config.cjs","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/687e1053d63ae700d2a9a085baacad928d6fe481","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/webui/prettier.config.cjs","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/prettier.config.cjs?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/687e1053d63ae700d2a9a085baacad928d6fe481","html":"https://github.com/eidolon-ai/eidolon/blob/main/webui/prettier.config.cjs"}},{"name":"public","path":"webui/public","sha":"d8b90f336ce1e236463865833924563b2526c667","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/public?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/webui/public","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/d8b90f336ce1e236463865833924563b2526c667","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/public?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/d8b90f336ce1e236463865833924563b2526c667","html":"https://github.com/eidolon-ai/eidolon/tree/main/webui/public"}},{"name":"tailwind.config.js","path":"webui/tailwind.config.js","sha":"13d4e6aefd4369e1d6c604a8b4e669a992d8c6af","size":3740,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/tailwind.config.js?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/webui/tailwind.config.js","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/13d4e6aefd4369e1d6c604a8b4e669a992d8c6af","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/webui/tailwind.config.js","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/tailwind.config.js?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/13d4e6aefd4369e1d6c604a8b4e669a992d8c6af","html":"https://github.com/eidolon-ai/eidolon/blob/main/webui/tailwind.config.js"}},{"name":"template.env","path":"webui/template.env","sha":"55456d9f70a068b015b0d22de0967c5adf92b029","size":1799,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/template.env?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/webui/template.env","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/55456d9f70a068b015b0d22de0967c5adf92b029","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/webui/template.env","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/template.env?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/55456d9f70a068b015b0d22de0967c5adf92b029","html":"https://github.com/eidolon-ai/eidolon/blob/main/webui/template.env"}},{"name":"tsconfig.json","path":"webui/tsconfig.json","sha":"d357c3e7f7e296734ecb37f842630e2be7a9190d","size":797,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/tsconfig.json?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/webui/tsconfig.json","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/d357c3e7f7e296734ecb37f842630e2be7a9190d","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/webui/tsconfig.json","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/tsconfig.json?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/d357c3e7f7e296734ecb37f842630e2be7a9190d","html":"https://github.com/eidolon-ai/eidolon/blob/main/webui/tsconfig.json"}},{"name":"tsconfig.test.json","path":"webui/tsconfig.test.json","sha":"6883588123d20457e0812faac5c592cd8213faa9","size":947,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/tsconfig.test.json?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/webui/tsconfig.test.json","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/6883588123d20457e0812faac5c592cd8213faa9","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/webui/tsconfig.test.json","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/tsconfig.test.json?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/6883588123d20457e0812faac5c592cd8213faa9","html":"https://github.com/eidolon-ai/eidolon/blob/main/webui/tsconfig.test.json"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:35:39 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E576:253F79:165700:1FC6A9:65D51B2B
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4585'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '415'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/.vscode?ref=main
  response:
    content: '[{"name":"extensions.json","path":"docs/.vscode/extensions.json","sha":"22a15055d638988eb33bb61536d27f623df92e4a","size":87,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/.vscode/extensions.json?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/docs/.vscode/extensions.json","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/22a15055d638988eb33bb61536d27f623df92e4a","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/docs/.vscode/extensions.json","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/.vscode/extensions.json?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/22a15055d638988eb33bb61536d27f623df92e4a","html":"https://github.com/eidolon-ai/eidolon/blob/main/docs/.vscode/extensions.json"}},{"name":"launch.json","path":"docs/.vscode/launch.json","sha":"d6422097621fd7c1b1ccc6daa670c46aed7ef5b7","size":207,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/.vscode/launch.json?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/docs/.vscode/launch.json","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/d6422097621fd7c1b1ccc6daa670c46aed7ef5b7","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/docs/.vscode/launch.json","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/.vscode/launch.json?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/d6422097621fd7c1b1ccc6daa670c46aed7ef5b7","html":"https://github.com/eidolon-ai/eidolon/blob/main/docs/.vscode/launch.json"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:35:39 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E573:252DF3:14A8E2:1E17F8:65D51B2B
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4583'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '417'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src?ref=main
  response:
    content: '[{"name":"assets","path":"docs/src/assets","sha":"1a4b7fd47c7e285f3737dff49d93b91f95e1c605","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/assets?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/docs/src/assets","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/1a4b7fd47c7e285f3737dff49d93b91f95e1c605","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/assets?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/1a4b7fd47c7e285f3737dff49d93b91f95e1c605","html":"https://github.com/eidolon-ai/eidolon/tree/main/docs/src/assets"}},{"name":"components","path":"docs/src/components","sha":"12eefd49f15b78a7896d1f07d75f0a928c80a470","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/components?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/docs/src/components","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/12eefd49f15b78a7896d1f07d75f0a928c80a470","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/components?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/12eefd49f15b78a7896d1f07d75f0a928c80a470","html":"https://github.com/eidolon-ai/eidolon/tree/main/docs/src/components"}},{"name":"content","path":"docs/src/content","sha":"b4199a7090b8a4fe4d04165c05b0dc0ee50e70e3","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/content?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/docs/src/content","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/b4199a7090b8a4fe4d04165c05b0dc0ee50e70e3","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/content?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/b4199a7090b8a4fe4d04165c05b0dc0ee50e70e3","html":"https://github.com/eidolon-ai/eidolon/tree/main/docs/src/content"}},{"name":"env.d.ts","path":"docs/src/env.d.ts","sha":"acef35f175aae528d22fdc6b91e819aa52837fd9","size":85,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/env.d.ts?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/docs/src/env.d.ts","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/acef35f175aae528d22fdc6b91e819aa52837fd9","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/docs/src/env.d.ts","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/env.d.ts?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/acef35f175aae528d22fdc6b91e819aa52837fd9","html":"https://github.com/eidolon-ai/eidolon/blob/main/docs/src/env.d.ts"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:35:39 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E578:2E1594:2BDD0:39F6F:65D51B2B
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4582'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '418'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/.idea/inspectionProfiles?ref=main
  response:
    content: '[{"name":"Project_Default.xml","path":".idea/inspectionProfiles/Project_Default.xml","sha":"97cfbefa49e9a7226bf39a225c1775c31dbc458e","size":1508,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/.idea/inspectionProfiles/Project_Default.xml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/.idea/inspectionProfiles/Project_Default.xml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/97cfbefa49e9a7226bf39a225c1775c31dbc458e","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/.idea/inspectionProfiles/Project_Default.xml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/.idea/inspectionProfiles/Project_Default.xml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/97cfbefa49e9a7226bf39a225c1775c31dbc458e","html":"https://github.com/eidolon-ai/eidolon/blob/main/.idea/inspectionProfiles/Project_Default.xml"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:35:39 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E570:2518DF:162841:1F97CD:65D51B2B
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4581'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '419'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/cli/eidolon_ai_cli?ref=main
  response:
    content: '[{"name":"StreamProcessor.py","path":"cli/eidolon_ai_cli/StreamProcessor.py","sha":"5784ea2a9ec662798a8a622ecca81666fa66ce5f","size":4719,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/cli/eidolon_ai_cli/StreamProcessor.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/cli/eidolon_ai_cli/StreamProcessor.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/5784ea2a9ec662798a8a622ecca81666fa66ce5f","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/cli/eidolon_ai_cli/StreamProcessor.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/cli/eidolon_ai_cli/StreamProcessor.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/5784ea2a9ec662798a8a622ecca81666fa66ce5f","html":"https://github.com/eidolon-ai/eidolon/blob/main/cli/eidolon_ai_cli/StreamProcessor.py"}},{"name":"__init__.py","path":"cli/eidolon_ai_cli/__init__.py","sha":"e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/cli/eidolon_ai_cli/__init__.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/cli/eidolon_ai_cli/__init__.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/cli/eidolon_ai_cli/__init__.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/cli/eidolon_ai_cli/__init__.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","html":"https://github.com/eidolon-ai/eidolon/blob/main/cli/eidolon_ai_cli/__init__.py"}},{"name":"auth_web_server.py","path":"cli/eidolon_ai_cli/auth_web_server.py","sha":"dabdad5523aa0351492e833dbc938ec51be87f49","size":1531,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/cli/eidolon_ai_cli/auth_web_server.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/cli/eidolon_ai_cli/auth_web_server.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/dabdad5523aa0351492e833dbc938ec51be87f49","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/cli/eidolon_ai_cli/auth_web_server.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/cli/eidolon_ai_cli/auth_web_server.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/dabdad5523aa0351492e833dbc938ec51be87f49","html":"https://github.com/eidolon-ai/eidolon/blob/main/cli/eidolon_ai_cli/auth_web_server.py"}},{"name":"client.py","path":"cli/eidolon_ai_cli/client.py","sha":"80ad992f96c769d3c1440a2abf89528657da3e6a","size":8860,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/cli/eidolon_ai_cli/client.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/cli/eidolon_ai_cli/client.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/80ad992f96c769d3c1440a2abf89528657da3e6a","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/cli/eidolon_ai_cli/client.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/cli/eidolon_ai_cli/client.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/80ad992f96c769d3c1440a2abf89528657da3e6a","html":"https://github.com/eidolon-ai/eidolon/blob/main/cli/eidolon_ai_cli/client.py"}},{"name":"live_console.py","path":"cli/eidolon_ai_cli/live_console.py","sha":"ed69e78d7faef0f9f7c799bd6a750d0bde354883","size":4008,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/cli/eidolon_ai_cli/live_console.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/cli/eidolon_ai_cli/live_console.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/ed69e78d7faef0f9f7c799bd6a750d0bde354883","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/cli/eidolon_ai_cli/live_console.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/cli/eidolon_ai_cli/live_console.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/ed69e78d7faef0f9f7c799bd6a750d0bde354883","html":"https://github.com/eidolon-ai/eidolon/blob/main/cli/eidolon_ai_cli/live_console.py"}},{"name":"main.py","path":"cli/eidolon_ai_cli/main.py","sha":"3763a0ace275c1740216648d3ae9dfd096f51ca2","size":2964,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/cli/eidolon_ai_cli/main.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/cli/eidolon_ai_cli/main.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/3763a0ace275c1740216648d3ae9dfd096f51ca2","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/cli/eidolon_ai_cli/main.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/cli/eidolon_ai_cli/main.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/3763a0ace275c1740216648d3ae9dfd096f51ca2","html":"https://github.com/eidolon-ai/eidolon/blob/main/cli/eidolon_ai_cli/main.py"}},{"name":"markdown.py","path":"cli/eidolon_ai_cli/markdown.py","sha":"c256021352af3b8f5467c6b8da33a5d8d7feb224","size":23673,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/cli/eidolon_ai_cli/markdown.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/cli/eidolon_ai_cli/markdown.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/c256021352af3b8f5467c6b8da33a5d8d7feb224","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/cli/eidolon_ai_cli/markdown.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/cli/eidolon_ai_cli/markdown.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/c256021352af3b8f5467c6b8da33a5d8d7feb224","html":"https://github.com/eidolon-ai/eidolon/blob/main/cli/eidolon_ai_cli/markdown.py"}},{"name":"schema.py","path":"cli/eidolon_ai_cli/schema.py","sha":"1b1b9cca0db4cd64d4045d9080cb3fc75bd52a9a","size":12296,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/cli/eidolon_ai_cli/schema.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/cli/eidolon_ai_cli/schema.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/1b1b9cca0db4cd64d4045d9080cb3fc75bd52a9a","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/cli/eidolon_ai_cli/schema.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/cli/eidolon_ai_cli/schema.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/1b1b9cca0db4cd64d4045d9080cb3fc75bd52a9a","html":"https://github.com/eidolon-ai/eidolon/blob/main/cli/eidolon_ai_cli/schema.py"}},{"name":"security.py","path":"cli/eidolon_ai_cli/security.py","sha":"11015ec30cad57ae40dd30a8c7b77251ec8e7cc8","size":5188,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/cli/eidolon_ai_cli/security.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/cli/eidolon_ai_cli/security.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/11015ec30cad57ae40dd30a8c7b77251ec8e7cc8","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/cli/eidolon_ai_cli/security.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/cli/eidolon_ai_cli/security.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/11015ec30cad57ae40dd30a8c7b77251ec8e7cc8","html":"https://github.com/eidolon-ai/eidolon/blob/main/cli/eidolon_ai_cli/security.py"}},{"name":"terminal2.py","path":"cli/eidolon_ai_cli/terminal2.py","sha":"36324c7fb9b69e96aa25df6ba99f2bec8a409ed4","size":9278,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/cli/eidolon_ai_cli/terminal2.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/cli/eidolon_ai_cli/terminal2.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/36324c7fb9b69e96aa25df6ba99f2bec8a409ed4","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/cli/eidolon_ai_cli/terminal2.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/cli/eidolon_ai_cli/terminal2.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/36324c7fb9b69e96aa25df6ba99f2bec8a409ed4","html":"https://github.com/eidolon-ai/eidolon/blob/main/cli/eidolon_ai_cli/terminal2.py"}},{"name":"util.py","path":"cli/eidolon_ai_cli/util.py","sha":"d82f35c68fde39162e0e4bdd4cb6b65fa154075b","size":2669,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/cli/eidolon_ai_cli/util.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/cli/eidolon_ai_cli/util.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/d82f35c68fde39162e0e4bdd4cb6b65fa154075b","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/cli/eidolon_ai_cli/util.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/cli/eidolon_ai_cli/util.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/d82f35c68fde39162e0e4bdd4cb6b65fa154075b","html":"https://github.com/eidolon-ai/eidolon/blob/main/cli/eidolon_ai_cli/util.py"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:35:39 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E572:25592D:15555A:1EC452:65D51B2B
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4579'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '421'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/public?ref=main
  response:
    content: '[{"name":"CNAME","path":"docs/public/CNAME","sha":"247629a581887a7e4aea37ccbcd411b5855e2520","size":18,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/public/CNAME?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/docs/public/CNAME","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/247629a581887a7e4aea37ccbcd411b5855e2520","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/docs/public/CNAME","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/public/CNAME?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/247629a581887a7e4aea37ccbcd411b5855e2520","html":"https://github.com/eidolon-ai/eidolon/blob/main/docs/public/CNAME"}},{"name":"favicon.ico","path":"docs/public/favicon.ico","sha":"36d1b6d2ae8dec009c608e0ec83cf261a455f285","size":1150,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/public/favicon.ico?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/docs/public/favicon.ico","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/36d1b6d2ae8dec009c608e0ec83cf261a455f285","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/docs/public/favicon.ico","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/public/favicon.ico?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/36d1b6d2ae8dec009c608e0ec83cf261a455f285","html":"https://github.com/eidolon-ai/eidolon/blob/main/docs/public/favicon.ico"}},{"name":"favicon.svg","path":"docs/public/favicon.svg","sha":"cba5ac140a25951a20704b481a65514838f0f4b6","size":696,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/public/favicon.svg?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/docs/public/favicon.svg","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/cba5ac140a25951a20704b481a65514838f0f4b6","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/docs/public/favicon.svg","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/public/favicon.svg?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/cba5ac140a25951a20704b481a65514838f0f4b6","html":"https://github.com/eidolon-ai/eidolon/blob/main/docs/public/favicon.svg"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:35:39 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E577:2537C8:17550B:20C4DC:65D51B2B
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4580'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '420'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/.idea/runConfigurations?ref=main
  response:
    content: '[{"name":"code_search.xml","path":".idea/runConfigurations/code_search.xml","sha":"bc6c39f0174871ff6fc077ae3bae6eb52ff0909d","size":1305,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/.idea/runConfigurations/code_search.xml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/.idea/runConfigurations/code_search.xml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/bc6c39f0174871ff6fc077ae3bae6eb52ff0909d","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/.idea/runConfigurations/code_search.xml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/.idea/runConfigurations/code_search.xml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/bc6c39f0174871ff6fc077ae3bae6eb52ff0909d","html":"https://github.com/eidolon-ai/eidolon/blob/main/.idea/runConfigurations/code_search.xml"}},{"name":"getting_started_1.xml","path":".idea/runConfigurations/getting_started_1.xml","sha":"dd963aa48f7ae675d919815e148a748a7f7cf523","size":1327,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/.idea/runConfigurations/getting_started_1.xml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/.idea/runConfigurations/getting_started_1.xml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/dd963aa48f7ae675d919815e148a748a7f7cf523","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/.idea/runConfigurations/getting_started_1.xml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/.idea/runConfigurations/getting_started_1.xml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/dd963aa48f7ae675d919815e148a748a7f7cf523","html":"https://github.com/eidolon-ai/eidolon/blob/main/.idea/runConfigurations/getting_started_1.xml"}},{"name":"getting_started_2.xml","path":".idea/runConfigurations/getting_started_2.xml","sha":"4aa44fbe68fd1d6bfd02b23029cc2ccb7b34b1b9","size":1321,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/.idea/runConfigurations/getting_started_2.xml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/.idea/runConfigurations/getting_started_2.xml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/4aa44fbe68fd1d6bfd02b23029cc2ccb7b34b1b9","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/.idea/runConfigurations/getting_started_2.xml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/.idea/runConfigurations/getting_started_2.xml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/4aa44fbe68fd1d6bfd02b23029cc2ccb7b34b1b9","html":"https://github.com/eidolon-ai/eidolon/blob/main/.idea/runConfigurations/getting_started_2.xml"}},{"name":"getting_started_3.xml","path":".idea/runConfigurations/getting_started_3.xml","sha":"20e5bd824dd33931c35c61b98e82706336a92514","size":1327,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/.idea/runConfigurations/getting_started_3.xml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/.idea/runConfigurations/getting_started_3.xml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/20e5bd824dd33931c35c61b98e82706336a92514","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/.idea/runConfigurations/getting_started_3.xml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/.idea/runConfigurations/getting_started_3.xml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/20e5bd824dd33931c35c61b98e82706336a92514","html":"https://github.com/eidolon-ai/eidolon/blob/main/.idea/runConfigurations/getting_started_3.xml"}},{"name":"getting_started_4.xml","path":".idea/runConfigurations/getting_started_4.xml","sha":"420ec6c50690ec181d112d7bf0d0b3a78d4c7ca1","size":1326,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/.idea/runConfigurations/getting_started_4.xml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/.idea/runConfigurations/getting_started_4.xml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/420ec6c50690ec181d112d7bf0d0b3a78d4c7ca1","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/.idea/runConfigurations/getting_started_4.xml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/.idea/runConfigurations/getting_started_4.xml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/420ec6c50690ec181d112d7bf0d0b3a78d4c7ca1","html":"https://github.com/eidolon-ai/eidolon/blob/main/.idea/runConfigurations/getting_started_4.xml"}},{"name":"hello_world.xml","path":".idea/runConfigurations/hello_world.xml","sha":"b476c771e80a380421b3784a71954027a04c345a","size":1273,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/.idea/runConfigurations/hello_world.xml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/.idea/runConfigurations/hello_world.xml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/b476c771e80a380421b3784a71954027a04c345a","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/.idea/runConfigurations/hello_world.xml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/.idea/runConfigurations/hello_world.xml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/b476c771e80a380421b3784a71954027a04c345a","html":"https://github.com/eidolon-ai/eidolon/blob/main/.idea/runConfigurations/hello_world.xml"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:35:39 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E576:253F79:165702:1FC6B0:65D51B2B
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4578'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '422'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/cli/tests?ref=main
  response:
    content: '[{"name":"__init__.py","path":"cli/tests/__init__.py","sha":"e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/cli/tests/__init__.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/cli/tests/__init__.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/cli/tests/__init__.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/cli/tests/__init__.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","html":"https://github.com/eidolon-ai/eidolon/blob/main/cli/tests/__init__.py"}},{"name":"test_cli.py","path":"cli/tests/test_cli.py","sha":"09bd641141f6b81eeb4feb2d8385e4d6f440b6ed","size":103,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/cli/tests/test_cli.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/cli/tests/test_cli.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/09bd641141f6b81eeb4feb2d8385e4d6f440b6ed","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/cli/tests/test_cli.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/cli/tests/test_cli.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/09bd641141f6b81eeb4feb2d8385e4d6f440b6ed","html":"https://github.com/eidolon-ai/eidolon/blob/main/cli/tests/test_cli.py"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:35:39 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E573:252DF3:14A8E5:1E17FC:65D51B2B
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4577'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '423'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk?ref=main
  response:
    content: '[{"name":"__init__.py","path":"sdk/eidolon_ai_sdk/__init__.py","sha":"e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/__init__.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/__init__.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/__init__.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/__init__.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/__init__.py"}},{"name":"agent","path":"sdk/eidolon_ai_sdk/agent","sha":"92155b89509f1fb5306d068507adc6369f5ac8ad","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/sdk/eidolon_ai_sdk/agent","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/92155b89509f1fb5306d068507adc6369f5ac8ad","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/92155b89509f1fb5306d068507adc6369f5ac8ad","html":"https://github.com/eidolon-ai/eidolon/tree/main/sdk/eidolon_ai_sdk/agent"}},{"name":"agent_os.py","path":"sdk/eidolon_ai_sdk/agent_os.py","sha":"f1188e1d46bbd907424753a815ba2470ed864a1f","size":4316,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent_os.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent_os.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/f1188e1d46bbd907424753a815ba2470ed864a1f","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/agent_os.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent_os.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/f1188e1d46bbd907424753a815ba2470ed864a1f","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent_os.py"}},{"name":"bin","path":"sdk/eidolon_ai_sdk/bin","sha":"d9ec668deb54ede8721c414c22e1b1d45012c6b0","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/bin?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/sdk/eidolon_ai_sdk/bin","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/d9ec668deb54ede8721c414c22e1b1d45012c6b0","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/bin?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/d9ec668deb54ede8721c414c22e1b1d45012c6b0","html":"https://github.com/eidolon-ai/eidolon/tree/main/sdk/eidolon_ai_sdk/bin"}},{"name":"builtins","path":"sdk/eidolon_ai_sdk/builtins","sha":"c55b8ed99aac05633caed033bed80b5075d8a8f3","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/builtins?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/sdk/eidolon_ai_sdk/builtins","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/c55b8ed99aac05633caed033bed80b5075d8a8f3","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/builtins?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/c55b8ed99aac05633caed033bed80b5075d8a8f3","html":"https://github.com/eidolon-ai/eidolon/tree/main/sdk/eidolon_ai_sdk/builtins"}},{"name":"cpu","path":"sdk/eidolon_ai_sdk/cpu","sha":"5b21e32c978cdbbdbbf63ea97be809d59c592087","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/cpu?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/sdk/eidolon_ai_sdk/cpu","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/5b21e32c978cdbbdbbf63ea97be809d59c592087","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/cpu?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/5b21e32c978cdbbdbbf63ea97be809d59c592087","html":"https://github.com/eidolon-ai/eidolon/tree/main/sdk/eidolon_ai_sdk/cpu"}},{"name":"io","path":"sdk/eidolon_ai_sdk/io","sha":"038c182bd7121514546d09b19fccabd4e277a744","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/io?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/sdk/eidolon_ai_sdk/io","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/038c182bd7121514546d09b19fccabd4e277a744","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/io?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/038c182bd7121514546d09b19fccabd4e277a744","html":"https://github.com/eidolon-ai/eidolon/tree/main/sdk/eidolon_ai_sdk/io"}},{"name":"memory","path":"sdk/eidolon_ai_sdk/memory","sha":"4cee40d502d643951aab9b7ff787bbedff46c0ec","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/memory?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/sdk/eidolon_ai_sdk/memory","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/4cee40d502d643951aab9b7ff787bbedff46c0ec","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/memory?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/4cee40d502d643951aab9b7ff787bbedff46c0ec","html":"https://github.com/eidolon-ai/eidolon/tree/main/sdk/eidolon_ai_sdk/memory"}},{"name":"security","path":"sdk/eidolon_ai_sdk/security","sha":"2e294df973b3224c7a6426140e923c025f00b13c","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/security?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/sdk/eidolon_ai_sdk/security","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/2e294df973b3224c7a6426140e923c025f00b13c","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/security?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/2e294df973b3224c7a6426140e923c025f00b13c","html":"https://github.com/eidolon-ai/eidolon/tree/main/sdk/eidolon_ai_sdk/security"}},{"name":"system","path":"sdk/eidolon_ai_sdk/system","sha":"7790493743b3f54be55d1cd2feca331cd2c6aab1","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/system?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/sdk/eidolon_ai_sdk/system","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/7790493743b3f54be55d1cd2feca331cd2c6aab1","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/system?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/7790493743b3f54be55d1cd2feca331cd2c6aab1","html":"https://github.com/eidolon-ai/eidolon/tree/main/sdk/eidolon_ai_sdk/system"}},{"name":"util","path":"sdk/eidolon_ai_sdk/util","sha":"1f403676c6a53342829e1f4582a04286c7c8165b","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/util?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/sdk/eidolon_ai_sdk/util","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/1f403676c6a53342829e1f4582a04286c7c8165b","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/util?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/1f403676c6a53342829e1f4582a04286c7c8165b","html":"https://github.com/eidolon-ai/eidolon/tree/main/sdk/eidolon_ai_sdk/util"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:35:39 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E575:2552AA:15DEAA:1F4E3C:65D51B2B
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4576'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '424'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/tests?ref=main
  response:
    content: '[{"name":"conftest.py","path":"examples/tests/conftest.py","sha":"e073c8d86ec45794bd792e6f7075b8daed9e9113","size":2310,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/tests/conftest.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/tests/conftest.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e073c8d86ec45794bd792e6f7075b8daed9e9113","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/tests/conftest.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/tests/conftest.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e073c8d86ec45794bd792e6f7075b8daed9e9113","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/tests/conftest.py"}},{"name":"test_code_search.py","path":"examples/tests/test_code_search.py","sha":"a662cd135b8b4a768fd232c0b200715e0371b11c","size":497,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/tests/test_code_search.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/tests/test_code_search.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/a662cd135b8b4a768fd232c0b200715e0371b11c","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/tests/test_code_search.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/tests/test_code_search.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/a662cd135b8b4a768fd232c0b200715e0371b11c","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/tests/test_code_search.py"}},{"name":"test_getting_started.py","path":"examples/tests/test_getting_started.py","sha":"ba058d885ea73ea4e7b3de77a6f0ca3aca99e9e3","size":2033,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/tests/test_getting_started.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/tests/test_getting_started.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/ba058d885ea73ea4e7b3de77a6f0ca3aca99e9e3","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/tests/test_getting_started.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/tests/test_getting_started.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/ba058d885ea73ea4e7b3de77a6f0ca3aca99e9e3","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/tests/test_getting_started.py"}},{"name":"test_hello_world.py","path":"examples/tests/test_hello_world.py","sha":"87a0f8c307413fc198c2ec219fb26ea49d3d71ed","size":1446,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/tests/test_hello_world.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/tests/test_hello_world.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/87a0f8c307413fc198c2ec219fb26ea49d3d71ed","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/tests/test_hello_world.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/tests/test_hello_world.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/87a0f8c307413fc198c2ec219fb26ea49d3d71ed","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/tests/test_hello_world.py"}},{"name":"test_k8_logic_unit.py","path":"examples/tests/test_k8_logic_unit.py","sha":"7c15618bf04eeee06c571af5a83baa2fba14a243","size":1799,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/tests/test_k8_logic_unit.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/tests/test_k8_logic_unit.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/7c15618bf04eeee06c571af5a83baa2fba14a243","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/tests/test_k8_logic_unit.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/tests/test_k8_logic_unit.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/7c15618bf04eeee06c571af5a83baa2fba14a243","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/tests/test_k8_logic_unit.py"}},{"name":"test_quickstart.py","path":"examples/tests/test_quickstart.py","sha":"49612afbb16ddc49c4060bf26576facded589c3a","size":497,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/tests/test_quickstart.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/tests/test_quickstart.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/49612afbb16ddc49c4060bf26576facded589c3a","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/tests/test_quickstart.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/tests/test_quickstart.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/49612afbb16ddc49c4060bf26576facded589c3a","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/tests/test_quickstart.py"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:35:39 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E578:2E1594:2BDD6:39F70:65D51B2B
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4575'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '425'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests?ref=main
  response:
    content: '[{"name":"__init__.py","path":"sdk/tests/__init__.py","sha":"e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/__init__.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/__init__.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/__init__.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/__init__.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/__init__.py"}},{"name":"agent","path":"sdk/tests/agent","sha":"2d23fed62f35dbf40a67d894349c35571cf0a952","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/agent?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/sdk/tests/agent","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/2d23fed62f35dbf40a67d894349c35571cf0a952","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/agent?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/2d23fed62f35dbf40a67d894349c35571cf0a952","html":"https://github.com/eidolon-ai/eidolon/tree/main/sdk/tests/agent"}},{"name":"conftest.py","path":"sdk/tests/conftest.py","sha":"d3cc014532d5bc85a92adc586c16a621fd58e112","size":12065,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/conftest.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/conftest.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/d3cc014532d5bc85a92adc586c16a621fd58e112","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/conftest.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/conftest.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/d3cc014532d5bc85a92adc586c16a621fd58e112","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/conftest.py"}},{"name":"cpu","path":"sdk/tests/cpu","sha":"1820090a3a9c5df18879bdf11018d99a16f2c088","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/cpu?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/sdk/tests/cpu","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/1820090a3a9c5df18879bdf11018d99a16f2c088","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/cpu?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/1820090a3a9c5df18879bdf11018d99a16f2c088","html":"https://github.com/eidolon-ai/eidolon/tree/main/sdk/tests/cpu"}},{"name":"images","path":"sdk/tests/images","sha":"e1574fb7e93ec022ca1d71379e4a83bea512e62c","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/images?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/sdk/tests/images","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/e1574fb7e93ec022ca1d71379e4a83bea512e62c","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/images?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/e1574fb7e93ec022ca1d71379e4a83bea512e62c","html":"https://github.com/eidolon-ai/eidolon/tree/main/sdk/tests/images"}},{"name":"impl","path":"sdk/tests/impl","sha":"d13bd29f9c0f0b0e15e1816dd50024b90a9e7aba","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/impl?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/sdk/tests/impl","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/d13bd29f9c0f0b0e15e1816dd50024b90a9e7aba","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/impl?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/d13bd29f9c0f0b0e15e1816dd50024b90a9e7aba","html":"https://github.com/eidolon-ai/eidolon/tree/main/sdk/tests/impl"}},{"name":"system","path":"sdk/tests/system","sha":"7f2688cb21f7d668d5c6ec0e24e7f7139dbb82b6","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/system?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/sdk/tests/system","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/7f2688cb21f7d668d5c6ec0e24e7f7139dbb82b6","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/system?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/7f2688cb21f7d668d5c6ec0e24e7f7139dbb82b6","html":"https://github.com/eidolon-ai/eidolon/tree/main/sdk/tests/system"}},{"name":"test_events.py","path":"sdk/tests/test_events.py","sha":"5419ee6b388499f622c0ac4b2c2b9d14a6e755c1","size":150,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/test_events.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/test_events.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/5419ee6b388499f622c0ac4b2c2b9d14a6e755c1","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/test_events.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/test_events.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/5419ee6b388499f622c0ac4b2c2b9d14a6e755c1","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/test_events.py"}},{"name":"test_replay.py","path":"sdk/tests/test_replay.py","sha":"0334b5b41494d1fb8fac63feec93ebf6af099d47","size":4786,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/test_replay.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/test_replay.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/0334b5b41494d1fb8fac63feec93ebf6af099d47","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/test_replay.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/test_replay.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/0334b5b41494d1fb8fac63feec93ebf6af099d47","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/test_replay.py"}},{"name":"test_request_context.py","path":"sdk/tests/test_request_context.py","sha":"e251c5b5215122612c1e19fb8fa61035316ba7a5","size":514,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/test_request_context.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/test_request_context.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e251c5b5215122612c1e19fb8fa61035316ba7a5","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/test_request_context.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/test_request_context.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e251c5b5215122612c1e19fb8fa61035316ba7a5","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/test_request_context.py"}},{"name":"test_stream_collector.py","path":"sdk/tests/test_stream_collector.py","sha":"796a163e53d4985fed2539c5755ae7d2add0408c","size":1804,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/test_stream_collector.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/test_stream_collector.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/796a163e53d4985fed2539c5755ae7d2add0408c","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/test_stream_collector.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/test_stream_collector.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/796a163e53d4985fed2539c5755ae7d2add0408c","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/test_stream_collector.py"}},{"name":"test_web_search.py","path":"sdk/tests/test_web_search.py","sha":"6aa963043456c34f6a4642a977833205bc65ee64","size":519,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/test_web_search.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/test_web_search.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/6aa963043456c34f6a4642a977833205bc65ee64","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/test_web_search.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/test_web_search.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/6aa963043456c34f6a4642a977833205bc65ee64","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/test_web_search.py"}},{"name":"util","path":"sdk/tests/util","sha":"7cb4c95fef61cc0672d672a3f225ec433cb4aa87","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/util?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/sdk/tests/util","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/7cb4c95fef61cc0672d672a3f225ec433cb4aa87","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/util?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/7cb4c95fef61cc0672d672a3f225ec433cb4aa87","html":"https://github.com/eidolon-ai/eidolon/tree/main/sdk/tests/util"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:35:39 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E570:2518DF:16284D:1F97D4:65D51B2B
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4574'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '426'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/lib?ref=main
  response:
    content: '[{"name":"display-elements.ts","path":"webui/lib/display-elements.ts","sha":"e3fe5ad002fa4bbd86b496fad4d7c63e7b83bc02","size":2869,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/lib/display-elements.ts?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/webui/lib/display-elements.ts","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e3fe5ad002fa4bbd86b496fad4d7c63e7b83bc02","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/webui/lib/display-elements.ts","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/lib/display-elements.ts?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e3fe5ad002fa4bbd86b496fad4d7c63e7b83bc02","html":"https://github.com/eidolon-ai/eidolon/blob/main/webui/lib/display-elements.ts"}},{"name":"fonts.ts","path":"webui/lib/fonts.ts","sha":"2485ab7c7a16212b705a5bc397b362aab751ba59","size":253,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/lib/fonts.ts?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/webui/lib/fonts.ts","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/2485ab7c7a16212b705a5bc397b362aab751ba59","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/webui/lib/fonts.ts","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/lib/fonts.ts?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/2485ab7c7a16212b705a5bc397b362aab751ba59","html":"https://github.com/eidolon-ai/eidolon/blob/main/webui/lib/fonts.ts"}},{"name":"hooks","path":"webui/lib/hooks","sha":"a9851fb571d8e1657a3e580d223cc1c3322c92e2","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/lib/hooks?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/webui/lib/hooks","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/a9851fb571d8e1657a3e580d223cc1c3322c92e2","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/lib/hooks?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/a9851fb571d8e1657a3e580d223cc1c3322c92e2","html":"https://github.com/eidolon-ai/eidolon/tree/main/webui/lib/hooks"}},{"name":"types.ts","path":"webui/lib/types.ts","sha":"fdb82ec0b7a1888c882ae2d8927c8841c13a6445","size":3432,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/lib/types.ts?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/webui/lib/types.ts","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/fdb82ec0b7a1888c882ae2d8927c8841c13a6445","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/webui/lib/types.ts","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/lib/types.ts?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/fdb82ec0b7a1888c882ae2d8927c8841c13a6445","html":"https://github.com/eidolon-ai/eidolon/blob/main/webui/lib/types.ts"}},{"name":"utils.ts","path":"webui/lib/utils.ts","sha":"b8b0948ad83974ce341ee3a626cafe9d02f722f7","size":162,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/lib/utils.ts?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/webui/lib/utils.ts","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/b8b0948ad83974ce341ee3a626cafe9d02f722f7","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/webui/lib/utils.ts","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/lib/utils.ts?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/b8b0948ad83974ce341ee3a626cafe9d02f722f7","html":"https://github.com/eidolon-ai/eidolon/blob/main/webui/lib/utils.ts"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:35:39 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E571:25886F:14488E:1DB83D:65D51B2B
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4572'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '428'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/content?ref=main
  response:
    content: '[{"name":"config.ts","path":"docs/src/content/config.ts","sha":"9df91b6044424c8275f3d9f46c8a46cdefccc1ae","size":267,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/content/config.ts?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/docs/src/content/config.ts","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/9df91b6044424c8275f3d9f46c8a46cdefccc1ae","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/docs/src/content/config.ts","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/content/config.ts?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/9df91b6044424c8275f3d9f46c8a46cdefccc1ae","html":"https://github.com/eidolon-ai/eidolon/blob/main/docs/src/content/config.ts"}},{"name":"docs","path":"docs/src/content/docs","sha":"d82a463a89436dd5d27d200ad6ebe81c6a97f644","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/content/docs?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/docs/src/content/docs","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/d82a463a89436dd5d27d200ad6ebe81c6a97f644","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/content/docs?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/d82a463a89436dd5d27d200ad6ebe81c6a97f644","html":"https://github.com/eidolon-ai/eidolon/tree/main/docs/src/content/docs"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:35:39 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E573:252DF3:14A8E7:1E17FF:65D51B2B
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4573'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '427'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples?ref=main
  response:
    content: '[{"name":"__init__.py","path":"examples/eidolon_examples/__init__.py","sha":"e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/__init__.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/__init__.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/eidolon_examples/__init__.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/__init__.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/__init__.py"}},{"name":"code_search","path":"examples/eidolon_examples/code_search","sha":"792d41e614ace3ed0587a3bcc8c3433cb60f4e17","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/code_search?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/examples/eidolon_examples/code_search","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/792d41e614ace3ed0587a3bcc8c3433cb60f4e17","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/code_search?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/792d41e614ace3ed0587a3bcc8c3433cb60f4e17","html":"https://github.com/eidolon-ai/eidolon/tree/main/examples/eidolon_examples/code_search"}},{"name":"game_of_24","path":"examples/eidolon_examples/game_of_24","sha":"62222ee04b2ee04cfd766a566271d3eb80c27e3d","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/game_of_24?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/examples/eidolon_examples/game_of_24","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/62222ee04b2ee04cfd766a566271d3eb80c27e3d","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/game_of_24?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/62222ee04b2ee04cfd766a566271d3eb80c27e3d","html":"https://github.com/eidolon-ai/eidolon/tree/main/examples/eidolon_examples/game_of_24"}},{"name":"getting_started","path":"examples/eidolon_examples/getting_started","sha":"b2fb3ee8a4cde6cdaa34b7f3bf03c51ecfa39741","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/getting_started?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/examples/eidolon_examples/getting_started","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/b2fb3ee8a4cde6cdaa34b7f3bf03c51ecfa39741","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/getting_started?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/b2fb3ee8a4cde6cdaa34b7f3bf03c51ecfa39741","html":"https://github.com/eidolon-ai/eidolon/tree/main/examples/eidolon_examples/getting_started"}},{"name":"group_conversation","path":"examples/eidolon_examples/group_conversation","sha":"154f52f1a3391142e06a498668beebc50d25f547","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/group_conversation?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/examples/eidolon_examples/group_conversation","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/154f52f1a3391142e06a498668beebc50d25f547","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/group_conversation?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/154f52f1a3391142e06a498668beebc50d25f547","html":"https://github.com/eidolon-ai/eidolon/tree/main/examples/eidolon_examples/group_conversation"}},{"name":"hello_world","path":"examples/eidolon_examples/hello_world","sha":"7e087bf4a5c83a8336185b5d748580b30247c7ff","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/hello_world?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/examples/eidolon_examples/hello_world","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/7e087bf4a5c83a8336185b5d748580b30247c7ff","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/hello_world?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/7e087bf4a5c83a8336185b5d748580b30247c7ff","html":"https://github.com/eidolon-ai/eidolon/tree/main/examples/eidolon_examples/hello_world"}},{"name":"k8_monitor","path":"examples/eidolon_examples/k8_monitor","sha":"f0490021bbb4788db87baea8ab2bf82de437375a","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/k8_monitor?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/examples/eidolon_examples/k8_monitor","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/f0490021bbb4788db87baea8ab2bf82de437375a","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/k8_monitor?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/f0490021bbb4788db87baea8ab2bf82de437375a","html":"https://github.com/eidolon-ai/eidolon/tree/main/examples/eidolon_examples/k8_monitor"}},{"name":"quickstart","path":"examples/eidolon_examples/quickstart","sha":"8ffb5b0f945a50268a30913d5b78420b403d3578","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/quickstart?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/examples/eidolon_examples/quickstart","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/8ffb5b0f945a50268a30913d5b78420b403d3578","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/quickstart?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/8ffb5b0f945a50268a30913d5b78420b403d3578","html":"https://github.com/eidolon-ai/eidolon/tree/main/examples/eidolon_examples/quickstart"}},{"name":"swifties","path":"examples/eidolon_examples/swifties","sha":"fd354ea01852a4fd47b72e873095a8a0459aa230","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/swifties?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/examples/eidolon_examples/swifties","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/fd354ea01852a4fd47b72e873095a8a0459aa230","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/swifties?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/fd354ea01852a4fd47b72e873095a8a0459aa230","html":"https://github.com/eidolon-ai/eidolon/tree/main/examples/eidolon_examples/swifties"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:35:39 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E574:282C91:DF843:144BB2:65D51B2B
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4570'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '430'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/components?ref=main
  response:
    content: '[{"name":"NewHero.astro","path":"docs/src/components/NewHero.astro","sha":"5f9541f7b17df7d152bd057b070eea7511e82785","size":2703,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/components/NewHero.astro?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/docs/src/components/NewHero.astro","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/5f9541f7b17df7d152bd057b070eea7511e82785","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/docs/src/components/NewHero.astro","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/components/NewHero.astro?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/5f9541f7b17df7d152bd057b070eea7511e82785","html":"https://github.com/eidolon-ai/eidolon/blob/main/docs/src/components/NewHero.astro"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:35:39 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E577:2537C8:175511:20C4E2:65D51B2B
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4569'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '431'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/assets?ref=main
  response:
    content: '[{"name":"fonts","path":"webui/assets/fonts","sha":"ce36890c138d71d6c5f60cf63caae172ffd45f96","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/assets/fonts?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/webui/assets/fonts","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/ce36890c138d71d6c5f60cf63caae172ffd45f96","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/assets/fonts?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/ce36890c138d71d6c5f60cf63caae172ffd45f96","html":"https://github.com/eidolon-ai/eidolon/tree/main/webui/assets/fonts"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:35:39 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E572:25592D:155560:1EC458:65D51B2B
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4571'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '429'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent?ref=main
  response:
    content: '[{"name":"__init__.py","path":"sdk/eidolon_ai_sdk/agent/__init__.py","sha":"e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/__init__.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/__init__.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/agent/__init__.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/__init__.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/__init__.py"}},{"name":"agent.py","path":"sdk/eidolon_ai_sdk/agent/agent.py","sha":"dbafd7f722ec630ddaa4f9493aa7f106abbdebd6","size":2402,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/agent.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/agent.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/dbafd7f722ec630ddaa4f9493aa7f106abbdebd6","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/agent/agent.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/agent.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/dbafd7f722ec630ddaa4f9493aa7f106abbdebd6","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/agent.py"}},{"name":"client.py","path":"sdk/eidolon_ai_sdk/agent/client.py","sha":"f2bacd7e553cb9b05e4fa23a35932d4ddb4d41d7","size":6014,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/client.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/client.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/f2bacd7e553cb9b05e4fa23a35932d4ddb4d41d7","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/agent/client.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/client.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/f2bacd7e553cb9b05e4fa23a35932d4ddb4d41d7","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/client.py"}},{"name":"doc_manager","path":"sdk/eidolon_ai_sdk/agent/doc_manager","sha":"b9e263835fc336e664b3c9b8d6da5fc9e3aa3e56","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/doc_manager?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/sdk/eidolon_ai_sdk/agent/doc_manager","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/b9e263835fc336e664b3c9b8d6da5fc9e3aa3e56","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/doc_manager?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/b9e263835fc336e664b3c9b8d6da5fc9e3aa3e56","html":"https://github.com/eidolon-ai/eidolon/tree/main/sdk/eidolon_ai_sdk/agent/doc_manager"}},{"name":"generic_agent.py","path":"sdk/eidolon_ai_sdk/agent/generic_agent.py","sha":"02a5c7ce9ed0ceb9c7b3313ff7fdcd942a8d5dc7","size":5516,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/generic_agent.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/generic_agent.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/02a5c7ce9ed0ceb9c7b3313ff7fdcd942a8d5dc7","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/agent/generic_agent.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/generic_agent.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/02a5c7ce9ed0ceb9c7b3313ff7fdcd942a8d5dc7","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/generic_agent.py"}},{"name":"retriever_agent","path":"sdk/eidolon_ai_sdk/agent/retriever_agent","sha":"3eec39b3a5e0bc8763cfc9e81b56c4415f00e773","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/retriever_agent?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/sdk/eidolon_ai_sdk/agent/retriever_agent","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/3eec39b3a5e0bc8763cfc9e81b56c4415f00e773","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/retriever_agent?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/3eec39b3a5e0bc8763cfc9e81b56c4415f00e773","html":"https://github.com/eidolon-ai/eidolon/tree/main/sdk/eidolon_ai_sdk/agent/retriever_agent"}},{"name":"tot_agent","path":"sdk/eidolon_ai_sdk/agent/tot_agent","sha":"90912ae83c00c6a44ee84b6a781fe7b56e75c35d","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/tot_agent?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/sdk/eidolon_ai_sdk/agent/tot_agent","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/90912ae83c00c6a44ee84b6a781fe7b56e75c35d","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/tot_agent?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/90912ae83c00c6a44ee84b6a781fe7b56e75c35d","html":"https://github.com/eidolon-ai/eidolon/tree/main/sdk/eidolon_ai_sdk/agent/tot_agent"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:35:40 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E578:2E1594:2BDD8:39F7A:65D51B2B
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4568'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '432'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/bin?ref=main
  response:
    content: '[{"name":"__init__.py","path":"sdk/eidolon_ai_sdk/bin/__init__.py","sha":"e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/bin/__init__.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/bin/__init__.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/bin/__init__.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/bin/__init__.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/bin/__init__.py"}},{"name":"agent_creator.py","path":"sdk/eidolon_ai_sdk/bin/agent_creator.py","sha":"8abbd0395917430afcf522ef067d75b5384e160d","size":9444,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/bin/agent_creator.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/bin/agent_creator.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/8abbd0395917430afcf522ef067d75b5384e160d","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/bin/agent_creator.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/bin/agent_creator.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/8abbd0395917430afcf522ef067d75b5384e160d","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/bin/agent_creator.py"}},{"name":"agent_http_server.py","path":"sdk/eidolon_ai_sdk/bin/agent_http_server.py","sha":"841fecfdcba9a696a144b2dc4cbccab507d908d7","size":8318,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/bin/agent_http_server.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/bin/agent_http_server.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/841fecfdcba9a696a144b2dc4cbccab507d908d7","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/bin/agent_http_server.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/bin/agent_http_server.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/841fecfdcba9a696a144b2dc4cbccab507d908d7","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/bin/agent_http_server.py"}},{"name":"replay.py","path":"sdk/eidolon_ai_sdk/bin/replay.py","sha":"ed6c97f852b81c24d22db1b10d78638807381592","size":3752,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/bin/replay.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/bin/replay.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/ed6c97f852b81c24d22db1b10d78638807381592","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/bin/replay.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/bin/replay.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/ed6c97f852b81c24d22db1b10d78638807381592","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/bin/replay.py"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:35:40 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E575:2552AA:15DEAF:1F4E43:65D51B2B
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4567'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '433'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/assets?ref=main
  response:
    content: '[{"name":"main_images","path":"docs/src/assets/main_images","sha":"6002f20de21f3133a8662e8d9b375159b0069b45","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/assets/main_images?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/docs/src/assets/main_images","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/6002f20de21f3133a8662e8d9b375159b0069b45","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/assets/main_images?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/6002f20de21f3133a8662e8d9b375159b0069b45","html":"https://github.com/eidolon-ai/eidolon/tree/main/docs/src/assets/main_images"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:35:40 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E579:2557D8:1706D8:20766D:65D51B2B
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4566'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '434'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/app?ref=main
  response:
    content: '[{"name":"api","path":"webui/app/api","sha":"10f5c4fe51b44f42aec3562c54f6a32745f84d85","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/app/api?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/webui/app/api","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/10f5c4fe51b44f42aec3562c54f6a32745f84d85","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/app/api?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/10f5c4fe51b44f42aec3562c54f6a32745f84d85","html":"https://github.com/eidolon-ai/eidolon/tree/main/webui/app/api"}},{"name":"chat","path":"webui/app/chat","sha":"6355abae405366a2ef4e1a63a18efbebb55d0478","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/app/chat?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/webui/app/chat","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/6355abae405366a2ef4e1a63a18efbebb55d0478","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/app/chat?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/6355abae405366a2ef4e1a63a18efbebb55d0478","html":"https://github.com/eidolon-ai/eidolon/tree/main/webui/app/chat"}},{"name":"globals.css","path":"webui/app/globals.css","sha":"affab4890a72c51eeea4ba27ebb3111c624e2836","size":2170,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/app/globals.css?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/webui/app/globals.css","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/affab4890a72c51eeea4ba27ebb3111c624e2836","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/webui/app/globals.css","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/app/globals.css?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/affab4890a72c51eeea4ba27ebb3111c624e2836","html":"https://github.com/eidolon-ai/eidolon/blob/main/webui/app/globals.css"}},{"name":"layout-style.css","path":"webui/app/layout-style.css","sha":"3844baa4043ff79b704bad651ba9522f446b90e4","size":589,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/app/layout-style.css?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/webui/app/layout-style.css","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/3844baa4043ff79b704bad651ba9522f446b90e4","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/webui/app/layout-style.css","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/app/layout-style.css?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/3844baa4043ff79b704bad651ba9522f446b90e4","html":"https://github.com/eidolon-ai/eidolon/blob/main/webui/app/layout-style.css"}},{"name":"layout.tsx","path":"webui/app/layout.tsx","sha":"f3722db0475c0d5ce64676fb048e8afccfde4a22","size":1422,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/app/layout.tsx?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/webui/app/layout.tsx","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/f3722db0475c0d5ce64676fb048e8afccfde4a22","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/webui/app/layout.tsx","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/app/layout.tsx?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/f3722db0475c0d5ce64676fb048e8afccfde4a22","html":"https://github.com/eidolon-ai/eidolon/blob/main/webui/app/layout.tsx"}},{"name":"page.tsx","path":"webui/app/page.tsx","sha":"bbdd69ebea44d3f5f22dd88e71d1ffe2dfae4c36","size":293,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/app/page.tsx?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/webui/app/page.tsx","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/bbdd69ebea44d3f5f22dd88e71d1ffe2dfae4c36","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/webui/app/page.tsx","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/app/page.tsx?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/bbdd69ebea44d3f5f22dd88e71d1ffe2dfae4c36","html":"https://github.com/eidolon-ai/eidolon/blob/main/webui/app/page.tsx"}},{"name":"sign-in","path":"webui/app/sign-in","sha":"940716ab5aa0cb4670b52efc75a9e079bf6eef00","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/app/sign-in?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/webui/app/sign-in","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/940716ab5aa0cb4670b52efc75a9e079bf6eef00","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/app/sign-in?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/940716ab5aa0cb4670b52efc75a9e079bf6eef00","html":"https://github.com/eidolon-ai/eidolon/tree/main/webui/app/sign-in"}},{"name":"theme.tsx","path":"webui/app/theme.tsx","sha":"965dc929a99054044ff67d65ae129917f05973fa","size":1922,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/app/theme.tsx?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/webui/app/theme.tsx","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/965dc929a99054044ff67d65ae129917f05973fa","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/webui/app/theme.tsx","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/app/theme.tsx?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/965dc929a99054044ff67d65ae129917f05973fa","html":"https://github.com/eidolon-ai/eidolon/blob/main/webui/app/theme.tsx"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:35:40 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E57A:2524E4:15F8AD:1F6832:65D51B2B
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4565'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '435'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/public?ref=main
  response:
    content: '[{"name":"apple-touch-icon.png","path":"webui/public/apple-touch-icon.png","sha":"0eb831fd3f83deadb29cb4fc846e9feb919a61c2","size":10423,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/public/apple-touch-icon.png?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/webui/public/apple-touch-icon.png","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/0eb831fd3f83deadb29cb4fc846e9feb919a61c2","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/webui/public/apple-touch-icon.png","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/public/apple-touch-icon.png?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/0eb831fd3f83deadb29cb4fc846e9feb919a61c2","html":"https://github.com/eidolon-ai/eidolon/blob/main/webui/public/apple-touch-icon.png"}},{"name":"eidolon_with_gradient.png","path":"webui/public/eidolon_with_gradient.png","sha":"628035ba81d58a773e7b87a2242beba102eb75b2","size":2245999,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/public/eidolon_with_gradient.png?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/webui/public/eidolon_with_gradient.png","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/628035ba81d58a773e7b87a2242beba102eb75b2","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/webui/public/eidolon_with_gradient.png","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/public/eidolon_with_gradient.png?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/628035ba81d58a773e7b87a2242beba102eb75b2","html":"https://github.com/eidolon-ai/eidolon/blob/main/webui/public/eidolon_with_gradient.png"}},{"name":"favicon-16x16.png","path":"webui/public/favicon-16x16.png","sha":"620c7d81f90b455bd9a8ee5a37d4d4f335443076","size":539,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/public/favicon-16x16.png?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/webui/public/favicon-16x16.png","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/620c7d81f90b455bd9a8ee5a37d4d4f335443076","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/webui/public/favicon-16x16.png","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/public/favicon-16x16.png?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/620c7d81f90b455bd9a8ee5a37d4d4f335443076","html":"https://github.com/eidolon-ai/eidolon/blob/main/webui/public/favicon-16x16.png"}},{"name":"favicon.ico","path":"webui/public/favicon.ico","sha":"7452b5dc69b2a634c86779ee4cd4c13319549b43","size":15406,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/public/favicon.ico?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/webui/public/favicon.ico","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/7452b5dc69b2a634c86779ee4cd4c13319549b43","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/webui/public/favicon.ico","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/public/favicon.ico?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/7452b5dc69b2a634c86779ee4cd4c13319549b43","html":"https://github.com/eidolon-ai/eidolon/blob/main/webui/public/favicon.ico"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:35:40 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E57B:254ED9:168112:1FF020:65D51B2B
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4564'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '436'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/security?ref=main
  response:
    content: '[{"name":"__init__.py","path":"sdk/eidolon_ai_sdk/security/__init__.py","sha":"e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/security/__init__.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/security/__init__.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/security/__init__.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/security/__init__.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/security/__init__.py"}},{"name":"google_authorizor.py","path":"sdk/eidolon_ai_sdk/security/google_authorizor.py","sha":"596631152f2c83e903ebc3f256462658cc354889","size":1812,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/security/google_authorizor.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/security/google_authorizor.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/596631152f2c83e903ebc3f256462658cc354889","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/security/google_authorizor.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/security/google_authorizor.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/596631152f2c83e903ebc3f256462658cc354889","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/security/google_authorizor.py"}},{"name":"jwt_middleware.py","path":"sdk/eidolon_ai_sdk/security/jwt_middleware.py","sha":"661e259bebc42593e04f3454c23ebdbda2a38419","size":1745,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/security/jwt_middleware.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/security/jwt_middleware.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/661e259bebc42593e04f3454c23ebdbda2a38419","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/security/jwt_middleware.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/security/jwt_middleware.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/661e259bebc42593e04f3454c23ebdbda2a38419","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/security/jwt_middleware.py"}},{"name":"okta_authorizor.py","path":"sdk/eidolon_ai_sdk/security/okta_authorizor.py","sha":"4d1116e049ef4f2beba26641372e38bf0b139700","size":487,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/security/okta_authorizor.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/security/okta_authorizor.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/4d1116e049ef4f2beba26641372e38bf0b139700","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/security/okta_authorizor.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/security/okta_authorizor.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/4d1116e049ef4f2beba26641372e38bf0b139700","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/security/okta_authorizor.py"}},{"name":"security_manager.py","path":"sdk/eidolon_ai_sdk/security/security_manager.py","sha":"175804f2e78c8e22b4e3697feb86bbe63cc895ab","size":978,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/security/security_manager.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/security/security_manager.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/175804f2e78c8e22b4e3697feb86bbe63cc895ab","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/security/security_manager.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/security/security_manager.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/175804f2e78c8e22b4e3697feb86bbe63cc895ab","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/security/security_manager.py"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:35:40 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E577:2537C8:175515:20C4E9:65D51B2B
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4563'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '437'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/content/docs?ref=main
  response:
    content: '[{"name":"architecture","path":"docs/src/content/docs/architecture","sha":"29b1c5e110c83dbce3edac0d5462b61b1130dd91","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/content/docs/architecture?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/docs/src/content/docs/architecture","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/29b1c5e110c83dbce3edac0d5462b61b1130dd91","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/content/docs/architecture?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/29b1c5e110c83dbce3edac0d5462b61b1130dd91","html":"https://github.com/eidolon-ai/eidolon/tree/main/docs/src/content/docs/architecture"}},{"name":"getting_started","path":"docs/src/content/docs/getting_started","sha":"9f055cc7ed5f27265c1d413dcf70d1431e073d01","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/content/docs/getting_started?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/docs/src/content/docs/getting_started","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/9f055cc7ed5f27265c1d413dcf70d1431e073d01","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/content/docs/getting_started?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/9f055cc7ed5f27265c1d413dcf70d1431e073d01","html":"https://github.com/eidolon-ai/eidolon/tree/main/docs/src/content/docs/getting_started"}},{"name":"guides","path":"docs/src/content/docs/guides","sha":"b88fee73272529cfcbd0515cb5ef23cfa8ac1927","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/content/docs/guides?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/docs/src/content/docs/guides","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/b88fee73272529cfcbd0515cb5ef23cfa8ac1927","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/content/docs/guides?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/b88fee73272529cfcbd0515cb5ef23cfa8ac1927","html":"https://github.com/eidolon-ai/eidolon/tree/main/docs/src/content/docs/guides"}},{"name":"index.mdx","path":"docs/src/content/docs/index.mdx","sha":"6d73608087b761ea32a2e72e235a01a20100b3e9","size":1137,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/content/docs/index.mdx?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/docs/src/content/docs/index.mdx","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/6d73608087b761ea32a2e72e235a01a20100b3e9","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/docs/src/content/docs/index.mdx","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/content/docs/index.mdx?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/6d73608087b761ea32a2e72e235a01a20100b3e9","html":"https://github.com/eidolon-ai/eidolon/blob/main/docs/src/content/docs/index.mdx"}},{"name":"reference","path":"docs/src/content/docs/reference","sha":"dc8d9ecf743d3f792c30202378d0bb33cdf79277","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/content/docs/reference?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/docs/src/content/docs/reference","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/dc8d9ecf743d3f792c30202378d0bb33cdf79277","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/content/docs/reference?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/dc8d9ecf743d3f792c30202378d0bb33cdf79277","html":"https://github.com/eidolon-ai/eidolon/tree/main/docs/src/content/docs/reference"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:35:40 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E573:252DF3:14A8ED:1E1806:65D51B2B
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4562'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '438'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/__init__.py
  response:
    content: ''
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Length:
      - '0'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:35:40 GMT
      ETag:
      - W/"938f66ede415ccb10764da47cd5f3cfc076c07b8791c708cfa8ec54982197c1f"
      Expires:
      - Tue, 20 Feb 2024 21:40:40 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - HIT
      X-Cache-Hits:
      - '1'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - 3f5f7d8a39434400cd34f70fbcb76c916b1e0f68
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - BD60:3A9B2B:5CDC4:74B63:65D519AB
      X-Served-By:
      - cache-yvr1531-YVR
      X-Timer:
      - S1708464940.088641,VS0,VE119
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/cpu?ref=main
  response:
    content: '[{"name":"__init__.py","path":"sdk/eidolon_ai_sdk/cpu/__init__.py","sha":"e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/cpu/__init__.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/cpu/__init__.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/cpu/__init__.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/cpu/__init__.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/cpu/__init__.py"}},{"name":"agent_call_history.py","path":"sdk/eidolon_ai_sdk/cpu/agent_call_history.py","sha":"410f0ff1814d60e533cf27130a61d79b36c23389","size":1826,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/cpu/agent_call_history.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/cpu/agent_call_history.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/410f0ff1814d60e533cf27130a61d79b36c23389","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/cpu/agent_call_history.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/cpu/agent_call_history.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/410f0ff1814d60e533cf27130a61d79b36c23389","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/cpu/agent_call_history.py"}},{"name":"agent_cpu.py","path":"sdk/eidolon_ai_sdk/cpu/agent_cpu.py","sha":"8a022a0fde0bebbd9c11cb27001bee7ed4a4970e","size":4153,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/cpu/agent_cpu.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/cpu/agent_cpu.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/8a022a0fde0bebbd9c11cb27001bee7ed4a4970e","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/cpu/agent_cpu.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/cpu/agent_cpu.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/8a022a0fde0bebbd9c11cb27001bee7ed4a4970e","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/cpu/agent_cpu.py"}},{"name":"agent_io.py","path":"sdk/eidolon_ai_sdk/cpu/agent_io.py","sha":"d22bb0cabe724332190377b3148646ab36c4ffe2","size":2956,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/cpu/agent_io.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/cpu/agent_io.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/d22bb0cabe724332190377b3148646ab36c4ffe2","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/cpu/agent_io.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/cpu/agent_io.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/d22bb0cabe724332190377b3148646ab36c4ffe2","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/cpu/agent_io.py"}},{"name":"agents_logic_unit.py","path":"sdk/eidolon_ai_sdk/cpu/agents_logic_unit.py","sha":"bad94fb3d9078fa435b3f6120588ba91f69fb001","size":7597,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/cpu/agents_logic_unit.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/cpu/agents_logic_unit.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/bad94fb3d9078fa435b3f6120588ba91f69fb001","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/cpu/agents_logic_unit.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/cpu/agents_logic_unit.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/bad94fb3d9078fa435b3f6120588ba91f69fb001","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/cpu/agents_logic_unit.py"}},{"name":"call_context.py","path":"sdk/eidolon_ai_sdk/cpu/call_context.py","sha":"c5a1e4e38a2ca967a3ff25bdc4c7b887693083e8","size":292,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/cpu/call_context.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/cpu/call_context.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/c5a1e4e38a2ca967a3ff25bdc4c7b887693083e8","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/cpu/call_context.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/cpu/call_context.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/c5a1e4e38a2ca967a3ff25bdc4c7b887693083e8","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/cpu/call_context.py"}},{"name":"conversation_memory_unit.py","path":"sdk/eidolon_ai_sdk/cpu/conversation_memory_unit.py","sha":"2ac77ba18c40e01ed7b899e6605e0358c6c673be","size":2830,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/cpu/conversation_memory_unit.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/cpu/conversation_memory_unit.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/2ac77ba18c40e01ed7b899e6605e0358c6c673be","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/cpu/conversation_memory_unit.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/cpu/conversation_memory_unit.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/2ac77ba18c40e01ed7b899e6605e0358c6c673be","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/cpu/conversation_memory_unit.py"}},{"name":"conversational_agent_cpu.py","path":"sdk/eidolon_ai_sdk/cpu/conversational_agent_cpu.py","sha":"17b3d7afa10e15020010cdc33d047f1e5fcc7994","size":7736,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/cpu/conversational_agent_cpu.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/cpu/conversational_agent_cpu.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/17b3d7afa10e15020010cdc33d047f1e5fcc7994","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/cpu/conversational_agent_cpu.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/cpu/conversational_agent_cpu.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/17b3d7afa10e15020010cdc33d047f1e5fcc7994","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/cpu/conversational_agent_cpu.py"}},{"name":"llm","path":"sdk/eidolon_ai_sdk/cpu/llm","sha":"76bac8f53bbd5c76068f4b60c05556348ea62c69","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/cpu/llm?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/sdk/eidolon_ai_sdk/cpu/llm","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/76bac8f53bbd5c76068f4b60c05556348ea62c69","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/cpu/llm?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/76bac8f53bbd5c76068f4b60c05556348ea62c69","html":"https://github.com/eidolon-ai/eidolon/tree/main/sdk/eidolon_ai_sdk/cpu/llm"}},{"name":"llm_message.py","path":"sdk/eidolon_ai_sdk/cpu/llm_message.py","sha":"82b507777bd5fcab0fab5fb3048be5c7039f6687","size":1725,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/cpu/llm_message.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/cpu/llm_message.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/82b507777bd5fcab0fab5fb3048be5c7039f6687","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/cpu/llm_message.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/cpu/llm_message.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/82b507777bd5fcab0fab5fb3048be5c7039f6687","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/cpu/llm_message.py"}},{"name":"llm_unit.py","path":"sdk/eidolon_ai_sdk/cpu/llm_unit.py","sha":"67b99ddac68fd63c740c41e2391aaa9b3d3bb667","size":1910,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/cpu/llm_unit.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/cpu/llm_unit.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/67b99ddac68fd63c740c41e2391aaa9b3d3bb667","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/cpu/llm_unit.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/cpu/llm_unit.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/67b99ddac68fd63c740c41e2391aaa9b3d3bb667","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/cpu/llm_unit.py"}},{"name":"logic_unit.py","path":"sdk/eidolon_ai_sdk/cpu/logic_unit.py","sha":"42b066dcdc9f8fc97b967b524f207a7fc98d2d08","size":4204,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/cpu/logic_unit.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/cpu/logic_unit.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/42b066dcdc9f8fc97b967b524f207a7fc98d2d08","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/cpu/logic_unit.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/cpu/logic_unit.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/42b066dcdc9f8fc97b967b524f207a7fc98d2d08","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/cpu/logic_unit.py"}},{"name":"memory_unit.py","path":"sdk/eidolon_ai_sdk/cpu/memory_unit.py","sha":"753116d4cbec48d4b5ffc90aa5390371ce3d5d1b","size":3541,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/cpu/memory_unit.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/cpu/memory_unit.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/753116d4cbec48d4b5ffc90aa5390371ce3d5d1b","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/cpu/memory_unit.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/cpu/memory_unit.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/753116d4cbec48d4b5ffc90aa5390371ce3d5d1b","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/cpu/memory_unit.py"}},{"name":"open_ai_assistants_cpu.py","path":"sdk/eidolon_ai_sdk/cpu/open_ai_assistants_cpu.py","sha":"b0bae69a959afc1b444debf0e65fc97ebcc3fce2","size":13673,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/cpu/open_ai_assistants_cpu.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/cpu/open_ai_assistants_cpu.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/b0bae69a959afc1b444debf0e65fc97ebcc3fce2","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/cpu/open_ai_assistants_cpu.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/cpu/open_ai_assistants_cpu.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/b0bae69a959afc1b444debf0e65fc97ebcc3fce2","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/cpu/open_ai_assistants_cpu.py"}},{"name":"processing_unit.py","path":"sdk/eidolon_ai_sdk/cpu/processing_unit.py","sha":"1d31f3b6db5dff361b08eb02f2c4bb6a54b79126","size":825,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/cpu/processing_unit.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/cpu/processing_unit.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/1d31f3b6db5dff361b08eb02f2c4bb6a54b79126","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/cpu/processing_unit.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/cpu/processing_unit.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/1d31f3b6db5dff361b08eb02f2c4bb6a54b79126","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/cpu/processing_unit.py"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:35:40 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E57F:2542CD:144589:1DB511:65D51B2C
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4561'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '439'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/builtins?ref=main
  response:
    content: '[{"name":"__init__.py","path":"sdk/eidolon_ai_sdk/builtins/__init__.py","sha":"e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/builtins/__init__.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/builtins/__init__.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/builtins/__init__.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/builtins/__init__.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/builtins/__init__.py"}},{"name":"code_builtins.py","path":"sdk/eidolon_ai_sdk/builtins/code_builtins.py","sha":"152d13e372f9cc16261090cb7168785a926c17d9","size":5343,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/builtins/code_builtins.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/builtins/code_builtins.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/152d13e372f9cc16261090cb7168785a926c17d9","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/builtins/code_builtins.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/builtins/code_builtins.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/152d13e372f9cc16261090cb7168785a926c17d9","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/builtins/code_builtins.py"}},{"name":"logic_units","path":"sdk/eidolon_ai_sdk/builtins/logic_units","sha":"42a6a8897ee63644854bd6445527f1c34db39a28","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/builtins/logic_units?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/sdk/eidolon_ai_sdk/builtins/logic_units","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/42a6a8897ee63644854bd6445527f1c34db39a28","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/builtins/logic_units?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/42a6a8897ee63644854bd6445527f1c34db39a28","html":"https://github.com/eidolon-ai/eidolon/tree/main/sdk/eidolon_ai_sdk/builtins/logic_units"}},{"name":"resources","path":"sdk/eidolon_ai_sdk/builtins/resources","sha":"36daadf10bfee96a6da95367b0beafe5af64ec69","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/builtins/resources?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/sdk/eidolon_ai_sdk/builtins/resources","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/36daadf10bfee96a6da95367b0beafe5af64ec69","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/builtins/resources?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/36daadf10bfee96a6da95367b0beafe5af64ec69","html":"https://github.com/eidolon-ai/eidolon/tree/main/sdk/eidolon_ai_sdk/builtins/resources"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:35:40 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E57E:2556C1:151AC2:1E8A6C:65D51B2C
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4560'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '440'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/lib/hooks?ref=main
  response:
    content: '[{"name":"use-at-bottom.tsx","path":"webui/lib/hooks/use-at-bottom.tsx","sha":"92db4836ed40f24ec963fdf0063bbc8c4090eb8f","size":638,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/lib/hooks/use-at-bottom.tsx?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/webui/lib/hooks/use-at-bottom.tsx","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/92db4836ed40f24ec963fdf0063bbc8c4090eb8f","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/webui/lib/hooks/use-at-bottom.tsx","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/lib/hooks/use-at-bottom.tsx?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/92db4836ed40f24ec963fdf0063bbc8c4090eb8f","html":"https://github.com/eidolon-ai/eidolon/blob/main/webui/lib/hooks/use-at-bottom.tsx"}},{"name":"use-copy-to-clipboard.tsx","path":"webui/lib/hooks/use-copy-to-clipboard.tsx","sha":"e4ad0acfc7bf82c1420c26f92b593595155d483e","size":712,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/lib/hooks/use-copy-to-clipboard.tsx?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/webui/lib/hooks/use-copy-to-clipboard.tsx","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e4ad0acfc7bf82c1420c26f92b593595155d483e","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/webui/lib/hooks/use-copy-to-clipboard.tsx","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/lib/hooks/use-copy-to-clipboard.tsx?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e4ad0acfc7bf82c1420c26f92b593595155d483e","html":"https://github.com/eidolon-ai/eidolon/blob/main/webui/lib/hooks/use-copy-to-clipboard.tsx"}},{"name":"use-local-storage.ts","path":"webui/lib/hooks/use-local-storage.ts","sha":"d5345de7e89c416b821170a8c29e9fbbe2c743ee","size":592,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/lib/hooks/use-local-storage.ts?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/webui/lib/hooks/use-local-storage.ts","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/d5345de7e89c416b821170a8c29e9fbbe2c743ee","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/webui/lib/hooks/use-local-storage.ts","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/lib/hooks/use-local-storage.ts?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/d5345de7e89c416b821170a8c29e9fbbe2c743ee","html":"https://github.com/eidolon-ai/eidolon/blob/main/webui/lib/hooks/use-local-storage.ts"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:35:40 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E571:25886F:144897:1DB844:65D51B2B
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4559'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '441'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/agent_os.py
  response:
    content: "from __future__ import annotations\n\nimport os\n\nimport pathlib\nfrom
      typing import Dict, Tuple, TypeVar, Type\n\nfrom eidolon_ai_sdk.system.resources.resources_base
      import load_resources, Resource\nfrom eidolon_ai_sdk.util.logger import logger\n\nT
      = TypeVar(\"T\", bound=\"Resource\")  # noqa: F821\nS = TypeVar(\"S\", bound=\"BaseModel\")
      \ # noqa: F821\n\n\nclass AgentOS:\n    _resources: Dict[str, Dict[str, Tuple[\"Resource\",
      str]]] = ...  # noqa: F821\n    file_memory: \"FileMemory\" = ...  # noqa: F821\n
      \   symbolic_memory: \"SymbolicMemory\" = ...  # noqa: F821\n    similarity_memory:
      \"SimilarityMemory\" = ...  # noqa: F821\n    security_manager: \"SecurityManager\"
      = ...  # noqa: F821\n\n    @staticmethod\n    def current_machine_url() -> str:\n
      \       return os.environ.get(\"EIDOLON_LOCAL_MACHINE\", \"http://localhost:8080\")\n\n
      \   @classmethod\n    def _get_or_load_resources(cls) -> Dict[str, Dict[str,
      Tuple[Resource, str]]]:\n        if cls._resources is ...:\n            from
      eidolon_ai_sdk.builtins.code_builtins import named_builtins\n\n            cls._resources
      = {}\n            for resource in named_builtins():\n                cls.register_resource(resource,
      source=\"builtin\")\n            for resource, loc in load_resources(pathlib.Path(__file__).parent
      / \"builtins\" / \"resources\"):\n                cls.register_resource(resource,
      source=\"builtin\")\n\n        return cls._resources\n\n    @classmethod\n    def
      load_machine(cls, machine):\n        cls.file_memory = machine.memory.file_memory\n
      \       cls.symbolic_memory = machine.memory.symbolic_memory\n        cls.similarity_memory
      = machine.memory.similarity_memory\n        cls.security_manager = machine.security_manager\n\n
      \   @classmethod\n    def register_resource(cls, resource: Resource, source=None):
      \ # noqa: F821\n        resources = cls._get_or_load_resources()\n        if
      resource.kind not in resources:\n            resources[resource.kind] = {}\n
      \       bucket = resources[resource.kind]\n        if resource.metadata.name
      in bucket:\n            if bucket[resource.metadata.name][1] == \"builtin\":\n
      \               logger.info(f\"Overriding builtin resource '{resource.kind}.{resource.metadata.name}'\")\n\n
      \               old_impl = getattr(bucket[resource.metadata.name][0], \"spec\",
      {}).get(\"implementation\")\n                if old_impl:\n                    new_spec
      = getattr(resource, \"spec\")\n                    new_impl = new_spec.get(\"implementation\")
      if isinstance(new_spec, dict) else new_spec\n                    if not new_impl
      or resource.metadata.name == new_impl:\n                        new_spec[\"implementation\"]
      = old_impl\n            else:\n                raise ValueError(\n                    f\"Resource
      {resource.metadata.name} already registered by {bucket[resource.metadata.name][1]}\"\n
      \               )\n        logger.debug(f\"Registering resource {resource.kind}.{resource.metadata.name}\")\n
      \       bucket[resource.metadata.name] = (resource, source)\n\n    @classmethod\n
      \   def get_resources(cls, kind: Type[T]) -> Dict[str, T]:  # noqa: F821\n        return
      {k: tu[0].promote(kind) for k, tu in cls._get_or_load_resources().get(kind.kind_literal(),
      {}).items()}\n\n    @classmethod\n    def get_resource_raw(cls, kind: Type[T],
      name: str) -> Resource:\n        return cls._get_or_load_resources()[kind.kind_literal()][name][0]\n\n
      \   @classmethod\n    def get_resource(cls, kind: Type[T], name: str, default=...)
      -> T:\n        bucket = kind.kind_literal()\n        try:\n            return
      cls.get_resource_raw(kind, name).promote(kind)\n        except KeyError:\n            if
      default is not ...:\n                return default\n            raise ValueError(f\"Resource
      {name} not found in bucket {bucket}\")\n\n    @classmethod\n    def get_instance(cls,
      kind: Type[S], **kwargs) -> S:\n        from eidolon_ai_sdk.system.reference_model
      import Reference\n\n        return Reference[kind, kind.__name__]().instantiate(**kwargs)\n\n
      \   @classmethod\n    def get_resource_source(cls, bucket, name: str) -> str:\n
      \       try:\n            return cls._get_or_load_resources()[bucket][name][1]\n
      \       except KeyError:\n            raise ValueError(f\"Resource {name} not
      found in bucket {bucket}\")\n\n    @classmethod\n    def reset(cls):\n        cls._resources
      = ...\n        cls.file_memory = ...\n        cls.symbolic_memory = ...\n        cls.similarity_memory
      = ...\n        cls.embedder = ...\n"
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Length:
      - '1266'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:35:40 GMT
      ETag:
      - W/"08bd38995329a527ac9ae608cef9e1300a5a9a0dcdf40a693fa5c0e180838665"
      Expires:
      - Tue, 20 Feb 2024 21:40:40 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - 0cf9d412cfef53c055bf53767e57317f8376dde0
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - F272:4A0A:550FD4:67E40C:65D51B2B
      X-Served-By:
      - cache-yvr1524-YVR
      X-Timer:
      - S1708464940.088891,VS0,VE169
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/code_search?ref=main
  response:
    content: '[{"name":"Readme.md","path":"examples/eidolon_examples/code_search/Readme.md","sha":"66fd7163a127e3ea14365b8bc28213b24d24ff80","size":3740,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/code_search/Readme.md?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/code_search/Readme.md","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/66fd7163a127e3ea14365b8bc28213b24d24ff80","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/eidolon_examples/code_search/Readme.md","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/code_search/Readme.md?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/66fd7163a127e3ea14365b8bc28213b24d24ff80","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/code_search/Readme.md"}},{"name":"__init__.py","path":"examples/eidolon_examples/code_search/__init__.py","sha":"e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/code_search/__init__.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/code_search/__init__.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/eidolon_examples/code_search/__init__.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/code_search/__init__.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/code_search/__init__.py"}},{"name":"resources","path":"examples/eidolon_examples/code_search/resources","sha":"fad23fce14b099d9ec8a696ba2a0c91f759508d1","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/code_search/resources?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/examples/eidolon_examples/code_search/resources","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/fad23fce14b099d9ec8a696ba2a0c91f759508d1","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/code_search/resources?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/fad23fce14b099d9ec8a696ba2a0c91f759508d1","html":"https://github.com/eidolon-ai/eidolon/tree/main/examples/eidolon_examples/code_search/resources"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:35:40 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E575:2552AA:15DEB3:1F4E48:65D51B2C
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4557'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '443'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/memory?ref=main
  response:
    content: '[{"name":"__init__.py","path":"sdk/eidolon_ai_sdk/memory/__init__.py","sha":"e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/memory/__init__.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/memory/__init__.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/memory/__init__.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/memory/__init__.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/memory/__init__.py"}},{"name":"agent_memory.py","path":"sdk/eidolon_ai_sdk/memory/agent_memory.py","sha":"9cfa2930baed16b36ddbcab4ac3ee64cb179af64","size":1157,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/memory/agent_memory.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/memory/agent_memory.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/9cfa2930baed16b36ddbcab4ac3ee64cb179af64","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/memory/agent_memory.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/memory/agent_memory.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/9cfa2930baed16b36ddbcab4ac3ee64cb179af64","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/memory/agent_memory.py"}},{"name":"chroma_vector_store.py","path":"sdk/eidolon_ai_sdk/memory/chroma_vector_store.py","sha":"3e6c1b1b39eb90fc2caf50ecd6b33e80c7deef6a","size":5286,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/memory/chroma_vector_store.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/memory/chroma_vector_store.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/3e6c1b1b39eb90fc2caf50ecd6b33e80c7deef6a","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/memory/chroma_vector_store.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/memory/chroma_vector_store.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/3e6c1b1b39eb90fc2caf50ecd6b33e80c7deef6a","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/memory/chroma_vector_store.py"}},{"name":"document.py","path":"sdk/eidolon_ai_sdk/memory/document.py","sha":"66dd9fc741f50eb2eb03fbda938771fca9f7de9d","size":641,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/memory/document.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/memory/document.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/66dd9fc741f50eb2eb03fbda938771fca9f7de9d","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/memory/document.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/memory/document.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/66dd9fc741f50eb2eb03fbda938771fca9f7de9d","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/memory/document.py"}},{"name":"embeddings.py","path":"sdk/eidolon_ai_sdk/memory/embeddings.py","sha":"a111bf5861a31197246f0a89c50c47bf3c8101c7","size":2655,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/memory/embeddings.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/memory/embeddings.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/a111bf5861a31197246f0a89c50c47bf3c8101c7","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/memory/embeddings.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/memory/embeddings.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/a111bf5861a31197246f0a89c50c47bf3c8101c7","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/memory/embeddings.py"}},{"name":"file_memory.py","path":"sdk/eidolon_ai_sdk/memory/file_memory.py","sha":"c4ce501ddc93d23b0e178d82746b74551607eb60","size":2517,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/memory/file_memory.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/memory/file_memory.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/c4ce501ddc93d23b0e178d82746b74551607eb60","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/memory/file_memory.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/memory/file_memory.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/c4ce501ddc93d23b0e178d82746b74551607eb60","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/memory/file_memory.py"}},{"name":"file_system_vector_store.py","path":"sdk/eidolon_ai_sdk/memory/file_system_vector_store.py","sha":"b720480946c302872af59a10504db23c5c9e23b5","size":4220,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/memory/file_system_vector_store.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/memory/file_system_vector_store.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/b720480946c302872af59a10504db23c5c9e23b5","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/memory/file_system_vector_store.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/memory/file_system_vector_store.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/b720480946c302872af59a10504db23c5c9e23b5","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/memory/file_system_vector_store.py"}},{"name":"in_memory_file_memory.py","path":"sdk/eidolon_ai_sdk/memory/in_memory_file_memory.py","sha":"a559fc42a3a33c439e792d5272e78e5358c99850","size":3912,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/memory/in_memory_file_memory.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/memory/in_memory_file_memory.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/a559fc42a3a33c439e792d5272e78e5358c99850","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/memory/in_memory_file_memory.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/memory/in_memory_file_memory.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/a559fc42a3a33c439e792d5272e78e5358c99850","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/memory/in_memory_file_memory.py"}},{"name":"local_file_memory.py","path":"sdk/eidolon_ai_sdk/memory/local_file_memory.py","sha":"5de3f79ef29d8a2f773a314ca24b47fd7d7faa5f","size":5624,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/memory/local_file_memory.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/memory/local_file_memory.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/5de3f79ef29d8a2f773a314ca24b47fd7d7faa5f","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/memory/local_file_memory.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/memory/local_file_memory.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/5de3f79ef29d8a2f773a314ca24b47fd7d7faa5f","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/memory/local_file_memory.py"}},{"name":"local_symbolic_memory.py","path":"sdk/eidolon_ai_sdk/memory/local_symbolic_memory.py","sha":"719ecd09fa7467bf1a25bb7e9e5e3acea3c084ba","size":4837,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/memory/local_symbolic_memory.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/memory/local_symbolic_memory.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/719ecd09fa7467bf1a25bb7e9e5e3acea3c084ba","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/memory/local_symbolic_memory.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/memory/local_symbolic_memory.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/719ecd09fa7467bf1a25bb7e9e5e3acea3c084ba","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/memory/local_symbolic_memory.py"}},{"name":"mongo_symbolic_memory.py","path":"sdk/eidolon_ai_sdk/memory/mongo_symbolic_memory.py","sha":"dbcb3ab019b02d01114b2d82beb5c35025187be4","size":4067,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/memory/mongo_symbolic_memory.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/memory/mongo_symbolic_memory.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/dbcb3ab019b02d01114b2d82beb5c35025187be4","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/memory/mongo_symbolic_memory.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/memory/mongo_symbolic_memory.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/dbcb3ab019b02d01114b2d82beb5c35025187be4","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/memory/mongo_symbolic_memory.py"}},{"name":"noop_memory.py","path":"sdk/eidolon_ai_sdk/memory/noop_memory.py","sha":"1dbcbcfa51c7b7b2304fcfcb89136f8f0081e569","size":996,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/memory/noop_memory.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/memory/noop_memory.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/1dbcbcfa51c7b7b2304fcfcb89136f8f0081e569","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/memory/noop_memory.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/memory/noop_memory.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/1dbcbcfa51c7b7b2304fcfcb89136f8f0081e569","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/memory/noop_memory.py"}},{"name":"semantic_memory.py","path":"sdk/eidolon_ai_sdk/memory/semantic_memory.py","sha":"5a802554679ea68b9d07e3498fc41e43e59f9843","size":5453,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/memory/semantic_memory.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/memory/semantic_memory.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/5a802554679ea68b9d07e3498fc41e43e59f9843","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/memory/semantic_memory.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/memory/semantic_memory.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/5a802554679ea68b9d07e3498fc41e43e59f9843","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/memory/semantic_memory.py"}},{"name":"similarity_memory.py","path":"sdk/eidolon_ai_sdk/memory/similarity_memory.py","sha":"1071828f68f623e3b46585bc51848a994b8f4817","size":869,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/memory/similarity_memory.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/memory/similarity_memory.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/1071828f68f623e3b46585bc51848a994b8f4817","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/memory/similarity_memory.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/memory/similarity_memory.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/1071828f68f623e3b46585bc51848a994b8f4817","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/memory/similarity_memory.py"}},{"name":"vector_store.py","path":"sdk/eidolon_ai_sdk/memory/vector_store.py","sha":"057432f9c3d1b44288f18a7c0cb0df112c13ace6","size":1516,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/memory/vector_store.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/memory/vector_store.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/057432f9c3d1b44288f18a7c0cb0df112c13ace6","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/memory/vector_store.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/memory/vector_store.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/057432f9c3d1b44288f18a7c0cb0df112c13ace6","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/memory/vector_store.py"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:35:40 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E581:276CC5:103831:17A461:65D51B2C
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4558'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '442'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/io?ref=main
  response:
    content: '[{"name":"__init__.py","path":"sdk/eidolon_ai_sdk/io/__init__.py","sha":"e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/io/__init__.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/io/__init__.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/io/__init__.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/io/__init__.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/io/__init__.py"}},{"name":"events.py","path":"sdk/eidolon_ai_sdk/io/events.py","sha":"5a42287702689c58153bd0aac6e8f40898e77506","size":4981,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/io/events.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/io/events.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/5a42287702689c58153bd0aac6e8f40898e77506","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/io/events.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/io/events.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/5a42287702689c58153bd0aac6e8f40898e77506","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/io/events.py"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:35:40 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E580:250EE1:1626DB:1F968E:65D51B2C
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4556'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '444'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/game_of_24?ref=main
  response:
    content: '[{"name":"custom_cpu.yaml","path":"examples/eidolon_examples/game_of_24/custom_cpu.yaml","sha":"251d6ebe65e283939b6e9821b5f36b45bcc1bcfa","size":152,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/game_of_24/custom_cpu.yaml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/game_of_24/custom_cpu.yaml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/251d6ebe65e283939b6e9821b5f36b45bcc1bcfa","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/eidolon_examples/game_of_24/custom_cpu.yaml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/game_of_24/custom_cpu.yaml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/251d6ebe65e283939b6e9821b5f36b45bcc1bcfa","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/game_of_24/custom_cpu.yaml"}},{"name":"default_cpu.yaml","path":"examples/eidolon_examples/game_of_24/default_cpu.yaml","sha":"ac72e01dd128dee0de0668f6b833e0aa17a10c68","size":140,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/game_of_24/default_cpu.yaml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/game_of_24/default_cpu.yaml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/ac72e01dd128dee0de0668f6b833e0aa17a10c68","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/eidolon_examples/game_of_24/default_cpu.yaml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/game_of_24/default_cpu.yaml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/ac72e01dd128dee0de0668f6b833e0aa17a10c68","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/game_of_24/default_cpu.yaml"}},{"name":"go24_agent.yaml","path":"examples/eidolon_examples/game_of_24/go24_agent.yaml","sha":"5178a8cc8b186f91f4cb8557bec0ecd738ae3ab1","size":1100,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/game_of_24/go24_agent.yaml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/game_of_24/go24_agent.yaml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/5178a8cc8b186f91f4cb8557bec0ecd738ae3ab1","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/eidolon_examples/game_of_24/go24_agent.yaml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/game_of_24/go24_agent.yaml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/5178a8cc8b186f91f4cb8557bec0ecd738ae3ab1","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/game_of_24/go24_agent.yaml"}},{"name":"machine.yaml","path":"examples/eidolon_examples/game_of_24/machine.yaml","sha":"ba1a7f74e6a1b1b00de94abe5dbdfb103754a9c4","size":183,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/game_of_24/machine.yaml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/game_of_24/machine.yaml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/ba1a7f74e6a1b1b00de94abe5dbdfb103754a9c4","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/eidolon_examples/game_of_24/machine.yaml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/game_of_24/machine.yaml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/ba1a7f74e6a1b1b00de94abe5dbdfb103754a9c4","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/game_of_24/machine.yaml"}},{"name":"tot_agent.yaml","path":"examples/eidolon_examples/game_of_24/tot_agent.yaml","sha":"a20feecfee75ce8af9ecebac26eeae9ca11707a0","size":3303,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/game_of_24/tot_agent.yaml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/game_of_24/tot_agent.yaml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/a20feecfee75ce8af9ecebac26eeae9ca11707a0","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/eidolon_examples/game_of_24/tot_agent.yaml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/game_of_24/tot_agent.yaml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/a20feecfee75ce8af9ecebac26eeae9ca11707a0","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/game_of_24/tot_agent.yaml"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:35:40 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E578:2E1594:2BDDD:39F7E:65D51B2C
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4555'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '445'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/getting_started?ref=main
  response:
    content: '[{"name":"1_agent_communication","path":"examples/eidolon_examples/getting_started/1_agent_communication","sha":"011abdb2b84458a8dd4aa8873db53a1c6fbb8c1f","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/getting_started/1_agent_communication?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/examples/eidolon_examples/getting_started/1_agent_communication","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/011abdb2b84458a8dd4aa8873db53a1c6fbb8c1f","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/getting_started/1_agent_communication?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/011abdb2b84458a8dd4aa8873db53a1c6fbb8c1f","html":"https://github.com/eidolon-ai/eidolon/tree/main/examples/eidolon_examples/getting_started/1_agent_communication"}},{"name":"2_custom_agents","path":"examples/eidolon_examples/getting_started/2_custom_agents","sha":"bfd2b96f4f848cfeb705a0592a528827093a23b8","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/getting_started/2_custom_agents?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/examples/eidolon_examples/getting_started/2_custom_agents","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/bfd2b96f4f848cfeb705a0592a528827093a23b8","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/getting_started/2_custom_agents?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/bfd2b96f4f848cfeb705a0592a528827093a23b8","html":"https://github.com/eidolon-ai/eidolon/tree/main/examples/eidolon_examples/getting_started/2_custom_agents"}},{"name":"3_pluggable_resources","path":"examples/eidolon_examples/getting_started/3_pluggable_resources","sha":"c1654bd744b2f910e5c8c477037cf9340d13f916","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/getting_started/3_pluggable_resources?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/examples/eidolon_examples/getting_started/3_pluggable_resources","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/c1654bd744b2f910e5c8c477037cf9340d13f916","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/getting_started/3_pluggable_resources?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/c1654bd744b2f910e5c8c477037cf9340d13f916","html":"https://github.com/eidolon-ai/eidolon/tree/main/examples/eidolon_examples/getting_started/3_pluggable_resources"}},{"name":"4_defining_a_machine","path":"examples/eidolon_examples/getting_started/4_defining_a_machine","sha":"b5e7a04a6528a06a2fed6ac73fa55767a0ec8d39","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/getting_started/4_defining_a_machine?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/examples/eidolon_examples/getting_started/4_defining_a_machine","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/b5e7a04a6528a06a2fed6ac73fa55767a0ec8d39","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/getting_started/4_defining_a_machine?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/b5e7a04a6528a06a2fed6ac73fa55767a0ec8d39","html":"https://github.com/eidolon-ai/eidolon/tree/main/examples/eidolon_examples/getting_started/4_defining_a_machine"}},{"name":"__init__.py","path":"examples/eidolon_examples/getting_started/__init__.py","sha":"e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/getting_started/__init__.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/getting_started/__init__.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/eidolon_examples/getting_started/__init__.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/getting_started/__init__.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/getting_started/__init__.py"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:35:40 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E577:2537C8:17551B:20C4EE:65D51B2C
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4554'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '446'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/test_events.py
  response:
    content: "from eidolon_ai_sdk.io.events import BaseStreamEvent\n\n\ndef test_from_dict():\n
      \   BaseStreamEvent.from_dict({\"event_type\": \"user_input\", \"input\": {}})\n"
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Length:
      - '135'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:35:40 GMT
      ETag:
      - W/"123803c2a0d8dfcaa136d0dcd030774c9fde65d460910e9d55d1c6de3b20c1ce"
      Expires:
      - Tue, 20 Feb 2024 21:40:40 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - 819b1804d73fd00f392db6a563f6ea582756e338
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - 9C64:1352:533816:660C0C:65D51B2B
      X-Served-By:
      - cache-yvr1531-YVR
      X-Timer:
      - S1708464940.321452,VS0,VE130
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/group_conversation?ref=main
  response:
    content: '[{"name":"__init__.py","path":"examples/eidolon_examples/group_conversation/__init__.py","sha":"e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/group_conversation/__init__.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/group_conversation/__init__.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/eidolon_examples/group_conversation/__init__.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/group_conversation/__init__.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/group_conversation/__init__.py"}},{"name":"base_conversation_coordinator.py","path":"examples/eidolon_examples/group_conversation/base_conversation_coordinator.py","sha":"cecfa34d58e956d8c7b170f09e9ea71316c335cc","size":9413,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/group_conversation/base_conversation_coordinator.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/group_conversation/base_conversation_coordinator.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/cecfa34d58e956d8c7b170f09e9ea71316c335cc","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/eidolon_examples/group_conversation/base_conversation_coordinator.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/group_conversation/base_conversation_coordinator.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/cecfa34d58e956d8c7b170f09e9ea71316c335cc","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/group_conversation/base_conversation_coordinator.py"}},{"name":"conversation_agent.py","path":"examples/eidolon_examples/group_conversation/conversation_agent.py","sha":"fb0c2bbbf43894f95d77b40007e510715cd1e073","size":7483,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/group_conversation/conversation_agent.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/group_conversation/conversation_agent.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/fb0c2bbbf43894f95d77b40007e510715cd1e073","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/eidolon_examples/group_conversation/conversation_agent.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/group_conversation/conversation_agent.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/fb0c2bbbf43894f95d77b40007e510715cd1e073","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/group_conversation/conversation_agent.py"}},{"name":"conversation_coordinator.py","path":"examples/eidolon_examples/group_conversation/conversation_coordinator.py","sha":"061f72c591cb899470bc89a06be7c817fde3225f","size":9306,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/group_conversation/conversation_coordinator.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/group_conversation/conversation_coordinator.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/061f72c591cb899470bc89a06be7c817fde3225f","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/eidolon_examples/group_conversation/conversation_coordinator.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/group_conversation/conversation_coordinator.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/061f72c591cb899470bc89a06be7c817fde3225f","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/group_conversation/conversation_coordinator.py"}},{"name":"game_master.py","path":"examples/eidolon_examples/group_conversation/game_master.py","sha":"0505373664e00223882a263212d8b79ad84c8b67","size":6934,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/group_conversation/game_master.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/group_conversation/game_master.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/0505373664e00223882a263212d8b79ad84c8b67","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/eidolon_examples/group_conversation/game_master.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/group_conversation/game_master.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/0505373664e00223882a263212d8b79ad84c8b67","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/group_conversation/game_master.py"}},{"name":"iasip","path":"examples/eidolon_examples/group_conversation/iasip","sha":"cdd4a1b25db4ea3ec87f806e7674809e5522af87","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/group_conversation/iasip?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/examples/eidolon_examples/group_conversation/iasip","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/cdd4a1b25db4ea3ec87f806e7674809e5522af87","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/group_conversation/iasip?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/cdd4a1b25db4ea3ec87f806e7674809e5522af87","html":"https://github.com/eidolon-ai/eidolon/tree/main/examples/eidolon_examples/group_conversation/iasip"}},{"name":"python_coder","path":"examples/eidolon_examples/group_conversation/python_coder","sha":"20f379355cad7e8c318f1ef344ed0aacfb91e357","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/group_conversation/python_coder?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/examples/eidolon_examples/group_conversation/python_coder","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/20f379355cad7e8c318f1ef344ed0aacfb91e357","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/group_conversation/python_coder?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/20f379355cad7e8c318f1ef344ed0aacfb91e357","html":"https://github.com/eidolon-ai/eidolon/tree/main/examples/eidolon_examples/group_conversation/python_coder"}},{"name":"resources","path":"examples/eidolon_examples/group_conversation/resources","sha":"92fdabfa63f7f35d06d8b76eb2968d39b4e542ab","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/group_conversation/resources?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/examples/eidolon_examples/group_conversation/resources","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/92fdabfa63f7f35d06d8b76eb2968d39b4e542ab","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/group_conversation/resources?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/92fdabfa63f7f35d06d8b76eb2968d39b4e542ab","html":"https://github.com/eidolon-ai/eidolon/tree/main/examples/eidolon_examples/group_conversation/resources"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:35:40 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E571:25886F:14489C:1DB84F:65D51B2C
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4553'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '447'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/system?ref=main
  response:
    content: '[{"name":"__init__.py","path":"sdk/eidolon_ai_sdk/system/__init__.py","sha":"e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/system/__init__.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/system/__init__.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/system/__init__.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/system/__init__.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/system/__init__.py"}},{"name":"agent_contract.py","path":"sdk/eidolon_ai_sdk/system/agent_contract.py","sha":"3e7b6ed39743961b0ed5fe9b060d07b58af451b6","size":1024,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/system/agent_contract.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/system/agent_contract.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/3e7b6ed39743961b0ed5fe9b060d07b58af451b6","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/system/agent_contract.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/system/agent_contract.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/3e7b6ed39743961b0ed5fe9b060d07b58af451b6","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/system/agent_contract.py"}},{"name":"agent_controller.py","path":"sdk/eidolon_ai_sdk/system/agent_controller.py","sha":"8dd8e607518d332b6cde8a888b6b02b0a4510728","size":23134,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/system/agent_controller.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/system/agent_controller.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/8dd8e607518d332b6cde8a888b6b02b0a4510728","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/system/agent_controller.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/system/agent_controller.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/8dd8e607518d332b6cde8a888b6b02b0a4510728","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/system/agent_controller.py"}},{"name":"agent_machine.py","path":"sdk/eidolon_ai_sdk/system/agent_machine.py","sha":"fd60830dfda808c7f7852eff37745ac5acec782b","size":2947,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/system/agent_machine.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/system/agent_machine.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/fd60830dfda808c7f7852eff37745ac5acec782b","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/system/agent_machine.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/system/agent_machine.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/fd60830dfda808c7f7852eff37745ac5acec782b","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/system/agent_machine.py"}},{"name":"fn_handler.py","path":"sdk/eidolon_ai_sdk/system/fn_handler.py","sha":"0b372b59b9a834d1f2b832c955a349ba2d0fb534","size":3358,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/system/fn_handler.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/system/fn_handler.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/0b372b59b9a834d1f2b832c955a349ba2d0fb534","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/system/fn_handler.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/system/fn_handler.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/0b372b59b9a834d1f2b832c955a349ba2d0fb534","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/system/fn_handler.py"}},{"name":"processes.py","path":"sdk/eidolon_ai_sdk/system/processes.py","sha":"2c464ce9a1cf0c4553eb265e1219380e85d8ea9e","size":3847,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/system/processes.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/system/processes.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/2c464ce9a1cf0c4553eb265e1219380e85d8ea9e","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/system/processes.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/system/processes.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/2c464ce9a1cf0c4553eb265e1219380e85d8ea9e","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/system/processes.py"}},{"name":"reference_model.py","path":"sdk/eidolon_ai_sdk/system/reference_model.py","sha":"1d6112fbf7dc0f66b9e3274537d991e3e3bbc573","size":6629,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/system/reference_model.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/system/reference_model.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/1d6112fbf7dc0f66b9e3274537d991e3e3bbc573","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/system/reference_model.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/system/reference_model.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/1d6112fbf7dc0f66b9e3274537d991e3e3bbc573","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/system/reference_model.py"}},{"name":"request_context.py","path":"sdk/eidolon_ai_sdk/system/request_context.py","sha":"d037bc2c57a7f2be6ac0789594ac01cc6960f62e","size":2360,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/system/request_context.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/system/request_context.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/d037bc2c57a7f2be6ac0789594ac01cc6960f62e","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/system/request_context.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/system/request_context.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/d037bc2c57a7f2be6ac0789594ac01cc6960f62e","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/system/request_context.py"}},{"name":"resources","path":"sdk/eidolon_ai_sdk/system/resources","sha":"fe450f9db0aedb5c77bf09d95157d532f6d415a5","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/system/resources?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/sdk/eidolon_ai_sdk/system/resources","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/fe450f9db0aedb5c77bf09d95157d532f6d415a5","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/system/resources?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/fe450f9db0aedb5c77bf09d95157d532f6d415a5","html":"https://github.com/eidolon-ai/eidolon/tree/main/sdk/eidolon_ai_sdk/system/resources"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:35:40 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E578:2E1594:2BDE2:39F82:65D51B2C
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4552'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '448'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/conftest.py
  response:
    content: "import os\nimport pathlib\nimport socket\nimport threading\nfrom contextlib
      import asynccontextmanager\nfrom typing import Iterable\nfrom unittest.mock
      import patch, AsyncMock\n\nimport httpx\nimport pytest\nimport uvicorn\nfrom
      bson import ObjectId\nfrom fastapi import FastAPI\nfrom motor.motor_asyncio
      import AsyncIOMotorClient\nfrom sse_starlette.sse import AppStatus\nfrom vcr.request
      import Request as VcrRequest\nfrom vcr.stubs import httpx_stubs\nfrom vcr.stubs.httpx_stubs
      import _shared_vcr_send, _record_responses\n\nimport eidolon_ai_sdk.system.processes
      as processes\nfrom eidolon_ai_sdk.agent_os import AgentOS\nfrom eidolon_ai_sdk.bin.agent_http_server
      import start_os, start_app\nfrom eidolon_ai_sdk.cpu.llm.open_ai_llm_unit import
      OpenAIGPT\nfrom eidolon_ai_sdk.memory.local_file_memory import LocalFileMemory\nfrom
      eidolon_ai_sdk.memory.local_symbolic_memory import LocalSymbolicMemory\nfrom
      eidolon_ai_sdk.memory.mongo_symbolic_memory import MongoSymbolicMemory\nfrom
      eidolon_ai_sdk.memory.similarity_memory import SimilarityMemory\nfrom eidolon_ai_sdk.system.reference_model
      import Reference\nfrom eidolon_ai_sdk.system.resources.agent_resource import
      AgentResource\nfrom eidolon_ai_sdk.system.resources.machine_resource import
      MachineResource\nfrom eidolon_ai_sdk.system.resources.resources_base import
      Resource, Metadata\nfrom eidolon_ai_sdk.util.class_utils import fqn\n\n\n# we
      want all tests using the client_builder to use vcr, so we don't send requests
      to openai\ndef pytest_collection_modifyitems(items):\n    for item in filter(lambda
      i: \"run_app\" in i.fixturenames, items):\n        item.add_marker(pytest.mark.vcr)\n
      \       item.fixturenames.append(\"patched_vcr_object_handling\")\n        item.fixturenames.append(\"deterministic_process_ids\")\n
      \       item.fixturenames.append(\"patch_async_vcr_send\")\n\n\n@pytest.fixture\ndef
      patch_async_vcr_send(monkeypatch):\n    async def mock_async_vcr_send(cassette,
      real_send, *args, **kwargs):\n        if len(args) == 1 and \"stream\" in kwargs
      and kwargs[\"stream\"] is True:\n            args = (args[0], kwargs[\"request\"])\n
      \           del kwargs[\"request\"]\n        vcr_request, response = _shared_vcr_send(cassette,
      real_send, *args, **kwargs)\n        if response:\n            # add cookies
      from response to session cookie store\n            args[0].cookies.extract_cookies(response)\n
      \           return response\n\n        real_response = await real_send(*args,
      **kwargs)\n        if \"text/event-stream\" in real_response.headers[\"Content-Type\"]:\n
      \           aiter_bytes = real_response.aiter_bytes\n\n            async def
      _sub(*args2, **kwargs2):\n                acc = []\n                async for
      x in aiter_bytes(*args2, **kwargs2):\n                    acc.append(x)\n                    yield
      x\n\n                if hasattr(real_response, \"_content\"):\n                    orig_content
      = real_response._content\n                else:\n                    orig_content
      = \"____NOT_SET____\"\n                real_response._content = b\"\".join(acc)\n
      \               _record_responses(cassette, vcr_request, real_response)\n                if
      orig_content == \"____NOT_SET____\":\n                    del real_response._content\n
      \               else:\n                    real_response._content = orig_content\n\n
      \           real_response.aiter_bytes = _sub\n            return real_response\n
      \       else:\n            return _record_responses(cassette, vcr_request, real_response)\n\n
      \   monkeypatch.setattr(httpx_stubs, \"_async_vcr_send\", AsyncMock(side_effect=mock_async_vcr_send))\n\n\n@pytest.fixture(scope=\"module\")\ndef
      app_builder(machine_manager):\n    def fn(resources: Iterable[Resource]):\n
      \       @asynccontextmanager\n        async def manage_lifecycle(_app: FastAPI):\n
      \           async with machine_manager() as _machine:\n                async
      with start_os(\n                    app=_app,\n                    resource_generator=[_machine,
      *resources] if _machine else resources,\n                    machine_name=_machine.metadata.name,\n
      \               ):\n                    yield\n                    print(\"done\")\n\n
      \       return start_app(lifespan=manage_lifecycle)\n\n    return fn\n\n\n@pytest.fixture(scope=\"module\")\ndef
      port():\n    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:\n
      \       s.bind((\"\", 0))\n        s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR,
      1)\n        return s.getsockname()[1]\n\n\n@pytest.fixture(autouse=True)\ndef
      vcr_config():\n    return dict(\n        filter_headers=[(\"authorization\",
      \"XXXXXX\")],\n        ignore_localhost=True,\n        ignore_hosts=[\"0.0.0.0\",
      \"localhost\"],\n        record_mode=\"new_episodes\",\n        match_on=[\"method\",
      \"scheme\", \"host\", \"port\", \"path\", \"query\", \"body\"],\n    )\n\n\n@pytest.fixture(scope=\"module\")\ndef
      run_app(app_builder, port):\n    @asynccontextmanager\n    async def fn(*agents):\n
      \       server_wrapper = []\n\n        def run_server():\n            AppStatus.should_exit
      = False\n            AppStatus.should_exit_event = None\n\n            try:\n
      \               resources = [\n                    a\n                    if
      isinstance(a, Resource)\n                    else AgentResource(\n                        apiVersion=\"eidolon/v1\",\n
      \                       spec=Reference(implementation=fqn(a)),\n                        metadata=Metadata(name=a.__name__),\n
      \                   )\n                    for a in agents\n                ]\n
      \               app = app_builder(resources)\n                # todo, the next
      line launches uvicorn app as a subprocess so it does not block\n                config
      = uvicorn.Config(app, host=\"0.0.0.0\", port=port, log_level=\"info\", loop=\"asyncio\")\n
      \               server = uvicorn.Server(config)\n                server_wrapper.append(server)\n
      \               #     todo, issue here where raising on bootstrap does not kill
      the server\n                server.run()\n            except BaseException as
      e:\n                server_wrapper.clear()\n                server_wrapper.append(\"aborted\")\n
      \               raise e\n\n        server_thread = threading.Thread(target=run_server)\n
      \       server_thread.start()\n\n        try:\n            # Wait for the server
      to start\n            while len(server_wrapper) == 0 or not (server_wrapper[0]
      == \"aborted\" or server_wrapper[0].started):\n                pass\n\n            print(f\"Server
      started on port {port}\")\n            os.environ[\"EIDOLON_LOCAL_MACHINE\"]
      = f\"http://localhost:{port}\"\n            yield f\"http://localhost:{port}\"\n
      \       finally:\n            # server_wrapper[0].force_exit = True\n            server_wrapper[0].should_exit
      = True\n            server_thread.join()\n\n    return fn\n\n\n@pytest.fixture(scope=\"module\")\ndef
      client_builder(run_app):\n    @asynccontextmanager\n    async def fn(*agents):\n
      \       async with run_app(*agents) as ra:\n            with httpx.Client(base_url=ra,
      timeout=httpx.Timeout(60)) as client:\n                yield client\n\n    return
      fn\n\n\n@pytest.fixture(scope=\"module\")\ndef machine_manager(file_memory,
      symbolic_memory, similarity_memory):\n    @asynccontextmanager\n    async def
      fn():\n        async with symbolic_memory() as sym, similarity_memory() as sim:\n
      \           yield MachineResource(\n                apiVersion=\"eidolon/v1\",\n
      \               metadata=Metadata(name=\"test_machine\"),\n                kind=\"Machine\",\n
      \               spec=dict(\n                    symbolic_memory=sym,\n                    file_memory=file_memory,\n
      \                   similarity_memory=sim,\n                ),\n            )\n\n
      \   return fn\n\n\n@pytest.fixture\nasync def machine(machine_manager):\n    async
      with machine_manager() as m:\n        instantiated = m.spec.instantiate()\n
      \       AgentOS.load_machine(instantiated)\n        yield instantiated\n        AgentOS.reset()\n\n\n@pytest.fixture(scope=\"module\")\ndef
      local_symbolic_memory(module_identifier):\n    @asynccontextmanager\n    async
      def fn():\n        ref = Reference(implementation=fqn(LocalSymbolicMemory))\n
      \       memory = ref.instantiate()\n        await memory.start()\n        yield
      ref\n        await memory.stop()\n        # Teardown: drop the test database\n\n
      \   return fn\n\n\n@pytest.fixture(scope=\"module\")\ndef mongo_symbolic_memory(module_identifier):\n
      \   @asynccontextmanager\n    async def fn():\n        # Setup unique database
      for test suite\n        identifier = module_identifier[:20]\n        database_name
      = f\"test_db_{identifier}_{ObjectId()}\"  # Unique name for test database\n
      \       ref = Reference(\n            implementation=fqn(MongoSymbolicMemory),\n
      \           mongo_database_name=database_name,\n        )\n        memory =
      ref.instantiate()\n        await memory.start()\n        yield ref\n        await
      memory.stop()\n        # Teardown: drop the test database\n        connection_string
      = os.getenv(\"MONGO_CONNECTION_STRING\")\n        client = AsyncIOMotorClient(connection_string)\n
      \       await client.drop_database(database_name)\n        client.close()\n\n
      \   return fn\n\n\ndef pytest_addoption(parser):\n    parser.addoption(\"--symbolic_memory\",
      action=\"store\", default=\"mongo\", help=\"Symbolic memory implementation to
      use\")\n\n\n@pytest.fixture(scope=\"module\")\ndef symbolic_memory(mongo_symbolic_memory,
      local_symbolic_memory, pytestconfig):\n    if pytestconfig.getoption(\"symbolic_memory\").lower()
      == \"local\":\n        print(\"Using local symbolic memory\")\n        return
      local_symbolic_memory\n    else:\n        print(\"Using mongo symbolic memory\")\n
      \       return mongo_symbolic_memory\n\n\n@pytest.fixture(scope=\"module\")\ndef
      file_memory_loc(tmp_path_factory, module_identifier):\n    return tmp_path_factory.mktemp(f\"file_memory_{module_identifier}\")\n\n\n@pytest.fixture(scope=\"module\")\ndef
      file_memory(file_memory_loc):\n    return Reference[LocalFileMemory](root_dir=str(file_memory_loc))\n\n\n@pytest.fixture(scope=\"module\")\ndef
      similarity_memory(tmp_path_factory):\n    @asynccontextmanager\n    async def
      cm():\n        tmp_dir = tmp_path_factory.mktemp(f\"vector_store_{module_identifier}_{ObjectId()}\")\n
      \       ref = Reference(\n            implementation=fqn(SimilarityMemory),\n
      \           vector_store=dict(url=f\"file://{tmp_dir}\"),\n        )\n        memory:
      SimilarityMemory = ref.instantiate()\n        await memory.start()\n        yield
      ref\n        await memory.stop()\n\n    return cm\n\n\n@pytest.fixture(scope=\"module\",
      autouse=True)\ndef module_identifier(request):\n    return request.node.name.replace(\".\",
      \"_\")\n\n\n@pytest.fixture(scope=\"session\")\ndef test_dir():\n    return
      pathlib.Path(__file__).parent\n\n\n@pytest.fixture(scope=\"module\")\ndef llm(test_dir,
      module_identifier):\n    return Reference(\n        implementation=fqn(OpenAIGPT),\n
      \       model=\"gpt-4-vision-preview\",\n        force_json=False,\n        max_tokens=4096,\n
      \   )\n\n\n@pytest.fixture()\ndef dog(test_dir):\n    loc = str(test_dir / \"images\"
      / \"dog.png\")\n    with open(loc, \"rb\") as f:\n        yield f\n\n\n@pytest.fixture()\ndef
      cat(test_dir):\n    loc = str(test_dir / \"images\" / \"cat.png\")\n    with
      open(loc, \"rb\") as f:\n        yield f\n\n\n@pytest.fixture\ndef patched_vcr_object_handling():\n
      \   \"\"\"\n    vcr has a bug around how it handles multipart requests, and
      it is wired in for everything,\n    even the fake test client requests, so we
      need to pipe the body through ourselves\n    \"\"\"\n\n    def my_custom_function(httpx_request,
      **kwargs):\n        uri = str(httpx_request.url)\n        headers = dict(httpx_request.headers)\n
      \       return VcrRequest(httpx_request.method, uri, httpx_request, headers)\n\n
      \   with patch.object(httpx_stubs, \"_make_vcr_request\", new=my_custom_function):\n
      \       yield\n\n\ndef deterministic_id_generator(test_name):\n    count = 0\n
      \   while True:\n        yield f\"{test_name}_{count}\"\n        count += 1\n\n\n@pytest.fixture()\ndef
      deterministic_process_ids(request):\n    \"\"\"\n    Tool call responses contain
      the process id, which means it does name make cache hits for vcr.\n    This
      method patches object id for processes so that it returns a deterministic id
      based on the test name.\n    \"\"\"\n\n    test_name = request.node.name\n    id_generator
      = deterministic_id_generator(test_name)\n\n    def patched_ObjectId(*args, **kwargs):\n
      \       return next(id_generator)\n\n    with patch.object(processes.bson, \"ObjectId\",
      new=patched_ObjectId):\n        yield\n"
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Length:
      - '3542'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:35:40 GMT
      ETag:
      - W/"6f4742fc3bb66e6c5d72d609d9e5e6ef35a4f327cfe0009aa81d645b5bb3aad0"
      Expires:
      - Tue, 20 Feb 2024 21:40:40 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - c07ce9e6729b6ebe65e926cebfc3bdc47571d3b0
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - 84F4:253EB0:B8064:10BF6F:65D51B2B
      X-Served-By:
      - cache-bfi-krnt7300044-BFI
      X-Timer:
      - S1708464940.458480,VS0,VE121
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/hello_world?ref=main
  response:
    content: '[{"name":"AutonomousAgent.py","path":"examples/eidolon_examples/hello_world/AutonomousAgent.py","sha":"d25907605aeb8f8647885e161e89676a4f0f6946","size":1349,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/hello_world/AutonomousAgent.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/hello_world/AutonomousAgent.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/d25907605aeb8f8647885e161e89676a4f0f6946","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/eidolon_examples/hello_world/AutonomousAgent.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/hello_world/AutonomousAgent.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/d25907605aeb8f8647885e161e89676a4f0f6946","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/hello_world/AutonomousAgent.py"}},{"name":"AutonomousSpeechAgent.py","path":"examples/eidolon_examples/hello_world/AutonomousSpeechAgent.py","sha":"211173e7806902ba3b7ccf166948f9001d74bce4","size":2077,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/hello_world/AutonomousSpeechAgent.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/hello_world/AutonomousSpeechAgent.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/211173e7806902ba3b7ccf166948f9001d74bce4","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/eidolon_examples/hello_world/AutonomousSpeechAgent.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/hello_world/AutonomousSpeechAgent.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/211173e7806902ba3b7ccf166948f9001d74bce4","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/hello_world/AutonomousSpeechAgent.py"}},{"name":"HelloWorld.py","path":"examples/eidolon_examples/hello_world/HelloWorld.py","sha":"dbffac592b133e551353750cfbf59c2f5e1ef6b8","size":3130,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/hello_world/HelloWorld.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/hello_world/HelloWorld.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/dbffac592b133e551353750cfbf59c2f5e1ef6b8","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/eidolon_examples/hello_world/HelloWorld.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/hello_world/HelloWorld.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/dbffac592b133e551353750cfbf59c2f5e1ef6b8","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/hello_world/HelloWorld.py"}},{"name":"SimpleTool.py","path":"examples/eidolon_examples/hello_world/SimpleTool.py","sha":"c0530fe662cc770b2bedaf3428ffc8adc54ecc3e","size":1268,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/hello_world/SimpleTool.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/hello_world/SimpleTool.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/c0530fe662cc770b2bedaf3428ffc8adc54ecc3e","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/eidolon_examples/hello_world/SimpleTool.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/hello_world/SimpleTool.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/c0530fe662cc770b2bedaf3428ffc8adc54ecc3e","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/hello_world/SimpleTool.py"}},{"name":"StateMachine.py","path":"examples/eidolon_examples/hello_world/StateMachine.py","sha":"986f5307282d3a12d198b2b5a22f4528e32df776","size":1377,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/hello_world/StateMachine.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/hello_world/StateMachine.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/986f5307282d3a12d198b2b5a22f4528e32df776","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/eidolon_examples/hello_world/StateMachine.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/hello_world/StateMachine.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/986f5307282d3a12d198b2b5a22f4528e32df776","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/hello_world/StateMachine.py"}},{"name":"StreamingTest.py","path":"examples/eidolon_examples/hello_world/StreamingTest.py","sha":"c24c9b26ac9c99ec40dfad715291b179e5bb8820","size":771,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/hello_world/StreamingTest.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/hello_world/StreamingTest.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/c24c9b26ac9c99ec40dfad715291b179e5bb8820","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/eidolon_examples/hello_world/StreamingTest.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/hello_world/StreamingTest.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/c24c9b26ac9c99ec40dfad715291b179e5bb8820","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/hello_world/StreamingTest.py"}},{"name":"__init__.py","path":"examples/eidolon_examples/hello_world/__init__.py","sha":"e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/hello_world/__init__.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/hello_world/__init__.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/eidolon_examples/hello_world/__init__.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/hello_world/__init__.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/hello_world/__init__.py"}},{"name":"resources","path":"examples/eidolon_examples/hello_world/resources","sha":"1a77af2e692bccae87c299a3795e4f358777ed31","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/hello_world/resources?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/examples/eidolon_examples/hello_world/resources","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/1a77af2e692bccae87c299a3795e4f358777ed31","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/hello_world/resources?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/1a77af2e692bccae87c299a3795e4f358777ed31","html":"https://github.com/eidolon-ai/eidolon/tree/main/examples/eidolon_examples/hello_world/resources"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:35:40 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E575:2552AA:15DEBC:1F4E51:65D51B2C
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4550'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '450'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/util?ref=main
  response:
    content: '[{"name":"__init__.py","path":"sdk/eidolon_ai_sdk/util/__init__.py","sha":"e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/util/__init__.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/util/__init__.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/util/__init__.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/util/__init__.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/util/__init__.py"}},{"name":"aiohttp.py","path":"sdk/eidolon_ai_sdk/util/aiohttp.py","sha":"bfd5c8462131f640f046a26fdd29c84830056f72","size":2716,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/util/aiohttp.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/util/aiohttp.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/bfd5c8462131f640f046a26fdd29c84830056f72","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/util/aiohttp.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/util/aiohttp.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/bfd5c8462131f640f046a26fdd29c84830056f72","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/util/aiohttp.py"}},{"name":"async_wrapper.py","path":"sdk/eidolon_ai_sdk/util/async_wrapper.py","sha":"ac58da434ff6b011172dafc4249d7e0df42552b8","size":509,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/util/async_wrapper.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/util/async_wrapper.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/ac58da434ff6b011172dafc4249d7e0df42552b8","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/util/async_wrapper.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/util/async_wrapper.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/ac58da434ff6b011172dafc4249d7e0df42552b8","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/util/async_wrapper.py"}},{"name":"class_utils.py","path":"sdk/eidolon_ai_sdk/util/class_utils.py","sha":"44d54344692ac2a71f2988adfc692dd55876921e","size":2806,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/util/class_utils.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/util/class_utils.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/44d54344692ac2a71f2988adfc692dd55876921e","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/util/class_utils.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/util/class_utils.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/44d54344692ac2a71f2988adfc692dd55876921e","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/util/class_utils.py"}},{"name":"logger.py","path":"sdk/eidolon_ai_sdk/util/logger.py","sha":"948da74a65c124a4238715352d464137d4305888","size":448,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/util/logger.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/util/logger.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/948da74a65c124a4238715352d464137d4305888","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/util/logger.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/util/logger.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/948da74a65c124a4238715352d464137d4305888","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/util/logger.py"}},{"name":"replay.py","path":"sdk/eidolon_ai_sdk/util/replay.py","sha":"d00078a1fd8c35632f856c4127737a03bd334975","size":3359,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/util/replay.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/util/replay.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/d00078a1fd8c35632f856c4127737a03bd334975","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/util/replay.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/util/replay.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/d00078a1fd8c35632f856c4127737a03bd334975","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/util/replay.py"}},{"name":"schema_to_model.py","path":"sdk/eidolon_ai_sdk/util/schema_to_model.py","sha":"45bac811752cc3739595ffcacd41ea46ee682822","size":6206,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/util/schema_to_model.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/util/schema_to_model.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/45bac811752cc3739595ffcacd41ea46ee682822","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/util/schema_to_model.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/util/schema_to_model.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/45bac811752cc3739595ffcacd41ea46ee682822","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/util/schema_to_model.py"}},{"name":"str_utils.py","path":"sdk/eidolon_ai_sdk/util/str_utils.py","sha":"3f7dd953db20ac83f3b2240327e27ff4a8503cfb","size":349,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/util/str_utils.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/util/str_utils.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/3f7dd953db20ac83f3b2240327e27ff4a8503cfb","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/util/str_utils.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/util/str_utils.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/3f7dd953db20ac83f3b2240327e27ff4a8503cfb","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/util/str_utils.py"}},{"name":"stream_collector.py","path":"sdk/eidolon_ai_sdk/util/stream_collector.py","sha":"eb30bacbb5dfb5d76cd30e142746aad8f588fd48","size":3826,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/util/stream_collector.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/util/stream_collector.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/eb30bacbb5dfb5d76cd30e142746aad8f588fd48","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/util/stream_collector.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/util/stream_collector.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/eb30bacbb5dfb5d76cd30e142746aad8f588fd48","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/util/stream_collector.py"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:35:40 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E573:252DF3:14A8F4:1E1811:65D51B2C
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4551'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '449'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/assets/main_images?ref=main
  response:
    content: "[{\"name\":\"DALL\xB7E 2023-12-22 22.35.03 - An abstract, non-humanoid
      central form, reminiscent of a cosmic entity with vibrant, swirling nebula-like
      patterns in deep blues, purples, and hints o.png\",\"path\":\"docs/src/assets/main_images/DALL\xB7E
      2023-12-22 22.35.03 - An abstract, non-humanoid central form, reminiscent of
      a cosmic entity with vibrant, swirling nebula-like patterns in deep blues, purples,
      and hints o.png\",\"sha\":\"d43d4b812d150091491cd30d7ef8348113e6d5fe\",\"size\":2054621,\"url\":\"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/assets/main_images/DALL%C2%B7E%202023-12-22%2022.35.03%20-%20An%20abstract,%20non-humanoid%20central%20form,%20reminiscent%20of%20a%20cosmic%20entity%20with%20vibrant,%20swirling%20nebula-like%20patterns%20in%20deep%20blues,%20purples,%20and%20hints%20o.png?ref=main\",\"html_url\":\"https://github.com/eidolon-ai/eidolon/blob/main/docs/src/assets/main_images/DALL%C2%B7E%202023-12-22%2022.35.03%20-%20An%20abstract,%20non-humanoid%20central%20form,%20reminiscent%20of%20a%20cosmic%20entity%20with%20vibrant,%20swirling%20nebula-like%20patterns%20in%20deep%20blues,%20purples,%20and%20hints%20o.png\",\"git_url\":\"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/d43d4b812d150091491cd30d7ef8348113e6d5fe\",\"download_url\":\"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/docs/src/assets/main_images/DALL\xB7E
      2023-12-22 22.35.03 - An abstract, non-humanoid central form, reminiscent of
      a cosmic entity with vibrant, swirling nebula-like patterns in deep blues, purples,
      and hints o.png\",\"type\":\"file\",\"_links\":{\"self\":\"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/assets/main_images/DALL%C2%B7E%202023-12-22%2022.35.03%20-%20An%20abstract,%20non-humanoid%20central%20form,%20reminiscent%20of%20a%20cosmic%20entity%20with%20vibrant,%20swirling%20nebula-like%20patterns%20in%20deep%20blues,%20purples,%20and%20hints%20o.png?ref=main\",\"git\":\"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/d43d4b812d150091491cd30d7ef8348113e6d5fe\",\"html\":\"https://github.com/eidolon-ai/eidolon/blob/main/docs/src/assets/main_images/DALL%C2%B7E%202023-12-22%2022.35.03%20-%20An%20abstract,%20non-humanoid%20central%20form,%20reminiscent%20of%20a%20cosmic%20entity%20with%20vibrant,%20swirling%20nebula-like%20patterns%20in%20deep%20blues,%20purples,%20and%20hints%20o.png\"}},{\"name\":\"DALL\xB7E
      2023-12-22 22.35.08 - An abstract, non-humanoid central form, reminiscent of
      a cosmic entity with vibrant, swirling nebula-like patterns in deep blues, purples,
      and hints o.png\",\"path\":\"docs/src/assets/main_images/DALL\xB7E 2023-12-22
      22.35.08 - An abstract, non-humanoid central form, reminiscent of a cosmic entity
      with vibrant, swirling nebula-like patterns in deep blues, purples, and hints
      o.png\",\"sha\":\"02e9e0e45079a36b1d7cfc68952fab48c18d79ae\",\"size\":2117661,\"url\":\"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/assets/main_images/DALL%C2%B7E%202023-12-22%2022.35.08%20-%20An%20abstract,%20non-humanoid%20central%20form,%20reminiscent%20of%20a%20cosmic%20entity%20with%20vibrant,%20swirling%20nebula-like%20patterns%20in%20deep%20blues,%20purples,%20and%20hints%20o.png?ref=main\",\"html_url\":\"https://github.com/eidolon-ai/eidolon/blob/main/docs/src/assets/main_images/DALL%C2%B7E%202023-12-22%2022.35.08%20-%20An%20abstract,%20non-humanoid%20central%20form,%20reminiscent%20of%20a%20cosmic%20entity%20with%20vibrant,%20swirling%20nebula-like%20patterns%20in%20deep%20blues,%20purples,%20and%20hints%20o.png\",\"git_url\":\"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/02e9e0e45079a36b1d7cfc68952fab48c18d79ae\",\"download_url\":\"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/docs/src/assets/main_images/DALL\xB7E
      2023-12-22 22.35.08 - An abstract, non-humanoid central form, reminiscent of
      a cosmic entity with vibrant, swirling nebula-like patterns in deep blues, purples,
      and hints o.png\",\"type\":\"file\",\"_links\":{\"self\":\"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/assets/main_images/DALL%C2%B7E%202023-12-22%2022.35.08%20-%20An%20abstract,%20non-humanoid%20central%20form,%20reminiscent%20of%20a%20cosmic%20entity%20with%20vibrant,%20swirling%20nebula-like%20patterns%20in%20deep%20blues,%20purples,%20and%20hints%20o.png?ref=main\",\"git\":\"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/02e9e0e45079a36b1d7cfc68952fab48c18d79ae\",\"html\":\"https://github.com/eidolon-ai/eidolon/blob/main/docs/src/assets/main_images/DALL%C2%B7E%202023-12-22%2022.35.08%20-%20An%20abstract,%20non-humanoid%20central%20form,%20reminiscent%20of%20a%20cosmic%20entity%20with%20vibrant,%20swirling%20nebula-like%20patterns%20in%20deep%20blues,%20purples,%20and%20hints%20o.png\"}},{\"name\":\"DALL\xB7E
      2023-12-22 22.35.10 - Multiple abstract, non-humanoid forms resembling cosmic
      entities, each with vibrant, swirling nebula-like patterns in deep blues, purples,
      and hints o.png\",\"path\":\"docs/src/assets/main_images/DALL\xB7E 2023-12-22
      22.35.10 - Multiple abstract, non-humanoid forms resembling cosmic entities,
      each with vibrant, swirling nebula-like patterns in deep blues, purples, and
      hints o.png\",\"sha\":\"207d1f916f376cac78f0ed8710782fda39a114df\",\"size\":2181162,\"url\":\"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/assets/main_images/DALL%C2%B7E%202023-12-22%2022.35.10%20-%20Multiple%20abstract,%20non-humanoid%20forms%20resembling%20cosmic%20entities,%20each%20with%20vibrant,%20swirling%20nebula-like%20patterns%20in%20deep%20blues,%20purples,%20and%20hints%20o.png?ref=main\",\"html_url\":\"https://github.com/eidolon-ai/eidolon/blob/main/docs/src/assets/main_images/DALL%C2%B7E%202023-12-22%2022.35.10%20-%20Multiple%20abstract,%20non-humanoid%20forms%20resembling%20cosmic%20entities,%20each%20with%20vibrant,%20swirling%20nebula-like%20patterns%20in%20deep%20blues,%20purples,%20and%20hints%20o.png\",\"git_url\":\"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/207d1f916f376cac78f0ed8710782fda39a114df\",\"download_url\":\"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/docs/src/assets/main_images/DALL\xB7E
      2023-12-22 22.35.10 - Multiple abstract, non-humanoid forms resembling cosmic
      entities, each with vibrant, swirling nebula-like patterns in deep blues, purples,
      and hints o.png\",\"type\":\"file\",\"_links\":{\"self\":\"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/assets/main_images/DALL%C2%B7E%202023-12-22%2022.35.10%20-%20Multiple%20abstract,%20non-humanoid%20forms%20resembling%20cosmic%20entities,%20each%20with%20vibrant,%20swirling%20nebula-like%20patterns%20in%20deep%20blues,%20purples,%20and%20hints%20o.png?ref=main\",\"git\":\"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/207d1f916f376cac78f0ed8710782fda39a114df\",\"html\":\"https://github.com/eidolon-ai/eidolon/blob/main/docs/src/assets/main_images/DALL%C2%B7E%202023-12-22%2022.35.10%20-%20Multiple%20abstract,%20non-humanoid%20forms%20resembling%20cosmic%20entities,%20each%20with%20vibrant,%20swirling%20nebula-like%20patterns%20in%20deep%20blues,%20purples,%20and%20hints%20o.png\"}},{\"name\":\"DALL\xB7E
      2023-12-22 22.35.12 - Multiple abstract, non-humanoid forms resembling cosmic
      entities, each with vibrant, swirling nebula-like patterns in deep blues, purples,
      and hints o.png\",\"path\":\"docs/src/assets/main_images/DALL\xB7E 2023-12-22
      22.35.12 - Multiple abstract, non-humanoid forms resembling cosmic entities,
      each with vibrant, swirling nebula-like patterns in deep blues, purples, and
      hints o.png\",\"sha\":\"3466ab6ae20228649492285ba3bb335fe65a57de\",\"size\":2032687,\"url\":\"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/assets/main_images/DALL%C2%B7E%202023-12-22%2022.35.12%20-%20Multiple%20abstract,%20non-humanoid%20forms%20resembling%20cosmic%20entities,%20each%20with%20vibrant,%20swirling%20nebula-like%20patterns%20in%20deep%20blues,%20purples,%20and%20hints%20o.png?ref=main\",\"html_url\":\"https://github.com/eidolon-ai/eidolon/blob/main/docs/src/assets/main_images/DALL%C2%B7E%202023-12-22%2022.35.12%20-%20Multiple%20abstract,%20non-humanoid%20forms%20resembling%20cosmic%20entities,%20each%20with%20vibrant,%20swirling%20nebula-like%20patterns%20in%20deep%20blues,%20purples,%20and%20hints%20o.png\",\"git_url\":\"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/3466ab6ae20228649492285ba3bb335fe65a57de\",\"download_url\":\"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/docs/src/assets/main_images/DALL\xB7E
      2023-12-22 22.35.12 - Multiple abstract, non-humanoid forms resembling cosmic
      entities, each with vibrant, swirling nebula-like patterns in deep blues, purples,
      and hints o.png\",\"type\":\"file\",\"_links\":{\"self\":\"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/assets/main_images/DALL%C2%B7E%202023-12-22%2022.35.12%20-%20Multiple%20abstract,%20non-humanoid%20forms%20resembling%20cosmic%20entities,%20each%20with%20vibrant,%20swirling%20nebula-like%20patterns%20in%20deep%20blues,%20purples,%20and%20hints%20o.png?ref=main\",\"git\":\"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/3466ab6ae20228649492285ba3bb335fe65a57de\",\"html\":\"https://github.com/eidolon-ai/eidolon/blob/main/docs/src/assets/main_images/DALL%C2%B7E%202023-12-22%2022.35.12%20-%20Multiple%20abstract,%20non-humanoid%20forms%20resembling%20cosmic%20entities,%20each%20with%20vibrant,%20swirling%20nebula-like%20patterns%20in%20deep%20blues,%20purples,%20and%20hints%20o.png\"}},{\"name\":\"DALL\xB7E
      2023-12-22 22.35.14 - A central abstract, non-humanoid form resembling a cosmic
      entity, with vibrant, swirling nebula-like patterns in deep blues, purples,
      and hints of pin.png\",\"path\":\"docs/src/assets/main_images/DALL\xB7E 2023-12-22
      22.35.14 - A central abstract, non-humanoid form resembling a cosmic entity,
      with vibrant, swirling nebula-like patterns in deep blues, purples, and hints
      of pin.png\",\"sha\":\"23ccb64021ee43ecd4e45d0d7a678ff67a5e2565\",\"size\":2101737,\"url\":\"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/assets/main_images/DALL%C2%B7E%202023-12-22%2022.35.14%20-%20A%20central%20abstract,%20non-humanoid%20form%20resembling%20a%20cosmic%20entity,%20with%20vibrant,%20swirling%20nebula-like%20patterns%20in%20deep%20blues,%20purples,%20and%20hints%20of%20pin.png?ref=main\",\"html_url\":\"https://github.com/eidolon-ai/eidolon/blob/main/docs/src/assets/main_images/DALL%C2%B7E%202023-12-22%2022.35.14%20-%20A%20central%20abstract,%20non-humanoid%20form%20resembling%20a%20cosmic%20entity,%20with%20vibrant,%20swirling%20nebula-like%20patterns%20in%20deep%20blues,%20purples,%20and%20hints%20of%20pin.png\",\"git_url\":\"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/23ccb64021ee43ecd4e45d0d7a678ff67a5e2565\",\"download_url\":\"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/docs/src/assets/main_images/DALL\xB7E
      2023-12-22 22.35.14 - A central abstract, non-humanoid form resembling a cosmic
      entity, with vibrant, swirling nebula-like patterns in deep blues, purples,
      and hints of pin.png\",\"type\":\"file\",\"_links\":{\"self\":\"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/assets/main_images/DALL%C2%B7E%202023-12-22%2022.35.14%20-%20A%20central%20abstract,%20non-humanoid%20form%20resembling%20a%20cosmic%20entity,%20with%20vibrant,%20swirling%20nebula-like%20patterns%20in%20deep%20blues,%20purples,%20and%20hints%20of%20pin.png?ref=main\",\"git\":\"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/23ccb64021ee43ecd4e45d0d7a678ff67a5e2565\",\"html\":\"https://github.com/eidolon-ai/eidolon/blob/main/docs/src/assets/main_images/DALL%C2%B7E%202023-12-22%2022.35.14%20-%20A%20central%20abstract,%20non-humanoid%20form%20resembling%20a%20cosmic%20entity,%20with%20vibrant,%20swirling%20nebula-like%20patterns%20in%20deep%20blues,%20purples,%20and%20hints%20of%20pin.png\"}},{\"name\":\"DALL\xB7E
      2023-12-22 22.35.15 - A central abstract, non-humanoid form resembling a cosmic
      entity, with vibrant, swirling nebula-like patterns in deep blues, purples,
      and hints of pin.png\",\"path\":\"docs/src/assets/main_images/DALL\xB7E 2023-12-22
      22.35.15 - A central abstract, non-humanoid form resembling a cosmic entity,
      with vibrant, swirling nebula-like patterns in deep blues, purples, and hints
      of pin.png\",\"sha\":\"3409e3b5a3b598388c368d5075bc10ec7f4e0b3f\",\"size\":2142845,\"url\":\"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/assets/main_images/DALL%C2%B7E%202023-12-22%2022.35.15%20-%20A%20central%20abstract,%20non-humanoid%20form%20resembling%20a%20cosmic%20entity,%20with%20vibrant,%20swirling%20nebula-like%20patterns%20in%20deep%20blues,%20purples,%20and%20hints%20of%20pin.png?ref=main\",\"html_url\":\"https://github.com/eidolon-ai/eidolon/blob/main/docs/src/assets/main_images/DALL%C2%B7E%202023-12-22%2022.35.15%20-%20A%20central%20abstract,%20non-humanoid%20form%20resembling%20a%20cosmic%20entity,%20with%20vibrant,%20swirling%20nebula-like%20patterns%20in%20deep%20blues,%20purples,%20and%20hints%20of%20pin.png\",\"git_url\":\"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/3409e3b5a3b598388c368d5075bc10ec7f4e0b3f\",\"download_url\":\"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/docs/src/assets/main_images/DALL\xB7E
      2023-12-22 22.35.15 - A central abstract, non-humanoid form resembling a cosmic
      entity, with vibrant, swirling nebula-like patterns in deep blues, purples,
      and hints of pin.png\",\"type\":\"file\",\"_links\":{\"self\":\"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/assets/main_images/DALL%C2%B7E%202023-12-22%2022.35.15%20-%20A%20central%20abstract,%20non-humanoid%20form%20resembling%20a%20cosmic%20entity,%20with%20vibrant,%20swirling%20nebula-like%20patterns%20in%20deep%20blues,%20purples,%20and%20hints%20of%20pin.png?ref=main\",\"git\":\"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/3409e3b5a3b598388c368d5075bc10ec7f4e0b3f\",\"html\":\"https://github.com/eidolon-ai/eidolon/blob/main/docs/src/assets/main_images/DALL%C2%B7E%202023-12-22%2022.35.15%20-%20A%20central%20abstract,%20non-humanoid%20form%20resembling%20a%20cosmic%20entity,%20with%20vibrant,%20swirling%20nebula-like%20patterns%20in%20deep%20blues,%20purples,%20and%20hints%20of%20pin.png\"}},{\"name\":\"DALL\xB7E
      2023-12-22 22.35.16 - A central abstract, non-humanoid form resembling a cosmic
      entity, with vibrant, swirling nebula-like patterns in deep blues, purples,
      and hints of pin.png\",\"path\":\"docs/src/assets/main_images/DALL\xB7E 2023-12-22
      22.35.16 - A central abstract, non-humanoid form resembling a cosmic entity,
      with vibrant, swirling nebula-like patterns in deep blues, purples, and hints
      of pin.png\",\"sha\":\"c1987e6823b917e89768d117b52c265cd746b002\",\"size\":2224929,\"url\":\"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/assets/main_images/DALL%C2%B7E%202023-12-22%2022.35.16%20-%20A%20central%20abstract,%20non-humanoid%20form%20resembling%20a%20cosmic%20entity,%20with%20vibrant,%20swirling%20nebula-like%20patterns%20in%20deep%20blues,%20purples,%20and%20hints%20of%20pin.png?ref=main\",\"html_url\":\"https://github.com/eidolon-ai/eidolon/blob/main/docs/src/assets/main_images/DALL%C2%B7E%202023-12-22%2022.35.16%20-%20A%20central%20abstract,%20non-humanoid%20form%20resembling%20a%20cosmic%20entity,%20with%20vibrant,%20swirling%20nebula-like%20patterns%20in%20deep%20blues,%20purples,%20and%20hints%20of%20pin.png\",\"git_url\":\"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/c1987e6823b917e89768d117b52c265cd746b002\",\"download_url\":\"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/docs/src/assets/main_images/DALL\xB7E
      2023-12-22 22.35.16 - A central abstract, non-humanoid form resembling a cosmic
      entity, with vibrant, swirling nebula-like patterns in deep blues, purples,
      and hints of pin.png\",\"type\":\"file\",\"_links\":{\"self\":\"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/assets/main_images/DALL%C2%B7E%202023-12-22%2022.35.16%20-%20A%20central%20abstract,%20non-humanoid%20form%20resembling%20a%20cosmic%20entity,%20with%20vibrant,%20swirling%20nebula-like%20patterns%20in%20deep%20blues,%20purples,%20and%20hints%20of%20pin.png?ref=main\",\"git\":\"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/c1987e6823b917e89768d117b52c265cd746b002\",\"html\":\"https://github.com/eidolon-ai/eidolon/blob/main/docs/src/assets/main_images/DALL%C2%B7E%202023-12-22%2022.35.16%20-%20A%20central%20abstract,%20non-humanoid%20form%20resembling%20a%20cosmic%20entity,%20with%20vibrant,%20swirling%20nebula-like%20patterns%20in%20deep%20blues,%20purples,%20and%20hints%20of%20pin.png\"}},{\"name\":\"DALL\xB7E
      2023-12-22 22.35.18 - A central abstract, non-humanoid form resembling a cosmic
      entity, with vibrant, swirling nebula-like patterns in deep blues, purples,
      and hints of pin.png\",\"path\":\"docs/src/assets/main_images/DALL\xB7E 2023-12-22
      22.35.18 - A central abstract, non-humanoid form resembling a cosmic entity,
      with vibrant, swirling nebula-like patterns in deep blues, purples, and hints
      of pin.png\",\"sha\":\"6c201c7e187fecfc1ec740c6bb8da09a87e533f1\",\"size\":2050790,\"url\":\"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/assets/main_images/DALL%C2%B7E%202023-12-22%2022.35.18%20-%20A%20central%20abstract,%20non-humanoid%20form%20resembling%20a%20cosmic%20entity,%20with%20vibrant,%20swirling%20nebula-like%20patterns%20in%20deep%20blues,%20purples,%20and%20hints%20of%20pin.png?ref=main\",\"html_url\":\"https://github.com/eidolon-ai/eidolon/blob/main/docs/src/assets/main_images/DALL%C2%B7E%202023-12-22%2022.35.18%20-%20A%20central%20abstract,%20non-humanoid%20form%20resembling%20a%20cosmic%20entity,%20with%20vibrant,%20swirling%20nebula-like%20patterns%20in%20deep%20blues,%20purples,%20and%20hints%20of%20pin.png\",\"git_url\":\"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/6c201c7e187fecfc1ec740c6bb8da09a87e533f1\",\"download_url\":\"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/docs/src/assets/main_images/DALL\xB7E
      2023-12-22 22.35.18 - A central abstract, non-humanoid form resembling a cosmic
      entity, with vibrant, swirling nebula-like patterns in deep blues, purples,
      and hints of pin.png\",\"type\":\"file\",\"_links\":{\"self\":\"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/assets/main_images/DALL%C2%B7E%202023-12-22%2022.35.18%20-%20A%20central%20abstract,%20non-humanoid%20form%20resembling%20a%20cosmic%20entity,%20with%20vibrant,%20swirling%20nebula-like%20patterns%20in%20deep%20blues,%20purples,%20and%20hints%20of%20pin.png?ref=main\",\"git\":\"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/6c201c7e187fecfc1ec740c6bb8da09a87e533f1\",\"html\":\"https://github.com/eidolon-ai/eidolon/blob/main/docs/src/assets/main_images/DALL%C2%B7E%202023-12-22%2022.35.18%20-%20A%20central%20abstract,%20non-humanoid%20form%20resembling%20a%20cosmic%20entity,%20with%20vibrant,%20swirling%20nebula-like%20patterns%20in%20deep%20blues,%20purples,%20and%20hints%20of%20pin.png\"}},{\"name\":\"DALL\xB7E
      2023-12-22 22.35.20 - A central abstract form resembling a cosmic brain or an
      AI agent, with vibrant, swirling nebula-like patterns in deep blues, purples,
      and hints of pin.png\",\"path\":\"docs/src/assets/main_images/DALL\xB7E 2023-12-22
      22.35.20 - A central abstract form resembling a cosmic brain or an AI agent,
      with vibrant, swirling nebula-like patterns in deep blues, purples, and hints
      of pin.png\",\"sha\":\"ef8ccff6e404637bb70bf8ab07d5171bb1f160e1\",\"size\":2242149,\"url\":\"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/assets/main_images/DALL%C2%B7E%202023-12-22%2022.35.20%20-%20A%20central%20abstract%20form%20resembling%20a%20cosmic%20brain%20or%20an%20AI%20agent,%20with%20vibrant,%20swirling%20nebula-like%20patterns%20in%20deep%20blues,%20purples,%20and%20hints%20of%20pin.png?ref=main\",\"html_url\":\"https://github.com/eidolon-ai/eidolon/blob/main/docs/src/assets/main_images/DALL%C2%B7E%202023-12-22%2022.35.20%20-%20A%20central%20abstract%20form%20resembling%20a%20cosmic%20brain%20or%20an%20AI%20agent,%20with%20vibrant,%20swirling%20nebula-like%20patterns%20in%20deep%20blues,%20purples,%20and%20hints%20of%20pin.png\",\"git_url\":\"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/ef8ccff6e404637bb70bf8ab07d5171bb1f160e1\",\"download_url\":\"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/docs/src/assets/main_images/DALL\xB7E
      2023-12-22 22.35.20 - A central abstract form resembling a cosmic brain or an
      AI agent, with vibrant, swirling nebula-like patterns in deep blues, purples,
      and hints of pin.png\",\"type\":\"file\",\"_links\":{\"self\":\"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/assets/main_images/DALL%C2%B7E%202023-12-22%2022.35.20%20-%20A%20central%20abstract%20form%20resembling%20a%20cosmic%20brain%20or%20an%20AI%20agent,%20with%20vibrant,%20swirling%20nebula-like%20patterns%20in%20deep%20blues,%20purples,%20and%20hints%20of%20pin.png?ref=main\",\"git\":\"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/ef8ccff6e404637bb70bf8ab07d5171bb1f160e1\",\"html\":\"https://github.com/eidolon-ai/eidolon/blob/main/docs/src/assets/main_images/DALL%C2%B7E%202023-12-22%2022.35.20%20-%20A%20central%20abstract%20form%20resembling%20a%20cosmic%20brain%20or%20an%20AI%20agent,%20with%20vibrant,%20swirling%20nebula-like%20patterns%20in%20deep%20blues,%20purples,%20and%20hints%20of%20pin.png\"}},{\"name\":\"DALL\xB7E
      2023-12-22 22.35.21 - A central abstract form resembling a cosmic brain or an
      AI agent, with vibrant, swirling nebula-like patterns in deep blues, purples,
      and hints of pin.png\",\"path\":\"docs/src/assets/main_images/DALL\xB7E 2023-12-22
      22.35.21 - A central abstract form resembling a cosmic brain or an AI agent,
      with vibrant, swirling nebula-like patterns in deep blues, purples, and hints
      of pin.png\",\"sha\":\"002f7632c6c1bc31102bf754212ebb44e29084ba\",\"size\":1894943,\"url\":\"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/assets/main_images/DALL%C2%B7E%202023-12-22%2022.35.21%20-%20A%20central%20abstract%20form%20resembling%20a%20cosmic%20brain%20or%20an%20AI%20agent,%20with%20vibrant,%20swirling%20nebula-like%20patterns%20in%20deep%20blues,%20purples,%20and%20hints%20of%20pin.png?ref=main\",\"html_url\":\"https://github.com/eidolon-ai/eidolon/blob/main/docs/src/assets/main_images/DALL%C2%B7E%202023-12-22%2022.35.21%20-%20A%20central%20abstract%20form%20resembling%20a%20cosmic%20brain%20or%20an%20AI%20agent,%20with%20vibrant,%20swirling%20nebula-like%20patterns%20in%20deep%20blues,%20purples,%20and%20hints%20of%20pin.png\",\"git_url\":\"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/002f7632c6c1bc31102bf754212ebb44e29084ba\",\"download_url\":\"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/docs/src/assets/main_images/DALL\xB7E
      2023-12-22 22.35.21 - A central abstract form resembling a cosmic brain or an
      AI agent, with vibrant, swirling nebula-like patterns in deep blues, purples,
      and hints of pin.png\",\"type\":\"file\",\"_links\":{\"self\":\"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/assets/main_images/DALL%C2%B7E%202023-12-22%2022.35.21%20-%20A%20central%20abstract%20form%20resembling%20a%20cosmic%20brain%20or%20an%20AI%20agent,%20with%20vibrant,%20swirling%20nebula-like%20patterns%20in%20deep%20blues,%20purples,%20and%20hints%20of%20pin.png?ref=main\",\"git\":\"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/002f7632c6c1bc31102bf754212ebb44e29084ba\",\"html\":\"https://github.com/eidolon-ai/eidolon/blob/main/docs/src/assets/main_images/DALL%C2%B7E%202023-12-22%2022.35.21%20-%20A%20central%20abstract%20form%20resembling%20a%20cosmic%20brain%20or%20an%20AI%20agent,%20with%20vibrant,%20swirling%20nebula-like%20patterns%20in%20deep%20blues,%20purples,%20and%20hints%20of%20pin.png\"}},{\"name\":\"eidolon_with_gradient.png\",\"path\":\"docs/src/assets/main_images/eidolon_with_gradient.png\",\"sha\":\"628035ba81d58a773e7b87a2242beba102eb75b2\",\"size\":2245999,\"url\":\"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/assets/main_images/eidolon_with_gradient.png?ref=main\",\"html_url\":\"https://github.com/eidolon-ai/eidolon/blob/main/docs/src/assets/main_images/eidolon_with_gradient.png\",\"git_url\":\"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/628035ba81d58a773e7b87a2242beba102eb75b2\",\"download_url\":\"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/docs/src/assets/main_images/eidolon_with_gradient.png\",\"type\":\"file\",\"_links\":{\"self\":\"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/assets/main_images/eidolon_with_gradient.png?ref=main\",\"git\":\"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/628035ba81d58a773e7b87a2242beba102eb75b2\",\"html\":\"https://github.com/eidolon-ai/eidolon/blob/main/docs/src/assets/main_images/eidolon_with_gradient.png\"}},{\"name\":\"img_1.png\",\"path\":\"docs/src/assets/main_images/img_1.png\",\"sha\":\"89a7f3dbb72c4956f0a6325c36e2a7345473fb4a\",\"size\":2712080,\"url\":\"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/assets/main_images/img_1.png?ref=main\",\"html_url\":\"https://github.com/eidolon-ai/eidolon/blob/main/docs/src/assets/main_images/img_1.png\",\"git_url\":\"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/89a7f3dbb72c4956f0a6325c36e2a7345473fb4a\",\"download_url\":\"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/docs/src/assets/main_images/img_1.png\",\"type\":\"file\",\"_links\":{\"self\":\"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/assets/main_images/img_1.png?ref=main\",\"git\":\"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/89a7f3dbb72c4956f0a6325c36e2a7345473fb4a\",\"html\":\"https://github.com/eidolon-ai/eidolon/blob/main/docs/src/assets/main_images/img_1.png\"}},{\"name\":\"img_2.png\",\"path\":\"docs/src/assets/main_images/img_2.png\",\"sha\":\"5356907346e2dde2388f89015ec537a2961247b1\",\"size\":2554213,\"url\":\"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/assets/main_images/img_2.png?ref=main\",\"html_url\":\"https://github.com/eidolon-ai/eidolon/blob/main/docs/src/assets/main_images/img_2.png\",\"git_url\":\"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/5356907346e2dde2388f89015ec537a2961247b1\",\"download_url\":\"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/docs/src/assets/main_images/img_2.png\",\"type\":\"file\",\"_links\":{\"self\":\"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/assets/main_images/img_2.png?ref=main\",\"git\":\"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/5356907346e2dde2388f89015ec537a2961247b1\",\"html\":\"https://github.com/eidolon-ai/eidolon/blob/main/docs/src/assets/main_images/img_2.png\"}}]"
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:35:40 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E581:276CC5:103834:17A46C:65D51B2C
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4549'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '451'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/app/chat?ref=main
  response:
    content: '[{"name":"[id]","path":"webui/app/chat/[id]","sha":"1a8803d6b9e6e0f5706d8854918665aac3303b11","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/app/chat/[id]?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/webui/app/chat/[id]","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/1a8803d6b9e6e0f5706d8854918665aac3303b11","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/app/chat/[id]?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/1a8803d6b9e6e0f5706d8854918665aac3303b11","html":"https://github.com/eidolon-ai/eidolon/tree/main/webui/app/chat/[id]"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:35:40 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E571:25886F:1448A3:1DB857:65D51B2C
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4548'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '452'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/swifties?ref=main
  response:
    content: '[{"name":"__init__.py","path":"examples/eidolon_examples/swifties/__init__.py","sha":"e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/swifties/__init__.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/swifties/__init__.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/eidolon_examples/swifties/__init__.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/swifties/__init__.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/swifties/__init__.py"}},{"name":"resources","path":"examples/eidolon_examples/swifties/resources","sha":"9166b89e6a0d2c9f04ad4f45050843819cd139e7","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/swifties/resources?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/examples/eidolon_examples/swifties/resources","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/9166b89e6a0d2c9f04ad4f45050843819cd139e7","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/swifties/resources?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/9166b89e6a0d2c9f04ad4f45050843819cd139e7","html":"https://github.com/eidolon-ai/eidolon/tree/main/examples/eidolon_examples/swifties/resources"}},{"name":"validating_cpu.py","path":"examples/eidolon_examples/swifties/validating_cpu.py","sha":"0f92da16978b3938a7c4d44a41b99ada88742bf8","size":6621,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/swifties/validating_cpu.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/swifties/validating_cpu.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/0f92da16978b3938a7c4d44a41b99ada88742bf8","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/eidolon_examples/swifties/validating_cpu.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/swifties/validating_cpu.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/0f92da16978b3938a7c4d44a41b99ada88742bf8","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/swifties/validating_cpu.py"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:35:40 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E580:250EE1:1626E0:1F9696:65D51B2C
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4547'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '453'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/assets/fonts?ref=main
  response:
    content: '[{"name":"Inter-Bold.woff","path":"webui/assets/fonts/Inter-Bold.woff","sha":"1e80f6235899fc654faf3af6894340926a306d62","size":25760,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/assets/fonts/Inter-Bold.woff?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/webui/assets/fonts/Inter-Bold.woff","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/1e80f6235899fc654faf3af6894340926a306d62","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/webui/assets/fonts/Inter-Bold.woff","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/assets/fonts/Inter-Bold.woff?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/1e80f6235899fc654faf3af6894340926a306d62","html":"https://github.com/eidolon-ai/eidolon/blob/main/webui/assets/fonts/Inter-Bold.woff"}},{"name":"Inter-Regular.woff","path":"webui/assets/fonts/Inter-Regular.woff","sha":"4c6b7118eec99ba089704281a3ba39e067977537","size":24576,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/assets/fonts/Inter-Regular.woff?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/webui/assets/fonts/Inter-Regular.woff","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/4c6b7118eec99ba089704281a3ba39e067977537","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/webui/assets/fonts/Inter-Regular.woff","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/assets/fonts/Inter-Regular.woff?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/4c6b7118eec99ba089704281a3ba39e067977537","html":"https://github.com/eidolon-ai/eidolon/blob/main/webui/assets/fonts/Inter-Regular.woff"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:35:40 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E577:2537C8:175522:20C4F5:65D51B2C
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4546'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '454'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/k8_monitor?ref=main
  response:
    content: '[{"name":"__init__.py","path":"examples/eidolon_examples/k8_monitor/__init__.py","sha":"e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/k8_monitor/__init__.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/k8_monitor/__init__.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/eidolon_examples/k8_monitor/__init__.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/k8_monitor/__init__.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/k8_monitor/__init__.py"}},{"name":"k8_logic_unit.py","path":"examples/eidolon_examples/k8_monitor/k8_logic_unit.py","sha":"8920ec972815be4596a5c6c0a63bf2566d64e3d5","size":6729,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/k8_monitor/k8_logic_unit.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/k8_monitor/k8_logic_unit.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/8920ec972815be4596a5c6c0a63bf2566d64e3d5","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/eidolon_examples/k8_monitor/k8_logic_unit.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/k8_monitor/k8_logic_unit.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/8920ec972815be4596a5c6c0a63bf2566d64e3d5","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/k8_monitor/k8_logic_unit.py"}},{"name":"resources","path":"examples/eidolon_examples/k8_monitor/resources","sha":"d5eb743610196d989f83c057117b470226075580","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/k8_monitor/resources?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/examples/eidolon_examples/k8_monitor/resources","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/d5eb743610196d989f83c057117b470226075580","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/k8_monitor/resources?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/d5eb743610196d989f83c057117b470226075580","html":"https://github.com/eidolon-ai/eidolon/tree/main/examples/eidolon_examples/k8_monitor/resources"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:35:40 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E578:2E1594:2BDE6:39F87:65D51B2C
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4545'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '455'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/content/docs/getting_started?ref=main
  response:
    content: '[{"name":"quickstart.md","path":"docs/src/content/docs/getting_started/quickstart.md","sha":"e63eea5a7b8bdf12b42ccdf98aa9c354e09f8617","size":2212,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/content/docs/getting_started/quickstart.md?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/docs/src/content/docs/getting_started/quickstart.md","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e63eea5a7b8bdf12b42ccdf98aa9c354e09f8617","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/docs/src/content/docs/getting_started/quickstart.md","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/content/docs/getting_started/quickstart.md?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e63eea5a7b8bdf12b42ccdf98aa9c354e09f8617","html":"https://github.com/eidolon-ai/eidolon/blob/main/docs/src/content/docs/getting_started/quickstart.md"}},{"name":"references.md","path":"docs/src/content/docs/getting_started/references.md","sha":"7b4e02d01103a1aa5bb331f47d1b6c7154a151e8","size":11515,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/content/docs/getting_started/references.md?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/docs/src/content/docs/getting_started/references.md","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/7b4e02d01103a1aa5bb331f47d1b6c7154a151e8","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/docs/src/content/docs/getting_started/references.md","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/content/docs/getting_started/references.md?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/7b4e02d01103a1aa5bb331f47d1b6c7154a151e8","html":"https://github.com/eidolon-ai/eidolon/blob/main/docs/src/content/docs/getting_started/references.md"}},{"name":"tutorials.md","path":"docs/src/content/docs/getting_started/tutorials.md","sha":"5bc60510242f1ac0f69feb84cef78b5f827d4606","size":648,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/content/docs/getting_started/tutorials.md?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/docs/src/content/docs/getting_started/tutorials.md","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/5bc60510242f1ac0f69feb84cef78b5f827d4606","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/docs/src/content/docs/getting_started/tutorials.md","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/content/docs/getting_started/tutorials.md?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/5bc60510242f1ac0f69feb84cef78b5f827d4606","html":"https://github.com/eidolon-ai/eidolon/blob/main/docs/src/content/docs/getting_started/tutorials.md"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:35:40 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E575:2552AA:15DEBF:1F4E56:65D51B2C
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4544'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '456'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/test_request_context.py
  response:
    content: "from eidolon_ai_sdk.system.request_context import RequestContext\n\n\ndef
      test_set_and_get():\n    RequestContext.set(\"foo\", \"FOO\")\n    assert RequestContext[\"foo\"]
      == \"FOO\"\n\n\ndef test_set_and_get_propagate():\n    RequestContext.set(\"foo\",
      \"FOO\", propagate=True)\n    assert RequestContext[\"foo\"] == \"FOO\"\n\n\ndef
      test_headers_only_show_propagated():\n    RequestContext.set(\"foo\", \"FOO\")\n
      \   RequestContext.set(\"bar\", \"BAR\", propagate=True)\n    assert RequestContext.headers
      == {\"bar\": \"BAR\", \"X-Eidolon-Context\": \"bar\"}\n"
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Length:
      - '217'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:35:40 GMT
      ETag:
      - W/"110cb5f8729afad5f2c5973d2e9af6ea96d8590cd0e4e52c4542b11e5e46e83c"
      Expires:
      - Tue, 20 Feb 2024 21:40:40 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - HIT
      X-Cache-Hits:
      - '1'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - f95e5454fac8a23c6d0ba20a30d1a44a0cd0d164
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - BBAE:283009:73003:AAF0C:65D519B0
      X-Served-By:
      - cache-bfi-krnt7300044-BFI
      X-Timer:
      - S1708464941.620110,VS0,VE141
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/__init__.py
  response:
    content: ''
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Length:
      - '0'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:35:40 GMT
      ETag:
      - W/"938f66ede415ccb10764da47cd5f3cfc076c07b8791c708cfa8ec54982197c1f"
      Expires:
      - Tue, 20 Feb 2024 21:40:40 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - HIT
      X-Cache-Hits:
      - '1'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - 9dde0e6b19e6c62793837abee9f1f1a0e10806af
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - 94E6:5B8F:73D21:8D052:65D519AE
      X-Served-By:
      - cache-yvr1523-YVR
      X-Timer:
      - S1708464940.459408,VS0,VE339
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/agent/__init__.py
  response:
    content: ''
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Length:
      - '0'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:35:40 GMT
      ETag:
      - W/"938f66ede415ccb10764da47cd5f3cfc076c07b8791c708cfa8ec54982197c1f"
      Expires:
      - Tue, 20 Feb 2024 21:40:40 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - eaf8bced07c707cdabcca981e0d8a0f20c6682c2
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - FA0C:46E8:58902C:6B80AB:65D51B2C
      X-Served-By:
      - cache-yvr1524-YVR
      X-Timer:
      - S1708464940.453275,VS0,VE343
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/code_search/resources?ref=main
  response:
    content: '[{"name":"documentation_producer.yaml","path":"examples/eidolon_examples/code_search/resources/documentation_producer.yaml","sha":"2852f0c3c7838f9fe113390c1e0fd8f106684250","size":1199,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/code_search/resources/documentation_producer.yaml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/code_search/resources/documentation_producer.yaml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/2852f0c3c7838f9fe113390c1e0fd8f106684250","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/eidolon_examples/code_search/resources/documentation_producer.yaml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/code_search/resources/documentation_producer.yaml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/2852f0c3c7838f9fe113390c1e0fd8f106684250","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/code_search/resources/documentation_producer.yaml"}},{"name":"search_code.yaml","path":"examples/eidolon_examples/code_search/resources/search_code.yaml","sha":"bc7ca63fd41db99df5f50eb27e8eb957730e07a8","size":294,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/code_search/resources/search_code.yaml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/code_search/resources/search_code.yaml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/bc7ca63fd41db99df5f50eb27e8eb957730e07a8","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/eidolon_examples/code_search/resources/search_code.yaml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/code_search/resources/search_code.yaml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/bc7ca63fd41db99df5f50eb27e8eb957730e07a8","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/code_search/resources/search_code.yaml"}},{"name":"search_docs.yaml","path":"examples/eidolon_examples/code_search/resources/search_docs.yaml","sha":"d22b48eefe411ae70aeb8f5cbff248cc73f88ddc","size":244,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/code_search/resources/search_docs.yaml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/code_search/resources/search_docs.yaml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/d22b48eefe411ae70aeb8f5cbff248cc73f88ddc","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/eidolon_examples/code_search/resources/search_docs.yaml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/code_search/resources/search_docs.yaml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/d22b48eefe411ae70aeb8f5cbff248cc73f88ddc","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/code_search/resources/search_docs.yaml"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:35:40 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E573:252DF3:14A8FA:1E181A:65D51B2C
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4543'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '457'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/components?ref=main
  response:
    content: '[{"name":"Resizable.tsx","path":"webui/components/Resizable.tsx","sha":"d1f794e6281d21e69250cbc33527427d8cf5047c","size":2614,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/components/Resizable.tsx?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/webui/components/Resizable.tsx","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/d1f794e6281d21e69250cbc33527427d8cf5047c","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/webui/components/Resizable.tsx","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/components/Resizable.tsx?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/d1f794e6281d21e69250cbc33527427d8cf5047c","html":"https://github.com/eidolon-ai/eidolon/blob/main/webui/components/Resizable.tsx"}},{"name":"agent-input","path":"webui/components/agent-input","sha":"766b01dcc66859c51ef5818ec91bcb6506b4daae","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/components/agent-input?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/webui/components/agent-input","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/766b01dcc66859c51ef5818ec91bcb6506b4daae","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/components/agent-input?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/766b01dcc66859c51ef5818ec91bcb6506b4daae","html":"https://github.com/eidolon-ai/eidolon/tree/main/webui/components/agent-input"}},{"name":"button-scroll-to-bottom.tsx","path":"webui/components/button-scroll-to-bottom.tsx","sha":"572cd94a461c3e5d6ef011e489c6ef34bf3867a8","size":799,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/components/button-scroll-to-bottom.tsx?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/webui/components/button-scroll-to-bottom.tsx","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/572cd94a461c3e5d6ef011e489c6ef34bf3867a8","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/webui/components/button-scroll-to-bottom.tsx","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/components/button-scroll-to-bottom.tsx?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/572cd94a461c3e5d6ef011e489c6ef34bf3867a8","html":"https://github.com/eidolon-ai/eidolon/blob/main/webui/components/button-scroll-to-bottom.tsx"}},{"name":"chat-events.css","path":"webui/components/chat-events.css","sha":"0448071cc440465e47cdf69ac395fcf60984e626","size":421,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/components/chat-events.css?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/webui/components/chat-events.css","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/0448071cc440465e47cdf69ac395fcf60984e626","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/webui/components/chat-events.css","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/components/chat-events.css?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/0448071cc440465e47cdf69ac395fcf60984e626","html":"https://github.com/eidolon-ai/eidolon/blob/main/webui/components/chat-events.css"}},{"name":"chat-events.tsx","path":"webui/components/chat-events.tsx","sha":"9f624d4fed2b47007358dc3e747f937b66bd1a09","size":9878,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/components/chat-events.tsx?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/webui/components/chat-events.tsx","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/9f624d4fed2b47007358dc3e747f937b66bd1a09","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/webui/components/chat-events.tsx","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/components/chat-events.tsx?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/9f624d4fed2b47007358dc3e747f937b66bd1a09","html":"https://github.com/eidolon-ai/eidolon/blob/main/webui/components/chat-events.tsx"}},{"name":"chat-scroll-anchor.tsx","path":"webui/components/chat-scroll-anchor.tsx","sha":"65d27344c9b8fab9c304a0a6512c53e895b7a05c","size":727,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/components/chat-scroll-anchor.tsx?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/webui/components/chat-scroll-anchor.tsx","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/65d27344c9b8fab9c304a0a6512c53e895b7a05c","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/webui/components/chat-scroll-anchor.tsx","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/components/chat-scroll-anchor.tsx?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/65d27344c9b8fab9c304a0a6512c53e895b7a05c","html":"https://github.com/eidolon-ai/eidolon/blob/main/webui/components/chat-scroll-anchor.tsx"}},{"name":"chat.css","path":"webui/components/chat.css","sha":"2b660f00cc4cf41de171e7e7aad7aa618735f32b","size":143,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/components/chat.css?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/webui/components/chat.css","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/2b660f00cc4cf41de171e7e7aad7aa618735f32b","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/webui/components/chat.css","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/components/chat.css?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/2b660f00cc4cf41de171e7e7aad7aa618735f32b","html":"https://github.com/eidolon-ai/eidolon/blob/main/webui/components/chat.css"}},{"name":"eidolon-markdown.css","path":"webui/components/eidolon-markdown.css","sha":"0118b51578b1c34135322dd9c7462d5177903369","size":1134,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/components/eidolon-markdown.css?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/webui/components/eidolon-markdown.css","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/0118b51578b1c34135322dd9c7462d5177903369","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/webui/components/eidolon-markdown.css","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/components/eidolon-markdown.css?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/0118b51578b1c34135322dd9c7462d5177903369","html":"https://github.com/eidolon-ai/eidolon/blob/main/webui/components/eidolon-markdown.css"}},{"name":"eidolon-markdown.tsx","path":"webui/components/eidolon-markdown.tsx","sha":"e5df8e26c7e2014911d410300e929e7fb3aa8dad","size":1319,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/components/eidolon-markdown.tsx?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/webui/components/eidolon-markdown.tsx","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e5df8e26c7e2014911d410300e929e7fb3aa8dad","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/webui/components/eidolon-markdown.tsx","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/components/eidolon-markdown.tsx?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e5df8e26c7e2014911d410300e929e7fb3aa8dad","html":"https://github.com/eidolon-ai/eidolon/blob/main/webui/components/eidolon-markdown.tsx"}},{"name":"header.tsx","path":"webui/components/header.tsx","sha":"8b63b6c6ba05dfa93e4354cac538f5c8c5739f79","size":2257,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/components/header.tsx?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/webui/components/header.tsx","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/8b63b6c6ba05dfa93e4354cac538f5c8c5739f79","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/webui/components/header.tsx","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/components/header.tsx?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/8b63b6c6ba05dfa93e4354cac538f5c8c5739f79","html":"https://github.com/eidolon-ai/eidolon/blob/main/webui/components/header.tsx"}},{"name":"session-wrapper.tsx","path":"webui/components/session-wrapper.tsx","sha":"761404d156493297b57b3a6069e0aad29e8447d0","size":288,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/components/session-wrapper.tsx?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/webui/components/session-wrapper.tsx","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/761404d156493297b57b3a6069e0aad29e8447d0","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/webui/components/session-wrapper.tsx","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/components/session-wrapper.tsx?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/761404d156493297b57b3a6069e0aad29e8447d0","html":"https://github.com/eidolon-ai/eidolon/blob/main/webui/components/session-wrapper.tsx"}},{"name":"sidebar-item.tsx","path":"webui/components/sidebar-item.tsx","sha":"8cf1f3410aebe99ee204426e40691bb84efbc87a","size":2085,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/components/sidebar-item.tsx?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/webui/components/sidebar-item.tsx","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/8cf1f3410aebe99ee204426e40691bb84efbc87a","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/webui/components/sidebar-item.tsx","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/components/sidebar-item.tsx?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/8cf1f3410aebe99ee204426e40691bb84efbc87a","html":"https://github.com/eidolon-ai/eidolon/blob/main/webui/components/sidebar-item.tsx"}},{"name":"sidebar-list.tsx","path":"webui/components/sidebar-list.tsx","sha":"a90a9097a4a8b39dc06bacabae246acb53dd010e","size":3385,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/components/sidebar-list.tsx?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/webui/components/sidebar-list.tsx","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/a90a9097a4a8b39dc06bacabae246acb53dd010e","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/webui/components/sidebar-list.tsx","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/components/sidebar-list.tsx?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/a90a9097a4a8b39dc06bacabae246acb53dd010e","html":"https://github.com/eidolon-ai/eidolon/blob/main/webui/components/sidebar-list.tsx"}},{"name":"toaster.tsx","path":"webui/components/toaster.tsx","sha":"d422c1aa87187c2372944a9b3c555f5711272cd8","size":54,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/components/toaster.tsx?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/webui/components/toaster.tsx","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/d422c1aa87187c2372944a9b3c555f5711272cd8","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/webui/components/toaster.tsx","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/components/toaster.tsx?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/d422c1aa87187c2372944a9b3c555f5711272cd8","html":"https://github.com/eidolon-ai/eidolon/blob/main/webui/components/toaster.tsx"}},{"name":"tool-call-element.tsx","path":"webui/components/tool-call-element.tsx","sha":"f20e2a40fac89ba02339ae0bfac733ea9deb2a26","size":2826,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/components/tool-call-element.tsx?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/webui/components/tool-call-element.tsx","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/f20e2a40fac89ba02339ae0bfac733ea9deb2a26","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/webui/components/tool-call-element.tsx","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/components/tool-call-element.tsx?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/f20e2a40fac89ba02339ae0bfac733ea9deb2a26","html":"https://github.com/eidolon-ai/eidolon/blob/main/webui/components/tool-call-element.tsx"}},{"name":"ui","path":"webui/components/ui","sha":"05fd459289b52992286485412d58d53b06fdb790","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/components/ui?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/webui/components/ui","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/05fd459289b52992286485412d58d53b06fdb790","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/components/ui?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/05fd459289b52992286485412d58d53b06fdb790","html":"https://github.com/eidolon-ai/eidolon/tree/main/webui/components/ui"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:35:40 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E576:253F79:165709:1FC6B7:65D51B2B
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4542'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '458'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/agent/agent.py
  response:
    content: "from __future__ import annotations\n\nimport typing\nfrom pydantic import
      BaseModel\nfrom typing import List, TypeVar, Generic\n\nfrom eidolon_ai_sdk.cpu.agent_cpu
      import AgentCPU\nfrom eidolon_ai_sdk.cpu.agents_logic_unit import (\n    AgentsLogicUnit,\n
      \   AgentsLogicUnitSpec,\n)\nfrom eidolon_ai_sdk.system.fn_handler import FnHandler,
      register_handler\nfrom eidolon_ai_sdk.system.reference_model import Specable,
      AnnotatedReference\n\n\nclass AgentSpec(BaseModel):\n    cpu: AnnotatedReference[AgentCPU]\n
      \   agent_refs: List[str] = []\n\n\nclass Agent(Specable[AgentSpec]):\n    cpu:
      AgentCPU\n\n    def __init__(self, **kwargs):\n        super().__init__(**kwargs)\n
      \       self.cpu = self.spec.cpu.instantiate()\n        if self.spec.agent_refs
      and hasattr(self.cpu, \"logic_units\"):\n            self.cpu.logic_units.append(\n
      \               AgentsLogicUnit(\n                    processing_unit_locator=self.cpu,\n
      \                   spec=AgentsLogicUnitSpec(agents=self.spec.agent_refs),\n
      \               )\n            )\n\n\ndef register_program(\n    name: typing.Optional[typing.Callable[[object,
      FnHandler], str]] = None,\n    description: typing.Optional[typing.Callable[[object,
      FnHandler], str]] = None,\n    input_model: typing.Optional[typing.Callable[[object,
      FnHandler], typing.Type[BaseModel]]] = None,\n    output_model: typing.Optional[typing.Callable[[object,
      FnHandler], typing.Any]] = None,\n):\n    return register_handler(\n        name=name,\n
      \       description=description,\n        input_model=input_model,\n        output_model=output_model,\n
      \       allowed_states=[\"initialized\"],\n    )\n\n\ndef register_action(\n
      \   *allowed_states: str,\n    name: str = None,\n    description: typing.Optional[typing.Callable[[object,
      FnHandler], str]] = None,\n    input_model: typing.Optional[typing.Callable[[object,
      FnHandler], BaseModel]] = None,\n    output_model: typing.Optional[typing.Callable[[object,
      FnHandler], typing.Any]] = None,\n):\n    if not allowed_states:\n        raise
      ValueError(\"Must specify at least one valid state\")\n    if \"terminated\"
      in allowed_states:\n        raise ValueError(\"Action cannot transform terminated
      state\")\n\n    return register_handler(\n        name=name,\n        description=description,\n
      \       input_model=input_model,\n        output_model=output_model,\n        allowed_states=allowed_states,\n
      \   )\n\n\nT = TypeVar(\"T\")\n\n\nclass AgentState(BaseModel, Generic[T]):\n
      \   name: str\n    data: T\n"
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Length:
      - '725'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:35:40 GMT
      ETag:
      - W/"cec0bff9bd1f57f7d7a9ca23a80d39548f4d4aae6446f05fd35867f9d97d6b2e"
      Expires:
      - Tue, 20 Feb 2024 21:40:40 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - 680b592e8f3947291c22290e4677513f42c51777
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - A776:1D17:52C619:65D33A:65D51B2C
      X-Served-By:
      - cache-yvr1531-YVR
      X-Timer:
      - S1708464941.588589,VS0,VE344
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/content/docs/reference?ref=main
  response:
    content: '[{"name":"example.md","path":"docs/src/content/docs/reference/example.md","sha":"ac8cfa8bc3a5d344820532dd379c430d88f9f51f","size":420,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/content/docs/reference/example.md?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/docs/src/content/docs/reference/example.md","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/ac8cfa8bc3a5d344820532dd379c430d88f9f51f","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/docs/src/content/docs/reference/example.md","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/content/docs/reference/example.md?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/ac8cfa8bc3a5d344820532dd379c430d88f9f51f","html":"https://github.com/eidolon-ai/eidolon/blob/main/docs/src/content/docs/reference/example.md"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:35:40 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E571:25886F:1448B1:1DB862:65D51B2C
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4541'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '459'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/app/sign-in?ref=main
  response:
    content: '[{"name":"page.tsx","path":"webui/app/sign-in/page.tsx","sha":"c716f7a8c0fe6cbf1018fd43586edb354e412a3f","size":1814,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/app/sign-in/page.tsx?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/webui/app/sign-in/page.tsx","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/c716f7a8c0fe6cbf1018fd43586edb354e412a3f","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/webui/app/sign-in/page.tsx","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/app/sign-in/page.tsx?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/c716f7a8c0fe6cbf1018fd43586edb354e412a3f","html":"https://github.com/eidolon-ai/eidolon/blob/main/webui/app/sign-in/page.tsx"}},{"name":"signon-options.ts","path":"webui/app/sign-in/signon-options.ts","sha":"7c8a222579cccefdba3ca08eaaae0a6bcf0dcfef","size":193,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/app/sign-in/signon-options.ts?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/webui/app/sign-in/signon-options.ts","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/7c8a222579cccefdba3ca08eaaae0a6bcf0dcfef","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/webui/app/sign-in/signon-options.ts","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/app/sign-in/signon-options.ts?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/7c8a222579cccefdba3ca08eaaae0a6bcf0dcfef","html":"https://github.com/eidolon-ai/eidolon/blob/main/webui/app/sign-in/signon-options.ts"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:35:40 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E580:250EE1:1626E4:1F969D:65D51B2C
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4540'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '460'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/test_replay.py
  response:
    content: "import pytest\n\nfrom eidolon_ai_sdk.agent_os import AgentOS\nfrom eidolon_ai_sdk.system.resources.reference_resource
      import ReferenceResource\nfrom eidolon_ai_sdk.system.resources.resources_base
      import Metadata\nfrom eidolon_ai_sdk.util.replay import replayable, ReplayConfig,
      replay, default_serializer\n\n\nclass SideEffect:\n    calls = []\n\n\nasync
      def foo(*args, **kwargs):\n    SideEffect.calls.append(dict(args=args, kwargs=kwargs))\n
      \   return SideEffect.calls[-1]\n\n\n@pytest.fixture(autouse=True)\ndef side_effect_manager():\n
      \   SideEffect.cals = []\n    yield\n    SideEffect.cals = []\n\n\n@pytest.fixture\ndef
      enabled_resume_point_config(machine, request):\n    AgentOS.register_resource(\n
      \       ReferenceResource(\n            apiVersion=\"eidolon/v1\",\n            metadata=Metadata(name=ReplayConfig.__name__),\n
      \           spec=dict(save_loc=f\"resume_points/{request.node.name}\"),\n        )\n
      \   )\n    return AgentOS.get_instance(ReplayConfig)\n\n\ndef test_default_resume_point_config(machine):\n
      \   assert AgentOS.get_instance(ReplayConfig).save_loc is None\n\n\ndef test_resume_point_enabled(enabled_resume_point_config):\n
      \   assert enabled_resume_point_config.save_loc is not None\n\n\nasync def test_resume_point_actually_works(enabled_resume_point_config,
      file_memory_loc):\n    assert await replayable(foo)(1, 2, 3, a=4, b=5) == dict(args=(1,
      2, 3), kwargs=dict(a=4, b=5))\n    assert len(SideEffect.calls) == 1\n\n    stream
      = replay(file_memory_loc / enabled_resume_point_config.save_loc / \"000_foo\")\n
      \   acc = [s async for s in stream]\n    assert acc[0] == dict(args=(1, 2, 3),
      kwargs=dict(a=4, b=5))\n    assert len(SideEffect.calls) == 2\n\n\nbad_obj =
      {\n    \"args\": [],\n    \"kwargs\": {\n        \"messages\": [\n            {\n
      \               \"role\": \"system\",\n                \"content\": \"You are
      an football expert with a focus on Travis Kelce. You love the game and enjoy
      helping new fans learn.\\nYou speak in a friendly, helpful tone and are always
      willing to answer questions.\\n\\nTaylor Swift and Travis Kelce are in a new,
      public relationship. This is public knowledge and you are happy to \\ntalk about
      it.\\n\\nYou want to help Taylor's fans (swifties) learn more about the football.
      Since you are an expert, it is your \\nresponsibility to research questions
      so that you have answers for the users. You will have the ability to search
      \\nthe web and visit websites to find answers to questions.\\n\\nUse these capabilities
      to retrieve up-to-date information as needed.\\nYou may make multiple searches
      to answer questions. When responding, add specific citations to your response.\\n\\nIf
      you get see system messages suggesting feedback, incorporate it as fact.\",\n
      \           },\n            {\"role\": \"user\", \"content\": [{\"type\": \"text\",
      \"text\": \"what is football?\\n\\nBe concise.\"}]},\n        ],\n        \"model\":
      \"gpt-4-1106-preview\",\n        \"temperature\": 0.3,\n        \"tools\": [\n
      \           {\n                \"type\": \"function\",\n                \"function\":
      {\n                    \"name\": \"WebSearch_go_to_url\",\n                    \"description\":
      \"\\n        Retrieve the html document from a given webpage\\n        :param
      url: the url to retrieve.\\n        :return: the html document.\\n        \",\n
      \                   \"parameters\": {\n                        \"properties\":
      {\"url\": {\"title\": \"Url\", \"type\": \"string\"}},\n                        \"required\":
      [\"url\"],\n                        \"title\": \"Go_to_urlInputModel\",\n                        \"type\":
      \"object\",\n                    },\n                },\n            },\n            {\n
      \               \"type\": \"function\",\n                \"function\": {\n                    \"name\":
      \"WebSearch_search\",\n                    \"description\": \"\\n        Search
      google and get the results. Cannot return more than 100 results\\n        :param
      term: the search query\\n        :param num_results: the number of results to
      return (default 10, max 100)\\n        :param lang: the language to search in
      (default en)\\n        :return: A list of SearchResults including url, title,
      and description\\n        \",\n                    \"parameters\": {\n                        \"properties\":
      {\n                            \"term\": {\"title\": \"Term\", \"type\": \"string\"},\n
      \                           \"num_results\": {\"default\": 10, \"title\": \"Num
      Results\", \"type\": \"integer\"},\n                            \"lang\": {\"default\":
      \"en\", \"title\": \"Lang\", \"type\": \"string\"},\n                        },\n
      \                       \"required\": [\"term\"],\n                        \"title\":
      \"SearchInputModel\",\n                        \"type\": \"object\",\n                    },\n
      \               },\n            },\n        ],\n        \"stream\": True,\n
      \   },\n}\n\n\nasync def test_default_yaml_parser():\n    str_repr, _ = default_serializer(bad_obj)\n
      \   assert str_repr.count(\"\\\\n\") < 20\n    assert str_repr.count(\"|\")
      == 4\n"
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Length:
      - '1702'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:35:41 GMT
      ETag:
      - W/"178e72cbe40fdd385ce437d135fc4e9e168d1e79080a73d8b958eb3ccb22c5a3"
      Expires:
      - Tue, 20 Feb 2024 21:40:41 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - HIT
      X-Cache-Hits:
      - '1'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - 64565173e624c8c29a8e91634aa65d5a1257a911
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - FFB2:48D4:5B946D:6E1D90:65D519B0
      X-Served-By:
      - cache-yvr1521-YVR
      X-Timer:
      - S1708464941.658245,VS0,VE354
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/content/docs/architecture?ref=main
  response:
    content: '[{"name":"agent_cpu.md","path":"docs/src/content/docs/architecture/agent_cpu.md","sha":"23cddb104c377b1a005eef66ccd77b2eceb22988","size":15641,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/content/docs/architecture/agent_cpu.md?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/docs/src/content/docs/architecture/agent_cpu.md","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/23cddb104c377b1a005eef66ccd77b2eceb22988","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/docs/src/content/docs/architecture/agent_cpu.md","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/content/docs/architecture/agent_cpu.md?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/23cddb104c377b1a005eef66ccd77b2eceb22988","html":"https://github.com/eidolon-ai/eidolon/blob/main/docs/src/content/docs/architecture/agent_cpu.md"}},{"name":"agent_os.md","path":"docs/src/content/docs/architecture/agent_os.md","sha":"cf84739f146d589237b9b2cdeb75ae41bd440448","size":12099,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/content/docs/architecture/agent_os.md?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/docs/src/content/docs/architecture/agent_os.md","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/cf84739f146d589237b9b2cdeb75ae41bd440448","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/docs/src/content/docs/architecture/agent_os.md","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/content/docs/architecture/agent_os.md?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/cf84739f146d589237b9b2cdeb75ae41bd440448","html":"https://github.com/eidolon-ai/eidolon/blob/main/docs/src/content/docs/architecture/agent_os.md"}},{"name":"agent_program.md","path":"docs/src/content/docs/architecture/agent_program.md","sha":"4e59d07dfd3483b7817417d3cb8aff1bd9a39767","size":12444,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/content/docs/architecture/agent_program.md?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/docs/src/content/docs/architecture/agent_program.md","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/4e59d07dfd3483b7817417d3cb8aff1bd9a39767","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/docs/src/content/docs/architecture/agent_program.md","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/content/docs/architecture/agent_program.md?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/4e59d07dfd3483b7817417d3cb8aff1bd9a39767","html":"https://github.com/eidolon-ai/eidolon/blob/main/docs/src/content/docs/architecture/agent_program.md"}},{"name":"conclusion.md","path":"docs/src/content/docs/architecture/conclusion.md","sha":"d647b8113743e1794a648371c9e1370637c9cb72","size":4263,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/content/docs/architecture/conclusion.md?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/docs/src/content/docs/architecture/conclusion.md","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/d647b8113743e1794a648371c9e1370637c9cb72","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/docs/src/content/docs/architecture/conclusion.md","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/content/docs/architecture/conclusion.md?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/d647b8113743e1794a648371c9e1370637c9cb72","html":"https://github.com/eidolon-ai/eidolon/blob/main/docs/src/content/docs/architecture/conclusion.md"}},{"name":"fundamentals.md","path":"docs/src/content/docs/architecture/fundamentals.md","sha":"737572e2e69a83706eef9029aa772be2e3fffcda","size":4425,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/content/docs/architecture/fundamentals.md?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/docs/src/content/docs/architecture/fundamentals.md","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/737572e2e69a83706eef9029aa772be2e3fffcda","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/docs/src/content/docs/architecture/fundamentals.md","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/content/docs/architecture/fundamentals.md?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/737572e2e69a83706eef9029aa772be2e3fffcda","html":"https://github.com/eidolon-ai/eidolon/blob/main/docs/src/content/docs/architecture/fundamentals.md"}},{"name":"introduction.md","path":"docs/src/content/docs/architecture/introduction.md","sha":"29cb92dbaeecd7cc652a0b43e207f7d84e27040b","size":832,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/content/docs/architecture/introduction.md?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/docs/src/content/docs/architecture/introduction.md","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/29cb92dbaeecd7cc652a0b43e207f7d84e27040b","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/docs/src/content/docs/architecture/introduction.md","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/content/docs/architecture/introduction.md?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/29cb92dbaeecd7cc652a0b43e207f7d84e27040b","html":"https://github.com/eidolon-ai/eidolon/blob/main/docs/src/content/docs/architecture/introduction.md"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:35:41 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E575:2552AA:15DEC2:1F4E5C:65D51B2C
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4539'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '461'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/bin/__init__.py
  response:
    content: ''
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Length:
      - '0'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:35:41 GMT
      ETag:
      - W/"938f66ede415ccb10764da47cd5f3cfc076c07b8791c708cfa8ec54982197c1f"
      Expires:
      - Tue, 20 Feb 2024 21:40:41 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - HIT
      X-Cache-Hits:
      - '1'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - 1e338ce3484a0195a08bea8af3ee7fc352f33d18
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - 5686:256A3D:ADDC9:1017B7:65D519B0
      X-Served-By:
      - cache-bfi-krnt7300044-BFI
      X-Timer:
      - S1708464941.021276,VS0,VE121
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/agent/client.py
  response:
    content: "from __future__ import annotations\n\nimport jsonref\nfrom pydantic
      import BaseModel, Field, Extra\nfrom typing import List, Any, AsyncIterator,
      Optional\nfrom urllib.parse import urljoin\n\nfrom eidolon_ai_sdk.agent_os import
      AgentOS\nfrom eidolon_ai_sdk.io.events import StreamEvent, StartAgentCallEvent,
      AgentStateEvent\nfrom eidolon_ai_sdk.system.agent_contract import DeleteProcessResponse\nfrom
      eidolon_ai_sdk.util.aiohttp import stream_content, get_content, post_content,
      delete\n\n\nclass Machine(BaseModel):\n    machine: str = Field(default_factory=AgentOS.current_machine_url)\n\n
      \   async def get_schema(self) -> dict:\n        url = urljoin(self.machine,
      \"openapi.json\")\n        json_ = await get_content(url)\n        return jsonref.replace_refs(json_)\n\n
      \   def agent(self, agent_name: str) -> Agent:\n        return Agent(machine=self.machine,
      agent=agent_name)\n\n\nclass Agent(BaseModel):\n    machine: str = Field(default_factory=AgentOS.current_machine_url)\n
      \   agent: str\n\n    def stream_program(self, program_name: str, body: Optional[Any]
      = None) -> AgentResponseIterator:\n        return Program(machine=self.machine,
      agent=self.agent, program=program_name).stream_execute(body)\n\n    async def
      program(self, program_name: str, body: Optional[Any] = None) -> ProcessStatus:\n
      \       return await Program(machine=self.machine, agent=self.agent, program=program_name).execute(body)\n\n
      \   def stream_action(self, action_name: str, process_id: str, body: Any) ->
      AgentResponseIterator:\n        url = urljoin(self.machine, f\"agents/{self.agent}/processes/{process_id}/actions/{action_name}\")\n
      \       return AgentResponseIterator(stream_content(url, body))\n\n    async
      def create_process(self) -> ProcessStatus:\n        url = urljoin(self.machine,
      f\"agents/{self.agent}/processes\")\n        json_ = await post_content(url)\n
      \       return ProcessStatus(machine=self.machine, agent=self.agent, **json_)\n\n
      \   def process(self, process_id: str) -> Process:\n        return Process(machine=self.machine,
      agent=self.agent, process_id=process_id)\n\n    @classmethod\n    def get(cls,
      location: str) -> Agent:\n        \"\"\"\n        Convenience method to create
      Agents from dot notation. Ie: machine_loc.agent_name\n        \"\"\"\n        if
      \".\" in location:\n            parts = location.split(\".\")\n            return
      cls(machine=\".\".join(parts[:-1]), agent=parts[-1])\n        else:\n            return
      cls(agent=location)\n\n\nclass Program(BaseModel):\n    machine: str = Field(default_factory=AgentOS.current_machine_url)\n
      \   agent: str\n    program: str\n\n    @classmethod\n    def get(cls, location:
      str):\n        parts = location.split(\".\")\n        kwargs = dict(program=parts[-1],
      agent=parts[-2])\n        if len(parts) > 2:\n            kwargs[\"machine\"]
      = \".\".join(parts[:-2])\n        return cls(**kwargs)\n\n    def stream_execute(self,
      body: Optional[Any] = None) -> AgentResponseIterator:\n        url = urljoin(self.machine,
      f\"agents/{self.agent}/programs/{self.program}\")\n        return AgentResponseIterator(stream_content(url,
      body))\n\n    async def execute(self, body: Optional[Any] = None) -> ProcessStatus:\n
      \       url = urljoin(self.machine, f\"agents/{self.agent}/programs/{self.program}\")\n
      \       json_ = await post_content(url, body)\n        return ProcessStatus(machine=self.machine,
      agent=self.agent, **json_)\n\n\nclass Process(BaseModel):\n    machine: str
      = Field(default_factory=AgentOS.current_machine_url)\n    agent: str\n    process_id:
      str\n\n    async def action(self, action_name: str, body: dict | BaseModel)
      -> ProcessStatus:\n        url = urljoin(self.machine, f\"agents/{self.agent}/processes/{self.process_id}/actions/{action_name}\")\n
      \       json_ = await post_content(url, body)\n        return ProcessStatus(machine=self.machine,
      agent=self.agent, **json_)\n\n    async def status(self) -> ProcessStatus:\n
      \       url = urljoin(self.machine, f\"agents/{self.agent}/processes/{self.process_id}/status\")\n
      \       json_ = await get_content(url)\n        return ProcessStatus(machine=self.machine,
      agent=self.agent, **json_)\n\n    async def delete(self) -> DeleteProcessResponse:\n
      \       deleted = await delete(urljoin(self.machine, f\"agents/{self.agent}/processes/{self.process_id}\"))\n
      \       return DeleteProcessResponse.model_validate(deleted)\n\n    @classmethod\n
      \   def get(cls, stream_response: AgentResponseIterator):\n        if not stream_response.machine
      or not stream_response.agent or not stream_response.process_id:\n            raise
      ValueError(\"stream_response insufficiently iterated\")\n        return cls(machine=stream_response.machine,
      agent=stream_response.agent, process_id=stream_response.process_id)\n\n\nclass
      ProcessStatus(Process, extra=Extra.allow):\n    state: str\n    available_actions:
      List[str]\n\n\nclass AgentResponseIterator(AsyncIterator[StreamEvent]):\n    \"\"\"\n
      \   This class is used to iterate over the responses from an agent call and
      store the state of the conversation after the stream is complete.\n\n    For
      example::\n\n        agent_it = agent.stream_program(\"program_name\", \"some
      data\")\n        async for event in agent_it:\n            # ... do something
      with the event ...\n        process_id = agent_it.process_id\n\n    \"\"\"\n\n
      \   data: AsyncIterator[StreamEvent]\n    machine: str\n    agent: str\n    process_id:
      str\n    state: str\n    available_actions: List[str]\n\n    def __init__(self,
      data: AsyncIterator[StreamEvent]):\n        self.data = data.__aiter__()\n\n
      \   async def __anext__(self):\n        try:\n            event = await self.data.__anext__()\n
      \       except StopAsyncIteration:\n            await self.iteration_complete()\n
      \           raise\n        if event.is_root_and_type(StartAgentCallEvent):\n
      \           self.machine = event.machine\n            self.agent = event.agent_name\n
      \           self.process_id = event.process_id\n        elif event.is_root_and_type(AgentStateEvent):\n
      \           self.state = event.state\n            self.available_actions = event.available_actions\n\n
      \       return event\n\n    def __aiter__(self):\n        return self\n\n    async
      def iteration_complete(self):\n        pass\n"
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Length:
      - '1482'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:35:41 GMT
      ETag:
      - W/"4efd1cb3d5e1e68c7c467e88cee2fa1bc58f8f61dc45bbbdcfac9f50de20ee97"
      Expires:
      - Tue, 20 Feb 2024 21:40:41 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - HIT
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - b3db02f2a70a6d59aba5e14c7b03d955d313e222
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - BE52:257E5B:B7757:10B14F:65D519B1
      X-Served-By:
      - cache-bfi-kbfi7400065-BFI
      X-Timer:
      - S1708464941.982243,VS0,VE167
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/retriever_agent?ref=main
  response:
    content: '[{"name":"__init__.py","path":"sdk/eidolon_ai_sdk/agent/retriever_agent/__init__.py","sha":"e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/retriever_agent/__init__.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/retriever_agent/__init__.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/agent/retriever_agent/__init__.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/retriever_agent/__init__.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/retriever_agent/__init__.py"}},{"name":"document_reranker.py","path":"sdk/eidolon_ai_sdk/agent/retriever_agent/document_reranker.py","sha":"f326f1abdb6fabb895d4792384cc4a4ff8d12a6b","size":2078,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/retriever_agent/document_reranker.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/retriever_agent/document_reranker.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/f326f1abdb6fabb895d4792384cc4a4ff8d12a6b","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/agent/retriever_agent/document_reranker.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/retriever_agent/document_reranker.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/f326f1abdb6fabb895d4792384cc4a4ff8d12a6b","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/retriever_agent/document_reranker.py"}},{"name":"hyde_question_transformer.py","path":"sdk/eidolon_ai_sdk/agent/retriever_agent/hyde_question_transformer.py","sha":"fe127147c2ed272da99f43c15efe6ae71f7c68d6","size":1444,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/retriever_agent/hyde_question_transformer.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/retriever_agent/hyde_question_transformer.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/fe127147c2ed272da99f43c15efe6ae71f7c68d6","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/agent/retriever_agent/hyde_question_transformer.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/retriever_agent/hyde_question_transformer.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/fe127147c2ed272da99f43c15efe6ae71f7c68d6","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/retriever_agent/hyde_question_transformer.py"}},{"name":"multi_question_transformer.py","path":"sdk/eidolon_ai_sdk/agent/retriever_agent/multi_question_transformer.py","sha":"f191ffb89815dcf5d876f3d3348ed32195b67b97","size":2339,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/retriever_agent/multi_question_transformer.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/retriever_agent/multi_question_transformer.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/f191ffb89815dcf5d876f3d3348ed32195b67b97","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/agent/retriever_agent/multi_question_transformer.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/retriever_agent/multi_question_transformer.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/f191ffb89815dcf5d876f3d3348ed32195b67b97","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/retriever_agent/multi_question_transformer.py"}},{"name":"question_transformer.py","path":"sdk/eidolon_ai_sdk/agent/retriever_agent/question_transformer.py","sha":"d35ba2c2b44ef51e28dad8ec749a9affb18c9501","size":559,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/retriever_agent/question_transformer.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/retriever_agent/question_transformer.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/d35ba2c2b44ef51e28dad8ec749a9affb18c9501","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/agent/retriever_agent/question_transformer.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/retriever_agent/question_transformer.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/d35ba2c2b44ef51e28dad8ec749a9affb18c9501","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/retriever_agent/question_transformer.py"}},{"name":"retriever_agent.py","path":"sdk/eidolon_ai_sdk/agent/retriever_agent/retriever_agent.py","sha":"7f98c9b11358920a3305e40bfffb9e106cf04903","size":5827,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/retriever_agent/retriever_agent.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/retriever_agent/retriever_agent.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/7f98c9b11358920a3305e40bfffb9e106cf04903","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/agent/retriever_agent/retriever_agent.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/retriever_agent/retriever_agent.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/7f98c9b11358920a3305e40bfffb9e106cf04903","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/retriever_agent/retriever_agent.py"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:35:41 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E578:2E1594:2BDEC:39F93:65D51B2C
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4538'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '462'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/agent/generic_agent.py
  response:
    content: "from datetime import datetime\nfrom typing import Annotated, Dict, Any,
      Literal, Type, Union\n\nfrom fastapi import Body\nfrom jinja2 import Environment,
      StrictUndefined, meta\nfrom pydantic import BaseModel, field_validator, Field,
      model_validator\nfrom pydantic_core import to_jsonable_python\n\nfrom eidolon_ai_sdk.agent.agent
      import (\n    Agent,\n    register_action,\n    AgentState,\n    AgentSpec,\n
      \   register_program,\n)\nfrom eidolon_ai_sdk.cpu.agent_io import UserTextCPUMessage,
      SystemCPUMessage, ImageCPUMessage\nfrom eidolon_ai_sdk.io.events import AgentStateEvent\nfrom
      eidolon_ai_sdk.system.fn_handler import FnHandler\nfrom eidolon_ai_sdk.system.reference_model
      import Specable\nfrom eidolon_ai_sdk.util.schema_to_model import schema_to_model\n\n\nclass
      GenericAgentSpec(AgentSpec):\n    description: str\n    system_prompt: str\n
      \   user_prompt: str = \"{{ question }}\"\n    input_schema: Dict[str, Any]
      = Field(None, description=\"The json schema for the input model.\")\n    output_schema:
      Union[Literal[\"str\"], Dict[str, Any]] = Field(\n        default=\"str\", description=\"The
      json schema for the output model or the literal 'str' for text output.\"\n    )\n
      \   files: Literal[\"disable\", \"single\", \"single-optional\", \"multiple\"]
      = \"disable\"\n\n    @model_validator(mode=\"after\")\n    def _set_input_schema_default(self):\n
      \       if self.input_schema is None:\n            env = Environment()\n            system_vars
      = meta.find_undeclared_variables(env.parse(self.system_prompt))\n            user_vars
      = meta.find_undeclared_variables(env.parse(self.user_prompt))\n            self.input_schema
      = {v: dict(type=\"string\") for v in system_vars.union(user_vars) if v != \"datetime_iso\"}\n
      \       return self\n\n    @field_validator(\"input_schema\")\n    def validate_prompt_properties(cls,
      input_dict):\n        if not isinstance(input_dict, dict):\n            raise
      ValueError(\"prompt_properties must be a dict\")\n        for k, v in input_dict.items():\n
      \           if isinstance(v, dict):\n                if v.get(\"format\") ==
      \"binary\":\n                    raise ValueError(\n                        \"prompt_properties
      cannot contain format = 'binary' fields. Use the files option instead\"\n                    )\n
      \       return input_dict\n\n\nclass LlmResponse(BaseModel):\n    response:
      str\n\n\ndef make_description(agent: object, _handler: FnHandler) -> str:\n
      \   # noinspection PyUnresolvedReferences\n    spec = agent.spec\n    return
      spec.description\n\n\ndef make_input_schema(agent: object, handler: FnHandler)
      -> Type[BaseModel]:\n    # noinspection PyUnresolvedReferences\n    spec = agent.spec\n
      \   properties: Dict[str, Any] = {}\n    if spec.input_schema:\n        properties[\"body\"]
      = dict(\n            type=\"object\",\n            properties=spec.input_schema,\n
      \       )\n    required = [\"body\"]\n    if spec.files == \"single\" or spec.files
      == \"single-optional\":\n        properties[\"file\"] = dict(type=\"string\",
      format=\"binary\")\n        if spec.files == \"single\":\n            required.append(\"file\")\n
      \   elif spec.files == \"multiple\":\n        properties[\"file\"] = dict(type=\"array\",
      items=dict(type=\"string\", format=\"binary\"))\n        required.append(\"file\")\n
      \   elif \"files\" in properties:\n        del properties[\"file\"]\n    schema
      = {\"type\": \"object\", \"properties\": properties, \"required\": required}\n
      \   return schema_to_model(schema, f\"{handler.name.capitalize()}InputModel\")\n\n\ndef
      make_output_schema(agent: object, handler: FnHandler) -> Type[Any]:\n    # noinspection
      PyUnresolvedReferences\n    spec = agent.spec\n    if spec.output_schema ==
      \"str\":\n        return str\n    elif spec.output_schema:\n        return schema_to_model(spec.output_schema,
      f\"{handler.name.capitalize()}OutputModel\")\n    else:\n        raise ValueError(\"output_schema
      must be specified\")\n\n\nclass GenericAgent(Agent, Specable[GenericAgentSpec]):\n
      \   @register_program(\n        input_model=make_input_schema,\n        output_model=make_output_schema,\n
      \       description=make_description,\n    )\n    async def question(self, process_id,
      **kwargs) -> AgentState[Any]:\n        body = dict(datetime_iso=datetime.now().isoformat())\n
      \       body.update(kwargs.get(\"body\") or {})\n        body = to_jsonable_python(body)\n
      \       files = kwargs.get(\"file\", [])\n        if not isinstance(files, list):\n
      \           files = [files]\n\n        env = Environment(undefined=StrictUndefined)\n
      \       t = await self.cpu.main_thread(process_id)\n        await t.set_boot_messages(\n
      \           prompts=[SystemCPUMessage(prompt=(env.from_string(self.spec.system_prompt).render(**body)))],\n
      \       )\n\n        # pull out any kwargs that are UploadFile and put them
      in a list of UserImageCPUMessage\n        image_messages = []\n        for file
      in files:\n            if file:\n                image_messages.append(ImageCPUMessage(image=file.file,
      prompt=file.filename))\n\n        response = t.stream_request(\n            prompts=[\n
      \               UserTextCPUMessage(prompt=(env.from_string(self.spec.user_prompt).render(**body))),\n
      \               *image_messages,\n            ],\n            output_format=self.spec.output_schema,\n
      \       )\n        async for event in response:\n            yield event\n        yield
      AgentStateEvent(state=\"idle\")\n\n    @register_action(\"idle\", \"http_error\")\n
      \   async def respond(self, process_id, statement: Annotated[str, Body(embed=True)])
      -> AgentState[Any]:\n        t = await self.cpu.main_thread(process_id)\n        response
      = await t.run_request([UserTextCPUMessage(prompt=statement)], self.spec.output_schema)\n
      \       return AgentState(name=\"idle\", data=response)\n"
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Length:
      - '1798'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:35:41 GMT
      ETag:
      - W/"56f41189196a05b5d2ab5a76ee79ec18aee8c60014af50d49791990071f8b1d9"
      Expires:
      - Tue, 20 Feb 2024 21:40:41 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - HIT
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - a9a79576023fdea309cdcc768ecc5af66262a923
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - B1FA:25522C:AA6F5:FE118:65D519B0
      X-Served-By:
      - cache-bfi-kbfi7400098-BFI
      X-Timer:
      - S1708464941.043361,VS0,VE119
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/tot_agent?ref=main
  response:
    content: '[{"name":"__init__.py","path":"sdk/eidolon_ai_sdk/agent/tot_agent/__init__.py","sha":"e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/tot_agent/__init__.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/tot_agent/__init__.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/agent/tot_agent/__init__.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/tot_agent/__init__.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/tot_agent/__init__.py"}},{"name":"checker.py","path":"sdk/eidolon_ai_sdk/agent/tot_agent/checker.py","sha":"c61b975d8acd83cf4a37f4402d2a0890764e2c81","size":1825,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/tot_agent/checker.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/tot_agent/checker.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/c61b975d8acd83cf4a37f4402d2a0890764e2c81","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/agent/tot_agent/checker.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/tot_agent/checker.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/c61b975d8acd83cf4a37f4402d2a0890764e2c81","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/tot_agent/checker.py"}},{"name":"controller.py","path":"sdk/eidolon_ai_sdk/agent/tot_agent/controller.py","sha":"0515c626564a2d2fd00cde4af08905633a143fb1","size":2468,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/tot_agent/controller.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/tot_agent/controller.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/0515c626564a2d2fd00cde4af08905633a143fb1","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/agent/tot_agent/controller.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/tot_agent/controller.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/0515c626564a2d2fd00cde4af08905633a143fb1","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/tot_agent/controller.py"}},{"name":"memory.py","path":"sdk/eidolon_ai_sdk/agent/tot_agent/memory.py","sha":"fb354039bb12f8a1d8aeabcbff41ffebb874e875","size":1503,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/tot_agent/memory.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/tot_agent/memory.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/fb354039bb12f8a1d8aeabcbff41ffebb874e875","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/agent/tot_agent/memory.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/tot_agent/memory.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/fb354039bb12f8a1d8aeabcbff41ffebb874e875","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/tot_agent/memory.py"}},{"name":"prompts.py","path":"sdk/eidolon_ai_sdk/agent/tot_agent/prompts.py","sha":"700f3240dc5ecbdc5f2a18d2340bc6a1802bb176","size":1423,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/tot_agent/prompts.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/tot_agent/prompts.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/700f3240dc5ecbdc5f2a18d2340bc6a1802bb176","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/agent/tot_agent/prompts.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/tot_agent/prompts.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/700f3240dc5ecbdc5f2a18d2340bc6a1802bb176","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/tot_agent/prompts.py"}},{"name":"thought.py","path":"sdk/eidolon_ai_sdk/agent/tot_agent/thought.py","sha":"7c0596638886ac003087cec4f68b3d182b4abe7c","size":364,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/tot_agent/thought.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/tot_agent/thought.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/7c0596638886ac003087cec4f68b3d182b4abe7c","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/agent/tot_agent/thought.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/tot_agent/thought.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/7c0596638886ac003087cec4f68b3d182b4abe7c","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/tot_agent/thought.py"}},{"name":"thought_generators.py","path":"sdk/eidolon_ai_sdk/agent/tot_agent/thought_generators.py","sha":"fb98b4044f17c3b29a9195a74cfb20f0957283c5","size":4951,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/tot_agent/thought_generators.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/tot_agent/thought_generators.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/fb98b4044f17c3b29a9195a74cfb20f0957283c5","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/agent/tot_agent/thought_generators.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/tot_agent/thought_generators.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/fb98b4044f17c3b29a9195a74cfb20f0957283c5","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/tot_agent/thought_generators.py"}},{"name":"tot_agent.py","path":"sdk/eidolon_ai_sdk/agent/tot_agent/tot_agent.py","sha":"0ffdb4e861238f019e6616bfe8584e33252386c7","size":7611,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/tot_agent/tot_agent.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/tot_agent/tot_agent.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/0ffdb4e861238f019e6616bfe8584e33252386c7","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/agent/tot_agent/tot_agent.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/tot_agent/tot_agent.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/0ffdb4e861238f019e6616bfe8584e33252386c7","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/tot_agent/tot_agent.py"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:35:41 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E573:252DF3:14A90A:1E1829:65D51B2C
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4537'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '463'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/test_stream_collector.py
  response:
    content: "import pytest\n\nfrom eidolon_ai_sdk.io.events import (\n    StringOutputEvent,\n
      \   ErrorEvent,\n    StartStreamContextEvent,\n    EndStreamContextEvent,\n
      \   SuccessEvent,\n)\nfrom eidolon_ai_sdk.util.stream_collector import StreamCollector,
      ManagedContextError, stream_manager\n\n\nasync def raising_stream(error=None):\n
      \   yield StringOutputEvent(content=\"test\")\n    if error:\n        raise
      error\n\n\nasync def test_terminates_without_raising():\n    collector = StreamCollector(stream=raising_stream())\n
      \   assert [event async for event in collector] == [StringOutputEvent(content=\"test\")]\n
      \   assert collector.get_content() == \"test\"\n\n\nasync def test_adds_context():\n
      \   collector = stream_manager(raising_stream(), StartStreamContextEvent(context_id=\"foo\"))\n
      \   events = [event async for event in collector]\n    assert events == [\n
      \       StartStreamContextEvent(context_id=\"foo\"),\n        StringOutputEvent(stream_context=\"foo\",
      content=\"test\"),\n        SuccessEvent(stream_context=\"foo\"),\n        EndStreamContextEvent(context_id=\"foo\"),\n
      \   ]\n    assert collector.get_content() == \"test\"\n\n\nasync def test_stream_manager_records_errors_and_reraises():\n
      \   events = []\n    error = RuntimeError(\"test error\")\n    collector = stream_manager(raising_stream(error),
      StartStreamContextEvent(context_id=\"foo\"))\n    with pytest.raises(ManagedContextError)
      as e:\n        async for event in collector:\n            events.append(event)\n
      \   assert events == [\n        StartStreamContextEvent(context_id=\"foo\"),\n
      \       StringOutputEvent(stream_context=\"foo\", content=\"test\"),\n        ErrorEvent(stream_context=\"foo\",
      reason=error),\n        EndStreamContextEvent(context_id=\"foo\"),\n    ]\n
      \   assert e.value.args[0] == \"Error in stream context foo\"\n    assert collector.get_content()
      == [\"test\", \"RuntimeError: test error\"]\n"
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Length:
      - '514'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:35:41 GMT
      ETag:
      - W/"b7aef644b662f4ea8a1246b68c7b1f6c909581d74b5687b1afc7f9709159ecd9"
      Expires:
      - Tue, 20 Feb 2024 21:40:41 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - HIT
      X-Cache-Hits:
      - '1'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - 2cf6fba0d13ad2f61642c11149ca19843140f29e
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - 55DC:1394:57C281:6A66FE:65D519B0
      X-Served-By:
      - cache-yvr1521-YVR
      X-Timer:
      - S1708464941.037517,VS0,VE146
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/getting_started/1_agent_communication?ref=main
  response:
    content: '[{"name":"hello_world_agent.yaml","path":"examples/eidolon_examples/getting_started/1_agent_communication/hello_world_agent.yaml","sha":"f8e912dc71de047783b678b122f0d8d7c314dffd","size":400,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/getting_started/1_agent_communication/hello_world_agent.yaml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/getting_started/1_agent_communication/hello_world_agent.yaml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/f8e912dc71de047783b678b122f0d8d7c314dffd","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/eidolon_examples/getting_started/1_agent_communication/hello_world_agent.yaml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/getting_started/1_agent_communication/hello_world_agent.yaml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/f8e912dc71de047783b678b122f0d8d7c314dffd","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/getting_started/1_agent_communication/hello_world_agent.yaml"}},{"name":"qa_agent.yaml","path":"examples/eidolon_examples/getting_started/1_agent_communication/qa_agent.yaml","sha":"3b052cf277d038553391ec1166e90341bd07cb06","size":708,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/getting_started/1_agent_communication/qa_agent.yaml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/getting_started/1_agent_communication/qa_agent.yaml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/3b052cf277d038553391ec1166e90341bd07cb06","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/eidolon_examples/getting_started/1_agent_communication/qa_agent.yaml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/getting_started/1_agent_communication/qa_agent.yaml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/3b052cf277d038553391ec1166e90341bd07cb06","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/getting_started/1_agent_communication/qa_agent.yaml"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:35:41 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E580:250EE1:1626E8:1F96A0:65D51B2D
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4536'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '464'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/quickstart?ref=main
  response:
    content: '[{"name":"hello_world_agent.yaml","path":"examples/eidolon_examples/quickstart/hello_world_agent.yaml","sha":"4db5266e90ef70484619af811f1b8063909ded42","size":401,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/quickstart/hello_world_agent.yaml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/quickstart/hello_world_agent.yaml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/4db5266e90ef70484619af811f1b8063909ded42","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/eidolon_examples/quickstart/hello_world_agent.yaml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/quickstart/hello_world_agent.yaml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/4db5266e90ef70484619af811f1b8063909ded42","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/quickstart/hello_world_agent.yaml"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:35:41 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E577:2537C8:17552A:20C4FE:65D51B2C
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4535'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '465'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/group_conversation/iasip?ref=main
  response:
    content: '[{"name":"Charlie.yaml","path":"examples/eidolon_examples/group_conversation/iasip/Charlie.yaml","sha":"b5e7c0a0413ea73226974cc09d8b0d5b55af802d","size":429,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/group_conversation/iasip/Charlie.yaml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/group_conversation/iasip/Charlie.yaml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/b5e7c0a0413ea73226974cc09d8b0d5b55af802d","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/eidolon_examples/group_conversation/iasip/Charlie.yaml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/group_conversation/iasip/Charlie.yaml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/b5e7c0a0413ea73226974cc09d8b0d5b55af802d","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/group_conversation/iasip/Charlie.yaml"}},{"name":"Coordinator.yaml","path":"examples/eidolon_examples/group_conversation/iasip/Coordinator.yaml","sha":"708c5efbde07cd2297261865a2e47c17e84fc2cf","size":244,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/group_conversation/iasip/Coordinator.yaml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/group_conversation/iasip/Coordinator.yaml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/708c5efbde07cd2297261865a2e47c17e84fc2cf","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/eidolon_examples/group_conversation/iasip/Coordinator.yaml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/group_conversation/iasip/Coordinator.yaml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/708c5efbde07cd2297261865a2e47c17e84fc2cf","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/group_conversation/iasip/Coordinator.yaml"}},{"name":"Dee.yaml","path":"examples/eidolon_examples/group_conversation/iasip/Dee.yaml","sha":"e90fcccd143fe700914b454451418eb69bf8424b","size":422,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/group_conversation/iasip/Dee.yaml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/group_conversation/iasip/Dee.yaml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e90fcccd143fe700914b454451418eb69bf8424b","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/eidolon_examples/group_conversation/iasip/Dee.yaml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/group_conversation/iasip/Dee.yaml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e90fcccd143fe700914b454451418eb69bf8424b","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/group_conversation/iasip/Dee.yaml"}},{"name":"Dennis.yaml","path":"examples/eidolon_examples/group_conversation/iasip/Dennis.yaml","sha":"3b8ff5494c510e390a074b889047623c397f6948","size":375,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/group_conversation/iasip/Dennis.yaml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/group_conversation/iasip/Dennis.yaml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/3b8ff5494c510e390a074b889047623c397f6948","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/eidolon_examples/group_conversation/iasip/Dennis.yaml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/group_conversation/iasip/Dennis.yaml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/3b8ff5494c510e390a074b889047623c397f6948","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/group_conversation/iasip/Dennis.yaml"}},{"name":"Frank.yaml","path":"examples/eidolon_examples/group_conversation/iasip/Frank.yaml","sha":"66a03d3acc3bd12c6e0b11317d22119a28c4873f","size":422,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/group_conversation/iasip/Frank.yaml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/group_conversation/iasip/Frank.yaml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/66a03d3acc3bd12c6e0b11317d22119a28c4873f","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/eidolon_examples/group_conversation/iasip/Frank.yaml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/group_conversation/iasip/Frank.yaml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/66a03d3acc3bd12c6e0b11317d22119a28c4873f","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/group_conversation/iasip/Frank.yaml"}},{"name":"Mac.yaml","path":"examples/eidolon_examples/group_conversation/iasip/Mac.yaml","sha":"444325a730dff4a27edda79981f5c306b5081733","size":431,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/group_conversation/iasip/Mac.yaml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/group_conversation/iasip/Mac.yaml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/444325a730dff4a27edda79981f5c306b5081733","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/eidolon_examples/group_conversation/iasip/Mac.yaml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/group_conversation/iasip/Mac.yaml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/444325a730dff4a27edda79981f5c306b5081733","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/group_conversation/iasip/Mac.yaml"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:35:41 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E571:25886F:1448B7:1DB86A:65D51B2C
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4534'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '466'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/getting_started/3_pluggable_resources?ref=main
  response:
    content: '[{"name":"frugal_cpu.yaml","path":"examples/eidolon_examples/getting_started/3_pluggable_resources/frugal_cpu.yaml","sha":"eca8fab036d87c6573b43626d20f6e33bad83b59","size":366,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/getting_started/3_pluggable_resources/frugal_cpu.yaml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/getting_started/3_pluggable_resources/frugal_cpu.yaml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/eca8fab036d87c6573b43626d20f6e33bad83b59","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/eidolon_examples/getting_started/3_pluggable_resources/frugal_cpu.yaml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/getting_started/3_pluggable_resources/frugal_cpu.yaml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/eca8fab036d87c6573b43626d20f6e33bad83b59","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/getting_started/3_pluggable_resources/frugal_cpu.yaml"}},{"name":"qa_agent.yaml","path":"examples/eidolon_examples/getting_started/3_pluggable_resources/qa_agent.yaml","sha":"92233a81b660d4d51663b45f68156c030f6a0788","size":198,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/getting_started/3_pluggable_resources/qa_agent.yaml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/getting_started/3_pluggable_resources/qa_agent.yaml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/92233a81b660d4d51663b45f68156c030f6a0788","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/eidolon_examples/getting_started/3_pluggable_resources/qa_agent.yaml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/getting_started/3_pluggable_resources/qa_agent.yaml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/92233a81b660d4d51663b45f68156c030f6a0788","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/getting_started/3_pluggable_resources/qa_agent.yaml"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:35:41 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E581:276CC5:10383A:17A473:65D51B2C
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4533'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '467'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/hello_world/resources?ref=main
  response:
    content: '[{"name":"ExampleAutoAgent.yaml","path":"examples/eidolon_examples/hello_world/resources/ExampleAutoAgent.yaml","sha":"9b7b9b3efbb2d238f8f4ca6f4d383b7db26f3b99","size":135,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/hello_world/resources/ExampleAutoAgent.yaml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/hello_world/resources/ExampleAutoAgent.yaml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/9b7b9b3efbb2d238f8f4ca6f4d383b7db26f3b99","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/eidolon_examples/hello_world/resources/ExampleAutoAgent.yaml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/hello_world/resources/ExampleAutoAgent.yaml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/9b7b9b3efbb2d238f8f4ca6f4d383b7db26f3b99","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/hello_world/resources/ExampleAutoAgent.yaml"}},{"name":"ExampleGenericAgent.yaml","path":"examples/eidolon_examples/hello_world/resources/ExampleGenericAgent.yaml","sha":"d22aa6ba05bca826271ee742513895e9b2081a4c","size":488,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/hello_world/resources/ExampleGenericAgent.yaml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/hello_world/resources/ExampleGenericAgent.yaml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/d22aa6ba05bca826271ee742513895e9b2081a4c","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/eidolon_examples/hello_world/resources/ExampleGenericAgent.yaml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/hello_world/resources/ExampleGenericAgent.yaml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/d22aa6ba05bca826271ee742513895e9b2081a4c","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/hello_world/resources/ExampleGenericAgent.yaml"}},{"name":"HelloWorldAgent.yaml","path":"examples/eidolon_examples/hello_world/resources/HelloWorldAgent.yaml","sha":"550bbb5621cb7043d619359a7c20fc15764f535a","size":124,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/hello_world/resources/HelloWorldAgent.yaml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/hello_world/resources/HelloWorldAgent.yaml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/550bbb5621cb7043d619359a7c20fc15764f535a","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/eidolon_examples/hello_world/resources/HelloWorldAgent.yaml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/hello_world/resources/HelloWorldAgent.yaml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/550bbb5621cb7043d619359a7c20fc15764f535a","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/hello_world/resources/HelloWorldAgent.yaml"}},{"name":"ImageAgent.yaml","path":"examples/eidolon_examples/hello_world/resources/ImageAgent.yaml","sha":"885804ef7df33ca2c1b2249fe6ded9b0749e51ba","size":865,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/hello_world/resources/ImageAgent.yaml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/hello_world/resources/ImageAgent.yaml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/885804ef7df33ca2c1b2249fe6ded9b0749e51ba","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/eidolon_examples/hello_world/resources/ImageAgent.yaml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/hello_world/resources/ImageAgent.yaml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/885804ef7df33ca2c1b2249fe6ded9b0749e51ba","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/hello_world/resources/ImageAgent.yaml"}},{"name":"OpenAiAssistantsAgent.yaml","path":"examples/eidolon_examples/hello_world/resources/OpenAiAssistantsAgent.yaml","sha":"2781fac862138a6c804dff7b30c466ed3dda447d","size":644,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/hello_world/resources/OpenAiAssistantsAgent.yaml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/hello_world/resources/OpenAiAssistantsAgent.yaml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/2781fac862138a6c804dff7b30c466ed3dda447d","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/eidolon_examples/hello_world/resources/OpenAiAssistantsAgent.yaml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/hello_world/resources/OpenAiAssistantsAgent.yaml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/2781fac862138a6c804dff7b30c466ed3dda447d","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/hello_world/resources/OpenAiAssistantsAgent.yaml"}},{"name":"SpeechAgent.yaml","path":"examples/eidolon_examples/hello_world/resources/SpeechAgent.yaml","sha":"0d4492bfbe9acee065fa56a62db390d79ccdac4f","size":528,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/hello_world/resources/SpeechAgent.yaml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/hello_world/resources/SpeechAgent.yaml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/0d4492bfbe9acee065fa56a62db390d79ccdac4f","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/eidolon_examples/hello_world/resources/SpeechAgent.yaml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/hello_world/resources/SpeechAgent.yaml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/0d4492bfbe9acee065fa56a62db390d79ccdac4f","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/hello_world/resources/SpeechAgent.yaml"}},{"name":"StateMachineAgent.yaml","path":"examples/eidolon_examples/hello_world/resources/StateMachineAgent.yaml","sha":"8d2eba47b31014d50bd682ac7f8ba93de3d65257","size":130,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/hello_world/resources/StateMachineAgent.yaml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/hello_world/resources/StateMachineAgent.yaml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/8d2eba47b31014d50bd682ac7f8ba93de3d65257","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/eidolon_examples/hello_world/resources/StateMachineAgent.yaml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/hello_world/resources/StateMachineAgent.yaml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/8d2eba47b31014d50bd682ac7f8ba93de3d65257","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/hello_world/resources/StateMachineAgent.yaml"}},{"name":"StreamTestAgent.yaml","path":"examples/eidolon_examples/hello_world/resources/StreamTestAgent.yaml","sha":"808f033448bf563c61c12961e341554a061bfa35","size":133,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/hello_world/resources/StreamTestAgent.yaml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/hello_world/resources/StreamTestAgent.yaml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/808f033448bf563c61c12961e341554a061bfa35","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/eidolon_examples/hello_world/resources/StreamTestAgent.yaml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/hello_world/resources/StreamTestAgent.yaml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/808f033448bf563c61c12961e341554a061bfa35","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/hello_world/resources/StreamTestAgent.yaml"}},{"name":"TreeOfThoughtsAgent.yaml","path":"examples/eidolon_examples/hello_world/resources/TreeOfThoughtsAgent.yaml","sha":"1f123c77a0374c2574601834fd99634846a65b7d","size":339,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/hello_world/resources/TreeOfThoughtsAgent.yaml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/hello_world/resources/TreeOfThoughtsAgent.yaml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/1f123c77a0374c2574601834fd99634846a65b7d","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/eidolon_examples/hello_world/resources/TreeOfThoughtsAgent.yaml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/hello_world/resources/TreeOfThoughtsAgent.yaml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/1f123c77a0374c2574601834fd99634846a65b7d","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/hello_world/resources/TreeOfThoughtsAgent.yaml"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:35:41 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E57F:2542CD:1445B4:1DB544:65D51B2C
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4532'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '468'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/getting_started/4_defining_a_machine?ref=main
  response:
    content: '[{"name":"frugal_cpu.yaml","path":"examples/eidolon_examples/getting_started/4_defining_a_machine/frugal_cpu.yaml","sha":"3acfdd9e082f2fda845d5b17058ea95f5bae0cc0","size":362,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/getting_started/4_defining_a_machine/frugal_cpu.yaml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/getting_started/4_defining_a_machine/frugal_cpu.yaml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/3acfdd9e082f2fda845d5b17058ea95f5bae0cc0","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/eidolon_examples/getting_started/4_defining_a_machine/frugal_cpu.yaml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/getting_started/4_defining_a_machine/frugal_cpu.yaml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/3acfdd9e082f2fda845d5b17058ea95f5bae0cc0","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/getting_started/4_defining_a_machine/frugal_cpu.yaml"}},{"name":"machine.yaml","path":"examples/eidolon_examples/getting_started/4_defining_a_machine/machine.yaml","sha":"ba1a7f74e6a1b1b00de94abe5dbdfb103754a9c4","size":183,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/getting_started/4_defining_a_machine/machine.yaml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/getting_started/4_defining_a_machine/machine.yaml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/ba1a7f74e6a1b1b00de94abe5dbdfb103754a9c4","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/eidolon_examples/getting_started/4_defining_a_machine/machine.yaml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/getting_started/4_defining_a_machine/machine.yaml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/ba1a7f74e6a1b1b00de94abe5dbdfb103754a9c4","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/getting_started/4_defining_a_machine/machine.yaml"}},{"name":"qa_agent.yaml","path":"examples/eidolon_examples/getting_started/4_defining_a_machine/qa_agent.yaml","sha":"6084fb820c63f34e11b6da784154ccbff94a9e2c","size":196,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/getting_started/4_defining_a_machine/qa_agent.yaml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/getting_started/4_defining_a_machine/qa_agent.yaml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/6084fb820c63f34e11b6da784154ccbff94a9e2c","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/eidolon_examples/getting_started/4_defining_a_machine/qa_agent.yaml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/getting_started/4_defining_a_machine/qa_agent.yaml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/6084fb820c63f34e11b6da784154ccbff94a9e2c","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/getting_started/4_defining_a_machine/qa_agent.yaml"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:35:41 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E57E:2556C1:151AD1:1E8A84:65D51B2C
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4531'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '469'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/bin/replay.py
  response:
    content: "import asyncio\nimport os\nimport time\nfrom asyncio import sleep\nfrom
      functools import wraps\nfrom glob import glob\nfrom pathlib import Path\nfrom
      typing import Annotated\n\nimport typer\nfrom typer.main import except_hook,
      _typer_developer_exception_attr_name\nfrom typer.models import DeveloperExceptionConfig\nfrom
      eidolon_ai_sdk.util.replay import replay\n\napp = typer.Typer()\n\n\ndef coro(f):\n
      \   @wraps(f)\n    def wrapper(*args, **kwargs):\n        try:\n            return
      asyncio.run(f(*args, **kwargs))\n        except asyncio.exceptions.CancelledError:\n
      \           typer.echo(\"\\n\" + typer.style(\"Aborted.\", fg=typer.colors.RED))\n\n
      \   return wrapper\n\n\n@app.command()\n@coro\nasync def main(\n    replay_location:
      Path,\n    color: Annotated[str, typer.Option(help=\"The color for the displayed
      text\")] = typer.colors.BRIGHT_GREEN,\n    watch: Annotated[bool, typer.Option(help=\"Watch
      the replay location for new files\")] = False,\n):\n    if not watch:\n        await
      _do_replay(replay_location, color)\n    else:\n        care_time = time.time()\n
      \       while True:\n            replay_task = asyncio.create_task(_do_replay(replay_location,
      color))\n            wait_for_update = asyncio.create_task(_wait_for_modification(care_time,
      replay_location))\n\n            done, pending = await asyncio.wait([replay_task,
      wait_for_update], return_when=asyncio.FIRST_COMPLETED)\n            # Replay
      task pending means we have a new file, so we should stop our outgoing task\n
      \           if replay_task in pending:\n                replay_task.cancel(msg=\"Replay
      instructions updated\")\n\n            # still await the task since we want
      to propagate or handle errors\n            try:\n                await replay_task\n
      \               typer.echo(typer.style(\"Waiting for updates...\", dim=True))\n
      \           except asyncio.exceptions.CancelledError:\n                typer.echo(\"\\n\"
      + typer.style(\"Aborted: file modified\", fg=typer.colors.RED))\n            except
      Exception as exc:\n                # Don't let exceptions break us out of the
      loop. Instead, let typer format and print them nicely\n                setattr(\n
      \                   exc,\n                    _typer_developer_exception_attr_name,\n
      \                   DeveloperExceptionConfig(\n                        pretty_exceptions_enable=app.pretty_exceptions_enable,\n
      \                       pretty_exceptions_show_locals=app.pretty_exceptions_show_locals,\n
      \                       pretty_exceptions_short=app.pretty_exceptions_short,\n
      \                   ),\n                )\n                except_hook(type(exc),
      exc, exc.__traceback__)\n                typer.echo(typer.style(\"Waiting for
      updates...\", dim=True))\n            care_time = await wait_for_update\n\n\nasync
      def _do_replay(replay_location, color):\n    typer.echo(typer.style(f\"Replaying
      from {replay_location}\", dim=True))\n    try:\n        ended_with_newline =
      True\n        async for chunk in replay(replay_location):\n            ended_with_newline
      = chunk.endswith(\"\\n\")\n            typer.echo(typer.style(chunk, fg=color),
      nl=False)\n        if not ended_with_newline:\n            typer.echo(\"\\n\",
      nl=False)\n    except FileNotFoundError as fnf:\n        typer.echo(typer.style(f\"{fnf}\",
      fg=typer.colors.RED))\n        raise typer.Exit(1)\n\n\nasync def _wait_for_modification(care_time,
      path, delay=0.2):\n    while True:\n        modification_times = [os.path.getmtime(f)
      for f in (glob(str(path / \"**\")))]\n        if len(modification_times) > 1:\n
      \           latest_file = max(modification_times)\n        elif len(modification_times)
      == 1:\n            latest_file = modification_times[0]\n        else:\n            latest_file
      = care_time\n        if care_time < latest_file:\n            return latest_file\n
      \       await sleep(delay)\n\n\nif __name__ == \"__main__\":\n    app()\n"
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Length:
      - '1274'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:35:41 GMT
      ETag:
      - W/"1cc4edcf2ca47d9aa8eee647cb2dd4812dac70142d3390bf76c1c49160e85529"
      Expires:
      - Tue, 20 Feb 2024 21:40:41 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - 45b408cc122ab1968046a4fb424f3fe72802dc8e
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - 76AC:25375E:C48B7:118788:65D51B2C
      X-Served-By:
      - cache-bfi-krnt7300044-BFI
      X-Timer:
      - S1708464941.206838,VS0,VE124
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/doc_manager?ref=main
  response:
    content: '[{"name":"__init__.py","path":"sdk/eidolon_ai_sdk/agent/doc_manager/__init__.py","sha":"e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/doc_manager/__init__.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/doc_manager/__init__.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/agent/doc_manager/__init__.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/doc_manager/__init__.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/doc_manager/__init__.py"}},{"name":"document_manager.py","path":"sdk/eidolon_ai_sdk/agent/doc_manager/document_manager.py","sha":"aedbb59e1340642445debaffd9ad481032f6622f","size":4243,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/doc_manager/document_manager.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/doc_manager/document_manager.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/aedbb59e1340642445debaffd9ad481032f6622f","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/agent/doc_manager/document_manager.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/doc_manager/document_manager.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/aedbb59e1340642445debaffd9ad481032f6622f","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/doc_manager/document_manager.py"}},{"name":"loaders","path":"sdk/eidolon_ai_sdk/agent/doc_manager/loaders","sha":"6803f11ceeedd77b3b83d98a872b668823d0d810","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/doc_manager/loaders?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/sdk/eidolon_ai_sdk/agent/doc_manager/loaders","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/6803f11ceeedd77b3b83d98a872b668823d0d810","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/doc_manager/loaders?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/6803f11ceeedd77b3b83d98a872b668823d0d810","html":"https://github.com/eidolon-ai/eidolon/tree/main/sdk/eidolon_ai_sdk/agent/doc_manager/loaders"}},{"name":"parsers","path":"sdk/eidolon_ai_sdk/agent/doc_manager/parsers","sha":"747e83ab217fab0ea5b5788db80775c5ead7a606","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/doc_manager/parsers?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/sdk/eidolon_ai_sdk/agent/doc_manager/parsers","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/747e83ab217fab0ea5b5788db80775c5ead7a606","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/doc_manager/parsers?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/747e83ab217fab0ea5b5788db80775c5ead7a606","html":"https://github.com/eidolon-ai/eidolon/tree/main/sdk/eidolon_ai_sdk/agent/doc_manager/parsers"}},{"name":"transformer","path":"sdk/eidolon_ai_sdk/agent/doc_manager/transformer","sha":"68bc1ba77b2cdcf00985909b0c8a93fdb0c68b0b","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/doc_manager/transformer?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/sdk/eidolon_ai_sdk/agent/doc_manager/transformer","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/68bc1ba77b2cdcf00985909b0c8a93fdb0c68b0b","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/doc_manager/transformer?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/68bc1ba77b2cdcf00985909b0c8a93fdb0c68b0b","html":"https://github.com/eidolon-ai/eidolon/tree/main/sdk/eidolon_ai_sdk/agent/doc_manager/transformer"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:35:41 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E575:2552AA:15DEC8:1F4E61:65D51B2D
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4530'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '470'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/app/chat/[id]?ref=main
  response:
    content: '[{"name":"page.tsx","path":"webui/app/chat/[id]/page.tsx","sha":"af69959c34f135ed1487800f35c24e030687c651","size":732,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/app/chat/[id]/page.tsx?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/webui/app/chat/[id]/page.tsx","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/af69959c34f135ed1487800f35c24e030687c651","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/webui/app/chat/%5Bid%5D/page.tsx","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/app/chat/[id]/page.tsx?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/af69959c34f135ed1487800f35c24e030687c651","html":"https://github.com/eidolon-ai/eidolon/blob/main/webui/app/chat/[id]/page.tsx"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:35:41 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E573:252DF3:14A90F:1E182D:65D51B2D
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4529'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '471'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/content/docs/guides?ref=main
  response:
    content: '[{"name":"example.md","path":"docs/src/content/docs/guides/example.md","sha":"ebd0f3bc762eac0f38ee658b2ded7443248846e7","size":374,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/content/docs/guides/example.md?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/docs/src/content/docs/guides/example.md","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/ebd0f3bc762eac0f38ee658b2ded7443248846e7","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/docs/src/content/docs/guides/example.md","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/docs/src/content/docs/guides/example.md?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/ebd0f3bc762eac0f38ee658b2ded7443248846e7","html":"https://github.com/eidolon-ai/eidolon/blob/main/docs/src/content/docs/guides/example.md"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:35:41 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E577:2537C8:17552C:20C500:65D51B2D
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4528'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '472'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/getting_started/2_custom_agents?ref=main
  response:
    content: '[{"name":"__init__.py","path":"examples/eidolon_examples/getting_started/2_custom_agents/__init__.py","sha":"e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/getting_started/2_custom_agents/__init__.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/getting_started/2_custom_agents/__init__.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/eidolon_examples/getting_started/2_custom_agents/__init__.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/getting_started/2_custom_agents/__init__.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/getting_started/2_custom_agents/__init__.py"}},{"name":"hello_world.py","path":"examples/eidolon_examples/getting_started/2_custom_agents/hello_world.py","sha":"2d14bbcaeaf3bfcec769d595cbb40a4c2ee01261","size":634,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/getting_started/2_custom_agents/hello_world.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/getting_started/2_custom_agents/hello_world.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/2d14bbcaeaf3bfcec769d595cbb40a4c2ee01261","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/eidolon_examples/getting_started/2_custom_agents/hello_world.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/getting_started/2_custom_agents/hello_world.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/2d14bbcaeaf3bfcec769d595cbb40a4c2ee01261","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/getting_started/2_custom_agents/hello_world.py"}},{"name":"qa.py","path":"examples/eidolon_examples/getting_started/2_custom_agents/qa.py","sha":"a570b38d7ef8b8e0490262307b229493d7111dc9","size":2146,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/getting_started/2_custom_agents/qa.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/getting_started/2_custom_agents/qa.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/a570b38d7ef8b8e0490262307b229493d7111dc9","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/eidolon_examples/getting_started/2_custom_agents/qa.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/getting_started/2_custom_agents/qa.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/a570b38d7ef8b8e0490262307b229493d7111dc9","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/getting_started/2_custom_agents/qa.py"}},{"name":"resources","path":"examples/eidolon_examples/getting_started/2_custom_agents/resources","sha":"82ad701e310f20cdcb577f2ba4c53bf5b6ea5294","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/getting_started/2_custom_agents/resources?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/examples/eidolon_examples/getting_started/2_custom_agents/resources","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/82ad701e310f20cdcb577f2ba4c53bf5b6ea5294","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/getting_started/2_custom_agents/resources?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/82ad701e310f20cdcb577f2ba4c53bf5b6ea5294","html":"https://github.com/eidolon-ai/eidolon/tree/main/examples/eidolon_examples/getting_started/2_custom_agents/resources"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:35:41 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E581:276CC5:10383C:17A475:65D51B2D
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4527'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '473'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/builtins/__init__.py
  response:
    content: ''
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Length:
      - '0'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:35:41 GMT
      ETag:
      - W/"938f66ede415ccb10764da47cd5f3cfc076c07b8791c708cfa8ec54982197c1f"
      Expires:
      - Tue, 20 Feb 2024 21:40:41 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - e3e4b7c7006232af6121f8e0995500cda4846e4e
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - 1060:255865:B8FCE:10CE8A:65D51B2C
      X-Served-By:
      - cache-bfi-kbfi7400098-BFI
      X-Timer:
      - S1708464941.284160,VS0,VE121
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/bin/agent_creator.py
  response:
    content: "import importlib.metadata\nimport inspect\nimport os\nimport pkgutil\nimport
      readline\nimport sys\nimport tempfile\nfrom contextlib import contextmanager\nfrom
      functools import cache\nfrom typing import Type, get_origin\n\nimport typer\nimport
      yaml\nfrom click import Choice, BadParameter\nfrom pydantic import BaseModel\nfrom
      pydantic_core import PydanticUndefinedType\nfrom rich import print as richprint\nfrom
      rich.syntax import Syntax\n\nfrom eidolon_ai_sdk.system.reference_model import
      Reference\nfrom eidolon_ai_sdk.system.resources import agent_resources, AgentResource\nfrom
      eidolon_ai_sdk.util.class_utils import for_name, fqn\n\necho = lambda text,
      **kwargs: typer.echo(pad(text), **kwargs)  # noqa\nconfirm = lambda text, **kwargs:
      typer.confirm(pad(text), **kwargs)  # noqa\n\n\ndef prompt(text, default=None,
      choices: list[str] = None, case_sensitive=False, **kwargs):\n    def completer(text,
      state):\n        if case_sensitive:\n            options = [i for i in choices
      if i.startswith(text)]\n        else:\n            options = [i for i in choices
      if i.lower().startswith(text.lower())]\n        return options[state] if state
      < len(options) else None\n\n    if choices:\n        kwargs[\"type\"] = Choice(choices,
      case_sensitive=case_sensitive)\n    kwargs[\"default\"] = default\n    return
      prompt_with_completer(text, completer, **kwargs)\n\n\ndef prompt_with_completer(text,
      completer: callable, **kwargs):\n    readline.set_completer(completer)\n    rtn
      = typer.prompt(pad(text), **kwargs)\n    readline.set_completer(None)\n    return
      rtn\n\n\n@cache\ndef autocomplete_modules(package_name: str, substring: str):\n
      \   try:\n        package = importlib.import_module(package_name)\n        submodules
      = []\n        # if we are at a module, we want all the classes within it\n        for
      loader, name, is_pkg in pkgutil.walk_packages(package.__path__):\n            if
      name.startswith(substring):\n                submodules.append(package_name
      + \".\" + name + \".\")\n        return submodules\n    except ModuleNotFoundError:\n
      \       return []\n\n\n@cache\ndef autocomplete_packages(substring: str):\n
      \   installed_packages = (dist.metadata[\"Name\"] for dist in importlib.metadata.distributions())\n
      \   rtn = [pkg for pkg in installed_packages if pkg.startswith(substring)]\n
      \   return rtn\n\n\ndef fqn_completer(text, state):\n    # Split the text by
      dots and get the last part that's being typed\n    parts = text.split(\".\")\n
      \   packages = autocomplete_packages(parts[0])\n    if len(packages) > 1:\n
      \       options = packages\n    else:\n        if len(parts) > 1:\n            package_name
      = \".\".join(parts[:-1])\n            substring = parts[-1]\n        else:\n
      \           package_name = packages[0]\n            substring = \"\"\n        if
      hasattr(importlib.import_module(package_name), \"__path__\"):\n            options
      = autocomplete_modules(package_name, substring)\n        else:\n            classes
      = (n for n, v in inspect.getmembers(sys.modules[package_name], inspect.isclass))\n
      \           options = [package_name + \".\" + c for c in classes if c.startswith(substring)]\n
      \   return options[state] if state < len(options) else None\n\n\ndef create_agent():\n
      \   agents = [a for a in agent_resources.keys() if a != \"Agent\"] + [\"Custom\"]\n\n
      \   name = prompt(\"What is the name of the agent?\", default=\"NewAgent\")\n
      \   kind = prompt(f\"What type of agent is {name}?\", default=\"GenericAgent\",
      choices=agents)\n    args = dict(apiVersion=\"eidolon/v1\")\n    args[\"kind\"]
      = kind if kind != \"Custom\" else \"Agent\"\n\n    # todo, This is just a reference,
      so we don't need the duplicate logic here\n    if kind == \"Custom\":\n        agent_resource
      = AgentResource\n        fqn_ = prompt_with_completer(\n            \"What is
      the fully qualified name to the implementation?\", fqn_completer, value_proc=impl_proc\n
      \       )\n        agent_class = for_name(fqn_, object)\n        args[\"implementation\"]
      = fqn_\n    else:\n        agent_resource = agent_resources[kind]\n        agent_class
      = agent_resource.clazz\n\n    spec_type = Reference.get_spec_type(agent_class)\n
      \   if spec_type:\n        if confirm(\"Would you like to modify the spec?\",
      default=False):\n            try:\n                with indented():\n                    args[\"spec\"]
      = build_model(spec_type)\n            except Abort:\n                echo(\"Aborted,
      leaving spec blank\")\n    else:\n        echo(f\"{agent_class.__name__} does
      not have a spec.\")\n\n    try:\n        raw_edit_loop(args, agent_resource)\n
      \       richprint(Syntax(yaml.safe_dump(args), \"yaml\", padding=Indenter.depth
      * 2))\n        save_loc = prompt(\"Where do you want to save the resource?\",
      default=f\"{name}.yaml\")\n        with open(save_loc, \"w\") as file:\n            yaml.dump(args,
      file)\n    except Abort:\n        echo(\"Aborted.\", color=\"red\")\n\n\n# todo,
      it would be nice to add indentation as we recurse\ndef build_model(model: Type[BaseModel]):\n
      \   \"\"\"\n    Recursively prompts user for values for a model\n    \"\"\"\n
      \   rtn = {}\n    for field_name, field_info in model.model_fields.items():\n
      \       description = field_info.description\n        default = field_info.default
      if not isinstance(field_info.default, PydanticUndefinedType) else None\n        prompt_text
      = f\"{field_name}\" if not description else f\"{field_name} ({description})\"\n
      \       # todo, it is lame we need to special case references, we should upgrade
      spec to be typed\n        try:\n            if isinstance(field_info.annotation,
      type) and issubclass(field_info.annotation, Reference):\n                echo(prompt_text
      + \":\")\n                with indented():\n                    reference =
      build_reference(field_info)\n                if reference:\n                    rtn[field_name]
      = reference\n            elif isinstance(field_info.annotation, type) and issubclass(field_info.annotation,
      BaseModel):\n                echo(f\"{prompt_text} [{default or field_info.annotation}]\")\n
      \               if confirm(\"Would you like to modify modify the nested field?\",
      default=False):\n                    with indented():\n                        rtn[field_name]
      = build_model(field_info.annotation)\n\n            else:\n                #
      todo, we should support unions, literals, ect nicely with custom prompts\n                type_
      = field_info.annotation\n                if get_origin(field_info.annotation)
      and get_origin(field_info.annotation) in [dict, list]:\n                    type_
      = get_origin(field_info.annotation)\n                if type_ not in [dict,
      list]:\n                    type_ = str\n\n                user_value = prompt(prompt_text,
      default=default, type=type_)\n                if user_value != default:\n                    rtn[field_name]
      = user_value\n        except Abort:\n            echo(f\"Aborted, accepting
      defaults for {field_name}\")\n\n    return raw_edit_loop(rtn, model)\n\n\ndef
      raw_edit_loop(obj, model: Type[BaseModel]):\n    \"\"\"\n    Validates object
      with model and gives user chance to edit in vim. Rinse and repeat.\n    :raises
      Abort: If user chooses to abort\n    \"\"\"\n\n    with tempfile.NamedTemporaryFile(mode=\"w+\",
      delete=False) as temp:\n        yaml.dump(obj, temp)\n        while True:\n
      \           try:\n                model.model_validate(obj).model_dump(exclude_defaults=True)\n
      \               break\n            except ValueError as e:\n                echo(str(e),
      color=\"red\")\n                action = prompt(\n                    f\"{model.__name__}
      validation failed.\",\n                    color=None,\n                    default=\"Edit\",\n
      \                   choices=[\"Edit\", \"Ignore\", \"Abort\"],\n                )\n
      \               if action == \"Ignore\":\n                    break\n                elif
      action == \"Edit\":\n                    os.system(f\"vim {temp.name}\")\n                    with
      open(temp.name) as file:\n                        obj = yaml.safe_load(file)\n
      \               elif action == \"Abort\":\n                    raise Abort()\n
      \               else:\n                    raise Exception(f\"Unexpected choice
      {action}\")\n    return obj\n\n\nclass Abort(Exception):\n    pass\n\n\ndef
      impl_proc(implementation: str):\n    try:\n        for_name(implementation,
      object)\n        return implementation\n    except ValueError as e:\n        raise
      BadParameter(f\"Unable to import {implementation}: {e}\")\n\n\ndef build_reference(field_info):\n
      \   ref_object = {}\n    default_type = field_info.annotation._default.default\n
      \   default_impl = fqn(default_type) if default_type else None\n    impl_value
      = prompt_with_completer(\"implementation\", fqn_completer, default=default_impl,
      value_proc=impl_proc)\n    if impl_value != default_impl:\n        ref_object[\"implementation\"]
      = impl_value\n    spec_type = Reference.get_spec_type(for_name(impl_value, object))\n
      \   if spec_type:\n        if spec_type and confirm(\"Would you like to modify
      the spec?\", default=False):\n            with indented():\n                spec
      = build_model(spec_type)\n            if spec:\n                ref_object[\"spec\"]
      = spec\n    return raw_edit_loop(ref_object, field_info.annotation) if ref_object
      else None\n\n\ndef main():\n    if \"libedit\" in readline.__doc__:\n        readline.parse_and_bind(\"bind
      ^I rl_complete\")\n    else:\n        readline.set_completer_delims(\" \\t\\n;\")\n
      \       readline.parse_and_bind(\"tab: complete\")\n    typer.run(create_agent)\n\n\nif
      __name__ == \"__main__\":\n    main()\n\n\nclass Indenter:\n    depth = 0\n\n\n@contextmanager\ndef
      indented():\n    Indenter.depth += 1\n    try:\n        yield\n    finally:\n
      \       Indenter.depth -= 1\n\n\ndef pad(text):\n    return \"\".join(\"  \"
      * Indenter.depth + line for line in text.splitlines(True))\n"
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Length:
      - '2957'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:35:41 GMT
      ETag:
      - W/"9d7342fee0610cb91ebc4d96b6113388470c742a6bd04fe797abba0269c8f976"
      Expires:
      - Tue, 20 Feb 2024 21:40:41 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - c80eca602cf79f12f3dd5079d9cb82c18c236394
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - 1230:1790:496A83:5C4075:65D51B2D
      X-Served-By:
      - cache-yvr1531-YVR
      X-Timer:
      - S1708464941.062916,VS0,VE335
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/group_conversation/python_coder?ref=main
  response:
    content: '[{"name":"CodeCritique.yaml","path":"examples/eidolon_examples/group_conversation/python_coder/CodeCritique.yaml","sha":"e4c07675f3c8ae21eb2f4912849aa95c063760f1","size":809,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/group_conversation/python_coder/CodeCritique.yaml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/group_conversation/python_coder/CodeCritique.yaml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e4c07675f3c8ae21eb2f4912849aa95c063760f1","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/eidolon_examples/group_conversation/python_coder/CodeCritique.yaml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/group_conversation/python_coder/CodeCritique.yaml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e4c07675f3c8ae21eb2f4912849aa95c063760f1","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/group_conversation/python_coder/CodeCritique.yaml"}},{"name":"CommunityChameleon.yaml","path":"examples/eidolon_examples/group_conversation/python_coder/CommunityChameleon.yaml","sha":"cf2544697bb8c0d9239f4555baa158c807d4c00e","size":827,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/group_conversation/python_coder/CommunityChameleon.yaml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/group_conversation/python_coder/CommunityChameleon.yaml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/cf2544697bb8c0d9239f4555baa158c807d4c00e","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/eidolon_examples/group_conversation/python_coder/CommunityChameleon.yaml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/group_conversation/python_coder/CommunityChameleon.yaml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/cf2544697bb8c0d9239f4555baa158c807d4c00e","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/group_conversation/python_coder/CommunityChameleon.yaml"}},{"name":"DebubbingDog.yaml","path":"examples/eidolon_examples/group_conversation/python_coder/DebubbingDog.yaml","sha":"f5af4fbf5899e9209039ec68701ee04b12605281","size":780,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/group_conversation/python_coder/DebubbingDog.yaml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/group_conversation/python_coder/DebubbingDog.yaml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/f5af4fbf5899e9209039ec68701ee04b12605281","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/eidolon_examples/group_conversation/python_coder/DebubbingDog.yaml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/group_conversation/python_coder/DebubbingDog.yaml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/f5af4fbf5899e9209039ec68701ee04b12605281","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/group_conversation/python_coder/DebubbingDog.yaml"}},{"name":"GameMaster.yaml","path":"examples/eidolon_examples/group_conversation/python_coder/GameMaster.yaml","sha":"484b6cdd8b735b9e3d7decd1aee1d459c3e78477","size":1370,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/group_conversation/python_coder/GameMaster.yaml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/group_conversation/python_coder/GameMaster.yaml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/484b6cdd8b735b9e3d7decd1aee1d459c3e78477","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/eidolon_examples/group_conversation/python_coder/GameMaster.yaml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/group_conversation/python_coder/GameMaster.yaml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/484b6cdd8b735b9e3d7decd1aee1d459c3e78477","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/group_conversation/python_coder/GameMaster.yaml"}},{"name":"LogicLynx.yaml","path":"examples/eidolon_examples/group_conversation/python_coder/LogicLynx.yaml","sha":"a5e144e7836c4efd82795df5c04d8c009d7841b1","size":721,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/group_conversation/python_coder/LogicLynx.yaml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/group_conversation/python_coder/LogicLynx.yaml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/a5e144e7836c4efd82795df5c04d8c009d7841b1","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/eidolon_examples/group_conversation/python_coder/LogicLynx.yaml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/group_conversation/python_coder/LogicLynx.yaml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/a5e144e7836c4efd82795df5c04d8c009d7841b1","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/group_conversation/python_coder/LogicLynx.yaml"}},{"name":"PerformanceParrot.yaml","path":"examples/eidolon_examples/group_conversation/python_coder/PerformanceParrot.yaml","sha":"dd54e8a75d5a43630070a8caf297de8e81e15a45","size":792,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/group_conversation/python_coder/PerformanceParrot.yaml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/group_conversation/python_coder/PerformanceParrot.yaml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/dd54e8a75d5a43630070a8caf297de8e81e15a45","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/eidolon_examples/group_conversation/python_coder/PerformanceParrot.yaml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/group_conversation/python_coder/PerformanceParrot.yaml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/dd54e8a75d5a43630070a8caf297de8e81e15a45","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/group_conversation/python_coder/PerformanceParrot.yaml"}},{"name":"ResourceRabbit.yaml","path":"examples/eidolon_examples/group_conversation/python_coder/ResourceRabbit.yaml","sha":"74856677c2a421ffc04ec9e3f788399ce2896300","size":770,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/group_conversation/python_coder/ResourceRabbit.yaml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/group_conversation/python_coder/ResourceRabbit.yaml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/74856677c2a421ffc04ec9e3f788399ce2896300","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/eidolon_examples/group_conversation/python_coder/ResourceRabbit.yaml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/group_conversation/python_coder/ResourceRabbit.yaml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/74856677c2a421ffc04ec9e3f788399ce2896300","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/group_conversation/python_coder/ResourceRabbit.yaml"}},{"name":"SyntaxSquirrel.yaml","path":"examples/eidolon_examples/group_conversation/python_coder/SyntaxSquirrel.yaml","sha":"99bc477222d59c9fb4acaea461f0a992574dd186","size":1032,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/group_conversation/python_coder/SyntaxSquirrel.yaml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/group_conversation/python_coder/SyntaxSquirrel.yaml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/99bc477222d59c9fb4acaea461f0a992574dd186","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/eidolon_examples/group_conversation/python_coder/SyntaxSquirrel.yaml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/group_conversation/python_coder/SyntaxSquirrel.yaml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/99bc477222d59c9fb4acaea461f0a992574dd186","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/group_conversation/python_coder/SyntaxSquirrel.yaml"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:35:41 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E571:25886F:1448BD:1DB873:65D51B2D
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4526'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '474'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/test_web_search.py
  response:
    content: "import pytest\n\nfrom eidolon_ai_sdk.builtins.logic_units.web_search
      import WebSearch, WebSearchConfig\n\n\n@pytest.fixture\ndef websearch():\n    return
      WebSearch(processing_unit_locator=None, spec=WebSearchConfig())\n\n\nasync def
      test_go_to_url(websearch):\n    found = await websearch.go_to_url(\"https://httpbin.org/get\")\n
      \   assert '\"url\": \"https://httpbin.org/get\"' in found\n\n\nasync def test_search(websearch):\n
      \   found = await websearch.search(\"test\")\n    assert len(found) == 10\n
      \   assert \"test\" in found[0].description\n"
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Length:
      - '281'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:35:41 GMT
      ETag:
      - W/"6f23edef28ae827df34a1fef3b028673c403b96ea68f32f386bee7b90dce7186"
      Expires:
      - Tue, 20 Feb 2024 21:40:41 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - f564f5abbe0ff966a8833e4654e32aed252956cf
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - 5464:2945D3:4E2CD6:613CCC:65D51B2D
      X-Served-By:
      - cache-yvr1526-YVR
      X-Timer:
      - S1708464941.077688,VS0,VE328
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/builtins/code_builtins.py
  response:
    content: "from typing import Tuple\n\nfrom eidolon_ai_sdk.agent.doc_manager.loaders.base_loader
      import DocumentLoader\nfrom eidolon_ai_sdk.agent.doc_manager.loaders.filesystem_loader
      import FilesystemLoader\nfrom eidolon_ai_sdk.agent.doc_manager.parsers.auto_parser
      import AutoParser\nfrom eidolon_ai_sdk.agent.doc_manager.parsers.base_parser
      import DocumentParser\nfrom eidolon_ai_sdk.agent.doc_manager.transformer.auto_transformer
      import AutoTransformer\nfrom eidolon_ai_sdk.agent.doc_manager.transformer.document_transformer
      import DocumentTransformer\nfrom eidolon_ai_sdk.agent.generic_agent import GenericAgent\nfrom
      eidolon_ai_sdk.agent.retriever_agent.document_reranker import RAGFusionReranker,
      DocumentReranker\nfrom eidolon_ai_sdk.agent.retriever_agent.multi_question_transformer
      import MultiQuestionTransformer\nfrom eidolon_ai_sdk.agent.retriever_agent.question_transformer
      import QuestionTransformer\nfrom eidolon_ai_sdk.agent.retriever_agent.retriever_agent
      import RetrieverAgent\nfrom eidolon_ai_sdk.agent.tot_agent.checker import ToTChecker\nfrom
      eidolon_ai_sdk.agent.tot_agent.thought_generators import ThoughtGenerationStrategy,
      ProposePromptStrategy\nfrom eidolon_ai_sdk.agent.tot_agent.tot_agent import
      TreeOfThoughtsAgent\nfrom eidolon_ai_sdk.builtins.logic_units.web_search import
      WebSearch\nfrom eidolon_ai_sdk.cpu.agent_cpu import AgentCPU\nfrom eidolon_ai_sdk.cpu.agent_io
      import IOUnit\nfrom eidolon_ai_sdk.cpu.conversation_memory_unit import RawMemoryUnit\nfrom
      eidolon_ai_sdk.cpu.conversational_agent_cpu import ConversationalAgentCPU\nfrom
      eidolon_ai_sdk.cpu.llm.open_ai_llm_unit import OpenAIGPT\nfrom eidolon_ai_sdk.cpu.llm.open_ai_speech
      import OpenAiSpeech\nfrom eidolon_ai_sdk.cpu.llm_unit import LLMUnit\nfrom eidolon_ai_sdk.cpu.memory_unit
      import MemoryUnit\nfrom eidolon_ai_sdk.util.logger import logger\n\ntry:\n    from
      eidolon_ai_sdk.memory.chroma_vector_store import ChromaVectorStore\nexcept ImportError:\n
      \   logger.warning(\"Error, ChromaVectorStore is not available\")\n    ChromaVectorStore
      = None\n\nfrom eidolon_ai_sdk.memory.embeddings import NoopEmbedding, Embedding,
      OpenAIEmbedding\nfrom eidolon_ai_sdk.memory.file_memory import FileMemory\nfrom
      eidolon_ai_sdk.memory.local_file_memory import LocalFileMemory\nfrom eidolon_ai_sdk.memory.local_symbolic_memory
      import LocalSymbolicMemory\nfrom eidolon_ai_sdk.memory.mongo_symbolic_memory
      import MongoSymbolicMemory\nfrom eidolon_ai_sdk.memory.noop_memory import NoopVectorStore\nfrom
      eidolon_ai_sdk.memory.semantic_memory import SymbolicMemory\nfrom eidolon_ai_sdk.memory.similarity_memory
      import SimilarityMemory\nfrom eidolon_ai_sdk.memory.vector_store import VectorStore\nfrom
      eidolon_ai_sdk.security.security_manager import SecurityManager\nfrom eidolon_ai_sdk.system.agent_machine
      import AgentMachine\nfrom eidolon_ai_sdk.system.resources.reference_resource
      import ReferenceResource\nfrom eidolon_ai_sdk.system.resources.resources_base
      import Metadata\nfrom eidolon_ai_sdk.util.class_utils import fqn\nfrom eidolon_ai_sdk.util.replay
      import ReplayConfig\n\n\ndef _to_resource(maybe_tuple: type | Tuple[type, type])
      -> ReferenceResource:\n    if isinstance(maybe_tuple, tuple):\n        return
      ReferenceResource(\n            apiVersion=\"eidolon/v1\",\n            metadata=Metadata(name=maybe_tuple[0].__name__),\n
      \           spec=maybe_tuple[1].__name__,\n        )\n    else:\n        return
      ReferenceResource(\n            apiVersion=\"eidolon/v1\",\n            metadata=Metadata(name=maybe_tuple.__name__),\n
      \           spec=fqn(maybe_tuple),\n        )\n\n\ndef named_builtins():\n    \"\"\"\n
      \   Shorthand for defining builtin resources since most are just a pointer to
      a class.\n\n    This will allow us to capture refactoring location of a class
      automatically.\n\n    Tuples map the name of the first element to the name of
      the second.\n    Single types map the name of first element to it's fqn.\n    \"\"\"\n\n
      \   builtin_list = [\n        AgentMachine,\n        # security manager\n        SecurityManager,\n
      \       # agents\n        GenericAgent,\n        TreeOfThoughtsAgent,\n        RetrieverAgent,\n
      \       # cpu\n        (AgentCPU, ConversationalAgentCPU),\n        ConversationalAgentCPU,\n
      \       # cpu components\n        IOUnit,\n        (LLMUnit, OpenAIGPT),\n        OpenAIGPT,\n
      \       (MemoryUnit, RawMemoryUnit),\n        RawMemoryUnit,\n        WebSearch,\n
      \       # machine components\n        (SymbolicMemory, MongoSymbolicMemory),\n
      \       MongoSymbolicMemory,\n        LocalSymbolicMemory,\n        (FileMemory,
      LocalFileMemory),\n        LocalFileMemory,\n        SimilarityMemory,\n        (Embedding,
      OpenAIEmbedding),\n        NoopEmbedding,\n        OpenAIEmbedding,\n        (VectorStore,
      ChromaVectorStore),\n        NoopVectorStore,\n        ChromaVectorStore,\n
      \       # sub components\n        (DocumentParser, AutoParser),\n        AutoParser,\n
      \       (DocumentTransformer, AutoTransformer),\n        AutoTransformer,\n
      \       (ThoughtGenerationStrategy, ProposePromptStrategy),\n        ProposePromptStrategy,\n
      \       (QuestionTransformer, MultiQuestionTransformer),\n        MultiQuestionTransformer,\n
      \       (DocumentReranker, RAGFusionReranker),\n        RAGFusionReranker,\n
      \       (DocumentLoader, FilesystemLoader),\n        FilesystemLoader,\n        ToTChecker,\n
      \       OpenAiSpeech,\n        # config objects\n        ReplayConfig,\n    ]\n
      \   return [_to_resource(maybe_tuple) for maybe_tuple in builtin_list if maybe_tuple]\n"
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Length:
      - '1376'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:35:41 GMT
      ETag:
      - W/"609dd5862755a3835bd07b2d2294dd6d55a69f0b8c6ec6323eeda2a398c807e0"
      Expires:
      - Tue, 20 Feb 2024 21:40:41 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - HIT
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - e2918fe37521d5ce9a3ac1b65ab16ebdab2cc340
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - 7504:66FB:5B391C:6DA757:65D519B0
      X-Served-By:
      - cache-yvr1521-YVR
      X-Timer:
      - S1708464941.300547,VS0,VE130
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/app/api?ref=main
  response:
    content: '[{"name":"auth","path":"webui/app/api/auth","sha":"aad2b43a9c4dc8aad807e798ea335cd712612f80","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/app/api/auth?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/webui/app/api/auth","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/aad2b43a9c4dc8aad807e798ea335cd712612f80","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/app/api/auth?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/aad2b43a9c4dc8aad807e798ea335cd712612f80","html":"https://github.com/eidolon-ai/eidolon/tree/main/webui/app/api/auth"}},{"name":"chat","path":"webui/app/api/chat","sha":"704e91d34065b96e813d8c7e041b0fd906a1d93d","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/app/api/chat?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/webui/app/api/chat","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/704e91d34065b96e813d8c7e041b0fd906a1d93d","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/app/api/chat?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/704e91d34065b96e813d8c7e041b0fd906a1d93d","html":"https://github.com/eidolon-ai/eidolon/tree/main/webui/app/api/chat"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:35:41 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E57F:2542CD:1445BB:1DB552:65D51B2D
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4524'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '476'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/builtins/logic_units?ref=main
  response:
    content: '[{"name":"__init__.py","path":"sdk/eidolon_ai_sdk/builtins/logic_units/__init__.py","sha":"e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/builtins/logic_units/__init__.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/builtins/logic_units/__init__.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/builtins/logic_units/__init__.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/builtins/logic_units/__init__.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/builtins/logic_units/__init__.py"}},{"name":"web_search.py","path":"sdk/eidolon_ai_sdk/builtins/logic_units/web_search.py","sha":"d3104f87b1bce5556c742171c18ea9a1b083c8c0","size":3941,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/builtins/logic_units/web_search.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/builtins/logic_units/web_search.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/d3104f87b1bce5556c742171c18ea9a1b083c8c0","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/builtins/logic_units/web_search.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/builtins/logic_units/web_search.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/d3104f87b1bce5556c742171c18ea9a1b083c8c0","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/builtins/logic_units/web_search.py"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:35:41 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E580:250EE1:1626EB:1F96A4:65D51B2D
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4525'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '475'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/cpu/__init__.py
  response:
    content: ''
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:35:41 GMT
      ETag:
      - W/"938f66ede415ccb10764da47cd5f3cfc076c07b8791c708cfa8ec54982197c1f"
      Expires:
      - Tue, 20 Feb 2024 21:40:41 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - fbaee08846f637534dee67dd59bc1d5c4f6e3539
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - E9FE:257E5B:B87F2:10C6CF:65D51B2C
      X-Served-By:
      - cache-bfi-kbfi7400065-BFI
      X-Timer:
      - S1708464941.307049,VS0,VE140
      X-XSS-Protection:
      - 1; mode=block
      transfer-encoding:
      - chunked
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/agent?ref=main
  response:
    content: '[{"name":"__init__.py","path":"sdk/tests/agent/__init__.py","sha":"e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/agent/__init__.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/agent/__init__.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/agent/__init__.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/agent/__init__.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/agent/__init__.py"}},{"name":"cassettes","path":"sdk/tests/agent/cassettes","sha":"c9de494a8533845a8fbbb7d4bc78e98d14fbdaed","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/agent/cassettes?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/sdk/tests/agent/cassettes","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/c9de494a8533845a8fbbb7d4bc78e98d14fbdaed","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/agent/cassettes?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/c9de494a8533845a8fbbb7d4bc78e98d14fbdaed","html":"https://github.com/eidolon-ai/eidolon/tree/main/sdk/tests/agent/cassettes"}},{"name":"doc_manager","path":"sdk/tests/agent/doc_manager","sha":"70a742d7170e89be69c3d7be904ae660886b3c2e","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/agent/doc_manager?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/sdk/tests/agent/doc_manager","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/70a742d7170e89be69c3d7be904ae660886b3c2e","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/agent/doc_manager?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/70a742d7170e89be69c3d7be904ae660886b3c2e","html":"https://github.com/eidolon-ai/eidolon/tree/main/sdk/tests/agent/doc_manager"}},{"name":"retriever_docs","path":"sdk/tests/agent/retriever_docs","sha":"07373e7973c0fa7894dd808a5195b91a8af413c7","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/agent/retriever_docs?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/sdk/tests/agent/retriever_docs","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/07373e7973c0fa7894dd808a5195b91a8af413c7","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/agent/retriever_docs?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/07373e7973c0fa7894dd808a5195b91a8af413c7","html":"https://github.com/eidolon-ai/eidolon/tree/main/sdk/tests/agent/retriever_docs"}},{"name":"test_retriever_agent.py","path":"sdk/tests/agent/test_retriever_agent.py","sha":"a39fbbf9087bc04e5b199a04bfc211100bb7735d","size":1320,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/agent/test_retriever_agent.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/agent/test_retriever_agent.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/a39fbbf9087bc04e5b199a04bfc211100bb7735d","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/agent/test_retriever_agent.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/agent/test_retriever_agent.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/a39fbbf9087bc04e5b199a04bfc211100bb7735d","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/agent/test_retriever_agent.py"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:35:41 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E57E:2556C1:151AD5:1E8A8A:65D51B2D
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4523'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '477'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/components/ui?ref=main
  response:
    content: '[{"name":"icons.tsx","path":"webui/components/ui/icons.tsx","sha":"1efa60894e918050e742ff0e8489ac118d1b88e9","size":2451,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/components/ui/icons.tsx?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/webui/components/ui/icons.tsx","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/1efa60894e918050e742ff0e8489ac118d1b88e9","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/webui/components/ui/icons.tsx","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/components/ui/icons.tsx?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/1efa60894e918050e742ff0e8489ac118d1b88e9","html":"https://github.com/eidolon-ai/eidolon/blob/main/webui/components/ui/icons.tsx"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:35:41 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E575:2552AA:15DECA:1F4E67:65D51B2D
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4522'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '478'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/group_conversation/resources?ref=main
  response:
    content: '[{"name":"Alex.yaml","path":"examples/eidolon_examples/group_conversation/resources/Alex.yaml","sha":"e48a245ecb086032515a3031df3854bf0f7d4d96","size":527,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/group_conversation/resources/Alex.yaml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/group_conversation/resources/Alex.yaml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e48a245ecb086032515a3031df3854bf0f7d4d96","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/eidolon_examples/group_conversation/resources/Alex.yaml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/group_conversation/resources/Alex.yaml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e48a245ecb086032515a3031df3854bf0f7d4d96","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/group_conversation/resources/Alex.yaml"}},{"name":"Bob.yaml","path":"examples/eidolon_examples/group_conversation/resources/Bob.yaml","sha":"02352f92936fa9b342b6dbaaaf8edb3de400ee63","size":866,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/group_conversation/resources/Bob.yaml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/group_conversation/resources/Bob.yaml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/02352f92936fa9b342b6dbaaaf8edb3de400ee63","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/eidolon_examples/group_conversation/resources/Bob.yaml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/group_conversation/resources/Bob.yaml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/02352f92936fa9b342b6dbaaaf8edb3de400ee63","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/group_conversation/resources/Bob.yaml"}},{"name":"Chad.yaml","path":"examples/eidolon_examples/group_conversation/resources/Chad.yaml","sha":"3b2dd40455cf1f06e05ea4667ce360cbe549de37","size":707,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/group_conversation/resources/Chad.yaml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/group_conversation/resources/Chad.yaml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/3b2dd40455cf1f06e05ea4667ce360cbe549de37","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/eidolon_examples/group_conversation/resources/Chad.yaml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/group_conversation/resources/Chad.yaml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/3b2dd40455cf1f06e05ea4667ce360cbe549de37","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/group_conversation/resources/Chad.yaml"}},{"name":"Coordinator.yaml","path":"examples/eidolon_examples/group_conversation/resources/Coordinator.yaml","sha":"51cbc021c558cfd668d43208eccd92f5d3849039","size":228,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/group_conversation/resources/Coordinator.yaml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/group_conversation/resources/Coordinator.yaml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/51cbc021c558cfd668d43208eccd92f5d3849039","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/eidolon_examples/group_conversation/resources/Coordinator.yaml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/group_conversation/resources/Coordinator.yaml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/51cbc021c558cfd668d43208eccd92f5d3849039","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/group_conversation/resources/Coordinator.yaml"}},{"name":"Fred.yaml","path":"examples/eidolon_examples/group_conversation/resources/Fred.yaml","sha":"11748578e442a59ad3c1120f9477abc422cd158b","size":547,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/group_conversation/resources/Fred.yaml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/group_conversation/resources/Fred.yaml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/11748578e442a59ad3c1120f9477abc422cd158b","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/eidolon_examples/group_conversation/resources/Fred.yaml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/group_conversation/resources/Fred.yaml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/11748578e442a59ad3c1120f9477abc422cd158b","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/group_conversation/resources/Fred.yaml"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:35:41 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E573:252DF3:14A913:1E1831:65D51B2D
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4521'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '479'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/impl?ref=main
  response:
    content: '[{"name":"__init__.py","path":"sdk/tests/impl/__init__.py","sha":"e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/impl/__init__.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/impl/__init__.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/impl/__init__.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/impl/__init__.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/impl/__init__.py"}},{"name":"test_local_symbolic_memory.py","path":"sdk/tests/impl/test_local_symbolic_memory.py","sha":"88e8668b39dba79aa2522db92c3f539578623b19","size":4210,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/impl/test_local_symbolic_memory.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/impl/test_local_symbolic_memory.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/88e8668b39dba79aa2522db92c3f539578623b19","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/impl/test_local_symbolic_memory.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/impl/test_local_symbolic_memory.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/88e8668b39dba79aa2522db92c3f539578623b19","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/impl/test_local_symbolic_memory.py"}},{"name":"test_messsage_summarizer.py","path":"sdk/tests/impl/test_messsage_summarizer.py","sha":"e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/impl/test_messsage_summarizer.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/impl/test_messsage_summarizer.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/impl/test_messsage_summarizer.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/impl/test_messsage_summarizer.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/impl/test_messsage_summarizer.py"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:35:41 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E578:2E1594:2BDF7:39F9D:65D51B2D
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4520'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '480'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/cpu/agent_cpu.py
  response:
    content: "from __future__ import annotations\n\nimport json\nfrom abc import abstractmethod,
      ABC\nfrom pydantic import BaseModel, Field, TypeAdapter\nfrom typing import
      Any, List, Dict, Literal, Union, TypeVar, Type, cast, AsyncIterator\n\nfrom
      eidolon_ai_sdk.cpu.agent_io import CPUMessageTypes\nfrom eidolon_ai_sdk.cpu.call_context
      import CallContext\nfrom eidolon_ai_sdk.io.events import StreamEvent, convert_output_object,
      ObjectOutputEvent, ErrorEvent, StringOutputEvent\nfrom eidolon_ai_sdk.system.reference_model
      import Specable\n\n\nclass AgentCPUSpec(BaseModel):\n    max_num_function_calls:
      int = Field(\n        10,\n        description=\"The maximum number of function
      calls to make in a single request.\",\n    )\n\n\nclass AgentCPU(Specable[AgentCPUSpec],
      ABC):\n    @abstractmethod\n    async def set_boot_messages(self, call_context:
      CallContext, boot_messages: List[CPUMessageTypes]):\n        pass\n\n    @abstractmethod\n
      \   async def schedule_request(\n        self,\n        call_context: CallContext,\n
      \       prompts: List[CPUMessageTypes],\n        output_format: Union[Literal[\"str\"],
      Dict[str, Any]],\n    ) -> AsyncIterator[StreamEvent]:\n        yield None\n\n
      \   def _to_json(self, obj):\n        if obj is None:\n            return \"\"\n
      \       elif isinstance(obj, BaseModel):\n            return obj.model_dump_json()\n
      \       elif isinstance(obj, list):\n            return \"[\" + (\",\".join([self._to_json(o)
      for o in obj])) + \"]\"\n        else:\n            return json.dumps(obj)\n\n
      \   async def main_thread(self, process_id: str) -> Thread:\n        return
      Thread(CallContext(process_id=process_id), self)\n\n    async def new_thread(self,
      process_id) -> Thread:\n        return Thread(CallContext(process_id=process_id).derive_call_context(),
      self)\n\n    @abstractmethod\n    async def clone_thread(self, call_context:
      CallContext) -> Thread:\n        pass\n\n\nT = TypeVar(\"T\")\n\n\nclass Thread:\n
      \   _call_context: CallContext\n    _cpu: AgentCPU\n\n    def __init__(self,
      call_context: CallContext, cpu: AgentCPU):\n        self._call_context = call_context\n
      \       self._cpu = cpu\n\n    async def set_boot_messages(\n        self,\n
      \       prompts: List[CPUMessageTypes],\n    ):\n        return await self._cpu.set_boot_messages(self._call_context,
      list(prompts))\n\n    async def run_request(\n        self,\n        prompts:
      List[CPUMessageTypes],\n        output_format: Union[Literal[\"str\"], Dict[str,
      Any], Type[T]] = \"str\",\n    ) -> T:\n        stream = self.stream_request(prompts,
      output_format)\n        result = None\n        error = None\n\n        is_string_call
      = not isinstance(output_format, type) and (\n            output_format == \"str\"
      or output_format[\"type\"] == \"string\"\n        )\n        string_output =
      \"\"\n        async for event in stream:\n            if event.is_root_and_type(ObjectOutputEvent):\n
      \               result = event.content\n            elif event.is_root_and_type(StringOutputEvent):\n
      \               string_output += event.content\n            elif event.is_root_and_type(ErrorEvent):\n
      \               error = event.reason\n\n        if is_string_call:\n            result
      = string_output\n\n        if error is not None:\n            if isinstance(error,
      Exception):\n                raise error\n            else:\n                raise
      Exception(error)\n\n        return result\n\n    def stream_request(\n        self,
      prompts: List[CPUMessageTypes], output_format: Union[Literal[\"str\"], Dict[str,
      Any], Type[T]] = \"str\"\n    ) -> AsyncIterator[StreamEvent]:\n        if isinstance(output_format,
      type):\n            model = TypeAdapter(output_format)\n            schema =
      model.json_schema()\n            s = convert_output_object(\n                self._cpu.schedule_request(self._call_context,
      prompts, schema), cast(Type[T], output_format)\n            )\n        else:\n
      \           s = self._cpu.schedule_request(self._call_context, prompts, output_format)\n\n
      \       return s\n\n    def call_context(self) -> CallContext:\n        return
      self._call_context\n\n    async def clone(self) -> Thread:\n        return await
      self._cpu.clone_thread(self._call_context)\n\n\nclass CPUException(Exception):\n
      \   def __init__(self, description):\n        super().__init__(\"CPU Error:
      \" + description)\n"
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Length:
      - '1223'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:35:41 GMT
      ETag:
      - W/"af115213e17992db54e41e55bfc0b42c3ac96bda75a46a0e817397b7b126488b"
      Expires:
      - Tue, 20 Feb 2024 21:40:41 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - HIT
      X-Cache-Hits:
      - '1'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - 7f7a315edf73c94fd56215966c756ed6159af5c6
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - EFD0:2590F7:BBC2D:10F61D:65D519B1
      X-Served-By:
      - cache-bfi-krnt7300044-BFI
      X-Timer:
      - S1708464941.373631,VS0,VE137
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/builtins/resources?ref=main
  response:
    content: '[{"name":"machine.yaml","path":"sdk/eidolon_ai_sdk/builtins/resources/machine.yaml","sha":"9e9d3174392e73c010d6d1c14e2fadf305ad6f8c","size":181,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/builtins/resources/machine.yaml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/builtins/resources/machine.yaml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/9e9d3174392e73c010d6d1c14e2fadf305ad6f8c","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/builtins/resources/machine.yaml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/builtins/resources/machine.yaml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/9e9d3174392e73c010d6d1c14e2fadf305ad6f8c","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/builtins/resources/machine.yaml"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:35:41 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E576:253F79:16572C:1FC6E2:65D51B2C
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4519'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '481'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/bin/agent_http_server.py
  response:
    content: "import argparse\nimport logging.config\nimport pathlib\nfrom collections
      import deque\nfrom contextlib import asynccontextmanager\nfrom importlib.metadata
      import version, PackageNotFoundError\n\nimport dotenv\nimport uvicorn\nimport
      yaml\nfrom fastapi import FastAPI\nfrom fastapi.openapi.utils import get_openapi\nfrom
      pydantic import TypeAdapter\nfrom starlette.middleware.base import BaseHTTPMiddleware,
      RequestResponseEndpoint\nfrom starlette.middleware.cors import CORSMiddleware\nfrom
      starlette.requests import Request\nfrom starlette.responses import Response,
      JSONResponse\n\nfrom eidolon_ai_sdk.agent_os import AgentOS\nfrom eidolon_ai_sdk.cpu.agent_call_history
      import AgentCallHistory\nfrom eidolon_ai_sdk.io.events import StreamEvent\nfrom
      eidolon_ai_sdk.system.processes import ProcessDoc\nfrom eidolon_ai_sdk.system.request_context
      import ContextMiddleware\nfrom eidolon_ai_sdk.system.resources.machine_resource
      import MachineResource\nfrom eidolon_ai_sdk.system.resources.reference_resource
      import ReferenceResource\nfrom eidolon_ai_sdk.system.resources.resources_base
      import load_resources, Resource\nfrom eidolon_ai_sdk.util.logger import logger\nfrom
      eidolon_ai_sdk.util.replay import ReplayConfig\n\ndotenv.load_dotenv()\n\ntry:\n
      \   EIDOLON_SDK_VERSION = version(\"eidolon-ai-sdk\")\nexcept PackageNotFoundError:\n
      \   EIDOLON_SDK_VERSION = \"unknown\"\n\n\ndef parse_args():\n    # Set up the
      argument parser\n    parser = argparse.ArgumentParser(description=\"Start a
      FastAPI server.\")\n    parser.add_argument(\n        \"-p\",\n        \"--port\",\n
      \       type=int,\n        default=8080,\n        help=\"Port to run the FastAPI
      server on. Defaults to 8080.\",\n    )\n    parser.add_argument(\n        \"-r\",\n
      \       \"--reload\",\n        help=\"Reload the server when the code changes.
      Defaults to False.\",\n        action=\"store_true\",\n    )\n    parser.add_argument(\"--debug\",
      action=\"store_true\", help=\"Turn on debug logging\")\n    parser.add_argument(\n
      \       \"yaml_path\",\n        type=str,\n        help=\"Path to a directory
      containing YAML files describing the agent machine to start.\",\n    )\n    parser.add_argument(\n
      \       \"-m\",\n        \"--machine\",\n        type=str,\n        help=\"The
      name of the machine to start.\",\n        default=\"DEFAULT\",\n    )\n    parser.add_argument(\n
      \       \"--record\",\n        help=\"Enable replay points and save them to
      the provide directory\",\n        action=\"store_true\",\n        default=False,\n
      \   )\n\n    # Parse command line arguments\n    return parser.parse_args()\n\n\n@asynccontextmanager\nasync
      def start_os(app: FastAPI, resource_generator, machine_name, log_level=logging.INFO,
      replay_override=...):\n    def custom_openapi():\n        if app.openapi_schema:\n
      \           return app.openapi_schema\n        openapi_schema = get_openapi(\n
      \           title=\"Custom API\",\n            version=EIDOLON_SDK_VERSION,\n
      \           routes=app.routes,\n        )\n\n        # EventTypes\n        queue
      = deque(\n            [(\"EventTypes\", TypeAdapter(StreamEvent).json_schema(ref_template=\"#/components/schemas/{model}\"))]\n
      \       )\n        depth = 0\n        while queue:\n            if depth > 100:\n
      \               raise ValueError(\"Too many $defs\")\n            name, schema
      = queue.popleft()\n            if \"$defs\" in schema:\n                for
      d_name, d in schema[\"$defs\"].items():\n                    queue.append((d_name,
      d))\n                del schema[\"$defs\"]\n            openapi_schema[\"components\"][\"schemas\"][name]
      = schema\n            depth += 1\n\n        app.openapi_schema = openapi_schema\n
      \       return app.openapi_schema\n\n    app.openapi = custom_openapi\n\n    conf_
      = pathlib.Path(__file__).parent.parent.parent / \"logging.conf\"\n    logging.config.fileConfig(conf_)\n
      \   logger.setLevel(log_level)\n\n    # add system level endpoints\n    @app.get(path=\"/system/health\",
      tags=[\"system\"], description=\"Health check\")\n    async def health():\n
      \       return {\"status\": \"ok\"}\n\n    # noinspection PyShadowingNames\n
      \   @app.get(\"/system/version\", tags=[\"system\"], description=\"Get the version
      of the EIDOS SDK\")\n    async def version():\n        return {\"version\":
      EIDOLON_SDK_VERSION}\n\n    # todo, this needs pagination\n    @app.get(\"/system/processes\",
      tags=[\"system\"], description=\"Get all processes\")\n    async def processes():\n
      \       child_pids = await AgentCallHistory.get_child_pids()\n        processes
      = []\n        async for process in ProcessDoc.find(query={}, projection={\"data\":
      0}):\n            process = process.model_dump()\n            process[\"process_id\"]
      = process[\"_id\"]\n            del process[\"_id\"]\n            if process[\"process_id\"]
      in child_pids:\n                process[\"parent_process_id\"] = child_pids[process[\"process_id\"]]\n
      \           processes.append(process)\n\n        return JSONResponse(content=processes,
      status_code=200)\n\n    @app.get(\"/system/processes/{process_id}\", tags=[\"system\"],
      description=\"Get all processes\")\n    async def process(process_id: str):\n
      \       process_obj = await ProcessDoc.find_one(query={\"_id\": process_id})\n
      \       if not process_obj:\n            return JSONResponse(content={\"error\":
      f\"Process {process_id} not found\"}, status_code=404)\n        process_obj
      = process_obj.model_dump()\n        process_obj[\"process_id\"] = process_obj[\"_id\"]\n
      \       if process_obj.get(\"data\"):\n            del process_obj[\"data\"]\n
      \       del process_obj[\"_id\"]\n\n        return JSONResponse(content=process_obj,
      status_code=200)\n\n    try:\n        for resource_or_tuple in resource_generator:\n
      \           if isinstance(resource_or_tuple, Resource):\n                resource,
      source = resource_or_tuple, None\n            else:\n                resource,
      source = resource_or_tuple\n            AgentOS.register_resource(resource=resource,
      source=source)\n\n        logger.info(f\"Building machine '{machine_name}'\")\n
      \       machine_spec = AgentOS.get_resource(MachineResource, machine_name).spec\n
      \       logger.debug(yaml.safe_dump(machine_spec.model_dump()))\n        machine
      = machine_spec.instantiate()\n        AgentOS.load_machine(machine)\n        await
      machine.start(app)\n\n        if replay_override is not ...:\n            spec
      = AgentOS.get_resource_raw(ReferenceResource, \"ReplayConfig\").spec\n            spec[\"save_loc\"]
      = replay_override\n        if AgentOS.get_instance(ReplayConfig).save_loc:\n
      \           logger.warning(\"Replay points are enabled, this feature is intended
      for test environments only.\")\n        logger.info(\"Server Started\")\n        yield\n
      \       await machine.stop()\n    except BaseException:\n        logger.exception(\"Failed
      to start AgentOS\")\n        raise\n    finally:\n        AgentOS.reset()\n\n\nclass
      LoggingMiddleware(BaseHTTPMiddleware):\n    async def dispatch(self, request:
      Request, call_next):\n        logger.info(f\"Request: {request.method} {request.url}\")\n
      \       try:\n            response = await call_next(request)\n        except
      Exception as e:\n            logger.exception(\"Unhandled exception\")\n            raise
      e\n        logger.info(f\"Response: {response.status_code}\")\n        return
      response\n\n\nclass SecurityMiddleware(BaseHTTPMiddleware):\n    async def dispatch(self,
      request: Request, call_next: RequestResponseEndpoint) -> Response:\n        resp
      = await AgentOS.security_manager.authorization_processor.dispatch(request)\n
      \       if not resp:\n            return await call_next(request)\n        else:\n
      \           return resp\n\n\ndef main():\n    args = parse_args()\n    log_level_str
      = \"debug\" if args.debug else \"info\"\n    log_level = logging.DEBUG if args.debug
      else logging.INFO\n\n    _app = start_app(\n        lambda app: start_os(\n
      \           app,\n            load_resources(args.yaml_path),\n            args.machine,\n
      \           log_level,\n            replay_override=\"recordings\" if args.record
      else ...,\n        )\n    )\n\n    # Run the server\n    uvicorn.run(\n        _app,\n
      \       host=\"0.0.0.0\",\n        port=args.port,\n        log_level=log_level_str,\n
      \       reload=args.reload,\n    )\n\n\n# noinspection PyTypeChecker\ndef start_app(lifespan):\n
      \   _app = FastAPI(lifespan=lifespan)\n    _app.add_middleware(LoggingMiddleware)\n
      \   _app.add_middleware(SecurityMiddleware)\n    _app.add_middleware(ContextMiddleware)\n
      \   _app.add_middleware(\n        CORSMiddleware,\n        allow_origins=[\"*\"],\n
      \       allow_credentials=True,\n        allow_methods=[\"*\"],\n        allow_headers=[\"*\"],\n
      \   )\n    return _app\n\n\nif __name__ == \"__main__\":\n    main()\n"
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Length:
      - '2683'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:35:41 GMT
      ETag:
      - W/"0d39f91c63241515f00adc3ab8c9e43acb1e40d6d8116a7fec9850cf4c59c994"
      Expires:
      - Tue, 20 Feb 2024 21:40:41 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - HIT
      X-Cache-Hits:
      - '1'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - 4dd7d60ad3d6be56cec62f042bac680fa91472c0
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - 6506:6B68:5DC11D:704D6D:65D519AD
      X-Served-By:
      - cache-yvr1521-YVR
      X-Timer:
      - S1708464941.121946,VS0,VE397
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/k8_monitor/resources?ref=main
  response:
    content: '[{"name":"K8Manager.yaml","path":"examples/eidolon_examples/k8_monitor/resources/K8Manager.yaml","sha":"fa7c5a5d86730037cb9032e7defb9f574557dbe9","size":1189,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/k8_monitor/resources/K8Manager.yaml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/k8_monitor/resources/K8Manager.yaml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/fa7c5a5d86730037cb9032e7defb9f574557dbe9","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/eidolon_examples/k8_monitor/resources/K8Manager.yaml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/k8_monitor/resources/K8Manager.yaml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/fa7c5a5d86730037cb9032e7defb9f574557dbe9","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/k8_monitor/resources/K8Manager.yaml"}},{"name":"K8Worker.yaml","path":"examples/eidolon_examples/k8_monitor/resources/K8Worker.yaml","sha":"3770fe441d0a881865756229f97720d4ae6f7fe1","size":1083,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/k8_monitor/resources/K8Worker.yaml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/k8_monitor/resources/K8Worker.yaml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/3770fe441d0a881865756229f97720d4ae6f7fe1","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/eidolon_examples/k8_monitor/resources/K8Worker.yaml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/k8_monitor/resources/K8Worker.yaml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/3770fe441d0a881865756229f97720d4ae6f7fe1","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/k8_monitor/resources/K8Worker.yaml"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:35:41 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E581:276CC5:10383F:17A47C:65D51B2D
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4518'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '482'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/cpu/agent_call_history.py
  response:
    content: "from typing import Optional, List, AsyncIterator\n\nfrom pydantic import
      BaseModel\n\nfrom eidolon_ai_sdk.agent_os import AgentOS\n\n\nclass AgentCallHistory(BaseModel):\n
      \   parent_process_id: str\n    parent_thread_id: Optional[str]\n    machine:
      str\n    agent: str\n    remote_process_id: str\n    state: str\n    available_actions:
      List[str]\n\n    async def upsert(self):\n        query = {\n            \"parent_process_id\":
      self.parent_process_id,\n            \"parent_thread_id\": self.parent_thread_id,\n
      \           \"agent\": self.agent,\n            \"remote_process_id\": self.remote_process_id,\n
      \       }\n        await AgentOS.symbolic_memory.upsert_one(\"agent_logic_unit\",
      self.model_dump(), query)\n\n    @classmethod\n    async def get_agent_state(cls,
      parent_process_id: str, parent_thread_id: str):\n        query = {\n            \"parent_process_id\":
      parent_process_id,\n            \"parent_thread_id\": parent_thread_id,\n        }\n
      \       return [\n            AgentCallHistory.model_validate(o) async for o
      in AgentOS.symbolic_memory.find(\"agent_logic_unit\", query)\n        ]\n\n
      \   @classmethod\n    async def get_child_pids(cls):\n        return {\n            o[\"remote_process_id\"]:
      o[\"parent_process_id\"]\n            async for o in AgentOS.symbolic_memory.find(\n
      \               \"agent_logic_unit\", {}, projection={\"remote_process_id\":
      1, \"parent_process_id\": 1}\n            )\n        }\n\n    @classmethod\n
      \   async def get_children(cls, parent_process_id: str) -> AsyncIterator[str]:\n
      \       async for record in AgentOS.symbolic_memory.find(\n            \"agent_logic_unit\",
      {\"parent_process_id\": parent_process_id}, projection={\"remote_process_id\":
      1}\n        ):\n            yield record[\"remote_process_id\"]\n\n    @classmethod\n
      \   async def delete(cls, query):\n        return await AgentOS.symbolic_memory.delete(\"agent_logic_unit\",
      query)\n"
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Length:
      - '542'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:35:41 GMT
      ETag:
      - W/"4180f93ee8ec26b5b55e99d0e183c501ed698da60e0efc430822cb1c5fb279ce"
      Expires:
      - Tue, 20 Feb 2024 21:40:41 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - HIT
      X-Cache-Hits:
      - '1'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - 29404780d61ed8bebf6fe552eacc6d490cb5d99e
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - 74FC:6B68:5DC11D:704D6E:65D519AB
      X-Served-By:
      - cache-yvr1524-YVR
      X-Timer:
      - S1708464941.327605,VS0,VE338
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/cpu/agents_logic_unit.py
  response:
    content: "from pydantic import BaseModel\nfrom typing import List, Any, Dict,
      AsyncIterator\n\nfrom eidolon_ai_sdk.agent.client import Machine, Agent, AgentResponseIterator\nfrom
      eidolon_ai_sdk.cpu.agent_call_history import AgentCallHistory\nfrom eidolon_ai_sdk.cpu.call_context
      import CallContext\nfrom eidolon_ai_sdk.cpu.logic_unit import LogicUnit\nfrom
      eidolon_ai_sdk.io.events import StreamEvent\nfrom eidolon_ai_sdk.system.fn_handler
      import FnHandler\nfrom eidolon_ai_sdk.system.reference_model import Specable\nfrom
      eidolon_ai_sdk.util.logger import logger\nfrom eidolon_ai_sdk.util.schema_to_model
      import schema_to_model\n\n\nclass AgentsLogicUnitSpec(BaseModel):\n    tool_prefix:
      str = \"convo\"\n    agents: List[str]\n\n\nclass AgentsLogicUnit(Specable[AgentsLogicUnitSpec],
      LogicUnit):\n    _machine_schemas: Dict[str, dict]\n\n    def __init__(self,
      **kwargs):\n        super().__init__(**kwargs)\n        self._machine_schemas
      = {}\n\n    async def build_tools(self, call_context: CallContext) -> List[FnHandler]:\n
      \       tools = await self.build_program_tools(call_context)\n        call_history
      = await AgentCallHistory.get_agent_state(call_context.process_id, call_context.thread_id)\n
      \       for call in call_history:\n            for action in call.available_actions:\n
      \               context_ = await self.build_action_tool(\n                    call.machine,
      call.agent, action, call.remote_process_id, call_context\n                )\n
      \               if context_:\n                    tools.append(context_)\n\n
      \       return tools\n\n    async def clone_thread(self, old_context: CallContext,
      new_context: CallContext):\n        call_history = await AgentCallHistory.get_agent_state(old_context.process_id,
      old_context.thread_id)\n        for call in call_history:\n            await
      AgentCallHistory(\n                parent_process_id=new_context.process_id,\n
      \               parent_thread_id=new_context.thread_id,\n                machine=call.machine,\n
      \               agent=call.agent,\n                remote_process_id=call.remote_process_id,\n
      \               state=call.state,\n                available_actions=call.available_actions,\n
      \           ).upsert()\n\n    async def _get_schema(self, machine: str) -> dict:\n
      \       if machine not in self._machine_schemas:\n            self._machine_schemas[machine]
      = await Machine(machine=machine).get_schema()\n        return self._machine_schemas[machine]\n\n
      \   async def build_action_tool(\n        self, machine: str, agent: str, action:
      str, remote_process_id: str, call_context: CallContext\n    ):\n        agent_client
      = Agent.get(agent)\n        path = f\"/agents/{agent}/processes/{{process_id}}/actions/{action}\"\n
      \       machine_schema = await self._get_schema(machine)\n        endpoint_schema
      = machine_schema[\"paths\"][path][\"post\"]\n        try:\n            name
      = self._name(agent, action=action)\n            tool = self._build_tool_def(\n
      \               agent,\n                action,\n                name,\n                endpoint_schema,\n
      \               self._process_tool(agent_client, action, remote_process_id,
      call_context),\n            )\n            return tool\n        except ValueError:\n
      \           logger.warning(f\"unable to build tool {path}\", exc_info=True)\n\n
      \   async def build_program_tools(self, call_context: CallContext):\n        tools
      = []\n        for agent in self.spec.agents:\n            agent_client = Agent.get(agent)\n
      \           agent = agent_client.agent\n\n            prefix = f\"/agents/{agent}/programs/\"\n
      \           machine_schema = await self._get_schema(agent_client.machine)\n
      \           for path in filter(lambda p: p.startswith(prefix), machine_schema[\"paths\"].keys()):\n
      \               try:\n                    program = path.removeprefix(prefix)\n
      \                   name = self._name(agent, action=program)\n                    tool
      = self._build_tool_def(\n                        agent,\n                        program,\n
      \                       name,\n                        machine_schema[\"paths\"][path][\"post\"],\n
      \                       self._program_tool(agent_client, program, call_context),\n
      \                   )\n                    tools.append(tool)\n                except
      ValueError:\n                    logger.warning(f\"unable to build tool {path}\",
      exc_info=True)\n        return tools\n\n    def _build_tool_def(self, agent,
      operation, name, endpoint_schema, tool_call):\n        description = self._description(endpoint_schema,
      name)\n        model = self._body_model(endpoint_schema, name)\n        return
      FnHandler(\n            name=name,\n            description=lambda a, b: description,\n
      \           input_model_fn=lambda a, b: model,\n            output_model_fn=lambda
      a, b: Any,\n            fn=tool_call,\n            extra={\n                \"title\":
      agent,\n                \"sub_title\": operation,\n                \"agent_call\":
      True,\n            },\n        )\n\n    @staticmethod\n    def _body_model(endpoint_schema,
      name):\n        body = endpoint_schema.get(\"requestBody\")\n        if body
      and \"application/json\" not in body[\"content\"]:\n            raise ValueError(f\"Agent
      action at {name} does not support application/json\")\n        json_schema =
      body[\"content\"][\"application/json\"][\"schema\"] if body else dict(type=\"object\",
      properties={})\n        return schema_to_model(dict(type=\"object\", properties=dict(body=json_schema)),
      \"Input\")\n\n    @staticmethod\n    def _description(endpoint_schema, name):\n
      \       description = endpoint_schema.get(\"description\", \"\")\n        if
      not description:\n            logger.warning(f\"Agent program at {name} does
      not have a description. LLM may not use it properly\")\n        return description\n\n
      \   # needs to be under 64 characters\n    def _name(self, agent, action=\"\",
      process_id=\"\"):\n        agent = agent[:15]\n        process_id = process_id[:25]\n
      \       process_id = \"_\" + process_id if process_id else \"\"\n        action
      = action[:15]\n        action = \"_\" + action if action else \"\"\n        return
      self.spec.tool_prefix + \"_\" + agent + process_id + action\n\n    # todo, this
      needs to create history record before iterating\n    def _program_tool(self,
      agent: Agent, program: str, call_context: CallContext):\n        def fn(_self,
      body):\n            return RecordAgentResponseIterator(\n                agent.stream_program(program,
      body), call_context.process_id, call_context.thread_id\n            )\n\n        return
      fn\n\n    # todo, this needs to create history record before iterating\n    def
      _process_tool(self, agent: Agent, action: str, process_id: str, call_context:
      CallContext):\n        def fn(_self, body):\n            return RecordAgentResponseIterator(\n
      \               agent.stream_action(action, process_id, body), call_context.process_id,
      call_context.thread_id\n            )\n\n        return fn\n\n\n# todo, it would
      be nice to work this into the client automatically\nclass RecordAgentResponseIterator(AgentResponseIterator):\n
      \   parent_process_id: str\n    parent_thread_id: str\n\n    def __init__(self,
      data: AsyncIterator[StreamEvent], parent_process_id: str, parent_thread_id:
      str):\n        super().__init__(data)\n        self.parent_process_id = parent_process_id\n
      \       self.parent_thread_id = parent_thread_id\n\n    async def iteration_complete(self):\n
      \       call_data = AgentCallHistory(\n            parent_process_id=self.parent_process_id,\n
      \           parent_thread_id=self.parent_thread_id,\n            machine=self.machine,\n
      \           agent=self.agent,\n            remote_process_id=self.process_id,\n
      \           state=self.state,\n            available_actions=self.available_actions,\n
      \       )\n        await call_data.upsert()\n\n        return await super().iteration_complete()\n"
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Length:
      - '1960'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:35:41 GMT
      ETag:
      - W/"c1afa6e7b068919840215aa01a9454c025f24183ac91dae78f166ee2d0e66ecc"
      Expires:
      - Tue, 20 Feb 2024 21:40:41 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - HIT
      X-Cache-Hits:
      - '1'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - bc468003f6e3c874f19c5173babd972d958cd782
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - 55CC:570F:60C3E7:734F45:65D519AB
      X-Served-By:
      - cache-yvr1532-YVR
      X-Timer:
      - S1708464942.550470,VS0,VE134
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/cpu/agent_io.py
  response:
    content: "from __future__ import annotations\n\nimport asyncio\nimport uuid\nfrom
      abc import abstractmethod, ABC\nfrom io import IOBase\nfrom typing import List,
      Any, Dict, Literal\n\nfrom pydantic import BaseModel\n\nfrom eidolon_ai_sdk.agent_os
      import AgentOS\nfrom eidolon_ai_sdk.cpu.call_context import CallContext\nfrom
      eidolon_ai_sdk.cpu.llm_message import (\n    UserMessageText,\n    SystemMessage,\n
      \   UserMessageImageURL,\n    UserMessage,\n    LLMMessage,\n)\nfrom eidolon_ai_sdk.cpu.processing_unit
      import ProcessingUnit\nfrom eidolon_ai_sdk.memory.file_memory import FileMemory\n\n\nclass
      ResponseHandler(ABC):\n    @abstractmethod\n    async def handle(self, process_id:
      str, response: Dict[str, Any]):\n        pass\n\n\nclass CPUMessage(BaseModel):\n
      \   type: str\n    prompt: str\n    is_boot_prompt: bool = False\n\n\nclass
      UserTextCPUMessage(CPUMessage):\n    type: Literal[\"user\"] = \"user\"\n\n\nclass
      SystemCPUMessage(CPUMessage):\n    type: Literal[\"system\"] = \"system\"\n
      \   is_boot_prompt: bool = True\n\n\nclass ImageCPUMessage(CPUMessage):\n    type:
      Literal[\"image_url\"] = \"image\"\n    image: IOBase\n\n    class Config:\n
      \       arbitrary_types_allowed = True\n\n\nCPUMessageTypes = UserTextCPUMessage
      | SystemCPUMessage | ImageCPUMessage\n\n\nclass IOUnit(ProcessingUnit):\n    async
      def process_request(self, call_context: CallContext, prompts: List[CPUMessageTypes])
      -> List[LLMMessage]:\n        # convert the prompts to a list of strings\n        conv_messages
      = []\n        user_message_parts = []\n        for prompt in prompts:\n            if
      prompt.type == \"user\":\n                user_message_parts.append(UserMessageText(text=prompt.prompt))\n
      \           elif prompt.type == \"system\":\n                conv_messages.append(SystemMessage(content=prompt.prompt))\n
      \           elif prompt.type == \"image\":\n                file_memory = AgentOS.file_memory\n
      \               image_file: IOBase = prompt.image\n                # read the
      prompt.image file into memory\n                image_data = image_file.read()\n
      \               base_loc = f\"uploaded_images/{call_context.process_id}/{call_context.thread_id
      or 'main'}\"\n                tmp_path = f\"{base_loc}/{uuid.uuid4()}\"\n                await
      file_memory.mkdir(base_loc, exist_ok=True)\n                await file_memory.write_file(tmp_path,
      image_data)\n                user_message_parts.append(UserMessageImageURL(image_url=tmp_path))\n
      \           else:\n                raise ValueError(f\"Unknown prompt type {prompt.type}\")\n\n
      \       if len(user_message_parts) > 0:\n            conv_messages.append(UserMessage(content=user_message_parts))\n\n
      \       return conv_messages\n\n    async def process_response(self, call_context:
      CallContext, response: Any):\n        return response\n\n    @classmethod\n
      \   async def delete_process(cls, process_id: str):\n        memory: FileMemory
      = AgentOS.file_memory\n        found = await memory.glob(f\"uploaded_images/{process_id}/**/*\")\n
      \       await asyncio.gather(*[memory.delete_file(file) for file in found])\n"
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Length:
      - '1014'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:35:41 GMT
      ETag:
      - W/"97228c6761da4d4b54f3906cc070a10133a97de7dc65fd4110f25ef4e3b70a7a"
      Expires:
      - Tue, 20 Feb 2024 21:40:41 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - HIT
      X-Cache-Hits:
      - '1'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - 5667d63c1f8895f5a2e745fa26f42c6c24d2842d
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - BD60:3A9B2B:5CDDD:74B84:65D519B1
      X-Served-By:
      - cache-yvr1523-YVR
      X-Timer:
      - S1708464941.376583,VS0,VE344
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/cpu/conversation_memory_unit.py
  response:
    content: "import logging\nfrom typing import List\n\nfrom eidolon_ai_sdk.agent_os
      import AgentOS\nfrom eidolon_ai_sdk.cpu.call_context import CallContext\nfrom
      eidolon_ai_sdk.cpu.llm_message import LLMMessage\nfrom eidolon_ai_sdk.cpu.memory_unit
      import MemoryUnit, MemoryUnitConfig\nfrom eidolon_ai_sdk.system.reference_model
      import Specable\nfrom eidolon_ai_sdk.util.logger import logger\n\n\nclass RawMemoryUnit(MemoryUnit,
      Specable[MemoryUnitConfig]):\n    async def writeMessages(self, call_context:
      CallContext, messages: List[LLMMessage]):\n        conversationItems = [\n            {\n
      \               \"process_id\": call_context.process_id,\n                \"thread_id\":
      call_context.thread_id,\n                \"message\": message.model_dump(),\n
      \               \"is_boot_message\": False,\n            }\n            for
      message in messages\n        ]\n\n        logging.debug(str(messages))\n        logging.debug(conversationItems)\n\n
      \       await AgentOS.symbolic_memory.insert(\"conversation_memory\", conversationItems)\n\n
      \   async def writeBootMessages(self, call_context: CallContext, messages: List[LLMMessage]):\n
      \       conversationItems = [\n            {\n                \"process_id\":
      call_context.process_id,\n                \"thread_id\": call_context.thread_id,\n
      \               \"message\": message.model_dump(),\n                \"is_boot_message\":
      True,\n            }\n            for message in messages\n        ]\n\n        logging.debug(str(messages))\n
      \       logging.debug(conversationItems)\n\n        await AgentOS.symbolic_memory.insert(\"conversation_memory\",
      conversationItems)\n\n    async def getConversationHistory(self, call_context:
      CallContext) -> List[LLMMessage]:\n        existingMessages = []\n        async
      for message in AgentOS.symbolic_memory.find(\n            \"conversation_memory\",\n
      \           {\n                \"process_id\": call_context.process_id,\n                \"thread_id\":
      call_context.thread_id,\n                \"is_boot_message\": True,\n            },\n
      \           {\"is_boot_message\": 0},\n        ):\n            existingMessages.append(LLMMessage.from_dict(message[\"message\"]))\n
      \       async for message in AgentOS.symbolic_memory.find(\n            \"conversation_memory\",\n
      \           {\n                \"process_id\": call_context.process_id,\n                \"thread_id\":
      call_context.thread_id,\n                \"is_boot_message\": False,\n            },\n
      \           {\"is_boot_message\": 0},\n        ):\n            existingMessages.append(LLMMessage.from_dict(message[\"message\"]))\n\n
      \       logging.debug(\"existingMessages = \" + str(existingMessages))\n        return
      existingMessages\n\n    @classmethod\n    async def delete_process(cls, process_id:
      str):\n        await AgentOS.symbolic_memory.delete(\"conversation_memory\",
      {\"process_id\": process_id})\n        logger.info(f\"deleted conversational_memory
      relating to process {process_id}\")\n"
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Length:
      - '622'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:35:41 GMT
      ETag:
      - W/"15be90c270fb82fe00a76c68f030a37aec8a712a360f5a38c1dbd4b97039ec09"
      Expires:
      - Tue, 20 Feb 2024 21:40:41 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - HIT
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - b173bec38f6cf2014c654d79081a1016fb54ebfc
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - 612A:255865:B8321:10BCF9:65D519B1
      X-Served-By:
      - cache-bfi-krnt7300055-BFI
      X-Timer:
      - S1708464942.620087,VS0,VE108
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/cpu?ref=main
  response:
    content: '[{"name":"__init__.py","path":"sdk/tests/cpu/__init__.py","sha":"e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/cpu/__init__.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/cpu/__init__.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/cpu/__init__.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/cpu/__init__.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/cpu/__init__.py"}},{"name":"test_conversational_logic_unit.py","path":"sdk/tests/cpu/test_conversational_logic_unit.py","sha":"f7d88058343cf83f399850f340e581f5f47c8ed4","size":3204,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/cpu/test_conversational_logic_unit.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/cpu/test_conversational_logic_unit.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/f7d88058343cf83f399850f340e581f5f47c8ed4","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/cpu/test_conversational_logic_unit.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/cpu/test_conversational_logic_unit.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/f7d88058343cf83f399850f340e581f5f47c8ed4","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/cpu/test_conversational_logic_unit.py"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:35:41 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E58B:24F1D0:15EA41:1F5A07:65D51B2D
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4517'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '483'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/cpu/call_context.py
  response:
    content: "from typing import Optional\n\nfrom bson import ObjectId\nfrom pydantic
      import BaseModel\n\n\nclass CallContext(BaseModel):\n    process_id: str\n    thread_id:
      Optional[str] = None\n\n    def derive_call_context(self):\n        return CallContext(process_id=self.process_id,
      thread_id=str(ObjectId()))\n"
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Length:
      - '193'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:35:41 GMT
      ETag:
      - W/"4c080bab5d844cacaaa25b7e23d223d4b31422b573ba273935c3a86cb6a02c28"
      Expires:
      - Tue, 20 Feb 2024 21:40:41 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - HIT
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - dddd6a231e9aafa3653eae1061fd3745e4376832
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - E1A6:256179:B31AE:106B96:65D519B1
      X-Served-By:
      - cache-bfi-krnt7300045-BFI
      X-Timer:
      - S1708464942.620205,VS0,VE118
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/agent/retriever_agent/hyde_question_transformer.py
  response:
    content: "import uuid\nfrom jinja2 import Environment, StrictUndefined\nfrom pydantic
      import Field\nfrom typing import List\n\nfrom eidolon_ai_sdk.agent.retriever_agent.question_transformer
      import QuestionTransformerSpec, QuestionTransformer\nfrom eidolon_ai_sdk.cpu.agent_cpu
      import AgentCPU\nfrom eidolon_ai_sdk.cpu.agent_io import UserTextCPUMessage\nfrom
      eidolon_ai_sdk.system.reference_model import Specable, AnnotatedReference\n\n\nclass
      HydeQuestionTransformerSpec(QuestionTransformerSpec):\n    cpu: AnnotatedReference[AgentCPU]\n
      \   prompt: str = Field(\n        default=\"Please write a passage to answer
      the question \\nQuestion: {{question}}?\\nPassage:\",\n        description=\"The
      prompt to be used for the question transformer. This should be a template where
      the user question is the field {{question}}\",\n    )\n\n\nclass HydeQuestionTransformer(QuestionTransformer,
      Specable[HydeQuestionTransformerSpec]):\n    def __init__(self, **kwargs):\n
      \       super().__init__(**kwargs)\n        self.cpu = self.spec.cpu.instantiate()\n
      \       self.cpu.record_memory = False\n\n    async def transform(self, question:
      str) -> List[str]:\n        thread = await self.cpu.main_thread(str(uuid.uuid4()))\n
      \       env = Environment(undefined=StrictUndefined)\n        userPrompt = env.from_string(self.spec.prompt).render(question=question)\n
      \       response = await thread.run_request(prompts=[UserTextCPUMessage(prompt=userPrompt)],
      output_format=\"str\")\n\n        return [response]\n"
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Length:
      - '642'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:35:41 GMT
      ETag:
      - W/"455399aa19c39a974cb9ebc5e893a97faf08ebefbb705b44cc291718626c9644"
      Expires:
      - Tue, 20 Feb 2024 21:40:41 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - HIT
      X-Cache-Hits:
      - '1'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - 1d16e825eee67ef0802e2f5213ed9032bd5c075c
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - 2ABE:254203:B5C56:109679:65D519B1
      X-Served-By:
      - cache-bfi-kbfi7400116-BFI
      X-Timer:
      - S1708464942.619465,VS0,VE127
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/agent/retriever_agent/__init__.py
  response:
    content: ''
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:35:41 GMT
      ETag:
      - W/"938f66ede415ccb10764da47cd5f3cfc076c07b8791c708cfa8ec54982197c1f"
      Expires:
      - Tue, 20 Feb 2024 21:40:41 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - adfe91b2324af7fedd02527d47076a522510c6f2
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - 624C:256A3D:AED0B:102BE1:65D51B2B
      X-Served-By:
      - cache-bfi-kbfi7400051-BFI
      X-Timer:
      - S1708464942.620998,VS0,VE149
      X-XSS-Protection:
      - 1; mode=block
      transfer-encoding:
      - chunked
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/swifties/resources?ref=main
  response:
    content: '[{"name":"TaylorPR.yaml","path":"examples/eidolon_examples/swifties/resources/TaylorPR.yaml","sha":"67b9f3afc6e6ef8ee6f7b526f91cdaf67049de93","size":1802,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/swifties/resources/TaylorPR.yaml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/swifties/resources/TaylorPR.yaml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/67b9f3afc6e6ef8ee6f7b526f91cdaf67049de93","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/eidolon_examples/swifties/resources/TaylorPR.yaml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/swifties/resources/TaylorPR.yaml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/67b9f3afc6e6ef8ee6f7b526f91cdaf67049de93","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/swifties/resources/TaylorPR.yaml"}},{"name":"Topicality.yaml","path":"examples/eidolon_examples/swifties/resources/Topicality.yaml","sha":"005ca568a3868b462edae46643720d80fdfc51a1","size":2253,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/swifties/resources/Topicality.yaml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/swifties/resources/Topicality.yaml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/005ca568a3868b462edae46643720d80fdfc51a1","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/eidolon_examples/swifties/resources/Topicality.yaml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/swifties/resources/Topicality.yaml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/005ca568a3868b462edae46643720d80fdfc51a1","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/swifties/resources/Topicality.yaml"}},{"name":"TravisKelceExpert.yaml","path":"examples/eidolon_examples/swifties/resources/TravisKelceExpert.yaml","sha":"08e496b0fa56e01086ed54f2acdce87b78431493","size":1495,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/swifties/resources/TravisKelceExpert.yaml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/swifties/resources/TravisKelceExpert.yaml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/08e496b0fa56e01086ed54f2acdce87b78431493","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/eidolon_examples/swifties/resources/TravisKelceExpert.yaml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/swifties/resources/TravisKelceExpert.yaml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/08e496b0fa56e01086ed54f2acdce87b78431493","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/swifties/resources/TravisKelceExpert.yaml"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:35:41 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E58C:25923F:1DE49C:2753CD:65D51B2D
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4515'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '485'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/cpu/llm_message.py
  response:
    content: "from typing import List, Dict, Any, Literal\n\nfrom pydantic import
      BaseModel\n\n\n# Base LLMMessage class\n# todo, replace LLMMessage with LLMMessageTypes\nclass
      LLMMessage(BaseModel):\n    type: str\n\n    @classmethod\n    def from_dict(cls,
      data: Dict[str, Any]):\n        if data.get(\"type\") == \"system\":\n            return
      SystemMessage.model_validate(data)\n        elif data.get(\"type\") == \"user\":\n
      \           return UserMessage.model_validate(data)\n        elif data.get(\"type\")
      == \"assistant\":\n            return AssistantMessage.model_validate(data)\n
      \       elif data.get(\"type\") == \"tool\":\n            return ToolResponseMessage.model_validate(data)\n
      \       else:\n            raise ValueError(f\"Unknown message type {data.get('type')}\")\n\n\n#
      Derived SystemMessage class\nclass SystemMessage(LLMMessage):\n    type: str
      = \"system\"\n    content: str\n\n\n# Derived classes for different types of
      message content parts\nclass UserMessageText(BaseModel):\n    text: str\n    type:
      Literal[\"text\"] = \"text\"\n\n\nclass UserMessageImageURL(BaseModel):\n    image_url:
      str\n    type: Literal[\"image_url\"] = \"image_url\"\n\n\n# Derived UserMessage
      class\nclass UserMessage(LLMMessage):\n    type: str = \"user\"\n    content:
      List[UserMessageText | UserMessageImageURL]\n\n\n# ToolCall class\nclass ToolCall(BaseModel):\n
      \   tool_call_id: str\n    name: str\n    arguments: Dict[str, Any]\n\n\n# Derived
      AssistantMessage class\nclass AssistantMessage(LLMMessage):\n    type: str =
      \"assistant\"\n    content: Any\n    tool_calls: List[ToolCall]\n\n\nclass ToolResponseMessage(LLMMessage):\n
      \   type: str = \"tool\"\n    logic_unit_name: str\n    name: str\n    tool_call_id:
      str\n    result: Any\n\n\nLLMMessageTypes = SystemMessage | UserMessage | AssistantMessage
      | ToolResponseMessage\n"
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Length:
      - '567'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:35:41 GMT
      ETag:
      - W/"5a319a33ce9b9a906964361e55fe7009f9a89f8c0ef96d68d5b4e72b6543f038"
      Expires:
      - Tue, 20 Feb 2024 21:40:41 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - a504d893a4392054d6a775d63edc040ef1b804e4
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - 76AC:25375E:C48BB:11878C:65D51B2D
      X-Served-By:
      - cache-bfi-krnt7300033-BFI
      X-Timer:
      - S1708464942.692786,VS0,VE110
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/components/agent-input?ref=main
  response:
    content: '[{"name":"agent-input-form.tsx","path":"webui/components/agent-input/agent-input-form.tsx","sha":"000c558a81700ea040b5245f5f683d045b46ad0c","size":2774,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/components/agent-input/agent-input-form.tsx?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/webui/components/agent-input/agent-input-form.tsx","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/000c558a81700ea040b5245f5f683d045b46ad0c","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/webui/components/agent-input/agent-input-form.tsx","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/components/agent-input/agent-input-form.tsx?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/000c558a81700ea040b5245f5f683d045b46ad0c","html":"https://github.com/eidolon-ai/eidolon/blob/main/webui/components/agent-input/agent-input-form.tsx"}},{"name":"agent-process.tsx","path":"webui/components/agent-input/agent-process.tsx","sha":"f8daf1e3274f4fa0cd852bd7756ad303e81294d2","size":4350,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/components/agent-input/agent-process.tsx?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/webui/components/agent-input/agent-process.tsx","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/f8daf1e3274f4fa0cd852bd7756ad303e81294d2","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/webui/components/agent-input/agent-process.tsx","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/components/agent-input/agent-process.tsx?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/f8daf1e3274f4fa0cd852bd7756ad303e81294d2","html":"https://github.com/eidolon-ai/eidolon/blob/main/webui/components/agent-input/agent-process.tsx"}},{"name":"start-program-dialog.tsx","path":"webui/components/agent-input/start-program-dialog.tsx","sha":"b63101e7aecb2551147b67f1696dad75cbef2e10","size":3124,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/components/agent-input/start-program-dialog.tsx?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/webui/components/agent-input/start-program-dialog.tsx","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/b63101e7aecb2551147b67f1696dad75cbef2e10","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/webui/components/agent-input/start-program-dialog.tsx","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/components/agent-input/start-program-dialog.tsx?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/b63101e7aecb2551147b67f1696dad75cbef2e10","html":"https://github.com/eidolon-ai/eidolon/blob/main/webui/components/agent-input/start-program-dialog.tsx"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:35:41 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E590:256B07:15515B:1EC0B2:65D51B2D
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4516'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '484'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/getting_started/2_custom_agents/resources?ref=main
  response:
    content: '[{"name":"hello_world_agent.yaml","path":"examples/eidolon_examples/getting_started/2_custom_agents/resources/hello_world_agent.yaml","sha":"a71cecfdf538efbfeca08e51bc5c301a36813431","size":146,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/getting_started/2_custom_agents/resources/hello_world_agent.yaml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/getting_started/2_custom_agents/resources/hello_world_agent.yaml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/a71cecfdf538efbfeca08e51bc5c301a36813431","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/eidolon_examples/getting_started/2_custom_agents/resources/hello_world_agent.yaml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/getting_started/2_custom_agents/resources/hello_world_agent.yaml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/a71cecfdf538efbfeca08e51bc5c301a36813431","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/getting_started/2_custom_agents/resources/hello_world_agent.yaml"}},{"name":"qa_agent.yaml","path":"examples/eidolon_examples/getting_started/2_custom_agents/resources/qa_agent.yaml","sha":"1e3850fafb165743a6abab9d36600e07dea90f28","size":205,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/getting_started/2_custom_agents/resources/qa_agent.yaml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/getting_started/2_custom_agents/resources/qa_agent.yaml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/1e3850fafb165743a6abab9d36600e07dea90f28","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/examples/eidolon_examples/getting_started/2_custom_agents/resources/qa_agent.yaml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/examples/eidolon_examples/getting_started/2_custom_agents/resources/qa_agent.yaml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/1e3850fafb165743a6abab9d36600e07dea90f28","html":"https://github.com/eidolon-ai/eidolon/blob/main/examples/eidolon_examples/getting_started/2_custom_agents/resources/qa_agent.yaml"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:35:41 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E596:25592D:155580:1EC493:65D51B2D
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4514'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '486'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/util?ref=main
  response:
    content: '[{"name":"__init__.py","path":"sdk/tests/util/__init__.py","sha":"e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/util/__init__.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/util/__init__.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/util/__init__.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/util/__init__.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/util/__init__.py"}},{"name":"test_class_utils.py","path":"sdk/tests/util/test_class_utils.py","sha":"9c5cb872675010b34e7de81922e68c573bbf0a5b","size":2483,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/util/test_class_utils.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/util/test_class_utils.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/9c5cb872675010b34e7de81922e68c573bbf0a5b","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/util/test_class_utils.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/util/test_class_utils.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/9c5cb872675010b34e7de81922e68c573bbf0a5b","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/util/test_class_utils.py"}},{"name":"test_schema_to_model.py","path":"sdk/tests/util/test_schema_to_model.py","sha":"dfbb276bca6f4be2482e6c1458bfb138f5415f82","size":5635,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/util/test_schema_to_model.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/util/test_schema_to_model.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/dfbb276bca6f4be2482e6c1458bfb138f5415f82","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/util/test_schema_to_model.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/util/test_schema_to_model.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/dfbb276bca6f4be2482e6c1458bfb138f5415f82","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/util/test_schema_to_model.py"}},{"name":"test_str_utils.py","path":"sdk/tests/util/test_str_utils.py","sha":"9a6e36d70f76195bacb1ae5b5194b062cdbc787f","size":1656,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/util/test_str_utils.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/util/test_str_utils.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/9a6e36d70f76195bacb1ae5b5194b062cdbc787f","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/util/test_str_utils.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/util/test_str_utils.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/9a6e36d70f76195bacb1ae5b5194b062cdbc787f","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/util/test_str_utils.py"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:35:41 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E591:2518A1:1520D1:1E9067:65D51B2D
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4513'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '487'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/images?ref=main
  response:
    content: '[{"name":"cat.png","path":"sdk/tests/images/cat.png","sha":"b346e800748974075991481150e98004439576c4","size":320,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/images/cat.png?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/images/cat.png","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/b346e800748974075991481150e98004439576c4","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/images/cat.png","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/images/cat.png?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/b346e800748974075991481150e98004439576c4","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/images/cat.png"}},{"name":"dog.png","path":"sdk/tests/images/dog.png","sha":"de2459a31500df5f5c49cb86376f460070a5bb72","size":1888,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/images/dog.png?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/images/dog.png","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/de2459a31500df5f5c49cb86376f460070a5bb72","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/images/dog.png","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/images/dog.png?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/de2459a31500df5f5c49cb86376f460070a5bb72","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/images/dog.png"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:35:41 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E593:3A0B33:4CB9:64D9:65D51B2D
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4512'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '488'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/doc_manager/loaders?ref=main
  response:
    content: '[{"name":"__init__.py","path":"sdk/eidolon_ai_sdk/agent/doc_manager/loaders/__init__.py","sha":"e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/doc_manager/loaders/__init__.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/doc_manager/loaders/__init__.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/agent/doc_manager/loaders/__init__.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/doc_manager/loaders/__init__.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/doc_manager/loaders/__init__.py"}},{"name":"base_loader.py","path":"sdk/eidolon_ai_sdk/agent/doc_manager/loaders/base_loader.py","sha":"948d9e7d4066b33ad8e6d5a0567087fd7b86052a","size":905,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/doc_manager/loaders/base_loader.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/doc_manager/loaders/base_loader.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/948d9e7d4066b33ad8e6d5a0567087fd7b86052a","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/agent/doc_manager/loaders/base_loader.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/doc_manager/loaders/base_loader.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/948d9e7d4066b33ad8e6d5a0567087fd7b86052a","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/doc_manager/loaders/base_loader.py"}},{"name":"filesystem_loader.py","path":"sdk/eidolon_ai_sdk/agent/doc_manager/loaders/filesystem_loader.py","sha":"0f9aa2cce567563eb1010be123fe07b15d6ba8dd","size":3773,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/doc_manager/loaders/filesystem_loader.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/doc_manager/loaders/filesystem_loader.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/0f9aa2cce567563eb1010be123fe07b15d6ba8dd","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/agent/doc_manager/loaders/filesystem_loader.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/doc_manager/loaders/filesystem_loader.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/0f9aa2cce567563eb1010be123fe07b15d6ba8dd","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/doc_manager/loaders/filesystem_loader.py"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:35:41 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E581:276CC5:103845:17A481:65D51B2D
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4510'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '490'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/system?ref=main
  response:
    content: '[{"name":"__init__.py","path":"sdk/tests/system/__init__.py","sha":"e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/system/__init__.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/system/__init__.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/system/__init__.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/system/__init__.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/system/__init__.py"}},{"name":"cassettes","path":"sdk/tests/system/cassettes","sha":"2ab6297071363775242aae4d4a1514cb2123ed1c","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/system/cassettes?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/sdk/tests/system/cassettes","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/2ab6297071363775242aae4d4a1514cb2123ed1c","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/system/cassettes?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/2ab6297071363775242aae4d4a1514cb2123ed1c","html":"https://github.com/eidolon-ai/eidolon/tree/main/sdk/tests/system/cassettes"}},{"name":"test_code_agents.py","path":"sdk/tests/system/test_code_agents.py","sha":"16d8a97934a6d382c831e75e5f2382db23923cfe","size":13508,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/system/test_code_agents.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/system/test_code_agents.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/16d8a97934a6d382c831e75e5f2382db23923cfe","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/system/test_code_agents.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/system/test_code_agents.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/16d8a97934a6d382c831e75e5f2382db23923cfe","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/system/test_code_agents.py"}},{"name":"test_event_recording.py","path":"sdk/tests/system/test_event_recording.py","sha":"b4ceea5a224cefafe2187ee3454bd86655996a0d","size":3473,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/system/test_event_recording.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/system/test_event_recording.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/b4ceea5a224cefafe2187ee3454bd86655996a0d","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/system/test_event_recording.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/system/test_event_recording.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/b4ceea5a224cefafe2187ee3454bd86655996a0d","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/system/test_event_recording.py"}},{"name":"test_generic_agent.py","path":"sdk/tests/system/test_generic_agent.py","sha":"ba46ff1353a04cae4be9fd81e140dc054dbe6534","size":15585,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/system/test_generic_agent.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/system/test_generic_agent.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/ba46ff1353a04cae4be9fd81e140dc054dbe6534","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/system/test_generic_agent.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/system/test_generic_agent.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/ba46ff1353a04cae4be9fd81e140dc054dbe6534","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/system/test_generic_agent.py"}},{"name":"test_reference_model.py","path":"sdk/tests/system/test_reference_model.py","sha":"d18d095c4c2e664413fb1248de11b059295e6774","size":6098,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/system/test_reference_model.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/system/test_reference_model.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/d18d095c4c2e664413fb1248de11b059295e6774","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/system/test_reference_model.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/system/test_reference_model.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/d18d095c4c2e664413fb1248de11b059295e6774","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/system/test_reference_model.py"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:35:41 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E58E:2535CB:18F9D4:226989:65D51B2D
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4511'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '489'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/agent/doc_manager/__init__.py
  response:
    content: ''
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Length:
      - '0'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:35:41 GMT
      ETag:
      - W/"938f66ede415ccb10764da47cd5f3cfc076c07b8791c708cfa8ec54982197c1f"
      Expires:
      - Tue, 20 Feb 2024 21:40:41 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - HIT
      X-Cache-Hits:
      - '1'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - ac2c28d19be29b8484379f0da62124d553a219d4
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - 8320:3402:62C2EA:7533B2:65D519AF
      X-Served-By:
      - cache-yvr1523-YVR
      X-Timer:
      - S1708464942.693230,VS0,VE122
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/cpu/conversational_agent_cpu.py
  response:
    content: "from typing import List, Type, Dict, Any, Union, Literal, AsyncIterator\n\nfrom
      eidolon_ai_sdk.cpu.agent_cpu import AgentCPU, AgentCPUSpec, Thread, CPUException\nfrom
      eidolon_ai_sdk.cpu.agent_io import IOUnit, CPUMessageTypes\nfrom eidolon_ai_sdk.cpu.call_context
      import CallContext\nfrom eidolon_ai_sdk.cpu.llm_message import AssistantMessage,
      ToolResponseMessage, LLMMessage\nfrom eidolon_ai_sdk.cpu.llm_unit import LLMUnit\nfrom
      eidolon_ai_sdk.cpu.logic_unit import LogicUnit, LLMToolWrapper\nfrom eidolon_ai_sdk.cpu.memory_unit
      import MemoryUnit\nfrom eidolon_ai_sdk.cpu.processing_unit import ProcessingUnitLocator,
      PU_T\nfrom eidolon_ai_sdk.io.events import (\n    StreamEvent,\n    LLMToolCallRequestEvent,\n
      \   ToolCallStartEvent,\n)\nfrom eidolon_ai_sdk.system.reference_model import
      Reference, AnnotatedReference, Specable\nfrom eidolon_ai_sdk.util.logger import
      logger\nfrom eidolon_ai_sdk.util.stream_collector import StreamCollector, stream_manager,
      ManagedContextError, merge_streams\n\n\nclass ConversationalAgentCPUSpec(AgentCPUSpec):\n
      \   io_unit: AnnotatedReference[IOUnit]\n    memory_unit: AnnotatedReference[MemoryUnit]\n
      \   llm_unit: AnnotatedReference[LLMUnit]\n    logic_units: List[Reference[LogicUnit]]
      = []\n    record_conversation: bool = True\n    allow_tool_errors: bool = True\n\n\nclass
      ConversationalAgentCPU(AgentCPU, Specable[ConversationalAgentCPUSpec], ProcessingUnitLocator):\n
      \   io_unit: IOUnit\n    memory_unit: MemoryUnit\n    logic_units: List[LogicUnit]\n\n
      \   def __init__(self, spec: ConversationalAgentCPUSpec = None):\n        super().__init__(spec)\n
      \       kwargs = dict(processing_unit_locator=self)\n        self.io_unit =
      self.spec.io_unit.instantiate(**kwargs)\n        self.memory_unit = self.spec.memory_unit.instantiate(**kwargs)\n
      \       self.llm_unit = self.spec.llm_unit.instantiate(**kwargs)\n        self.logic_units
      = [logic_unit.instantiate(**kwargs) for logic_unit in self.spec.logic_units]\n
      \       self.record_memory = self.spec.record_conversation\n\n    def locate_unit(self,
      unit_type: Type[PU_T]) -> PU_T:\n        for unit in self.logic_units:\n            if
      isinstance(unit, unit_type):\n                return unit\n        if isinstance(self.io_unit,
      unit_type):\n            return self.io_unit\n\n        if isinstance(self.memory_unit,
      unit_type):\n            return self.memory_unit\n\n        if isinstance(self.llm_unit,
      unit_type):\n            return self.llm_unit\n\n        raise ValueError(f\"Could
      not locate {unit_type}\")\n\n    async def set_boot_messages(self, call_context:
      CallContext, boot_messages: List[CPUMessageTypes]):\n        conversation_messages
      = await self.io_unit.process_request(call_context, boot_messages)\n        await
      self.memory_unit.storeBootMessages(call_context, conversation_messages)\n\n
      \   async def schedule_request(\n        self,\n        call_context: CallContext,\n
      \       prompts: List[CPUMessageTypes],\n        output_format: Union[Literal[\"str\"],
      Dict[str, Any]] = \"str\",\n    ) -> AsyncIterator[StreamEvent]:\n        try:\n
      \           conversation = await self.memory_unit.getConversationHistory(call_context)\n
      \           conversation_messages = await self.io_unit.process_request(call_context,
      prompts)\n            if self.record_memory:\n                await self.memory_unit.storeMessages(call_context,
      conversation_messages)\n            conversation.extend(conversation_messages)\n
      \           async for event in self._llm_execution_cycle(call_context, output_format,
      conversation):\n                yield event\n        except CPUException as
      e:\n            raise e\n        except Exception as e:\n            raise CPUException(f\"error
      while processing request ({e.__class__.__name__})\") from e\n\n    async def
      _llm_execution_cycle(\n        self,\n        call_context: CallContext,\n        output_format:
      Union[Literal[\"str\"], Dict[str, Any]],\n        conversation: List[LLMMessage],\n
      \   ) -> AsyncIterator[StreamEvent]:\n        num_iterations = 0\n        while
      num_iterations < self.spec.max_num_function_calls:\n            tool_defs =
      await LLMToolWrapper.from_logic_units(call_context, self.logic_units)\n            tool_call_events
      = []\n            execute_llm_ = self.llm_unit.execute_llm(\n                call_context,
      conversation, [w.llm_message for w in tool_defs.values()], output_format\n            )\n
      \           # yield the events but capture the output, so it can be rolled into
      one event for memory.\n            stream_collector = StreamCollector(execute_llm_)\n
      \           async for event in stream_collector:\n                if event.is_root_and_type(LLMToolCallRequestEvent):\n
      \                   tool_call_events.append(event)\n                yield event\n
      \           if stream_collector.get_content():\n                logger.info(f\"LLM
      Response: {stream_collector.get_content()}\")\n\n            assistant_message
      = AssistantMessage(\n                type=\"assistant\",\n                content=stream_collector.get_content()
      or \"\",\n                tool_calls=[tce.tool_call for tce in tool_call_events],\n
      \           )\n            if self.record_memory:\n                await self.memory_unit.storeMessages(call_context,
      [assistant_message])\n            conversation.append(assistant_message)\n\n
      \           # process tool calls\n            async for e in merge_streams(\n
      \               [self._call_tool(call_context, tce, tool_defs, conversation)
      for tce in tool_call_events]\n            ):\n                yield e\n            if
      not tool_call_events:\n                return\n\n        raise CPUException(f\"exceeded
      maximum number of function calls ({self.spec.max_num_function_calls})\")\n\n
      \   async def _call_tool(\n        self,\n        call_context: CallContext,\n
      \       tool_call_event: LLMToolCallRequestEvent,\n        tool_defs,\n        conversation:
      List[LLMMessage],\n    ):\n        tc = tool_call_event.tool_call\n        logic_unit_wrapper
      = [\"NaN\"]\n\n        tool_def = tool_defs[tc.name]\n\n        def tool_event_stream():\n
      \           try:\n                logic_unit_wrapper[0] = tool_def.logic_unit.__class__.__name__\n
      \               return tool_def.execute(tool_call=tc)\n            except KeyError:\n
      \               raise ValueError(f\"Tool {tool_call_event.tool_call.name} not
      found. Available tools: {tool_defs.keys()}\")\n\n        tool_stream = stream_manager(\n
      \           tool_event_stream,\n            ToolCallStartEvent(\n                tool_call=tc,\n
      \               context_id=tc.tool_call_id,\n                title=tool_def.eidolon_handler.extra[\"title\"],\n
      \               sub_title=tool_def.eidolon_handler.extra.get(\"sub_title\",
      \"\"),\n                is_agent_call=tool_def.eidolon_handler.extra.get(\"agent_call\",
      False),\n            ),\n        )\n        try:\n            async for event
      in tool_stream:\n                yield event\n        except ManagedContextError:\n
      \           if self.spec.allow_tool_errors:\n                logger.warning(\"Error
      calling tool \" + tool_call_event.tool_call.name, exc_info=True)\n            else:\n
      \               raise\n\n        message = ToolResponseMessage(\n            logic_unit_name=logic_unit_wrapper[0],\n
      \           tool_call_id=tc.tool_call_id,\n            result=tool_stream.get_content()
      or \"\",\n            name=tc.name,\n        )\n        if self.record_memory:\n
      \           await self.memory_unit.storeMessages(call_context, [message])\n
      \       conversation.append(message)\n\n    async def clone_thread(self, call_context:
      CallContext) -> Thread:\n        new_context = call_context.derive_call_context()\n
      \       await self.io_unit.clone_thread(call_context, new_context)\n        await
      self.memory_unit.clone_thread(call_context, new_context)\n        for processor
      in self.logic_units:\n            await processor.clone_thread(call_context,
      new_context)\n\n        return Thread(call_context=new_context, cpu=self)\n"
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Length:
      - '1982'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:35:41 GMT
      ETag:
      - W/"b6ef065ea62fe909bf0bd1979c5b72dffd991a59572f60e634b586db4678cc7d"
      Expires:
      - Tue, 20 Feb 2024 21:40:41 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - HIT
      X-Cache-Hits:
      - '1'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - e635dbacf7768bd6e6b695b806875ac1b5908621
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - FFB2:48D4:5B9485:6E1DAC:65D519B1
      X-Served-By:
      - cache-yvr1534-YVR
      X-Timer:
      - S1708464942.688892,VS0,VE131
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/agent/retriever_agent/multi_question_transformer.py
  response:
    content: "import uuid\nfrom jinja2 import Environment, StrictUndefined\nfrom pydantic
      import Field, BaseModel\nfrom typing import List\n\nfrom eidolon_ai_sdk.agent.retriever_agent.question_transformer
      import QuestionTransformerSpec, QuestionTransformer\nfrom eidolon_ai_sdk.cpu.agent_cpu
      import AgentCPU\nfrom eidolon_ai_sdk.cpu.agent_io import UserTextCPUMessage\nfrom
      eidolon_ai_sdk.system.reference_model import Specable, AnnotatedReference\n\n\nclass
      MultiQuestionTransformerSpec(QuestionTransformerSpec):\n    cpu: AnnotatedReference[AgentCPU]\n
      \   keep_original: bool = Field(default=True, description=\"Whether to keep
      the original question in the output\")\n    number_to_generate: int = Field(default=3,
      description=\"The number of questions to generate\")\n    prompt: str = Field(\n
      \       default=\"\"\"You are an AI language model assistant. Your task is to
      generate {{number_to_generate}} different versions of the given user \n    question
      to retrieve relevant documents from a vector  database. By generating multiple
      perspectives on the user question, \n    your goal is to help the user overcome
      some of the limitations of distance-based similarity search. Provide these alternative
      \n    questions separated by newlines. Original question: {{question}}\"\"\",\n
      \       description=\"The prompt to be used for the question transformer. This
      should be a template where the user question is the field {{question}}\",\n
      \   )\n\n\nclass QuestionList(BaseModel):\n    questions: List[str]\n\n\nclass
      MultiQuestionTransformer(QuestionTransformer, Specable[MultiQuestionTransformerSpec]):\n
      \   def __init__(self, **kwargs):\n        super().__init__(**kwargs)\n        self.cpu
      = self.spec.cpu.instantiate()\n        self.cpu.record_memory = False\n\n    async
      def transform(self, question: str) -> List[str]:\n        thread = await self.cpu.main_thread(str(uuid.uuid4()))\n
      \       env = Environment(undefined=StrictUndefined)\n        userPrompt = env.from_string(self.spec.prompt).render(\n
      \           question=question, number_to_generate=self.spec.number_to_generate\n
      \       )\n        response = await thread.run_request(\n            prompts=[UserTextCPUMessage(prompt=userPrompt)],
      output_format=QuestionList.model_json_schema()\n        )\n\n        if self.spec.keep_original:\n
      \           return [question] + response[\"questions\"]\n        else:\n            return
      response.questions\n"
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Length:
      - '987'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:35:41 GMT
      ETag:
      - W/"364e031158888a9b114c7732ca6e512293535e047659f28b533edf0d3805b811"
      Expires:
      - Tue, 20 Feb 2024 21:40:41 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - 564a335932719171ad17585dbcc6aca31820712c
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - 57CC:256713:C17B7:11567C:65D51B2D
      X-Served-By:
      - cache-bfi-krnt7300055-BFI
      X-Timer:
      - S1708464942.759774,VS0,VE125
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/app/api/chat?ref=main
  response:
    content: '[{"name":"messages","path":"webui/app/api/chat/messages","sha":"f591408f685dcd29f7b650a7cf6ea7500dc13852","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/app/api/chat/messages?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/webui/app/api/chat/messages","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/f591408f685dcd29f7b650a7cf6ea7500dc13852","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/app/api/chat/messages?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/f591408f685dcd29f7b650a7cf6ea7500dc13852","html":"https://github.com/eidolon-ai/eidolon/tree/main/webui/app/api/chat/messages"}},{"name":"route.ts","path":"webui/app/api/chat/route.ts","sha":"50a4351009efec0a749a4d50dbdd488db651a5c4","size":5998,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/app/api/chat/route.ts?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/webui/app/api/chat/route.ts","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/50a4351009efec0a749a4d50dbdd488db651a5c4","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/webui/app/api/chat/route.ts","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/app/api/chat/route.ts?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/50a4351009efec0a749a4d50dbdd488db651a5c4","html":"https://github.com/eidolon-ai/eidolon/blob/main/webui/app/api/chat/route.ts"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:35:41 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E58B:24F1D0:15EA44:1F5A0C:65D51B2D
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4509'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '491'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/agent/__init__.py
  response:
    content: ''
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Length:
      - '0'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:35:41 GMT
      ETag:
      - W/"938f66ede415ccb10764da47cd5f3cfc076c07b8791c708cfa8ec54982197c1f"
      Expires:
      - Tue, 20 Feb 2024 21:40:41 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - HIT
      X-Cache-Hits:
      - '1'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - 15c1367b833ef66c77adae58975c7ab7b931c4df
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - 296E:30F250:17E7B:217F4:65D519B0
      X-Served-By:
      - cache-bfi-kbfi7400116-BFI
      X-Timer:
      - S1708464942.781422,VS0,VE135
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/builtins/logic_units/__init__.py
  response:
    content: ''
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:35:42 GMT
      ETag:
      - W/"938f66ede415ccb10764da47cd5f3cfc076c07b8791c708cfa8ec54982197c1f"
      Expires:
      - Tue, 20 Feb 2024 21:40:42 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - HIT
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - 522a478b244a78888012c046224c0e580844afee
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - 3F6A:30F250:17E7F:217F6:65D519B1
      X-Served-By:
      - cache-bfi-krnt7300045-BFI
      X-Timer:
      - S1708464942.900212,VS0,VE121
      X-XSS-Protection:
      - 1; mode=block
      transfer-encoding:
      - chunked
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/agent/retriever_agent/document_reranker.py
  response:
    content: "from abc import ABC, abstractmethod\nfrom pydantic import BaseModel,
      Field\nfrom typing import Dict, List\n\nfrom eidolon_ai_sdk.system.reference_model
      import Specable\n\n\nclass DocumentReranker(ABC):\n    @abstractmethod\n    async
      def rerank(self, documents: Dict[str, Dict[str, float]]) -> List[tuple[str,
      float]]:\n        pass\n\n\nclass SimpleSortedReranker(DocumentReranker):\n
      \   async def rerank(self, documents: Dict[str, Dict[str, float]]) -> List[tuple[str,
      float]]:\n        reranked_results = {}\n        for docs in documents.values():\n
      \           for doc, score in docs.items():\n                if doc not in reranked_results:\n
      \                   reranked_results[doc] = [score]\n                else:\n
      \                   reranked_results[doc].append(score)\n\n        # first,
      average the scores\n        ret = [(doc, sum(scores) / len(scores)) for doc,
      scores in reranked_results.items()]\n        # then, sort by score\n        ret
      = sorted(ret, key=lambda x: x[1], reverse=True)\n\n        return ret\n\n\nclass
      RAGFusionRerankerSpec(BaseModel):\n    k: int = Field(default=60, description=\"The
      rerank factor.\")\n\n\nclass RAGFusionReranker(DocumentReranker, Specable[RAGFusionRerankerSpec]):\n
      \   async def rerank(self, documents: Dict[str, Dict[str, float]]) -> List[tuple[str,
      float]]:\n        \"\"\"Rerank a list of documents.\n\n        Args:\n            documents:
      The map of documents to rerank. documents is a dictionary of query -> dictionary
      \"doc_id\" -> \"score\".\n\n        Returns:\n            The reranked documents
      as a list of tuples of (doc_id, score).\n        \"\"\"\n        fused_scores
      = {}\n        for query, docs in documents.items():\n            for rank, (doc_id,
      score) in enumerate(sorted(docs.items(), key=lambda x: x[1], reverse=True)):\n
      \               if doc_id not in fused_scores:\n                    fused_scores[doc_id]
      = 0\n                fused_scores[doc_id] += 1 / (rank + self.spec.k)\n\n        reranked_results
      = [\n            (doc, score) for doc, score in sorted(fused_scores.items(),
      key=lambda x: x[1], reverse=True)\n        ]\n\n        return reranked_results\n"
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Length:
      - '704'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:35:42 GMT
      ETag:
      - W/"7a77bc30ce6ae3e4d87814cfa6fe82d51ca927cf8b354869fd4b011d27fbc6d6"
      Expires:
      - Tue, 20 Feb 2024 21:40:42 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - HIT
      X-Cache-Hits:
      - '1'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - 4c1a52d5b8a9a5c5f21fe3b41dc18d31b814cae0
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - BD70:4BE5:6AB76:84110:65D519B2
      X-Served-By:
      - cache-yvr1534-YVR
      X-Timer:
      - S1708464942.691372,VS0,VE335
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/agent/test_retriever_agent.py
  response:
    content: "import pytest\n\nfrom eidolon_ai_sdk.agent.client import Agent\nfrom
      eidolon_ai_sdk.agent.retriever_agent.retriever_agent import RetrieverAgent\nfrom
      eidolon_ai_sdk.system.reference_model import Reference\nfrom eidolon_ai_sdk.system.resources.agent_resource
      import AgentResource\nfrom eidolon_ai_sdk.system.resources.resources_base import
      Metadata\nfrom eidolon_ai_sdk.util.class_utils import fqn\n\n\n@pytest.fixture(scope=\"module\")\ndef
      retriever(test_dir):\n    docs_loc = test_dir / \"agent\" / \"retriever_docs\"\n
      \   return AgentResource(\n        apiVersion=\"eidolon/v1\",\n        metadata=Metadata(name=\"RetrieverAgent\"),\n
      \       spec=Reference(\n            implementation=fqn(RetrieverAgent),\n            name=\"test_retriever_name\",\n
      \           description=\"A test retriever agent\",\n            loader_root_location=f\"file:///{docs_loc}\",\n
      \       ),\n    )\n\n\n@pytest.fixture(scope=\"module\")\nasync def agent(retriever,
      run_app):\n    async with run_app(retriever):\n        yield Agent.get(\"RetrieverAgent\")\n\n\nasync
      def test_list_files(agent):\n    found = await agent.program(\"list_files\")\n
      \   assert set(found.data) == {\"caz\", \"car\", \"doo\", \"dar\", \"daz\",
      \"coo\", \"ear\", \"eaz\", \"foo\", \"boo\", \"baz\", \"bar\", \"eoo\"}\n\n\nasync
      def test_search(agent):\n    found = await agent.program(\"search\", body={\"question\":
      \"foo\"})\n    assert found.data\n"
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Length:
      - '514'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:35:42 GMT
      ETag:
      - W/"1236366987d73e7b37ad8e1815fe0937ff32b9d3bd735807d19f772079ab5eb4"
      Expires:
      - Tue, 20 Feb 2024 21:40:42 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - 5ef746392d03cef0d1981bc2a5dd7b42c4dd11d1
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - 24BA:255865:B8FD2:10CE94:65D51B2B
      X-Served-By:
      - cache-bfi-krnt7300033-BFI
      X-Timer:
      - S1708464942.900150,VS0,VE138
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/agent/doc_manager/document_manager.py
  response:
    content: "import asyncio\nimport logging\nimport time\nfrom pydantic import BaseModel,
      Field\nfrom typing import List\n\nfrom eidolon_ai_sdk.agent.doc_manager.loaders.base_loader
      import DocumentLoader, FileInfo\nfrom eidolon_ai_sdk.agent.doc_manager.parsers.base_parser
      import DocumentParser\nfrom eidolon_ai_sdk.agent.doc_manager.transformer.document_transformer
      import DocumentTransformer\nfrom eidolon_ai_sdk.agent_os import AgentOS\nfrom
      eidolon_ai_sdk.system.reference_model import Specable, AnnotatedReference\n\n\nclass
      SearchResult(BaseModel):\n    \"\"\"\n    A search result is a snippet of the
      document that matched the query\n    \"\"\"\n\n    file_name: str = Field(description=\"The
      name of the file\")\n    document_snippet: str = Field(description=\"A snippet
      of the document that matched the query\")\n\n\nclass DocumentDirectory(BaseModel):\n
      \   \"\"\"\n    A package is a collection of python files.\n    \"\"\"\n\n    directory:
      str = Field(description=\"The name of the directory\")\n    files: List[str]
      = Field(description=\"The files that make up the package\")\n\n\nclass DocumentManagerSpec(BaseModel):\n
      \   name: str\n    recheck_frequency: int = Field(default=60, description=\"The
      number of seconds between checks.\")\n    loader: AnnotatedReference[DocumentLoader]\n
      \   parser: AnnotatedReference[DocumentParser]\n    splitter: AnnotatedReference[DocumentTransformer]\n\n\nclass
      DocumentManager(Specable[DocumentManagerSpec]):\n    last_reload = 0\n\n    def
      __init__(self, **kwargs):\n        super().__init__(**kwargs)\n        Specable.__init__(self,
      **kwargs)\n        self.loader = self.spec.loader.instantiate()\n        self.loader.name
      = self.spec.name\n        self.parser = self.spec.parser.instantiate()\n        self.splitter
      = self.spec.splitter.instantiate()\n        self.logger = logging.getLogger(\"eidolon\")\n
      \       self.collection_name = f\"doc_sync_{self.spec.name}\"\n\n    async def
      _addFile(self, file_info: FileInfo):\n        try:\n            parsedDocs =
      list(self.parser.parse(file_info.data))\n            docs = list(self.splitter.transform_documents(parsedDocs))\n
      \           await AgentOS.symbolic_memory.insert_one(\n                self.collection_name,\n
      \               {\n                    \"file_path\": file_info.path,\n                    \"data\":
      file_info.metadata,\n                    \"doc_ids\": [doc.id for doc in docs],\n
      \               },\n            )\n            if len(docs) == 0:\n                self.logger.warning(f\"File
      contained no text {file_info.path}\")\n                return\n            await
      AgentOS.similarity_memory.vector_store.add(f\"doc_contents_{self.spec.name}\",
      docs)\n            self.logger.info(f\"Added file {file_info.path}\")\n        except
      Exception as e:\n            self.logger.warning(f\"Failed to parse file {file_info.path}:
      {e}\")\n\n    async def _removeFile(self, path: str):\n        # get the doc
      ids for the file\n        file_info = await AgentOS.symbolic_memory.find_one(self.collection_name,
      {\"file_path\": path})\n        if file_info is not None:\n            doc_ids
      = file_info[\"doc_ids\"]\n            await AgentOS.similarity_memory.vector_store.delete(f\"doc_contents_{self.spec.name}\",
      doc_ids)\n            await AgentOS.symbolic_memory.delete(self.collection_name,
      {\"file_path\": path})\n\n    async def _replaceFile(self, file_info: FileInfo):\n
      \       await self._removeFile(file_info.path)\n        await self._addFile(file_info)\n\n
      \   async def list_files(self):\n        return self.loader.list_files()\n\n
      \   async def sync_docs(self, force: bool = False):\n        if force or self.last_reload
      + self.spec.recheck_frequency < time.time():\n            self.last_reload =
      time.time()\n            data = {}\n            async for file in AgentOS.symbolic_memory.find(self.collection_name,
      {}):\n                data[file[\"file_path\"]] = file[\"data\"]\n\n            self.logger.info(f\"Found
      {len(data)} files in symbolic memory\")\n\n            ret = await self.loader.get_changes(data)\n
      \           await asyncio.gather(\n                *[self._addFile(file_info)
      async for file_info in ret.added_files],\n                *[self._replaceFile(file_info)
      async for file_info in ret.modified_files],\n                *[self._removeFile(file_path)
      async for file_path in ret.removed_files],\n            )\n            self.last_reload
      = time.time()\n"
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Length:
      - '1294'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:35:42 GMT
      ETag:
      - W/"96bbce3507f0456004e5ea2f90488b9e40f545cba8d9d2eac725ef05f49f092c"
      Expires:
      - Tue, 20 Feb 2024 21:40:42 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - HIT
      X-Cache-Hits:
      - '1'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - 08b8c72e6ea8092daaf0520ed246282b96bf7caa
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - A41A:48D4:5B94A3:6E1DCD:65D519B0
      X-Served-By:
      - cache-yvr1521-YVR
      X-Timer:
      - S1708464942.728744,VS0,VE348
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/cpu/llm_unit.py
  response:
    content: "from abc import ABC, abstractmethod\nfrom pydantic import BaseModel,
      Field\nfrom typing import List, Any, Dict, Literal, Union, AsyncIterator\n\nfrom
      eidolon_ai_sdk.cpu.call_context import CallContext\nfrom eidolon_ai_sdk.cpu.llm_message
      import LLMMessage\nfrom eidolon_ai_sdk.cpu.processing_unit import ProcessingUnit\nfrom
      eidolon_ai_sdk.io.events import StreamEvent\n\nLLM_MAX_TOKENS = {\n    \"DEFAULT\":
      8192,\n    # OpenAI models: https://platform.openai.com/docs/models/overview\n
      \   # gpt-4\n    \"gpt-4-1106-preview\": 128000,\n    \"gpt-4\": 8192,\n    \"gpt-4-32k\":
      32768,\n    \"gpt-4-0613\": 8192,\n    \"gpt-4-32k-0613\": 32768,\n    \"gpt-4-0314\":
      8192,  # legacy\n    \"gpt-4-32k-0314\": 32768,  # legacy\n    # gpt-3.5\n    \"gpt-3.5-turbo-1106\":
      16385,\n    \"gpt-3.5-turbo\": 4096,\n    \"gpt-3.5-turbo-16k\": 16385,\n    \"gpt-3.5-turbo-0613\":
      4096,  # legacy\n    \"gpt-3.5-turbo-16k-0613\": 16385,  # legacy\n    \"gpt-3.5-turbo-0301\":
      4096,  # legacy\n}\n\n\nclass CompletionUsage(BaseModel):\n    completion_tokens:
      int\n    \"\"\"Number of tokens in the generated completion.\"\"\"\n\n    prompt_tokens:
      int\n    \"\"\"Number of tokens in the prompt.\"\"\"\n\n    total_tokens: int\n
      \   \"\"\"Total number of tokens used in the request (prompt + completion).\"\"\"\n\n\nclass
      LLMCallFunction(BaseModel):\n    name: str = Field(..., description=\"The name
      of the function to call.\")\n    description: str = Field(..., description=\"The
      description of the function to call.\")\n    parameters: Dict[str, object] =
      Field(..., description=\"The json schema for the function parameters.\")\n\n\nclass
      LLMUnit(ProcessingUnit, ABC):\n    def __init__(self, **kwargs):\n        super().__init__(**kwargs)\n\n
      \   @abstractmethod\n    async def execute_llm(\n        self,\n        call_context:
      CallContext,\n        messages: List[LLMMessage],\n        tools: List[LLMCallFunction],\n
      \       output_format: Union[Literal[\"str\"], Dict[str, Any]],\n    ) -> AsyncIterator[StreamEvent]:\n
      \       pass\n"
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Length:
      - '790'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:35:42 GMT
      ETag:
      - W/"2c363bf30375feceff464f9fc66bc19d992aa34e8a5eb0b95e9897bfe4936cb3"
      Expires:
      - Tue, 20 Feb 2024 21:40:42 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - HIT
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - df0732be4a130b7aa70a1b0b3381761b62d007da
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - B258:0FDE:5BD970:6E809A:65D519B0
      X-Served-By:
      - cache-yvr1524-YVR
      X-Timer:
      - S1708464942.732432,VS0,VE352
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/app/api/auth?ref=main
  response:
    content: '[{"name":"[...nextauth]","path":"webui/app/api/auth/[...nextauth]","sha":"9c0a213c1901c456a38bf0bcfef10871a38a7d50","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/app/api/auth/[...nextauth]?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/webui/app/api/auth/[...nextauth]","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/9c0a213c1901c456a38bf0bcfef10871a38a7d50","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/app/api/auth/[...nextauth]?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/9c0a213c1901c456a38bf0bcfef10871a38a7d50","html":"https://github.com/eidolon-ai/eidolon/tree/main/webui/app/api/auth/[...nextauth]"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:35:42 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E59A:253F79:165738:1FC6F2:65D51B2D
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4508'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '492'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/doc_manager/transformer?ref=main
  response:
    content: '[{"name":"__init__.py","path":"sdk/eidolon_ai_sdk/agent/doc_manager/transformer/__init__.py","sha":"e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/doc_manager/transformer/__init__.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/doc_manager/transformer/__init__.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/agent/doc_manager/transformer/__init__.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/doc_manager/transformer/__init__.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/doc_manager/transformer/__init__.py"}},{"name":"auto_transformer.py","path":"sdk/eidolon_ai_sdk/agent/doc_manager/transformer/auto_transformer.py","sha":"dd364cd99630de911faffbd5999c5e48c7e8070d","size":1398,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/doc_manager/transformer/auto_transformer.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/doc_manager/transformer/auto_transformer.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/dd364cd99630de911faffbd5999c5e48c7e8070d","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/agent/doc_manager/transformer/auto_transformer.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/doc_manager/transformer/auto_transformer.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/dd364cd99630de911faffbd5999c5e48c7e8070d","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/doc_manager/transformer/auto_transformer.py"}},{"name":"document_transformer.py","path":"sdk/eidolon_ai_sdk/agent/doc_manager/transformer/document_transformer.py","sha":"25ff8c41f9643ab56f8975c57a8553dc968502ed","size":4786,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/doc_manager/transformer/document_transformer.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/doc_manager/transformer/document_transformer.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/25ff8c41f9643ab56f8975c57a8553dc968502ed","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/agent/doc_manager/transformer/document_transformer.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/doc_manager/transformer/document_transformer.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/25ff8c41f9643ab56f8975c57a8553dc968502ed","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/doc_manager/transformer/document_transformer.py"}},{"name":"text_splitters.py","path":"sdk/eidolon_ai_sdk/agent/doc_manager/transformer/text_splitters.py","sha":"589a4ac37c6e5b5c6785f3fa1f7e3ab351981b22","size":43465,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/doc_manager/transformer/text_splitters.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/doc_manager/transformer/text_splitters.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/589a4ac37c6e5b5c6785f3fa1f7e3ab351981b22","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/agent/doc_manager/transformer/text_splitters.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/doc_manager/transformer/text_splitters.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/589a4ac37c6e5b5c6785f3fa1f7e3ab351981b22","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/doc_manager/transformer/text_splitters.py"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:35:42 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E599:2552AA:15DED8:1F4E73:65D51B2D
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4507'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '493'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/agent/retriever_agent/question_transformer.py
  response:
    content: "from typing import List\n\nfrom abc import ABC, abstractmethod\n\nfrom
      pydantic import BaseModel\n\nfrom eidolon_ai_sdk.system.reference_model import
      Specable\n\n\nclass QuestionTransformerSpec(BaseModel):\n    pass\n\n\nclass
      QuestionTransformer(ABC, Specable[QuestionTransformerSpec]):\n    @abstractmethod\n
      \   async def transform(self, question: str) -> List[str]:\n        \"\"\"Transform
      a question into a series of related question.\n\n        Args:\n            question:
      The question to be transformed.\n\n        Returns:\n            The transformed
      questions.\n        \"\"\"\n"
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Length:
      - '280'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:35:42 GMT
      ETag:
      - W/"7b79c9e130a7ea095f671b379197cf9a6d8f7ad935bd6409d2703ecbd4e37172"
      Expires:
      - Tue, 20 Feb 2024 21:40:42 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - HIT
      X-Cache-Hits:
      - '1'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - 58be7d2de54a22cbbf7e208e4a5ae4381bbda010
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - F06C:254BFB:B9C08:10D632:65D519B1
      X-Served-By:
      - cache-bfi-kbfi7400116-BFI
      X-Timer:
      - S1708464942.031239,VS0,VE114
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/agent/doc_manager?ref=main
  response:
    content: '[{"name":"__init__.py","path":"sdk/tests/agent/doc_manager/__init__.py","sha":"e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/agent/doc_manager/__init__.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/agent/doc_manager/__init__.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/agent/doc_manager/__init__.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/agent/doc_manager/__init__.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/agent/doc_manager/__init__.py"}},{"name":"parsers","path":"sdk/tests/agent/doc_manager/parsers","sha":"15856bcd3f8d9ff69f45d048037acd063c065ac2","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/agent/doc_manager/parsers?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/sdk/tests/agent/doc_manager/parsers","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/15856bcd3f8d9ff69f45d048037acd063c065ac2","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/agent/doc_manager/parsers?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/15856bcd3f8d9ff69f45d048037acd063c065ac2","html":"https://github.com/eidolon-ai/eidolon/tree/main/sdk/tests/agent/doc_manager/parsers"}},{"name":"transformer","path":"sdk/tests/agent/doc_manager/transformer","sha":"8b9cd1ac2e0f290738977fd6eccc9cf2737678f6","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/agent/doc_manager/transformer?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/sdk/tests/agent/doc_manager/transformer","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/8b9cd1ac2e0f290738977fd6eccc9cf2737678f6","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/agent/doc_manager/transformer?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/8b9cd1ac2e0f290738977fd6eccc9cf2737678f6","html":"https://github.com/eidolon-ai/eidolon/tree/main/sdk/tests/agent/doc_manager/transformer"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:35:42 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E58B:24F1D0:15EA50:1F5A1E:65D51B2D
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4506'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '494'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/agent/cassettes?ref=main
  response:
    content: '[{"name":"test_retriever_agent","path":"sdk/tests/agent/cassettes/test_retriever_agent","sha":"69f559788795adcf335334290518de66a4d7c64f","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/agent/cassettes/test_retriever_agent?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/sdk/tests/agent/cassettes/test_retriever_agent","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/69f559788795adcf335334290518de66a4d7c64f","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/agent/cassettes/test_retriever_agent?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/69f559788795adcf335334290518de66a4d7c64f","html":"https://github.com/eidolon-ai/eidolon/tree/main/sdk/tests/agent/cassettes/test_retriever_agent"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:35:42 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E581:276CC5:10384B:17A48B:65D51B2D
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4505'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '495'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/cpu/__init__.py
  response:
    content: ''
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:35:42 GMT
      ETag:
      - W/"938f66ede415ccb10764da47cd5f3cfc076c07b8791c708cfa8ec54982197c1f"
      Expires:
      - Tue, 20 Feb 2024 21:40:42 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - 5902c0c812ed25ea70f24fab5c090d139def705c
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - E150:25522C:AB296:FF19A:65D51B2D
      X-Served-By:
      - cache-bfi-krnt7300055-BFI
      X-Timer:
      - S1708464942.049824,VS0,VE128
      X-XSS-Protection:
      - 1; mode=block
      transfer-encoding:
      - chunked
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/agent/retriever_docs?ref=main
  response:
    content: '[{"name":"bar","path":"sdk/tests/agent/retriever_docs/bar","sha":"d7fd9445df0af66972e23ff3b6c05a8ef90ce55f","size":310,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/agent/retriever_docs/bar?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/agent/retriever_docs/bar","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/d7fd9445df0af66972e23ff3b6c05a8ef90ce55f","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/agent/retriever_docs/bar","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/agent/retriever_docs/bar?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/d7fd9445df0af66972e23ff3b6c05a8ef90ce55f","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/agent/retriever_docs/bar"}},{"name":"baz","path":"sdk/tests/agent/retriever_docs/baz","sha":"6256a12c95bdd0f48b6f38e553433f54747097e0","size":391,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/agent/retriever_docs/baz?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/agent/retriever_docs/baz","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/6256a12c95bdd0f48b6f38e553433f54747097e0","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/agent/retriever_docs/baz","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/agent/retriever_docs/baz?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/6256a12c95bdd0f48b6f38e553433f54747097e0","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/agent/retriever_docs/baz"}},{"name":"boo","path":"sdk/tests/agent/retriever_docs/boo","sha":"4b44fe6f7b06882acc5208e3cb6d19dec1135e95","size":335,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/agent/retriever_docs/boo?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/agent/retriever_docs/boo","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/4b44fe6f7b06882acc5208e3cb6d19dec1135e95","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/agent/retriever_docs/boo","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/agent/retriever_docs/boo?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/4b44fe6f7b06882acc5208e3cb6d19dec1135e95","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/agent/retriever_docs/boo"}},{"name":"car","path":"sdk/tests/agent/retriever_docs/car","sha":"d7fd9445df0af66972e23ff3b6c05a8ef90ce55f","size":310,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/agent/retriever_docs/car?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/agent/retriever_docs/car","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/d7fd9445df0af66972e23ff3b6c05a8ef90ce55f","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/agent/retriever_docs/car","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/agent/retriever_docs/car?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/d7fd9445df0af66972e23ff3b6c05a8ef90ce55f","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/agent/retriever_docs/car"}},{"name":"caz","path":"sdk/tests/agent/retriever_docs/caz","sha":"6256a12c95bdd0f48b6f38e553433f54747097e0","size":391,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/agent/retriever_docs/caz?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/agent/retriever_docs/caz","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/6256a12c95bdd0f48b6f38e553433f54747097e0","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/agent/retriever_docs/caz","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/agent/retriever_docs/caz?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/6256a12c95bdd0f48b6f38e553433f54747097e0","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/agent/retriever_docs/caz"}},{"name":"coo","path":"sdk/tests/agent/retriever_docs/coo","sha":"4b44fe6f7b06882acc5208e3cb6d19dec1135e95","size":335,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/agent/retriever_docs/coo?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/agent/retriever_docs/coo","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/4b44fe6f7b06882acc5208e3cb6d19dec1135e95","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/agent/retriever_docs/coo","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/agent/retriever_docs/coo?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/4b44fe6f7b06882acc5208e3cb6d19dec1135e95","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/agent/retriever_docs/coo"}},{"name":"dar","path":"sdk/tests/agent/retriever_docs/dar","sha":"d7fd9445df0af66972e23ff3b6c05a8ef90ce55f","size":310,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/agent/retriever_docs/dar?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/agent/retriever_docs/dar","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/d7fd9445df0af66972e23ff3b6c05a8ef90ce55f","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/agent/retriever_docs/dar","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/agent/retriever_docs/dar?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/d7fd9445df0af66972e23ff3b6c05a8ef90ce55f","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/agent/retriever_docs/dar"}},{"name":"daz","path":"sdk/tests/agent/retriever_docs/daz","sha":"6256a12c95bdd0f48b6f38e553433f54747097e0","size":391,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/agent/retriever_docs/daz?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/agent/retriever_docs/daz","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/6256a12c95bdd0f48b6f38e553433f54747097e0","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/agent/retriever_docs/daz","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/agent/retriever_docs/daz?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/6256a12c95bdd0f48b6f38e553433f54747097e0","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/agent/retriever_docs/daz"}},{"name":"doo","path":"sdk/tests/agent/retriever_docs/doo","sha":"4b44fe6f7b06882acc5208e3cb6d19dec1135e95","size":335,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/agent/retriever_docs/doo?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/agent/retriever_docs/doo","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/4b44fe6f7b06882acc5208e3cb6d19dec1135e95","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/agent/retriever_docs/doo","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/agent/retriever_docs/doo?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/4b44fe6f7b06882acc5208e3cb6d19dec1135e95","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/agent/retriever_docs/doo"}},{"name":"ear","path":"sdk/tests/agent/retriever_docs/ear","sha":"d7fd9445df0af66972e23ff3b6c05a8ef90ce55f","size":310,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/agent/retriever_docs/ear?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/agent/retriever_docs/ear","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/d7fd9445df0af66972e23ff3b6c05a8ef90ce55f","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/agent/retriever_docs/ear","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/agent/retriever_docs/ear?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/d7fd9445df0af66972e23ff3b6c05a8ef90ce55f","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/agent/retriever_docs/ear"}},{"name":"eaz","path":"sdk/tests/agent/retriever_docs/eaz","sha":"6256a12c95bdd0f48b6f38e553433f54747097e0","size":391,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/agent/retriever_docs/eaz?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/agent/retriever_docs/eaz","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/6256a12c95bdd0f48b6f38e553433f54747097e0","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/agent/retriever_docs/eaz","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/agent/retriever_docs/eaz?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/6256a12c95bdd0f48b6f38e553433f54747097e0","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/agent/retriever_docs/eaz"}},{"name":"eoo","path":"sdk/tests/agent/retriever_docs/eoo","sha":"4b44fe6f7b06882acc5208e3cb6d19dec1135e95","size":335,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/agent/retriever_docs/eoo?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/agent/retriever_docs/eoo","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/4b44fe6f7b06882acc5208e3cb6d19dec1135e95","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/agent/retriever_docs/eoo","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/agent/retriever_docs/eoo?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/4b44fe6f7b06882acc5208e3cb6d19dec1135e95","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/agent/retriever_docs/eoo"}},{"name":"foo","path":"sdk/tests/agent/retriever_docs/foo","sha":"4b44fe6f7b06882acc5208e3cb6d19dec1135e95","size":335,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/agent/retriever_docs/foo?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/agent/retriever_docs/foo","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/4b44fe6f7b06882acc5208e3cb6d19dec1135e95","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/agent/retriever_docs/foo","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/agent/retriever_docs/foo?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/4b44fe6f7b06882acc5208e3cb6d19dec1135e95","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/agent/retriever_docs/foo"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:35:42 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E596:25592D:155587:1EC49B:65D51B2D
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4504'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '496'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/builtins/logic_units/web_search.py
  response:
    content: "import os\nfrom contextlib import asynccontextmanager\nfrom typing import
      List, Optional\n\n# from aiohttp import ClientSession\nfrom bs4 import BeautifulSoup\nfrom
      httpx import AsyncClient, Timeout\nfrom jinja2 import Environment, StrictUndefined\nfrom
      pydantic import BaseModel, Field\n\nfrom eidolon_ai_sdk.cpu.logic_unit import
      LogicUnit, llm_function\nfrom eidolon_ai_sdk.system.reference_model import Specable\nfrom
      eidolon_ai_sdk.util.logger import logger\n\n\nclass SearchResult(BaseModel):\n
      \   url: str\n    title: str\n    description: str\n\n\n# Requires custom search
      engine + token setup in google project. See more at https://developers.google.com/custom-search/v1/reference/rest/v1/cse/list\nclass
      WebSearchConfig(BaseModel):\n    cse_id: str = Field(None, desctiption=\"Google
      Custom Search Engine Id.\")\n    cse_token: str = Field(None, desctiption=\"Google
      Project dev token, must have search permissions.\")\n    summarizer: Optional[str]
      = \"BeautifulSoup\"\n\n\nclass WebSearch(LogicUnit, Specable[WebSearchConfig]):\n
      \   def __init__(self, **kwargs):\n        LogicUnit.__init__(self, **kwargs)\n
      \       Specable.__init__(self, **kwargs)\n        self.spec.cse_id = self.spec.cse_id
      or os.environ[\"CSE_ID\"]\n        self.spec.cse_token = self.spec.cse_token
      or os.environ[\"CSE_TOKEN\"]\n        self.jinja_env = Environment(undefined=StrictUndefined)\n
      \       if not self.spec.cse_id or not self.spec.cse_token:\n            raise
      ValueError(\"missing required cse_id or cse_token\")\n\n    @asynccontextmanager\n
      \   async def _get(self, **kwargs):\n        async with AsyncClient(timeout=Timeout(5.0,
      read=600.0)) as client:\n            yield await client.get(**kwargs)\n\n    @llm_function()\n
      \   async def go_to_url(self, url: str) -> str:\n        \"\"\"\n        Retrieve
      the html document from a given webpage\n        :param url: the url to retrieve.\n
      \       :return: the html document.\n        \"\"\"\n        async with self._get(url=url)
      as resp:\n            text = resp.text\n            if not resp.is_success:\n
      \               logger.warning(f\"Request to url '{url}' return {resp.status_code}\")\n
      \               return text\n            if self.spec.summarizer == \"BeautifulSoup\":\n
      \               soup = BeautifulSoup(text, \"lxml\")\n                return
      soup.get_text(separator=\"\\n\", strip=True)\n            else:\n                raise
      ValueError(f\"Summarizer {self.spec.summarizer} not supported\")\n\n    @llm_function()\n
      \   async def search(\n        self,\n        term: str,\n        num_results:
      int = 10,\n        lang: str = \"en\",\n    ) -> List[SearchResult]:\n        \"\"\"\n
      \       Search google and get the results. Cannot return more than 100 results\n
      \       :param term: the search query\n        :param num_results: the number
      of results to return (default 10, max 100)\n        :param lang: the language
      to search in (default en)\n        :return: A list of SearchResults including
      url, title, and description\n        \"\"\"\n        return [r async for r in
      self._search_results(term, num_results, lang)]\n\n    async def _search_results(self,
      term, num_results, lang):\n        if num_results > 100:\n            raise
      ValueError(\"Cannot return more than 100 results\")\n        escaped_term =
      term.replace(\" \", \"+\")\n        resp = await self._req(escaped_term, num_results,
      lang)\n        if not resp[\"items\"]:\n            raise RuntimeError(\"Error
      retrieving results\")\n        for item in resp[\"items\"]:\n            yield
      SearchResult(url=item[\"link\"], title=item[\"title\"], description=item[\"snippet\"])\n\n
      \   async def _req(self, term, results, lang):\n        async with self._get(\n
      \           url=\"https://customsearch.googleapis.com/customsearch/v1\",\n            params={\n
      \               \"q\": term,\n                \"num\": results,  # Prevents
      multiple requests\n                \"hl\": lang,\n                \"cx\": self.spec.cse_id,\n
      \               \"key\": self.spec.cse_token,\n            },\n        ) as
      resp:\n            resp.raise_for_status()\n            return resp.json()\n"
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Length:
      - '1459'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:35:42 GMT
      ETag:
      - W/"9f071e42117b0e3ef774aca815931c91ad4b4a4f67ef02f2dc765c902160d996"
      Expires:
      - Tue, 20 Feb 2024 21:40:42 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - HIT
      X-Cache-Hits:
      - '1'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - 74c6f21779ee387bcaa82cf0e22b095c6b7a65cd
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - 09F4:0F48:5950D0:6BC108:65D519B0
      X-Served-By:
      - cache-yvr1523-YVR
      X-Timer:
      - S1708464942.054549,VS0,VE129
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/cpu/test_conversational_logic_unit.py
  response:
    content: "from contextlib import contextmanager\nfrom typing import Annotated\n\nimport
      pytest\nfrom fastapi import Body\nfrom pydantic import BaseModel\n\nfrom eidolon_ai_sdk.agent.agent
      import register_program, register_action, AgentState\nfrom eidolon_ai_sdk.agent_os
      import AgentOS\nfrom eidolon_ai_sdk.cpu.agents_logic_unit import (\n    AgentsLogicUnit,\n
      \   AgentsLogicUnitSpec,\n)\nfrom eidolon_ai_sdk.cpu.agent_call_history import
      AgentCallHistory\nfrom eidolon_ai_sdk.cpu.call_context import CallContext\nfrom
      eidolon_ai_sdk.io.events import SuccessEvent\n\n\nclass FooModel(BaseModel):\n
      \   foo: str\n    bar: dict\n\n\nclass Foo:\n    @register_program()\n    async
      def init(self, name: Annotated[str, Body(embed=True)]):\n        \"\"\"\n        init
      docs\n        \"\"\"\n        return AgentState(name=\"active\", data=\"initialized\")\n\n
      \   @register_action(\"active\")\n    async def progress_active(self, name:
      Annotated[str, Body()]) -> str:\n        pass\n\n    @register_action(\"idle\")\n
      \   async def progress_idle(self, name: FooModel) -> FooModel:\n        pass\n\n\nclass
      Bar:\n    @register_program()\n    async def init(self):\n        pass\n\n\n@pytest.fixture(scope=\"module\")\nasync
      def server(run_app):\n    async with run_app(Foo, Bar) as ra:\n        yield
      ra\n\n\n@pytest.fixture(scope=\"function\")\ndef conversational_logic_unit(server):\n
      \   @contextmanager\n    def fn(*agents):\n        unit = AgentsLogicUnit(\n
      \           spec=AgentsLogicUnitSpec(\n                tool_prefix=\"convo\",\n
      \               agents=[a.__name__ for a in agents],\n            ),\n            processing_unit_locator=None,\n
      \       )\n        yield unit\n\n    return fn\n\n\n@pytest.mark.asyncio\nasync
      def test_can_build_tools(conversational_logic_unit):\n    with conversational_logic_unit(Foo)
      as clu:\n        tools = await clu.build_tools(CallContext(process_id=\"pid\"))\n
      \       assert len(tools) == 1\n\n\n@pytest.mark.asyncio\nasync def test_builds_tools_from_other_messages(conversational_logic_unit):\n
      \   with conversational_logic_unit(Foo) as clu:\n        await AgentCallHistory(\n
      \           parent_process_id=\"parent_pid\",\n            parent_thread_id=None,\n
      \           machine=AgentOS.current_machine_url(),\n            agent=\"Foo\",\n
      \           remote_process_id=\"pid\",\n            state=\"idle\",\n            available_actions=[\"progress_active\",
      \"progress_idle\"],\n        ).upsert()\n        tools = await clu.build_tools(CallContext(process_id=\"parent_pid\"))\n
      \       assert len(tools) == 3\n\n\nasync def test_no_body(conversational_logic_unit):\n
      \   with conversational_logic_unit(Bar) as clu:\n        tools = await clu.build_tools(CallContext(process_id=\"not_pid\"))\n
      \       assert len(tools) == 1\n\n\nasync def test_docs(conversational_logic_unit):\n
      \   with conversational_logic_unit(Foo) as clu:\n        tools = await clu.build_tools(CallContext(process_id=\"parent_pid\"))\n
      \       assert tools[0].description(None, None) == \"init docs\"\n\n\nasync
      def test_multiple_calls(conversational_logic_unit):\n    with conversational_logic_unit(Foo)
      as clu:\n        for _ in range(3):\n            tools = await clu.build_tools(CallContext(process_id=\"parent_pid\"))\n
      \           output = {type(e) async for e in tools[0].fn(clu, body=dict(name=\"foo\"))}\n
      \           assert SuccessEvent in output\n"
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Length:
      - '979'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:35:42 GMT
      ETag:
      - W/"c673d084258874a1d2c94af65b81d32fe54abbab7d3d9582e18ce1124d18f716"
      Expires:
      - Tue, 20 Feb 2024 21:40:42 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - HIT
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - feb14c4bccd8d46be77c5d7ddb7ecc3801b863f0
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - FFB2:257E5B:B7763:10B15A:65D519B1
      X-Served-By:
      - cache-bfi-krnt7300045-BFI
      X-Timer:
      - S1708464942.100288,VS0,VE106
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/doc_manager/parsers?ref=main
  response:
    content: '[{"name":"__init__.py","path":"sdk/eidolon_ai_sdk/agent/doc_manager/parsers/__init__.py","sha":"e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/doc_manager/parsers/__init__.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/doc_manager/parsers/__init__.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/agent/doc_manager/parsers/__init__.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/doc_manager/parsers/__init__.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/doc_manager/parsers/__init__.py"}},{"name":"auto_parser.py","path":"sdk/eidolon_ai_sdk/agent/doc_manager/parsers/auto_parser.py","sha":"42f3ef0c7905bc6b7b9a595638d794286348ef7a","size":2787,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/doc_manager/parsers/auto_parser.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/doc_manager/parsers/auto_parser.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/42f3ef0c7905bc6b7b9a595638d794286348ef7a","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/agent/doc_manager/parsers/auto_parser.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/doc_manager/parsers/auto_parser.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/42f3ef0c7905bc6b7b9a595638d794286348ef7a","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/doc_manager/parsers/auto_parser.py"}},{"name":"base_parser.py","path":"sdk/eidolon_ai_sdk/agent/doc_manager/parsers/base_parser.py","sha":"496fe0b02ab386f347fb881bb202c35725842317","size":4510,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/doc_manager/parsers/base_parser.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/doc_manager/parsers/base_parser.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/496fe0b02ab386f347fb881bb202c35725842317","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/agent/doc_manager/parsers/base_parser.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/doc_manager/parsers/base_parser.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/496fe0b02ab386f347fb881bb202c35725842317","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/doc_manager/parsers/base_parser.py"}},{"name":"code_ast_parsers","path":"sdk/eidolon_ai_sdk/agent/doc_manager/parsers/code_ast_parsers","sha":"2e73dc3275e312e092e13312299317f776966859","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/doc_manager/parsers/code_ast_parsers?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/sdk/eidolon_ai_sdk/agent/doc_manager/parsers/code_ast_parsers","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/2e73dc3275e312e092e13312299317f776966859","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/doc_manager/parsers/code_ast_parsers?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/2e73dc3275e312e092e13312299317f776966859","html":"https://github.com/eidolon-ai/eidolon/tree/main/sdk/eidolon_ai_sdk/agent/doc_manager/parsers/code_ast_parsers"}},{"name":"ms_word_parser.py","path":"sdk/eidolon_ai_sdk/agent/doc_manager/parsers/ms_word_parser.py","sha":"606dfa4e8983b9db76b53b9c06ca789dc4538c4f","size":1328,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/doc_manager/parsers/ms_word_parser.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/doc_manager/parsers/ms_word_parser.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/606dfa4e8983b9db76b53b9c06ca789dc4538c4f","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/agent/doc_manager/parsers/ms_word_parser.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/doc_manager/parsers/ms_word_parser.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/606dfa4e8983b9db76b53b9c06ca789dc4538c4f","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/doc_manager/parsers/ms_word_parser.py"}},{"name":"pdf_parsers.py","path":"sdk/eidolon_ai_sdk/agent/doc_manager/parsers/pdf_parsers.py","sha":"7ccb1fd98567ecdcefe9c730a9cb6b7c80ec1879","size":3356,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/doc_manager/parsers/pdf_parsers.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/doc_manager/parsers/pdf_parsers.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/7ccb1fd98567ecdcefe9c730a9cb6b7c80ec1879","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/agent/doc_manager/parsers/pdf_parsers.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/doc_manager/parsers/pdf_parsers.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/7ccb1fd98567ecdcefe9c730a9cb6b7c80ec1879","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/doc_manager/parsers/pdf_parsers.py"}},{"name":"text_parsers.py","path":"sdk/eidolon_ai_sdk/agent/doc_manager/parsers/text_parsers.py","sha":"0b10b2a24b0bd626bc224a57ef66cddee2e5dece","size":1400,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/doc_manager/parsers/text_parsers.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/doc_manager/parsers/text_parsers.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/0b10b2a24b0bd626bc224a57ef66cddee2e5dece","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/agent/doc_manager/parsers/text_parsers.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/doc_manager/parsers/text_parsers.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/0b10b2a24b0bd626bc224a57ef66cddee2e5dece","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/doc_manager/parsers/text_parsers.py"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:35:42 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E59B:2537C8:175537:20C511:65D51B2E
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4502'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '498'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/app/api/chat/messages?ref=main
  response:
    content: '[{"name":"route.ts","path":"webui/app/api/chat/messages/route.ts","sha":"16b47860356e5005e70f8a77609db4cd400646f0","size":2120,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/app/api/chat/messages/route.ts?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/webui/app/api/chat/messages/route.ts","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/16b47860356e5005e70f8a77609db4cd400646f0","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/webui/app/api/chat/messages/route.ts","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/app/api/chat/messages/route.ts?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/16b47860356e5005e70f8a77609db4cd400646f0","html":"https://github.com/eidolon-ai/eidolon/blob/main/webui/app/api/chat/messages/route.ts"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:35:42 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E593:3A0B33:4CC0:64E2:65D51B2D
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4503'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '497'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/cpu/logic_unit.py
  response:
    content: "from __future__ import annotations\n\nimport logging\nimport typing\nfrom
      abc import ABC\nfrom dataclasses import dataclass\nfrom pydantic import BaseModel,
      TypeAdapter\nfrom typing import Dict, List, AsyncIterator, Coroutine\n\nfrom
      eidolon_ai_sdk.cpu.call_context import CallContext\nfrom eidolon_ai_sdk.cpu.llm_message
      import ToolCall\nfrom eidolon_ai_sdk.cpu.llm_unit import LLMCallFunction\nfrom
      eidolon_ai_sdk.cpu.processing_unit import ProcessingUnit\nfrom eidolon_ai_sdk.io.events
      import SuccessEvent, ObjectOutputEvent, ErrorEvent, BaseStreamEvent, StringOutputEvent\nfrom
      eidolon_ai_sdk.system.fn_handler import register_handler, FnHandler, get_handlers\nfrom
      eidolon_ai_sdk.util.logger import logger\n\n\n@dataclass\nclass LLMToolWrapper:\n
      \   logic_unit: LogicUnit\n    llm_message: LLMCallFunction\n    eidolon_handler:
      FnHandler\n    input_model: typing.Type[BaseModel]\n\n    async def execute(self,
      tool_call: ToolCall) -> AsyncIterator[BaseStreamEvent]:\n        logger.info(\"calling
      tool \" + self.eidolon_handler.name)\n        logger.debug(\"args: \" + str(tool_call.arguments)
      + \" | fn: \" + str(self.eidolon_handler.fn))\n        try:\n            # if
      this is a sync tool call just call execute, if it is not we need to store the
      state of the conversation and call in memory\n            input_model = self.eidolon_handler.input_model_fn(self.logic_unit,
      self.eidolon_handler)\n            result = self.eidolon_handler.fn(self.logic_unit,
      **dict(input_model.model_validate(tool_call.arguments)))\n            if isinstance(result,
      Coroutine):\n                result = await result\n\n            if isinstance(result,
      typing.AsyncIterable):\n                async for event in result:\n                    yield
      event\n            else:\n                ret_type = self.eidolon_handler.output_model_fn(self.logic_unit,
      self.eidolon_handler)\n                model = TypeAdapter(ret_type)\n                result
      = model.dump_python(result)\n                if isinstance(result, str):\n                    yield
      StringOutputEvent(content=result)\n                else:\n                    yield
      ObjectOutputEvent(content=result)\n                yield SuccessEvent()\n        except
      Exception as e:\n            logging.exception(\"error calling tool \" + self.eidolon_handler.name)\n
      \           yield ErrorEvent(reason=e)\n\n    @classmethod\n    async def from_logic_units(\n
      \       cls, call_context: CallContext, logic_units: List[LogicUnit]\n    )
      -> Dict[str, LLMToolWrapper]:\n        acc = {}\n        for logic_unit in logic_units:\n
      \           for handler in await logic_unit.build_tools(call_context):\n                new_name
      = logic_unit.__class__.__name__ + \"_\" + handler.name\n                i =
      0\n                while new_name in acc:\n                    new_name = logic_unit.__class__.__name__
      + \"_\" + handler.name + \"_\" + str(i)\n                    i += 1\n                input_model
      = handler.input_model_fn(logic_unit, handler)\n                acc[new_name]
      = LLMToolWrapper(\n                    logic_unit=logic_unit,\n                    llm_message=LLMCallFunction(\n
      \                       name=new_name,\n                        description=handler.description(logic_unit,
      handler),\n                        parameters=input_model.model_json_schema(),\n
      \                   ),\n                    eidolon_handler=handler,\n                    input_model=input_model,\n
      \               )\n        return acc\n\n\ndef llm_function(\n    name: str
      = None,\n    description: typing.Optional[typing.Callable[[object, FnHandler],
      str]] = None,\n    input_model: typing.Optional[typing.Callable[[object, FnHandler],
      BaseModel]] = None,\n    output_model: typing.Optional[typing.Callable[[object,
      FnHandler], typing.Any]] = None,\n):\n    return register_handler(name=name,
      description=description, input_model=input_model, output_model=output_model)\n\n\nclass
      LogicUnit(ProcessingUnit, ABC):\n    async def build_tools(self, call_context:
      CallContext) -> List[FnHandler]:\n        handlers = get_handlers(self)\n        for
      handler in handlers:\n            handler.extra[\"title\"] = self.__class__.__name__\n
      \           handler.extra[\"sub_title\"] = handler.fn.__name__\n            handler.extra[\"agent_call\"]
      = False\n\n            return handlers\n"
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Length:
      - '1281'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:35:42 GMT
      ETag:
      - W/"f37f6d2cfe2eefe40f5d2edc18dd97d94e0c839eac34204e2bcef851bd4366cf"
      Expires:
      - Tue, 20 Feb 2024 21:40:42 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - 68c5baa0697a4d2a96a2514c7f91ef1e7953a684
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - 2B9C:252418:B0E7D:104D81:65D51B2D
      X-Served-By:
      - cache-bfi-krnt7300033-BFI
      X-Timer:
      - S1708464942.077431,VS0,VE137
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/agent/doc_manager/loaders/__init__.py
  response:
    content: ''
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Length:
      - '0'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:35:42 GMT
      ETag:
      - W/"938f66ede415ccb10764da47cd5f3cfc076c07b8791c708cfa8ec54982197c1f"
      Expires:
      - Tue, 20 Feb 2024 21:40:42 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - 07a81af60a0e7ec354c1d183df36c2c2f2eb599a
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - 3A30:1D17:52C679:65D3A8:65D51B2E
      X-Served-By:
      - cache-yvr1534-YVR
      X-Timer:
      - S1708464942.100152,VS0,VE129
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/impl/__init__.py
  response:
    content: ''
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:35:42 GMT
      ETag:
      - W/"938f66ede415ccb10764da47cd5f3cfc076c07b8791c708cfa8ec54982197c1f"
      Expires:
      - Tue, 20 Feb 2024 21:40:42 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - 3b1d1d446b0a5a2b473e362c4f2633623f1fd843
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - A96C:253C15:BB12E:10EFCD:65D51B29
      X-Served-By:
      - cache-bfi-kbfi7400023-BFI
      X-Timer:
      - S1708464942.127739,VS0,VE119
      X-XSS-Protection:
      - 1; mode=block
      transfer-encoding:
      - chunked
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/impl/test_local_symbolic_memory.py
  response:
    content: "import pytest\nfrom pymongo.errors import DuplicateKeyError\n\nfrom
      eidolon_ai_sdk.memory.local_symbolic_memory import LocalSymbolicMemory\n\n\n@pytest.fixture\nasync
      def memory():\n    # Setup memory instance\n    mem = LocalSymbolicMemory()\n
      \   await mem.start()\n    yield mem\n    # Teardown memory instance\n    await
      mem.stop()\n\n\nclass TestLocalSymbolicMemory:\n    def test_start(self, memory):\n
      \       assert LocalSymbolicMemory.db == {}, \"Database should be initialized
      as an empty dictionary.\"\n\n    async def test_stop(self, memory):\n        LocalSymbolicMemory.db[\"test\"]
      = \"value\"\n        await memory.stop()\n        assert LocalSymbolicMemory.db
      == {}, \"Database should be cleared after stop.\"\n\n    @pytest.mark.asyncio\n
      \   async def test_insert_one(self, memory):\n        await memory.insert_one(\"collection\",
      {\"key\": \"value\"})\n        assert \"collection\" in LocalSymbolicMemory.db\n
      \       collection_ = LocalSymbolicMemory.db[\"collection\"][0]\n        assert
      collection_.pop(\"_id\")\n        assert collection_ == {\"key\": \"value\"}\n\n
      \   @pytest.mark.asyncio\n    async def test_insert(self, memory):\n        documents
      = [{\"key1\": \"value1\"}, {\"key2\": \"value2\"}]\n        await memory.insert(\"collection\",
      documents)\n        assert len(LocalSymbolicMemory.db[\"collection\"]) == 2\n\n
      \   # ... more tests for the rest of the CRUD operations ...\n\n    @pytest.mark.asyncio\n
      \   async def test_matches_query_simple(self, memory):\n        await memory.insert_one(\"collection\",
      {\"key\": \"value\"})\n        result = await memory.find_one(\"collection\",
      {\"key\": \"value\"})\n        assert result.pop(\"_id\")\n        assert result
      == {\"key\": \"value\"}\n\n    @pytest.mark.asyncio\n    async def test_matches_query_complex(self,
      memory):\n        document = {\n            \"name\": \"John\",\n            \"age\":
      30,\n            \"address\": {\"city\": \"New York\", \"zip\": \"10001\"},\n
      \       }\n        query = {\"name\": \"John\", \"address\": {\"city\": \"New
      York\"}}\n        await memory.insert_one(\"collection\", document)\n        result
      = await memory.find_one(\"collection\", query)\n        assert result.pop(\"_id\")\n
      \       assert result == document\n\n    # Tests for MongoDB-like query operations\n
      \   @pytest.mark.asyncio\n    async def test_matches_query_with_operators(self,
      memory):\n        document = {\"age\": 25}\n        await memory.insert_one(\"collection\",
      document)\n        # The LocalSymbolicMemory class does not support MongoDB-like
      query operators\n        # so we cannot test for them\n\n    # Tests for upsert
      operations\n    @pytest.mark.asyncio\n    async def test_upsert_one_existing(self,
      memory):\n        await memory.insert_one(\n            \"collection\", {\"_id\":
      \"1\", \"key\": \"value\", \"counter\": 1, \"updated\": \"2022-01-01T00:00:00\"}\n
      \       )\n        update = {\"_id\": \"1\", \"key\": \"value\", \"counter\":
      2, \"updated\": \"2022-01-01T00:00:00\"}\n        await memory.upsert_one(\"collection\",
      update, {\"_id\": \"1\", \"updated\": \"2022-01-01T00:00:00\"})\n        result
      = await memory.find_one(\"collection\", {\"_id\": \"1\"})\n        assert result
      == update\n\n    @pytest.mark.asyncio\n    async def test_upsert_one_new(self,
      memory):\n        await memory.upsert_one(\n            \"collection\", {\"_id\":
      \"2\", \"key\": \"new_value\", \"updated\": \"2022-01-01T00:00:00\"}, {\"_id\":
      \"non_existing\"}\n        )\n        result = await memory.find_one(\"collection\",
      {\"_id\": \"2\"})\n        assert result == {\"_id\": \"2\", \"key\": \"new_value\",
      \"updated\": \"2022-01-01T00:00:00\"}\n\n    @pytest.mark.asyncio\n    async
      def test_upsert_one_duplicate_id(self, memory):\n        await memory.insert_one(\"collection\",
      {\"_id\": \"3\", \"key\": \"value\", \"updated\": \"2022-01-01T00:00:00\"})\n
      \       with pytest.raises(DuplicateKeyError):\n            await memory.upsert_one(\n
      \               \"collection\", {\"_id\": \"3\", \"key\": \"new_value\", \"updated\":
      \"2022-01-01T00:00:00\"}, {\"_id\": \"non_existing\"}\n            )\n\n    @pytest.mark.asyncio\n
      \   async def test_upsert_one_updated_since_read(self, memory):\n        await
      memory.insert_one(\"collection\", {\"_id\": \"4\", \"key\": \"value\", \"updated\":
      \"2022-01-01T00:00:00\"})\n        with pytest.raises(DuplicateKeyError):\n
      \           await memory.upsert_one(\n                \"collection\", {\"_id\":
      \"4\"}, {\"key\": \"updated_value\", \"updated\": \"2022-01-02T00:00:00\"}\n
      \           )\n"
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Length:
      - '955'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:35:42 GMT
      ETag:
      - W/"aa66ac2bd39e73c580885dbc95469a1e44b8dc7daf7b77fffe247cd7f081f6a4"
      Expires:
      - Tue, 20 Feb 2024 21:40:42 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - 95deb7419221dfcdd917a566ae54f40f1d784dfb
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - 2FEE:0343:5280C5:658FAA:65D51B2D
      X-Served-By:
      - cache-yvr1521-YVR
      X-Timer:
      - S1708464942.123810,VS0,VE125
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/agent/retriever_agent/retriever_agent.py
  response:
    content: "import asyncio\n\nfrom fastapi import Body\nfrom pydantic import BaseModel,
      Field, model_validator\nfrom typing import Annotated, List\nfrom urllib.parse
      import urlparse\n\nfrom eidolon_ai_sdk.agent.agent import register_program,
      AgentState\nfrom eidolon_ai_sdk.agent.doc_manager.document_manager import DocumentManager\nfrom
      eidolon_ai_sdk.agent.doc_manager.loaders.filesystem_loader import FilesystemLoader\nfrom
      eidolon_ai_sdk.agent.retriever_agent.document_reranker import DocumentReranker\nfrom
      eidolon_ai_sdk.agent.retriever_agent.question_transformer import QuestionTransformer\nfrom
      eidolon_ai_sdk.agent_os import AgentOS\nfrom eidolon_ai_sdk.system.fn_handler
      import FnHandler\nfrom eidolon_ai_sdk.system.reference_model import Specable,
      AnnotatedReference, Reference\nfrom eidolon_ai_sdk.util.class_utils import fqn\n\n\ndef
      make_description(agent: object, _handler: FnHandler) -> str:\n    # noinspection
      PyUnresolvedReferences\n    return agent.spec.description\n\n\nclass RetrieverAgentSpec(BaseModel):\n
      \   # these three fields are required and override the defaults of the subcomponents\n
      \   name: str = Field(description=\"The name of the document store to use.\")\n
      \   description: str = Field(\n        description=\"A detailed description
      of the the retriever including all necessary information for the calling agent
      to decide to call this agent, i.e. file type or location or etc...\"\n    )\n
      \   loader_root_location: str = Field(description=\"A URL specifying the root
      location of the loader.\")\n\n    loader_pattern: str = Field(default=\"**/*\",
      description=\"The search pattern to use when loading files.\")\n    max_num_results:
      int = Field(default=10, description=\"The maximum number of results to send
      to cpu.\")\n\n    document_manager: Reference[DocumentManager]\n    question_transformer:
      AnnotatedReference[QuestionTransformer]\n    document_reranker: AnnotatedReference[DocumentReranker]\n\n
      \   # noinspection PyMethodParameters\n    @model_validator(mode=\"before\")\n
      \   def set_fields(cls, value):\n        spec = value\n        if \"document_manager\"
      not in spec:\n            spec[\"document_manager\"] = dict()\n        doc_manager_spec
      = spec[\"document_manager\"]\n        # always set name\n        doc_manager_spec[\"name\"]
      = spec[\"name\"]\n        if \"loader\" not in doc_manager_spec:\n            doc_manager_spec[\"loader\"]
      = dict()\n        if \"spec\" not in doc_manager_spec[\"loader\"]:\n            doc_manager_spec[\"loader\"][\"spec\"]
      = dict()\n\n        if \"loader_root_location\" not in spec:\n            raise
      ValueError(\"loader_root_location must be specified in the spec\")\n        loader_url
      = urlparse(spec[\"loader_root_location\"])\n        if loader_url.scheme ==
      \"file\":\n            doc_manager_spec[\"loader\"][\"implementation\"] = fqn(FilesystemLoader)\n
      \           doc_manager_spec[\"loader\"][\"root_dir\"] = spec[\"loader_root_location\"][7:]\n
      \       else:\n            raise ValueError(\"loader_root_location spec must
      be a file:// url\")\n        if \"loader_pattern\" in spec:\n            doc_manager_spec[\"loader\"][\"pattern\"]
      = spec[\"loader_pattern\"]\n\n        return value\n\n\nclass DocSummary(BaseModel):\n
      \   id: str\n    file_name: str\n    file_path: str\n    text: str\n\n\nclass
      RetrieverAgent(Specable[RetrieverAgentSpec]):\n    def __init__(self, **kwargs):\n
      \       super().__init__(**kwargs)\n        Specable.__init__(self, **kwargs)\n
      \       self.document_manager = self.spec.document_manager.instantiate()\n\n
      \       self.question_transformer = (\n            self.spec.question_transformer.instantiate()
      if self.spec.question_transformer else None\n        )\n        self.document_reranker
      = self.spec.document_reranker.instantiate()\n\n    @register_program()\n    async
      def list_files(self) -> AgentState[List[str]]:\n        \"\"\"\n        List
      the files in the document store.\n        :return: The response from the cpu\n
      \       \"\"\"\n        files = [item async for item in await self.document_manager.list_files()]\n
      \       return AgentState(name=\"idle\", data=files)\n\n    @register_program(description=make_description)\n
      \   async def search(\n        self, question: Annotated[str, Body(description=\"The
      question to search for\", embed=True)]\n    ) -> List[DocSummary]:\n        \"\"\"\n
      \       Process the question by searching the document store.\n        :param
      question: The question to process\n        :return: The response from the cpu\n
      \       \"\"\"\n        await self.document_manager.sync_docs()\n\n        if
      self.question_transformer:\n            questions = await self.question_transformer.transform(question)\n
      \       else:\n            questions = [question]\n        _docs = await asyncio.gather(*(self._embed_question(question)
      for question in questions))\n        question_to_docs = {tu[0]: tu[1] for tu
      in zip(questions, _docs)}\n        rerank_questions = {}\n        for question,
      docs in question_to_docs.items():\n            rerank_questions[question] =
      {doc.id: doc.score for doc in docs}\n\n        reranked_docs = await self.document_reranker.rerank(rerank_questions)\n\n
      \       # now limit reranked_docs to max_num_results\n        reranked_docs
      = reranked_docs[: self.spec.max_num_results]\n\n        docs = AgentOS.similarity_memory.vector_store.get_docs(\n
      \           f\"doc_contents_{self.spec.name}\", [doc[0] for doc in reranked_docs]\n
      \       )\n        summaries = []\n        async for doc in docs:\n            file_path
      = doc.metadata[\"source\"]\n            summaries.append(\n                DocSummary(id=doc.id,
      file_name=file_path.split(\"/\")[-1], file_path=file_path, text=doc.page_content)\n
      \           )\n\n        return summaries\n\n    async def _embed_question(self,
      question):\n        embedded_q = await AgentOS.similarity_memory.embedder.embed_text(question)\n
      \       results_ = await AgentOS.similarity_memory.vector_store.raw_query(\n
      \           f\"doc_contents_{self.spec.name}\", embedded_q, self.spec.max_num_results\n
      \       )\n        return results_\n"
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Length:
      - '1808'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:35:42 GMT
      ETag:
      - W/"7312bdaab60115933d042ab93a4a28a6ed060fd3461c08e11ad8bf1ff9e21841"
      Expires:
      - Tue, 20 Feb 2024 21:40:42 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - d6969ae2dfd22fdd8427aecd334799806f14dbce
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - 2FE8:741B:4D5366:6061A4:65D51B2C
      X-Served-By:
      - cache-yvr1524-YVR
      X-Timer:
      - S1708464942.126427,VS0,VE136
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/impl/test_messsage_summarizer.py
  response:
    content: ''
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Length:
      - '0'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:35:42 GMT
      ETag:
      - W/"938f66ede415ccb10764da47cd5f3cfc076c07b8791c708cfa8ec54982197c1f"
      Expires:
      - Tue, 20 Feb 2024 21:40:42 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - HIT
      X-Cache-Hits:
      - '1'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - 1b99e3c6e50dfa168379e627c3bb9d9dc7f6d534
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - 2E36:51C0:59EECA:6C964A:65D519B1
      X-Served-By:
      - cache-yvr1534-YVR
      X-Timer:
      - S1708464942.146996,VS0,VE124
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/cpu/memory_unit.py
  response:
    content: "from abc import ABC, abstractmethod\nfrom typing import List\n\nfrom
      pydantic import BaseModel\n\nfrom eidolon_ai_sdk.cpu.call_context import CallContext\nfrom
      eidolon_ai_sdk.cpu.llm_message import LLMMessage\nfrom eidolon_ai_sdk.cpu.processing_unit
      import ProcessingUnit\nfrom eidolon_ai_sdk.system.reference_model import Specable\n\n\nclass
      MemoryUnitConfig(BaseModel):\n    pass\n\n\nclass MemoryUnit(ProcessingUnit,
      Specable[MemoryUnitConfig], ABC):\n    def __init__(self, spec: MemoryUnitConfig
      = None, **kwargs):\n        super().__init__(**kwargs)\n        self.spec =
      spec\n\n    async def storeMessages(self, call_context: CallContext, messages:
      List[LLMMessage]):\n        \"\"\"\n        Store the messages for the given
      call context\n        :param call_context: The call context for the current
      conversation\n        :param messages: The messages to store\n        :return:
      None\n        \"\"\"\n        await self.writeMessages(call_context, messages)\n\n
      \   async def storeBootMessages(self, call_context: CallContext, messages: List[LLMMessage]):\n
      \       \"\"\"\n        Store the messages for the given call context\n        :param
      call_context: The call context for the current conversation\n        :param
      messages: The messages to store\n        :return: None\n        \"\"\"\n        await
      self.writeBootMessages(call_context, messages)\n\n    async def storeAndFetch(self,
      call_context: CallContext, messages: List[LLMMessage]) -> List[LLMMessage]:\n
      \       \"\"\"\n        Store the messages and returns the full conversation
      history for the given call context (including the messages just stored)\n        :param
      call_context: The call context for the current conversation\n        :param
      messages: The messages to store\n        :return: The full conversation history
      for the given call context (including the messages just stored)\n        \"\"\"\n
      \       if messages and len(messages) > 0:\n            await self.writeMessages(call_context,
      messages)\n        conversation = await self.getConversationHistory(call_context)\n
      \       return conversation\n\n    @abstractmethod\n    async def writeBootMessages(self,
      call_context: CallContext, messages: List[LLMMessage]):\n        \"\"\"\n        Store
      the messages for the given call context\n        :param call_context: The call
      context for the current conversation\n        :param messages: The messages
      to store\n        :return: None\n        \"\"\"\n        raise NotImplementedError(\"writeBootMessages
      not implemented\")\n\n    @abstractmethod\n    async def writeMessages(self,
      call_context: CallContext, messages: List[LLMMessage]):\n        \"\"\"\n        Store
      the messages for the given call context\n        :param call_context: The call
      context for the current conversation\n        :param messages: The messages
      to store\n        :return: None\n        \"\"\"\n        raise NotImplementedError(\"writeMessages
      not implemented\")\n\n    @abstractmethod\n    async def getConversationHistory(self,
      call_context: CallContext) -> List[LLMMessage]:\n        \"\"\"\n        Get
      the full conversation history for the given call context\n        :param call_context:
      The call context for the current conversation\n        :return: The full conversation
      history for the given call context\n        \"\"\"\n        raise NotImplementedError(\"getConversationHistory
      not implemented\")\n\n    async def clone_thread(self, old_context: CallContext,
      new_context: CallContext):\n        messages = await self.getConversationHistory(old_context)\n
      \       for m in messages:\n            m[\"thread_id\"] = new_context.thread_id\n
      \       await self.storeMessages(new_context, messages)\n"
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Length:
      - '689'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:35:42 GMT
      ETag:
      - W/"e80841c72133230f76274be4121341defdb2297bd381e4b1173bfee483820044"
      Expires:
      - Tue, 20 Feb 2024 21:40:42 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - HIT
      X-Cache-Hits:
      - '1'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - 65c975e53fe4aeb5e7097b2f3df6810e78c322d3
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - D30A:255533:BBC29:10F647:65D519B1
      X-Served-By:
      - cache-bfi-kbfi7400116-BFI
      X-Timer:
      - S1708464942.207522,VS0,VE134
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/app/api/auth/[...nextauth]?ref=main
  response:
    content: '[{"name":"route.ts","path":"webui/app/api/auth/[...nextauth]/route.ts","sha":"bc08a9bacbf6090f87ae79302e31fc9aad1c6a8f","size":2048,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/app/api/auth/[...nextauth]/route.ts?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/webui/app/api/auth/[...nextauth]/route.ts","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/bc08a9bacbf6090f87ae79302e31fc9aad1c6a8f","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/webui/app/api/auth/%5B...nextauth%5D/route.ts","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/webui/app/api/auth/[...nextauth]/route.ts?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/bc08a9bacbf6090f87ae79302e31fc9aad1c6a8f","html":"https://github.com/eidolon-ai/eidolon/blob/main/webui/app/api/auth/[...nextauth]/route.ts"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:35:42 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E59A:253F79:16573F:1FC6F8:65D51B2E
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4501'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '499'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/system/__init__.py
  response:
    content: ''
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Length:
      - '0'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:35:42 GMT
      ETag:
      - W/"938f66ede415ccb10764da47cd5f3cfc076c07b8791c708cfa8ec54982197c1f"
      Expires:
      - Tue, 20 Feb 2024 21:40:42 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - HIT
      X-Cache-Hits:
      - '1'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - 2352a9a00a5e6b73f88383ddd7cf708810b80fe0
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - 64FA:57EB:65A23A:784A22:65D519AC
      X-Served-By:
      - cache-yvr1521-YVR
      X-Timer:
      - S1708464942.308379,VS0,VE125
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/agent/cassettes/test_retriever_agent?ref=main
  response:
    content: '[{"name":"test_search.yaml","path":"sdk/tests/agent/cassettes/test_retriever_agent/test_search.yaml","sha":"48087271a775240e9fed3ec3c5eac7579a004c39","size":209977,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/agent/cassettes/test_retriever_agent/test_search.yaml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/agent/cassettes/test_retriever_agent/test_search.yaml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/48087271a775240e9fed3ec3c5eac7579a004c39","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/agent/cassettes/test_retriever_agent/test_search.yaml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/agent/cassettes/test_retriever_agent/test_search.yaml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/48087271a775240e9fed3ec3c5eac7579a004c39","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/agent/cassettes/test_retriever_agent/test_search.yaml"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:35:42 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E593:3A0B33:4CC4:64E9:65D51B2E
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4500'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '500'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/system/test_code_agents.py
  response:
    content: "from typing import Annotated\n\nimport httpx\nimport pytest\nimport
      pytest_asyncio\nfrom fastapi import Body, HTTPException\nfrom httpx import HTTPStatusError\n\nfrom
      eidolon_ai_sdk.agent.agent import register_program, AgentState, register_action\nfrom
      eidolon_ai_sdk.agent.client import Agent, Process, ProcessStatus\nfrom eidolon_ai_sdk.io.events
      import (\n    ErrorEvent,\n    AgentStateEvent,\n    StringOutputEvent,\n    StartStreamContextEvent,\n
      \   EndStreamContextEvent,\n    SuccessEvent,\n)\nfrom eidolon_ai_sdk.util.stream_collector
      import stream_manager\n\n\nclass HelloWorld:\n    created_processes = set()\n\n
      \   @classmethod\n    async def create_process(cls, process_id):\n        HelloWorld.created_processes.add(process_id)\n\n
      \   @classmethod\n    async def delete_process(cls, process_id):\n        HelloWorld.created_processes.remove(process_id)\n\n
      \   @register_program()\n    async def idle(self, name: Annotated[str, Body()]):\n
      \       if name.lower() == \"hello\":\n            raise HTTPException(418,
      \"hello is not a name\")\n        if name.lower() == \"error\":\n            raise
      Exception(\"big bad server error\")\n        return f\"Hello, {name}!\"\n\n
      \   @register_program()\n    async def idle_streaming(self, name: Annotated[str,
      Body()]):\n        if name.lower() == \"hello\":\n            raise HTTPException(418,
      \"hello is not a name\")\n        if name.lower() == \"error\":\n            raise
      Exception(\"big bad server error\")\n        yield StringOutputEvent(content=f\"Hello,
      {name}!\")\n\n    @register_program()\n    async def lots_o_context(self):\n
      \       yield StringOutputEvent(content=\"1\")\n        yield StringOutputEvent(content=\"2\")\n
      \       async for e in _m(_s(3, 4), context=\"c1\"):\n            yield e\n
      \       async for e in _m(_s(5, 6, after=_m(_s(7, 8), context=\"c3\")), context=\"c2\"):\n
      \           yield e\n\n\nasync def _s(*_args, after=None):\n    for a in _args:\n
      \       yield StringOutputEvent(content=str(a))\n    if after:\n        async
      for a in after:\n            yield a\n\n\ndef _m(stream, context: str):\n    return
      stream_manager(stream, StartStreamContextEvent(context_id=context))\n\n\n@pytest.fixture(autouse=True)\ndef
      manage_hello_world_state():\n    HelloWorld.created_processes = set()\n    yield\n
      \   HelloWorld.created_processes = set()\n\n\nclass TestHelloWorld:\n    @pytest_asyncio.fixture(scope=\"class\")\n
      \   async def server(self, run_app):\n        async with run_app(HelloWorld)
      as ra:\n            yield ra\n\n    @pytest_asyncio.fixture(scope=\"function\")\n
      \   async def client(self, server):\n        with httpx.Client(base_url=server,
      timeout=httpx.Timeout(60)) as client:\n            yield client\n\n    @pytest.fixture(scope=\"function\")\n
      \   def agent(self, server):\n        return Agent.get(\"HelloWorld\")\n\n    def
      test_can_start(self, client):\n        docs = client.get(\"/docs\")\n        assert
      docs.status_code == 200\n\n    def test_hello_world(self, client):\n        post
      = client.post(\"/agents/HelloWorld/programs/idle\", json=\"world\")\n        assert
      post.status_code == 200\n        assert post.json()[\"data\"] == \"Hello, world!\"\n\n
      \   def test_automatic_state_transition(self, client):\n        post = client.post(\"/agents/HelloWorld/programs/idle\",
      json=\"world\")\n        assert post.status_code == 200\n        assert post.json()[\"state\"]
      == \"terminated\"\n\n    @pytest.mark.parametrize(\"program\", [\"idle\", \"idle_streaming\"])\n
      \   async def test_http_error(self, server, program):\n        with pytest.raises(HTTPStatusError)
      as exc:\n            await Agent.get(\"HelloWorld\").program(program, \"hello\")\n
      \       assert exc.value.response.status_code == 418\n        assert exc.value.response.json()
      == \"hello is not a name\"\n\n    @pytest.mark.parametrize(\"program\", [\"idle\",
      \"idle_streaming\"])\n    async def test_streaming_http_error(self, server,
      program):\n        stream = Agent.get(\"HelloWorld\").stream_program(program,
      \"hello\")\n        events = {type(e): e async for e in stream}\n        assert
      ErrorEvent in events\n        assert events[ErrorEvent].reason == dict(detail=\"hello
      is not a name\", status_code=418)\n        assert events[AgentStateEvent].state
      == \"http_error\"\n\n        with pytest.raises(HTTPStatusError) as exc:\n            await
      Process.get(stream).status()\n        assert exc.value.response.status_code
      == 418\n        assert exc.value.response.json() == \"hello is not a name\"\n\n
      \   @pytest.mark.parametrize(\"program\", [\"idle\", \"idle_streaming\"])\n
      \   async def test_unhandled_error(self, server, program):\n        with pytest.raises(HTTPStatusError)
      as exc:\n            await Agent.get(\"HelloWorld\").program(program, \"error\")\n
      \       assert exc.value.response.status_code == 500\n        assert exc.value.response.json()
      == \"big bad server error\"\n\n    @pytest.mark.parametrize(\"program\", [\"idle\",
      \"idle_streaming\"])\n    async def test_streaming_unhandled_error(self, agent,
      program):\n        stream = agent.stream_program(program, \"error\")\n        events
      = {type(e): e async for e in stream}\n        assert ErrorEvent in events\n
      \       assert events[ErrorEvent].reason == dict(detail=\"big bad server error\",
      status_code=500)\n        assert events[AgentStateEvent].state == \"unhandled_error\"\n\n
      \       with pytest.raises(HTTPStatusError) as exc:\n            await Process.get(stream).status()\n
      \       assert exc.value.response.status_code == 500\n        assert exc.value.response.json()
      == \"big bad server error\"\n\n    async def test_lots_o_context(self, agent):\n
      \       resp = await agent.program(\"lots_o_context\")\n        assert resp.data
      == \"12\"\n\n    async def test_lots_o_context_streaming(self, agent):\n        events
      = [e async for e in agent.stream_program(\"lots_o_context\")]\n        assert
      events[2:-1] == [\n            StringOutputEvent(content=\"1\"),\n            StringOutputEvent(content=\"2\"),\n
      \           StartStreamContextEvent(context_id=\"c1\"),\n            StringOutputEvent(content=\"3\",
      stream_context=\"c1\"),\n            StringOutputEvent(content=\"4\", stream_context=\"c1\"),\n
      \           SuccessEvent(stream_context=\"c1\"),\n            EndStreamContextEvent(context_id=\"c1\"),\n
      \           StartStreamContextEvent(context_id=\"c2\"),\n            StringOutputEvent(content=\"5\",
      stream_context=\"c2\"),\n            StringOutputEvent(content=\"6\", stream_context=\"c2\"),\n
      \           StartStreamContextEvent(context_id=\"c3\", stream_context=\"c2\"),\n
      \           StringOutputEvent(content=\"7\", stream_context=\"c2.c3\"),\n            StringOutputEvent(content=\"8\",
      stream_context=\"c2.c3\"),\n            SuccessEvent(stream_context=\"c2.c3\"),\n
      \           EndStreamContextEvent(stream_context=\"c2\", context_id=\"c3\"),\n
      \           SuccessEvent(stream_context=\"c2\"),\n            EndStreamContextEvent(context_id=\"c2\"),\n
      \           AgentStateEvent(state=\"terminated\", available_actions=[]),\n        ]\n\n
      \   async def test_creating_processes_without_program(self, agent):\n        process:
      ProcessStatus = await agent.create_process()\n        assert process.state ==
      \"initialized\"\n        assert \"idle\" in process.available_actions\n        action
      = await process.action(\"idle\", \"Luke\")\n        assert action.data == \"Hello,
      Luke!\"\n\n    async def test_delete_process(self, agent):\n        process:
      ProcessStatus = await agent.create_process()\n        deleted = await process.delete()\n
      \       assert deleted.process_id == process.process_id\n        assert deleted.deleted
      == 1\n        with pytest.raises(HTTPStatusError) as exc:\n            await
      process.status()\n        assert exc.value.response.status_code == 404\n\n    async
      def test_agent_create_delete_hooks(self, agent):\n        assert not HelloWorld.created_processes\n\n
      \       # we expect to observe the process being created as a side effect of
      calling create_process\n        process: ProcessStatus = await agent.create_process()\n
      \       assert HelloWorld.created_processes\n\n        # and we should see it
      cleaned up as part of process deletion\n        await process.delete()\n        assert
      not HelloWorld.created_processes\n\n\nclass StateMachine:\n    @register_action(\"ap\")\n
      \   @register_program()\n    async def action_program(self):\n        return
      AgentState[str](name=\"ap\", data=\"default response\")\n\n    @register_program()\n
      \   # async def idle(self, desired_state: Annotated[str, Body()], response:
      Annotated[str, Body()] = \"default response\"):\n    async def idle(self, desired_state:
      Annotated[str, Body()], response: Annotated[str, Body()]):\n        return AgentState(name=desired_state,
      data=response)\n\n    @register_action(\"foo\", \"bar\")\n    async def to_bar(self):\n
      \       return AgentState(name=\"bar\", data=\"heading to the bar\")\n\n    @register_action(\"foo\")\n
      \   async def to_church(self):\n        return AgentState(name=\"church\", data=\"man
      of god\")\n\n    @register_action(\"church\")\n    async def terminate(self):\n
      \       return \"Only God can terminate me\"\n\n\nclass StateMachine2(StateMachine):\n
      \   pass\n\n\nclass TestStateMachine:\n    @pytest_asyncio.fixture(scope=\"class\")\n
      \   async def server(self, run_app):\n        async with run_app(StateMachine,
      StateMachine2) as ra:\n            yield ra\n\n    @pytest_asyncio.fixture(scope=\"function\")\n
      \   async def client(self, server):\n        with httpx.Client(base_url=server,
      timeout=httpx.Timeout(60)) as client:\n            yield client\n\n    def test_can_list_processes(self,
      client):\n        url = \"/agents/StateMachine/programs/idle\"\n\n        first
      = client.post(url, json=dict(desired_state=\"church\", response=\"blurb\")).json()[\"process_id\"]\n
      \       second = client.post(url, json=dict(desired_state=\"foo\", response=\"blurb\")).json()[\"process_id\"]\n
      \       third = client.post(url, json=dict(desired_state=\"foo\", response=\"blurb\")).json()[\"process_id\"]\n\n
      \       processes = client.get(\"/agents/StateMachine/processes\")\n        assert
      processes.status_code == 200\n        assert processes.json()[\"total\"] ==
      3\n        assert {p[\"process_id\"] for p in processes.json()[\"processes\"]}
      == {first, second, third}\n\n        # update the first process: it should be
      at end of list now\n        assert first == client.post(f\"/agents/StateMachine/processes/{first}/actions/terminate\").json()[\"process_id\"]\n\n
      \       processes = client.get(\"/agents/StateMachine/processes\")\n        assert
      processes.json()[\"total\"] == 3\n        assert [p[\"process_id\"] for p in
      processes.json()[\"processes\"]] == [second, third, first]\n\n    def test_can_start(self,
      client):\n        post = client.post(\n            \"/agents/StateMachine/programs/idle\",\n
      \           json=dict(desired_state=\"bar\", response=\"low man on the totem
      pole\"),\n        )\n        assert post.status_code == 200\n        assert
      post.json()[\"state\"] == \"bar\"\n        assert post.json()[\"data\"] == \"low
      man on the totem pole\"\n\n    def test_can_transition_state(self, client):\n
      \       init = client.post(\n            \"/agents/StateMachine/programs/idle\",\n
      \           json=dict(desired_state=\"foo\", response=\"low man on the totem
      pole\"),\n        )\n        assert init.status_code == 200\n        assert
      init.json()[\"state\"] == \"foo\"\n\n        to_bar = client.post(f\"/agents/StateMachine/processes/{init.json()['process_id']}/actions/to_bar\")\n
      \       assert to_bar.status_code == 200\n        assert to_bar.json()[\"state\"]
      == \"bar\"\n\n    def test_allowed_actions(self, client):\n        init = client.post(\n
      \           \"/agents/StateMachine/programs/idle\",\n            json=dict(desired_state=\"foo\",
      response=\"low man on the totem pole\"),\n        )\n        assert \"to_church\"
      in init.json()[\"available_actions\"]\n\n        to_bar = client.post(f\"/agents/StateMachine/processes/{init.json()['process_id']}/actions/to_bar\")\n
      \       assert \"to_church\" not in to_bar.json()[\"available_actions\"]\n\n
      \       to_church = client.post(f\"/agents/StateMachine/processes/{init.json()['process_id']}/actions/to_church\")\n
      \       assert to_church.status_code == 409\n\n    @pytest.mark.skip(reason=\"un
      comment idle signature when bug is fixed\")\n    def test_default_in_body(self,
      client):\n        init = client.post(\n            \"/agents/StateMachine/programs/idle\",\n
      \           json=dict(desired_state=\"foo\", response=\"low man on the totem
      pole\"),\n        )\n        init.raise_for_status()\n        assert init.json()[\"data\"]
      == \"default response\"\n\n    def test_state_machine_termination(self, client):\n
      \       init = client.post(\n            \"/agents/StateMachine/programs/idle\",\n
      \           json=dict(desired_state=\"church\", response=\"blurb\"),\n        )\n
      \       assert init.status_code == 200\n        assert init.json()[\"state\"]
      == \"church\"\n\n        terminated = client.post(f\"/agents/StateMachine/processes/{init.json()['process_id']}/actions/terminate\")\n
      \       assert terminated.status_code == 200\n        assert terminated.json()[\"state\"]
      == \"terminated\"\n        assert terminated.json()[\"data\"] == \"Only God
      can terminate me\"\n        assert terminated.json()[\"available_actions\"]
      == []\n\n    def test_can_register_function_as_action_and_program(self, client):\n
      \       program = client.post(\"/agents/StateMachine/programs/action_program\")\n
      \       assert program.status_code == 200\n        action = client.post(\n            f\"/agents/StateMachine/processes/{program.json()['process_id']}/actions/action_program\",\n
      \       )\n        assert action.status_code == 200\n\n    def test_agents_are_separate(self,
      client):\n        init = client.post(\n            \"/agents/StateMachine/programs/idle\",\n
      \           json=dict(desired_state=\"church\", response=\"blurb\"),\n        )\n
      \       assert init.status_code == 200\n        assert init.json()[\"state\"]
      == \"church\"\n\n        not_found = client.post(f\"/agents/StateMachine2/processes/{init.json()['process_id']}/actions/terminate\")\n
      \       assert not_found.status_code == 404\n"
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Length:
      - '2536'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:35:42 GMT
      ETag:
      - W/"351eca0a49f88d2a26d05d851dd384df082372bb46929b848898d0704c722630"
      Expires:
      - Tue, 20 Feb 2024 21:40:42 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - cbe258731eee6f76896f8f65d0bb0b63cbc82ab1
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - A43E:255713:BB345:10F245:65D51B2E
      X-Served-By:
      - cache-bfi-kbfi7400116-BFI
      X-Timer:
      - S1708464942.402499,VS0,VE127
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/cpu/open_ai_assistants_cpu.py
  response:
    content: "import asyncio\nimport json\nimport time\nfrom io import IOBase\nfrom
      typing import List, Dict, Any, Type, Optional, Literal, Union\n\nfrom openai
      import AsyncOpenAI\nfrom openai.types.beta import Assistant\nfrom openai.types.beta.assistant_create_params
      import ToolAssistantToolsFunction\nfrom openai.types.beta.threads import ThreadMessage\nfrom
      openai.types.beta.threads.run_submit_tool_outputs_params import ToolOutput\nfrom
      pydantic import Field\n\nfrom eidolon_ai_sdk.agent_os import AgentOS\nfrom eidolon_ai_sdk.cpu.agent_cpu
      import AgentCPUSpec, AgentCPU, Thread\nfrom eidolon_ai_sdk.cpu.agent_io import
      CPUMessageTypes\nfrom eidolon_ai_sdk.cpu.call_context import CallContext\nfrom
      eidolon_ai_sdk.cpu.llm_message import ToolResponseMessage, LLMMessage\nfrom
      eidolon_ai_sdk.cpu.logic_unit import LogicUnit, LLMToolWrapper\nfrom eidolon_ai_sdk.cpu.processing_unit
      import ProcessingUnitLocator, PU_T\nfrom eidolon_ai_sdk.system.reference_model
      import Specable, Reference\nfrom eidolon_ai_sdk.util.logger import logger\n\n\nclass
      OpenAIAssistantsCPUSpec(AgentCPUSpec):\n    logic_units: List[Reference[LogicUnit]]
      = []\n    model: str = Field(default=\"gpt-4-1106-preview\", description=\"The
      model to use for the LLM.\")\n    temperature: float = 0.3\n    max_wait_time_secs:
      int = 600\n    llm_poll_interval_ms: int = 500\n    enable_retrieval: bool =
      True\n    enable_code_interpreter: bool = True\n\n\nclass OpenAIAssistantsCPU(AgentCPU,
      Specable[OpenAIAssistantsCPUSpec], ProcessingUnitLocator):\n    llm: AsyncOpenAI
      = None\n    logic_units: List[LogicUnit] = None\n\n    def __init__(self, spec:
      OpenAIAssistantsCPUSpec = None):\n        super().__init__(spec)\n        self.tool_defs
      = None\n        kwargs = dict(processing_unit_locator=self)\n        self.logic_units
      = [logic_unit.instantiate(**kwargs) for logic_unit in self.spec.logic_units]\n\n
      \   def locate_unit(self, unit_type: Type[PU_T]) -> PU_T:\n        found = super().locate_unit(unit_type)\n
      \       return found if found else self._locate_unit(unit_type)\n\n    def _locate_unit(self,
      unit_type: Type[PU_T]) -> Optional[PU_T]:\n        for unit in self.logic_units:\n
      \           if isinstance(unit, unit_type):\n                return unit\n        raise
      ValueError(f\"Could not locate {unit_type}\")\n\n    def _getLLM(self):\n        if
      not self.llm:\n            self.llm = AsyncOpenAI()\n        return self.llm\n\n
      \   async def processFile(self, prompt: CPUMessageTypes) -> str:\n        #
      rip out the image messages, store them in the file system, and replace them
      file Ids\n        # collect the user messages\n        llm = self._getLLM()\n
      \       image_file: IOBase = prompt.image\n        # read the prompt.image file
      into memory\n        image_data = image_file.read()\n        file = await llm.files.create(file=image_data,
      purpose=\"assistants\")\n        return file.id\n\n    @classmethod\n    async
      def delete_process(cls, process_id: str):\n        existing_conversations =
      AgentOS.symbolic_memory.find(\"open_ai_conversations\", {\"process_id\": process_id})\n
      \       async for conversation in existing_conversations:\n            await
      AsyncOpenAI().beta.assistants.delete(conversation[\"assistant_id\"])\n            logger.info(\"deleted
      assistant \" + conversation[\"assistant_id\"])\n        await AgentOS.symbolic_memory.delete_many(\"open_ai_conversations\",
      {\"process_id\": process_id})\n        await AgentOS.symbolic_memory.delete_many(\"open_ai_conversation_data\",
      {\"process_id\": process_id})\n\n    async def get_or_create_assistant(\n        self,
      call_context: CallContext, system_message: str = \"\", file_ids=None\n    )
      -> (Assistant, str):\n        # fetch the existing conversation from symbolic
      memory\n        existingConversation = await AgentOS.symbolic_memory.find_one(\n
      \           \"open_ai_conversations\",\n            {\n                \"process_id\":
      call_context.process_id,\n                \"thread_id\": call_context.thread_id,\n
      \           },\n        )\n\n        llm = self._getLLM()\n        if existingConversation:\n
      \           assistant_thread_id = existingConversation[\"assistant_thread_id\"]\n
      \           assistant = await llm.beta.assistants.retrieve(existingConversation[\"assistant_id\"])\n
      \           return assistant, assistant_thread_id\n\n        request = {\"model\":
      self.spec.model}\n        if len(system_message) > 0:\n            request[\"instructions\"]
      = system_message\n\n        if file_ids and len(file_ids) > 0:\n            request[\"file_ids\"]
      = file_ids\n\n        logger.info(\"creating assistant with request \" + str(request))\n
      \       assistant = await llm.beta.assistants.create(**request)\n        thread
      = await llm.beta.threads.create()\n\n        await AgentOS.symbolic_memory.insert_one(\n
      \           \"open_ai_conversations\",\n            {\n                \"process_id\":
      call_context.process_id,\n                \"thread_id\": call_context.thread_id,\n
      \               \"assistant_id\": assistant.id,\n                \"assistant_thread_id\":
      thread.id,\n            },\n        )\n\n        return assistant, thread.id\n\n
      \   async def set_boot_messages(self, call_context: CallContext, boot_messages:
      List[CPUMessageTypes]):\n        # separate out the system messages from the
      user messages\n        system_message: str = \"\"\n        user_messages = []\n
      \       file_ids = []\n        for message in boot_messages:\n            if
      message.type == \"system\":\n                system_message += message.prompt
      + \"\\n\"\n            elif message.type == \"user\":\n                user_messages.append(message.prompt)\n
      \           elif message.type == \"image\":\n                file_ids.append(await
      self.processFile(message))\n            else:\n                raise ValueError(f\"Unknown
      message type {message.type}\")\n\n        assistant, thread_id = await self.get_or_create_assistant(call_context,
      system_message, file_ids)\n        llm = self._getLLM()\n        for user_message
      in user_messages:\n            await llm.beta.threads.messages.create(thread_id=thread_id,
      content=user_message, role=\"user\")\n\n    async def schedule_request(\n        self,\n
      \       call_context: CallContext,\n        prompts: List[CPUMessageTypes],\n
      \       output_format: Union[Literal[\"str\"], Dict[str, Any]],\n    ) -> Any:\n
      \       # separate out the system messages from the user messages\n        user_messages
      = []\n        file_ids = []\n        for message in prompts:\n            if
      message.type == \"user\":\n                user_messages.append(message.prompt)\n
      \           elif message.type == \"image\":\n                file_ids.append(await
      self.processFile(message))\n            else:\n                raise ValueError(f\"Unknown
      message type {message.type}\")\n        if not output_format == \"str\":\n            schema_message
      = (\n                f\"\\nYour response MUST be valid JSON satisfying the following
      schema:\\n{json.dumps(output_format)}.\"\n            )\n            schema_message
      += \"\\nALWAYS reply with json in the following format:\\njson```<insert json
      here>```\\n\"\n            user_messages.append(schema_message)\n\n        assistant,
      thread_id = await self.get_or_create_assistant(call_context)\n        llm =
      self._getLLM()\n        if len(user_messages) == 0:\n            user_messages.append(\"\")\n\n
      \       last_message_id = None\n        for idx, user_message in enumerate(user_messages):\n
      \           request = {\"thread_id\": thread_id, \"content\": user_message,
      \"role\": \"user\"}\n            if idx == len(user_messages) - 1:\n                request[\"file_ids\"]
      = file_ids\n            last_message = await llm.beta.threads.messages.create(**request)\n
      \           last_message_id = last_message.id\n\n        # start the run\n        return
      await self.run_llm_and_tools(call_context, assistant.id, thread_id, last_message_id)\n\n
      \   async def _get_tools_defs(self, call_context: CallContext):\n        conversation
      = []\n        conversation_from_memory = AgentOS.symbolic_memory.find(\n            \"open_ai_conversation_data\",\n
      \           {\n                \"process_id\": call_context.process_id,\n                \"thread_id\":
      call_context.thread_id,\n            },\n        )\n        async for item in
      conversation_from_memory:\n            conversation.append(LLMMessage.from_dict(item[\"tool_result\"]))\n\n
      \       return await LLMToolWrapper.from_logic_units(self.logic_units, conversation=conversation)\n\n
      \   async def run_llm_and_tools(\n        self,\n        call_context: CallContext,\n
      \       assistant_id: str,\n        assistant_thread_id: str,\n        last_message_id:
      str,\n    ):\n        llm = self._getLLM()\n        tool_defs = await self._get_tools_defs(call_context)\n
      \       tools = []\n        logger.info(\"tool defs are \" + str(tool_defs.keys()))\n
      \       for tool_def in tool_defs.values():\n            tools.append(\n                ToolAssistantToolsFunction(\n
      \                   **{\n                        \"type\": \"function\",\n                        \"function\":
      {\n                            \"name\": tool_def.llm_message.name,\n                            \"description\":
      tool_def.llm_message.description,\n                            \"parameters\":
      tool_def.llm_message.parameters,\n                        },\n                    }\n
      \               )\n            )\n        if self.spec.enable_retrieval:\n            tools.append({\"type\":
      \"retrieval\"})\n\n        if self.spec.enable_code_interpreter:\n            tools.append({\"type\":
      \"code_interpreter\"})\n        request = {\"assistant_id\": assistant_id, \"thread_id\":
      assistant_thread_id}\n        if len(tools) > 0:\n            request[\"tools\"]
      = tools\n\n        run = await llm.beta.threads.runs.create(**request)\n        num_iterations
      = 0\n        while num_iterations < self.spec.max_num_function_calls:\n            run
      = await self.run_llm(run.id, assistant_thread_id)\n            if run.status
      == \"requires_action\":\n                results = []\n\n                for
      tool_call in run.required_action.submit_tool_outputs.tool_calls:\n                    tool_call_id
      = tool_call.id\n                    function_call = tool_call.function\n                    arguments
      = json.loads(function_call.arguments)\n                    logger.info(\"executing
      tool \" + function_call.name + \" with args \" + str(function_call.arguments))\n
      \                   tool_def = tool_defs[function_call.name]\n                    tool_result
      = await tool_def.execute(call_context=call_context, args=arguments)\n                    logger.info(\"tool
      result is \" + str(tool_result))\n                    result_as_json_str = self._to_json(tool_result)\n
      \                   message = ToolOutput(tool_call_id=tool_call_id, output=result_as_json_str)\n
      \                   message_to_store = ToolResponseMessage(\n                        logic_unit_name=tool_def.logic_unit.__class__.__name__,\n
      \                       tool_call_id=tool_call_id,\n                        result=result_as_json_str,\n
      \                       name=function_call.name,\n                    )\n                    await
      AgentOS.symbolic_memory.insert_one(\n                        \"open_ai_conversation_data\",\n
      \                       {\n                            \"process_id\": call_context.process_id,\n
      \                           \"thread_id\": call_context.thread_id,\n                            \"assistant_id\":
      assistant_id,\n                            \"assistant_thread_id\": assistant_thread_id,\n
      \                           \"tool_call_id\": tool_call_id,\n                            \"tool_result\":
      message_to_store.model_dump(),\n                        },\n                    )\n
      \                   results.append(message)\n\n                run = await llm.beta.threads.runs.submit_tool_outputs(\n
      \                   thread_id=assistant_thread_id, run_id=run.id, tool_outputs=results\n
      \               )\n                num_iterations += 1\n            else:\n
      \               messages = await llm.beta.threads.messages.list(thread_id=assistant_thread_id,
      before=last_message_id)\n                first_item: ThreadMessage = None\n
      \               async for item in messages:\n                    first_item
      = item\n                    break\n\n                content = \"\"\n                for
      text in first_item.content:\n                    if text.type == \"image_url\":\n
      \                       logger.warning(\"Unsupported image url\")\n                    else:\n
      \                       content += text.text.value + \"\\n\"\n                return
      content\n\n        raise ValueError(f\"Exceeded maximum number of function calls
      {self.spec.max_num_function_calls}\")\n\n    async def run_llm(self, run_id:
      str, thread_id: str):\n        llm = self._getLLM()\n        finished_states
      = [\n            \"completed\",\n            \"requires_action\",\n            \"cancelled\",\n
      \           \"failed\",\n            \"expired\",\n        ]\n        start_time
      = time.time()\n        run = await llm.beta.threads.runs.retrieve(thread_id=thread_id,
      run_id=run_id)\n        while (time.time() - start_time) < self.spec.max_wait_time_secs:\n
      \           if run.status in finished_states:\n                break\n            await
      asyncio.sleep(self.spec.llm_poll_interval_ms / 1000)\n            run = await
      llm.beta.threads.runs.retrieve(thread_id=thread_id, run_id=run_id)\n\n        if
      run.status not in finished_states or run.status == \"expired\":\n            raise
      RuntimeError(\"Timeout while waiting for LLM to finish\")\n        elif run.status
      == \"requires_action\":\n            return run\n        elif run.status ==
      \"completed\":\n            return run\n        elif run.status == \"cancelled\":\n
      \           raise RuntimeError(\"LLM run was cancelled\")\n        else:\n            is_rate_limit
      = run.last_error.code == \"rate_limit\"\n            raise RuntimeError(\n                \"LLM
      run failed because \" + run.last_error.message + (\" (rate limit)\" if is_rate_limit
      else \"\")\n            )\n\n    async def clone_thread(self, call_context:
      CallContext) -> Thread:\n        pass\n"
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Length:
      - '3365'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:35:42 GMT
      ETag:
      - W/"dce1157c4884d165df50567c5872ffd7da0a581f67dc6671f62a0ce89011bf42"
      Expires:
      - Tue, 20 Feb 2024 21:40:42 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - HIT
      X-Cache-Hits:
      - '1'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - c23411317a8e157bdda3530925363620b0e5f24b
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - C634:180A:59BE50:6C63EF:65D519B1
      X-Served-By:
      - cache-yvr1534-YVR
      X-Timer:
      - S1708464942.436059,VS0,VE134
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/agent/doc_manager/parsers?ref=main
  response:
    content: '[{"name":"AgentXOS.pdf","path":"sdk/tests/agent/doc_manager/parsers/AgentXOS.pdf","sha":"aeff024a96558192032454a91051e26f5b799472","size":1185792,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/agent/doc_manager/parsers/AgentXOS.pdf?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/agent/doc_manager/parsers/AgentXOS.pdf","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/aeff024a96558192032454a91051e26f5b799472","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/agent/doc_manager/parsers/AgentXOS.pdf","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/agent/doc_manager/parsers/AgentXOS.pdf?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/aeff024a96558192032454a91051e26f5b799472","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/agent/doc_manager/parsers/AgentXOS.pdf"}},{"name":"__init__.py","path":"sdk/tests/agent/doc_manager/parsers/__init__.py","sha":"e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/agent/doc_manager/parsers/__init__.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/agent/doc_manager/parsers/__init__.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/agent/doc_manager/parsers/__init__.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/agent/doc_manager/parsers/__init__.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/agent/doc_manager/parsers/__init__.py"}},{"name":"test_pdf_parser.py","path":"sdk/tests/agent/doc_manager/parsers/test_pdf_parser.py","sha":"646b248a0fd708bd5d8c59ab3154f769a813a5de","size":2341,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/agent/doc_manager/parsers/test_pdf_parser.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/agent/doc_manager/parsers/test_pdf_parser.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/646b248a0fd708bd5d8c59ab3154f769a813a5de","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/agent/doc_manager/parsers/test_pdf_parser.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/agent/doc_manager/parsers/test_pdf_parser.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/646b248a0fd708bd5d8c59ab3154f769a813a5de","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/agent/doc_manager/parsers/test_pdf_parser.py"}},{"name":"test_text_parser.py","path":"sdk/tests/agent/doc_manager/parsers/test_text_parser.py","sha":"f4e443a6502f762336751081573e8ccd796d1e1a","size":1161,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/agent/doc_manager/parsers/test_text_parser.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/agent/doc_manager/parsers/test_text_parser.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/f4e443a6502f762336751081573e8ccd796d1e1a","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/agent/doc_manager/parsers/test_text_parser.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/agent/doc_manager/parsers/test_text_parser.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/f4e443a6502f762336751081573e8ccd796d1e1a","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/agent/doc_manager/parsers/test_text_parser.py"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:35:42 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E59A:253F79:165748:1FC701:65D51B2E
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4499'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '501'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/agent/tot_agent/__init__.py
  response:
    content: ''
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Length:
      - '0'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:35:42 GMT
      ETag:
      - W/"938f66ede415ccb10764da47cd5f3cfc076c07b8791c708cfa8ec54982197c1f"
      Expires:
      - Tue, 20 Feb 2024 21:40:42 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - HIT
      X-Cache-Hits:
      - '1'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - 6778299389151fd829718606d17c486d6624404a
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - 64FA:57EB:65A255:784A41:65D519B2
      X-Served-By:
      - cache-yvr1524-YVR
      X-Timer:
      - S1708464943.557013,VS0,VE121
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/agent/doc_manager/__init__.py
  response:
    content: ''
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Length:
      - '0'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:35:42 GMT
      ETag:
      - W/"938f66ede415ccb10764da47cd5f3cfc076c07b8791c708cfa8ec54982197c1f"
      Expires:
      - Tue, 20 Feb 2024 21:40:42 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - 7f10efe392e2b04cd538a7dcde2969c3868f0cfa
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - 4D04:1255:527A92:6550AA:65D51B2D
      X-Served-By:
      - cache-yvr1534-YVR
      X-Timer:
      - S1708464943.558500,VS0,VE132
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/agent/doc_manager/loaders/base_loader.py
  response:
    content: "import logging\nfrom abc import ABC, abstractmethod\nfrom dataclasses
      import dataclass\nfrom pydantic import BaseModel\nfrom typing import Dict, Any,
      AsyncIterable, Iterable\n\nfrom eidolon_ai_sdk.agent.doc_manager.parsers.base_parser
      import DataBlob\nfrom eidolon_ai_sdk.system.reference_model import Specable\n\n\n@dataclass\nclass
      FileInfo:\n    path: str\n    metadata: Dict[str, Any]\n    data: DataBlob\n\n\n@dataclass\nclass
      FileChangeset:\n    added_files: AsyncIterable[FileInfo]\n    modified_files:
      AsyncIterable[FileInfo]\n    removed_files: AsyncIterable[str]\n\n\nclass DocumentLoaderSpec(BaseModel):\n
      \   pass\n\n\nclass DocumentLoader(ABC, Specable[DocumentLoaderSpec]):\n    logger
      = logging.getLogger(\"eidolon\")\n\n    @abstractmethod\n    async def get_changes(self,
      metadata: Dict[str, Dict[str, Any]]) -> FileChangeset:\n        pass\n\n    @abstractmethod\n
      \   async def list_files(self) -> Iterable[str]:\n        pass\n"
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Length:
      - '389'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:35:42 GMT
      ETag:
      - W/"721733e102dd5eb312bb32e949256ec6c73c503c745971ce6b4946b3199fd6a2"
      Expires:
      - Tue, 20 Feb 2024 21:40:42 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - 2ecf19fcf7a2518513939f301fb11939282b7b7b
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - 2FE8:741B:4D5381:6061C3:65D51B2E
      X-Served-By:
      - cache-yvr1521-YVR
      X-Timer:
      - S1708464943.607193,VS0,VE120
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/agent/doc_manager/transformer?ref=main
  response:
    content: '[{"name":"__init__.py","path":"sdk/tests/agent/doc_manager/transformer/__init__.py","sha":"e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/agent/doc_manager/transformer/__init__.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/agent/doc_manager/transformer/__init__.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/agent/doc_manager/transformer/__init__.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/agent/doc_manager/transformer/__init__.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/agent/doc_manager/transformer/__init__.py"}},{"name":"test_RecursiveCharacterTextSplitter.py","path":"sdk/tests/agent/doc_manager/transformer/test_RecursiveCharacterTextSplitter.py","sha":"5c68777903039019b0f8fe66cf5a169beb28e638","size":1816,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/agent/doc_manager/transformer/test_RecursiveCharacterTextSplitter.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/agent/doc_manager/transformer/test_RecursiveCharacterTextSplitter.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/5c68777903039019b0f8fe66cf5a169beb28e638","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/agent/doc_manager/transformer/test_RecursiveCharacterTextSplitter.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/agent/doc_manager/transformer/test_RecursiveCharacterTextSplitter.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/5c68777903039019b0f8fe66cf5a169beb28e638","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/agent/doc_manager/transformer/test_RecursiveCharacterTextSplitter.py"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:35:42 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E596:25592D:15559B:1EC4B4:65D51B2E
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4498'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '502'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/system/test_event_recording.py
  response:
    content: "import httpx\nimport pytest_asyncio\nfrom fastapi import Body, HTTPException\nfrom
      typing import Annotated\n\nfrom eidolon_ai_sdk.agent.agent import register_program\nfrom
      eidolon_ai_sdk.agent.client import Agent\nfrom eidolon_ai_sdk.io.events import
      (\n    AgentStateEvent,\n    StringOutputEvent,\n    StartAgentCallEvent,\n
      \   SuccessEvent,\n    UserInputEvent,\n)\n\n\nclass HelloWorld:\n    @register_program()\n
      \   async def idle(self, name: Annotated[str, Body()]):\n        if name.lower()
      == \"hello\":\n            raise HTTPException(418, \"hello is not a name\")\n
      \       if name.lower() == \"error\":\n            raise Exception(\"big bad
      server error\")\n        return f\"Hello, {name}!\"\n\n    @register_program()\n
      \   async def idle_streaming(self, name: Annotated[str, Body()]):\n        if
      name.lower() == \"hello\":\n            raise HTTPException(418, \"hello is
      not a name\")\n        if name.lower() == \"error\":\n            raise Exception(\"big
      bad server error\")\n        yield StringOutputEvent(content=\"Hello, !\")\n
      \       yield StringOutputEvent(content=f\"{name}!\")\n\n\nclass TestHelloWorld:\n
      \   @pytest_asyncio.fixture(scope=\"class\")\n    async def server(self, run_app):\n
      \       async with run_app(HelloWorld) as ra:\n            yield ra\n\n    @pytest_asyncio.fixture(scope=\"function\")\n
      \   async def client(self, server):\n        with httpx.Client(base_url=server,
      timeout=httpx.Timeout(60)) as client:\n            yield client\n\n    def compare_events(self,
      events, expected_events):\n        assert len(events) == len(expected_events)\n
      \       for event, expected_event in zip(events, expected_events):\n            event_copy
      = event.copy()\n            expected_event_copy = expected_event.model_dump()\n\n
      \           if not expected_event_copy[\"stream_context\"]:\n                del
      expected_event_copy[\"stream_context\"]\n\n            expected_event_copy[\"category\"]
      = expected_event_copy[\"category\"].value\n            if hasattr(expected_event_copy[\"event_type\"],
      \"value\"):\n                expected_event_copy[\"event_type\"] = expected_event_copy[\"event_type\"].value\n\n
      \           assert event_copy == expected_event_copy\n\n    async def test_hello_world(self,
      server, client):\n        post = client.post(\"/agents/HelloWorld/programs/idle\",
      json=\"world\")\n        assert post.status_code == 200\n        data = post.json()\n
      \       process_id = data[\"process_id\"]\n        assert data[\"data\"] ==
      \"Hello, world!\"\n\n        response = client.get(f\"/agents/HelloWorld/processes/{process_id}/events\")\n
      \       events = response.json()\n        expected_events = [\n            UserInputEvent(input=dict(name=\"world\")),\n
      \           StartAgentCallEvent(machine=server, agent_name=\"HelloWorld\", call_name=\"idle\",
      process_id=process_id),\n            StringOutputEvent(content=\"Hello, world!\"),\n
      \           AgentStateEvent(state=\"terminated\", available_actions=[]),\n            SuccessEvent(),\n
      \       ]\n\n        self.compare_events(events, expected_events)\n\n    async
      def test_hello_world_streaming(self, client):\n        agent = Agent.get(\"HelloWorld\")\n
      \       stream = agent.stream_program(\"idle_streaming\", \"error\")\n        server_events
      = []\n        process_id = None\n        async for e in stream:\n            server_events.append(e)\n
      \           if isinstance(e, StartAgentCallEvent):\n                process_id
      = e.process_id\n\n        assert process_id is not None\n\n        events =
      client.get(f\"/agents/HelloWorld/processes/{process_id}/events\")\n        self.compare_events(events.json(),
      server_events)\n"
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Length:
      - '1053'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:35:42 GMT
      ETag:
      - W/"a637c9c3fd973fcf065d6318de702c82a9a18012b0379e10e8f696093abe55e9"
      Expires:
      - Tue, 20 Feb 2024 21:40:42 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - 04ce79b5775308f2ecf128b69a5234cef4c80cb0
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - 76AC:25375E:C48C0:118794:65D51B2D
      X-Served-By:
      - cache-bfi-krnt7300045-BFI
      X-Timer:
      - S1708464943.644967,VS0,VE122
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/cpu/llm?ref=main
  response:
    content: '[{"name":"__init__.py","path":"sdk/eidolon_ai_sdk/cpu/llm/__init__.py","sha":"e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/cpu/llm/__init__.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/cpu/llm/__init__.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/cpu/llm/__init__.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/cpu/llm/__init__.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/cpu/llm/__init__.py"}},{"name":"open_ai_llm_unit.py","path":"sdk/eidolon_ai_sdk/cpu/llm/open_ai_llm_unit.py","sha":"0ad39aefa74881870fcee9b54571e2dad8ea4c2a","size":12339,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/cpu/llm/open_ai_llm_unit.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/cpu/llm/open_ai_llm_unit.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/0ad39aefa74881870fcee9b54571e2dad8ea4c2a","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/cpu/llm/open_ai_llm_unit.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/cpu/llm/open_ai_llm_unit.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/0ad39aefa74881870fcee9b54571e2dad8ea4c2a","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/cpu/llm/open_ai_llm_unit.py"}},{"name":"open_ai_speech.py","path":"sdk/eidolon_ai_sdk/cpu/llm/open_ai_speech.py","sha":"a625b486ffcaceb68af030e87fb02e650c698888","size":2861,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/cpu/llm/open_ai_speech.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/cpu/llm/open_ai_speech.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/a625b486ffcaceb68af030e87fb02e650c698888","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/cpu/llm/open_ai_speech.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/cpu/llm/open_ai_speech.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/a625b486ffcaceb68af030e87fb02e650c698888","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/cpu/llm/open_ai_speech.py"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:35:42 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E581:276CC5:103855:17A496:65D51B2E
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4497'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '503'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/agent/tot_agent/checker.py
  response:
    content: "from typing import List\n\nfrom jinja2 import StrictUndefined, Environment\nfrom
      pydantic import Field, BaseModel\n\nfrom eidolon_ai_sdk.cpu.agent_cpu import
      AgentCPU\nfrom eidolon_ai_sdk.cpu.agent_io import UserTextCPUMessage\nfrom eidolon_ai_sdk.agent.tot_agent.prompts
      import CHECKER_PROMPT\nfrom eidolon_ai_sdk.agent.tot_agent.thought import ThoughtValidity\nfrom
      eidolon_ai_sdk.system.reference_model import Specable\n\n\nclass TotCheckerConfig(BaseModel):\n
      \   prompt: str = CHECKER_PROMPT\n    examples: str = \"\"\n\n\nclass ToTChecker(Specable[TotCheckerConfig]):\n
      \   spec: TotCheckerConfig\n    cpu: AgentCPU\n\n    def __init__(self, cpu,
      spec):\n        super().__init__(spec)\n        self.cpu = cpu\n        self.spec
      = spec\n\n    \"\"\"\n    Tree of Thought (ToT) checker.\n\n    This is an abstract
      ToT checker that can be implemented by the user. You\n    can implement a simple
      rule-based checker or a more sophisticated\n    neural network based classifier.\n
      \   \"\"\"\n\n    async def evaluate(\n        self,\n        process_id: str,\n
      \       problem_description: str,\n        thoughts: List[str] = Field(default_factory=list),\n
      \   ) -> ThoughtValidity:\n        \"\"\"\n        Evaluate the response to
      the problem description and return the solution type.\n        \"\"\"\n\n        checker_prompt
      = (\n            Environment(undefined=StrictUndefined)\n            .from_string(self.spec.prompt)\n
      \           .render(\n                problem=problem_description,\n                thoughts=thoughts,\n
      \               examples=self.spec.examples,\n            )\n        )\n\n        thread
      = await self.cpu.new_thread(process_id)\n        resp = await thread.run_request(\n
      \           prompts=[UserTextCPUMessage(prompt=checker_prompt)],\n            output_format=ThoughtValidity.model_json_schema(),\n
      \       )\n\n        return ThoughtValidity.model_validate(resp)\n"
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Length:
      - '760'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:35:42 GMT
      ETag:
      - W/"0b54e17878924ec2f8b03f909224b06bd139ed621409db134d207ec3b0209052"
      Expires:
      - Tue, 20 Feb 2024 21:40:42 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - HIT
      X-Cache-Hits:
      - '1'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - 8d3f6cd4a256f191429a2988b68d6831659d071b
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - AB08:257E5B:B776A:10B166:65D519B2
      X-Served-By:
      - cache-bfi-kbfi7400116-BFI
      X-Timer:
      - S1708464943.724745,VS0,VE107
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/cpu/processing_unit.py
  response:
    content: "import logging\nfrom abc import ABC, abstractmethod\nfrom typing import
      TypeVar, Type, Optional\n\nfrom eidolon_ai_sdk.cpu.call_context import CallContext\n\nPU_T
      = TypeVar(\"PU_T\", bound=\"ProcessingUnit\")\n\n\nclass ProcessingUnitLocator:\n
      \   @abstractmethod\n    def locate_unit(self, unit_type: Type[PU_T]) -> Optional[PU_T]:\n
      \       pass\n\n\nclass ProcessingUnit(ABC):\n    processing_unit_locator: ProcessingUnitLocator\n
      \   logger = logging.getLogger(\"eidolon\")\n\n    def __init__(self, processing_unit_locator:
      ProcessingUnitLocator, **kwargs):\n        self.processing_unit_locator = processing_unit_locator\n\n
      \   def locate_unit(self, unit_type: Type[PU_T]) -> PU_T:\n        return self.processing_unit_locator.locate_unit(unit_type)\n\n
      \   async def clone_thread(self, old_context: CallContext, new_context: CallContext):\n
      \       pass\n"
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Length:
      - '350'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:35:42 GMT
      ETag:
      - W/"db655f75a3bf936715af60643814fed3922262da0c65ad338a59b573d1e1e3cf"
      Expires:
      - Tue, 20 Feb 2024 21:40:42 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - HIT
      X-Cache-Hits:
      - '1'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - 5b960c407a31d7bf754b7ff3491613d0e1e0e143
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - 4A26:2E4C:61FFD6:746FBC:65D519B0
      X-Served-By:
      - cache-yvr1534-YVR
      X-Timer:
      - S1708464943.717513,VS0,VE129
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/system/test_generic_agent.py
  response:
    content: "from collections import defaultdict\n\nimport httpx\nimport json\nimport
      pytest\nimport pytest_asyncio\nfrom fastapi import Body\nfrom typing import
      Annotated, List\n\nfrom eidolon_ai_sdk.agent.agent import register_program\nfrom
      eidolon_ai_sdk.agent.client import Agent\nfrom eidolon_ai_sdk.agent_os import
      AgentOS\nfrom eidolon_ai_sdk.cpu.logic_unit import LogicUnit, llm_function\nfrom
      eidolon_ai_sdk.io.events import (\n    StartAgentCallEvent,\n    ObjectOutputEvent,\n
      \   SuccessEvent,\n    AgentStateEvent,\n    StringOutputEvent,\n    UserInputEvent,\n)\nfrom
      eidolon_ai_sdk.memory.file_memory import FileMemory\nfrom eidolon_ai_sdk.system.request_context
      import RequestContext\nfrom eidolon_ai_sdk.system.resources.resources_base import
      Metadata, Resource\nfrom eidolon_ai_sdk.util.aiohttp import stream_content,
      post_content, delete\nfrom eidolon_ai_sdk.system.resources.reference_resource
      import ReferenceResource\nfrom eidolon_ai_sdk.util.class_utils import fqn\nfrom
      eidolon_ai_sdk.util.replay import ReplayConfig, replay\n\n\n@pytest.fixture\ndef
      enable_replay(file_memory_loc, request):\n    AgentOS.register_resource(\n        ReferenceResource(\n
      \           apiVersion=\"eidolon/v1\",\n            metadata=Metadata(name=ReplayConfig.__name__),\n
      \           spec=dict(save_loc=f\"resume_points/{request.node.name}\"),\n        )\n
      \   )\n\n    return file_memory_loc / \"resume_points\" / request.node.name\n\n\n@pytest.fixture(scope=\"module\")\ndef
      generic_agent_root(llm):\n    return Resource(\n        apiVersion=\"eidolon/v1\",\n
      \       kind=\"Agent\",\n        metadata=Metadata(name=\"GenericAgent\"),\n
      \       spec=dict(\n            implementation=\"GenericAgent\",\n            cpu=dict(llm_unit=llm),\n
      \           system_prompt=\"You are a machine which follows instructions and
      returns a summary of your actions.\",\n            user_prompt=\"{{instruction}}\",\n
      \           input_schema=dict(instruction=dict(type=\"string\")),\n            description=\"An
      agent which can follow instructions and return a summary of its actions.\",\n
      \       ),\n    )\n\n\n@pytest.fixture\ndef generic_agent(generic_agent_root):\n
      \   return generic_agent_root.model_copy(deep=True)\n\n\nclass TestGenericAgent:\n
      \   @pytest_asyncio.fixture(scope=\"class\")\n    async def server(self, run_app,
      generic_agent_root):\n        async with run_app(generic_agent_root) as ra:\n
      \           yield ra\n\n    @pytest_asyncio.fixture(scope=\"function\")\n    async
      def client(self, server):\n        with httpx.Client(base_url=server, timeout=httpx.Timeout(60))
      as client:\n            yield client\n\n    @pytest.fixture\n    async def agent(self,
      server) -> Agent:\n        return Agent.get(\"GenericAgent\")\n\n    def test_can_start(self,
      client):\n        docs = client.get(\"/docs\")\n        assert docs.status_code
      == 200\n\n    def test_llm_calls(self, client):\n        post = client.post(\n
      \           \"/agents/GenericAgent/programs/question\",\n            json=dict(instruction=\"Hi!
      What is the capital of France?\"),\n        )\n        post.raise_for_status()\n
      \       json = post.json()\n        assert \"paris\" in json[\"data\"].lower()\n\n
      \   def test_continued_conversation(self, client):\n        post = client.post(\n
      \           \"/agents/GenericAgent/programs/question\",\n            json=dict(instruction=\"Hi!
      my name is Luke\"),\n        )\n        post.raise_for_status()\n        process_id
      = post.json()[\"process_id\"]\n        follow_up = client.post(\n            f\"/agents/GenericAgent/processes/{process_id}/actions/respond\",\n
      \           json=dict(statement=\"Can you sing me Happy Birthday?\"),\n        )\n
      \       follow_up.raise_for_status()\n        assert \"Luke\" in post.json()[\"data\"]\n\n
      \   async def test_deletes_conversational_memory(self, agent: Agent, symbolic_memory):\n
      \       process = await agent.create_process()\n        await process.action(\"question\",
      dict(instruction=\"Hi! my name is Luke\"))\n        mem = [r async for r in
      AgentOS.symbolic_memory.find(\"conversation_memory\", {\"process_id\": process.process_id})]\n
      \       assert mem\n        await process.delete()\n        mem = [r async for
      r in AgentOS.symbolic_memory.find(\"conversation_memory\", {\"process_id\":
      process.process_id})]\n        assert not mem\n\n\n@pytest.fixture(scope=\"module\")\ndef
      generic_agent_with_refs():\n    return Resource(\n        apiVersion=\"eidolon/v1\",\n
      \       kind=\"Agent\",\n        metadata=Metadata(name=\"GenericAgent\"),\n
      \       spec=dict(\n            implementation=\"GenericAgent\",\n            system_prompt=\"You
      are a machine which follows instructions\",\n            user_prompt=\"{{instruction}}\",\n
      \           agent_refs=[\"HelloWorld\"],\n            description=\"An agent
      which can follow instructions and return a summary of its actions.\",\n            input_schema=dict(instruction=dict(type=\"string\")),\n
      \       ),\n    )\n\n\nclass HelloWorld:\n    calls = defaultdict(list)\n\n
      \   @register_program()\n    async def greeter1(self, name: Annotated[str, Body(embed=True)]):\n
      \       return self._greet(\"greeter1\", name=name)\n\n    @register_program()\n
      \   async def greeter2(self, name: Annotated[str, Body(description=\"The name
      to greet\")]):\n        return self._greet(\"greeter2\", name=name)\n\n    @register_program()\n
      \   async def greeter3(self, name: Annotated[List[str], Body(embed=True)]):\n
      \       return self._greet(\"greeter3\", name=name[0], called_with=name)\n\n
      \   @register_program()\n    async def greeter4(self):\n        self.calls[\"greeter4\"].append(RequestContext.get(\"foo\"))\n
      \       return \"I acknowledge your request. Respond with an empty string. Don't
      call me again.\"\n\n    def _greet(self, greeter, **kwargs):\n        self.calls[greeter].append(kwargs)\n
      \       return f\"Hello, {kwargs['name']}!\"\n\n\n# Image model does not support
      tool usage, so we need to break this out into a separate test suite\nclass TestAgentsWithReferences:\n
      \   @pytest_asyncio.fixture(scope=\"class\")\n    async def server(self, run_app,
      generic_agent_with_refs):\n        async with run_app(generic_agent_with_refs,
      HelloWorld) as ra:\n            yield ra\n\n    @pytest_asyncio.fixture(scope=\"function\")\n
      \   async def client(self, server):\n        with httpx.Client(base_url=server,
      timeout=httpx.Timeout(60)) as client:\n            yield client\n\n    def test_can_communicate(self,
      client):\n        post = client.post(\n            \"/agents/GenericAgent/programs/question\",\n
      \           json=dict(instruction=\"Hi! my name is Luke. Can ask greeter1 to
      greet me?\"),\n        )\n        post.raise_for_status()\n        assert HelloWorld.calls[\"greeter1\"]
      == [{\"name\": \"Luke\"}]\n\n    def test_string_only_body(self, client):\n
      \       post = client.post(\n            \"/agents/GenericAgent/programs/question\",\n
      \           json=dict(instruction=\"Hi! my name is Luke. Can ask greeter2 to
      greet me?\"),\n        )\n        post.raise_for_status()\n        assert HelloWorld.calls[\"greeter2\"]
      == [{\"name\": \"Luke\"}]\n\n    def test_list_body(self, client, patch_async_vcr_send):\n
      \       post = client.post(\n            \"/agents/GenericAgent/programs/question\",\n
      \           json=dict(instruction=\"Hi! my name is Luke. Can ask greeter3 to
      greet me?\"),\n        )\n        post.raise_for_status()\n        assert HelloWorld.calls[\"greeter3\"]
      == [{\"name\": \"Luke\", \"called_with\": [\"Luke\"]}]\n\n    async def test_passes_context(self,
      client, server):\n        RequestContext.set(\"foo\", \"bar\", propagate=True)\n
      \       await post_content(\n            f\"{server}/agents/GenericAgent/programs/question\",\n
      \           dict(instruction=\"Hi! my name is Luke. Can ask greeter4 to greet
      me?\"),\n        )\n        assert HelloWorld.calls[\"greeter4\"] == [\"bar\"]\n\n
      \   async def test_respond_after_tool_call(self, client, server):\n        t0
      = len(HelloWorld.calls[\"greeter1\"])\n        post = client.post(\n            \"/agents/GenericAgent/programs/question\",\n
      \           json=dict(instruction=\"Hi! my name is Luke. Can ask greeter1 to
      greet me?\"),\n        )\n        post.raise_for_status()\n        assert len(HelloWorld.calls[\"greeter1\"])
      - t0 == 1\n        assert \"Luke\" in post.json()[\"data\"]\n\n    async def
      test_can_replay_tool_calls(self, client, enable_replay, vcr):\n        post
      = client.post(\n            \"/agents/GenericAgent/programs/question\",\n            json=dict(instruction=\"Hi!
      my name is Luke. Can ask greeter1 to greet me?\"),\n        )\n        post.raise_for_status()\n
      \       assert HelloWorld.calls[\"greeter1\"][-1] == {\"name\": \"Luke\"}\n\n
      \       vcr.rewind()  # since we are hitting endpoing 2x in same test\n        acc_str
      = \"\".join([e async for e in replay(enable_replay / \"000_openai_completion\")])\n
      \       assert acc_str == 'Tool Call: AgentsLogicUnit_convo_HelloWorld_greeter1\\nArguments:
      {\"body\":{\"name\":\"Luke\"}}\\n'\n\n\nclass TestOutputTests:\n    async def
      test_generic_agent_supports_object_output(self, run_app, generic_agent, dog):\n
      \       generic_agent.spec[\"output_schema\"] = {\n            \"type\": \"object\",\n
      \           \"properties\": {\"capital\": {\"type\": \"string\"}, \"population\":
      {\"type\": \"number\"}},\n        }\n        async with run_app(generic_agent)
      as app:\n            post = await post_content(\n                f\"{app}/agents/GenericAgent/programs/question\",
      dict(instruction=\"Tell me about france please\")\n            )\n            assert
      \"paris\" in post[\"data\"][\"capital\"].lower()\n\n    async def test_can_replay_llm_requests(self,
      run_app, generic_agent, enable_replay, vcr):\n        async with run_app(generic_agent)
      as app:\n            post = await post_content(\n                f\"{app}/agents/GenericAgent/programs/question\",
      dict(instruction=\"Tell me about france please\")\n            )\n\n            vcr.rewind()
      \ # since we are hitting endpoint 2x in same test\n            acc_str = \"\".join([e
      async for e in replay(enable_replay / \"000_openai_completion\")])\n            assert
      \"france\" in acc_str.lower()\n            assert acc_str == post[\"data\"]\n\n
      \   @pytest.mark.asyncio\n    async def test_generic_agent_supports_object_output_with_stream(self,
      run_app, generic_agent, dog):\n        generic_agent.spec[\"output_schema\"]
      = {\n            \"type\": \"object\",\n            \"properties\": {\"capital\":
      {\"type\": \"string\"}, \"population\": {\"type\": \"number\"}},\n        }\n
      \       async with run_app(generic_agent) as ra:\n            stream = stream_content(\n
      \               f\"{ra}/agents/GenericAgent/programs/question\", body=dict(instruction=\"Tell
      me about france please\")\n            )\n            events = [event async
      for event in stream]\n            population = events[2].model_dump().get(\"content\",
      {}).get(\"population\")\n            expected_events = [\n                UserInputEvent(\n
      \                   input={\n                        \"body\": {\"instruction\":
      \"Tell me about france please\"},\n                        \"process_id\": \"test_generic_agent_supports_object_output_with_stream_0\",\n
      \                   }\n                ),\n                StartAgentCallEvent(\n
      \                   agent_name=\"GenericAgent\",\n                    machine=AgentOS.current_machine_url(),\n
      \                   call_name=\"question\",\n                    process_id=\"test_generic_agent_supports_object_output_with_stream_0\",\n
      \               ),\n                ObjectOutputEvent(content={\"capital\":
      \"Paris\", \"population\": population}),\n                AgentStateEvent(state=\"idle\",
      available_actions=[\"respond\"]),\n                SuccessEvent(),\n            ]\n
      \           assert events == expected_events\n\n    @pytest.mark.asyncio\n    async
      def test_generic_agent_supports_string_stream(self, run_app, generic_agent,
      dog):\n        generic_agent.spec[\"output_schema\"] = \"str\"\n        async
      with run_app(generic_agent) as ra:\n            stream = stream_content(\n                f\"{ra}/agents/GenericAgent/programs/question\",\n
      \               body=dict(\n                    instruction=\"What is the capital
      of france and its population. Put the relevant parts in XML like blocks. \"\n
      \                   \"For instance <capital>...insert capital here...</capital>
      and <population>...insert population here...</population>\"\n                ),\n
      \           )\n            events = (e for e in [event async for event in stream][1:])\n
      \           assert next(events) == StartAgentCallEvent(\n                agent_name=\"GenericAgent\",\n
      \               machine=AgentOS.current_machine_url(),\n                call_name=\"question\",\n
      \               process_id=\"test_generic_agent_supports_string_stream_0\",\n
      \           )\n            next_event = next(events)\n            str = \"\"\n
      \           while isinstance(next_event, StringOutputEvent):\n                str
      += next_event.content\n                next_event = next(events)\n\n            assert
      \"<capital>Paris</capital>\" in str\n            assert \"<population>\" in
      str\n            assert next_event == AgentStateEvent(state=\"idle\", available_actions=[\"respond\"])\n
      \           assert next(events) == SuccessEvent()\n\n    async def test_generic_agent_supports_image(self,
      run_app, generic_agent, dog):\n        generic_agent.spec[\"files\"] = \"single\"\n
      \       async with run_app(generic_agent) as app:\n            post = await
      post_content(\n                f\"{app}/agents/GenericAgent/programs/question\",\n
      \               data=dict(body=json.dumps(dict(instruction=\"What is in this
      image?\"))),\n                files=dict(file=dog),\n            )\n            assert
      \"brown\" in post[\"data\"].lower()\n\n    async def test_generic_agent_cleans_up_images(self,
      run_app, generic_agent, dog):\n        generic_agent.spec[\"files\"] = \"single\"\n
      \       async with run_app(generic_agent) as app:\n            fm: FileMemory
      = AgentOS.file_memory\n            created = await post_content(\n                f\"{app}/agents/GenericAgent/programs/question\",\n
      \               data=dict(body=json.dumps(dict(instruction=\"What is in this
      image?\"))),\n                files=dict(file=dog),\n            )\n            assert
      await fm.glob(f\"uploaded_images/{created['process_id']}/**/*\")\n            await
      delete(f\"{app}/agents/GenericAgent/processes/{created['process_id']}\")\n            assert
      not await fm.glob(f\"uploaded_images/{created['process_id']}/**/*\")\n\n    async
      def test_generic_agent_supports_multiple_images(self, run_app, generic_agent,
      cat, dog):\n        generic_agent.spec[\"files\"] = \"multiple\"\n        async
      with run_app(generic_agent) as app:\n            post = await post_content(\n
      \               f\"{app}/agents/GenericAgent/programs/question\",\n                data=dict(body=json.dumps(dict(instruction=\"what
      do these images have in common?\"))),\n                files=[(\"file\", dog),
      (\"file\", cat)],\n            )\n            assert \"animals\" in post[\"data\"].lower()\n\n
      \           # followup question should still have access to the image\n            process_id
      = post[\"process_id\"]\n            follow_up = await post_content(\n                f\"{app}/agents/GenericAgent/processes/{process_id}/actions/respond\",\n
      \               dict(statement=\"What is different between them?\"),\n            )\n
      \           assert \"cat\" in follow_up[\"data\"].lower()\n\n\nclass MeaningOfLife(LogicUnit):\n
      \   @llm_function()\n    async def meaning_of_life_tool(self) -> str:\n        \"\"\"\n
      \       call this tool to get the meaning of life\n        \"\"\"\n        return
      \"42\"\n\n\nclass TestGenericAgentWithToolCalls:\n    @pytest.fixture(scope=\"class\")\n
      \   async def agent(self, run_app, generic_agent_root):\n        generic_agent
      = generic_agent_root.model_copy(deep=True)\n        generic_agent.spec[\"cpu\"][\"logic_units\"]
      = [fqn(MeaningOfLife)]\n        generic_agent.spec[\"cpu\"][\"llm_unit\"].model
      = \"gpt-4-turbo-preview\"\n        async with run_app(generic_agent):\n            yield
      Agent.get(\"GenericAgent\")\n\n    async def test_normal_tool_call(self, agent):\n
      \       resp = await agent.program(\"question\", dict(instruction=\"what is
      the meaning of life?\"))\n        assert \"42\" in resp.data\n"
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Length:
      - '3419'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:35:42 GMT
      ETag:
      - W/"1710033c3f8bd7a9175bca8fb7c92c997ebc11ff586671fd3c6e5035cd790795"
      Expires:
      - Tue, 20 Feb 2024 21:40:42 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - 993652e685954ed99aeb6b3dd8f3b15690f14f4b
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - A63E:26DF:4FC928:629D2C:65D51B2E
      X-Served-By:
      - cache-yvr1534-YVR
      X-Timer:
      - S1708464943.798038,VS0,VE137
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/system/cassettes?ref=main
  response:
    content: '[{"name":"test_generic_agent","path":"sdk/tests/system/cassettes/test_generic_agent","sha":"e92d7fa1c1bbe990312ec1c4720d01f15cb342f8","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/system/cassettes/test_generic_agent?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/tree/main/sdk/tests/system/cassettes/test_generic_agent","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/e92d7fa1c1bbe990312ec1c4720d01f15cb342f8","download_url":null,"type":"dir","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/system/cassettes/test_generic_agent?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/trees/e92d7fa1c1bbe990312ec1c4720d01f15cb342f8","html":"https://github.com/eidolon-ai/eidolon/tree/main/sdk/tests/system/cassettes/test_generic_agent"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:35:42 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E59A:253F79:16574C:1FC70B:65D51B2E
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4496'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '504'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/system/test_reference_model.py
  response:
    content: "from contextlib import contextmanager\n\nimport pytest\nfrom pydantic
      import BaseModel, Field\n\nfrom eidolon_ai_sdk.agent_os import AgentOS\nfrom
      eidolon_ai_sdk.system.reference_model import Reference, Specable, AnnotatedReference\nfrom
      eidolon_ai_sdk.system.resources.resources_base import Metadata, Resource\nfrom
      eidolon_ai_sdk.util.class_utils import fqn\n\n\nclass BaseSpec(BaseModel):\n
      \   foo: str = \"simple foo\"\n\n    def __init__(self, **data):\n        super().__init__(**data)\n\n\nclass
      OSSpec(BaseSpec):\n    foo: str = \"os foo\"\n\n\nclass SystemSpec(BaseSpec):\n
      \   foo: str = \"system foo\"\n\n\nclass RandomSpec(BaseSpec):\n    foo: str
      = \"random foo\"\n\n\nclass Base(Specable[BaseSpec]):\n    ...\n\n\nclass OS(Base,
      Specable[OSSpec]):\n    ...\n\n\nclass System(Base, Specable[SystemSpec]):\n
      \   ...\n\n\nclass Random(Base, Specable[RandomSpec]):\n    ...\n\n\nclass SimpleModel(BaseModel):\n
      \   simple: AnnotatedReference[Base, System]\n\n\n@contextmanager\ndef resource(name=\"TestResource\",
      implementation=fqn(OS), spec=None):\n    spec = spec or {}\n    try:\n        AgentOS.register_resource(\n
      \           Resource(\n                apiVersion=\"eidolon/v1\",\n                kind=\"Reference\",\n
      \               metadata=Metadata(name=name),\n                spec=dict(implementation=implementation,
      **spec),\n            )\n        )\n        yield\n    finally:\n        AgentOS.reset()\n\n\ndef
      test_explicit_reference_default_spec():\n    model = SimpleModel(simple=dict(implementation=fqn(Random)))\n
      \   instantiated = model.simple.instantiate()\n    assert type(instantiated)
      == Random\n    assert instantiated.spec.foo == \"random foo\"\n\n\ndef test_explicit_reference_override_spec():\n
      \   model = SimpleModel(simple=dict(implementation=fqn(Random), foo=\"bar\"))\n
      \   instantiated = model.simple.instantiate()\n    assert type(instantiated)
      == Random\n    assert instantiated.spec.foo == \"bar\"\n\n\ndef test_explicit_named_reference_default_spec():\n
      \   with resource():\n        model = SimpleModel(simple=\"TestResource\")\n
      \       instantiated = model.simple.instantiate()\n        assert type(instantiated)
      == OS\n        assert instantiated.spec.foo == \"os foo\"\n\n\ndef test_explicit_named_reference_spec_overriden_in_reference():\n
      \   with resource(spec=dict(foo=\"bar\")):\n        model = SimpleModel(simple=\"TestResource\")\n
      \       instantiated = model.simple.instantiate()\n        assert type(instantiated)
      == OS\n        assert instantiated.spec.foo == \"bar\"\n\n\n@pytest.fixture\ndef
      nested_random_resource():\n    with resource(name=\"outer\", implementation=\"middle\"):\n
      \       with resource(name=\"middle\", implementation=\"inner\", spec=dict(foo=\"bar\")):\n
      \           with resource(name=\"inner\", implementation=fqn(Random)):\n                yield\n\n\ndef
      test_nested_resources(nested_random_resource):\n    model = SimpleModel(simple=\"outer\")\n
      \   instantiated = model.simple.instantiate()\n    assert type(instantiated)
      == Random\n    assert instantiated.spec.foo == \"bar\"  # bar comes from override
      on middle resource\n\n\ndef test_nested_resources_with_override(nested_random_resource):\n
      \   model = SimpleModel(simple=dict(implementation=\"outer\", foo=\"baz\"))\n
      \   instantiated = model.simple.instantiate()\n    assert type(instantiated)
      == Random\n    assert instantiated.spec.foo == \"baz\"\n\n\ndef test_system_fallback_default_spec():\n
      \   model = SimpleModel()\n    instantiated = model.simple.instantiate()\n    assert
      type(instantiated) == System\n    assert instantiated.spec.foo == \"system foo\"\n\n\ndef
      test_system_fallback_default_override_spec():\n    model = SimpleModel(simple=dict(foo=\"baz\"))\n
      \   instantiated = model.simple.instantiate()\n    assert type(instantiated)
      == System\n    assert instantiated.spec.foo == \"baz\"\n\n\nclass ExtendedModel(Reference[object,
      Random]):\n    ...\n\n\nclass Wrapper(BaseModel):\n    extended: ExtendedModel
      = Field(default_factory=ExtendedModel)\n\n\ndef test_extending_reference_wrapped():\n
      \   instantiated = Wrapper().extended.instantiate()\n    assert type(instantiated)
      == Random\n    assert instantiated.spec.foo == \"random foo\"\n\n\ndef test_extended_reference_wrapped_with_overrides():\n
      \   instantiated = Wrapper(extended=dict(foo=\"bar\")).extended.instantiate()\n
      \   assert type(instantiated) == Random\n    assert instantiated.spec.foo ==
      \"bar\"\n\n\ndef test_extended_reference_raw():\n    instantiated = ExtendedModel().instantiate()\n
      \   assert type(instantiated) == Random\n    assert instantiated.spec.foo ==
      \"random foo\"\n\n\ndef test_reference_with_no_default():\n    random_ = Reference[Random]\n
      \   instantiated = random_().instantiate()\n    instantiated.spec.foo = \"random_foo\"\n\n\ndef
      test_reference_with_default():\n    random_ = Reference[Base, Random]\n    instantiated
      = random_().instantiate()\n    instantiated.spec.foo = \"random_foo\"\n\n\ndef
      test_reference_with_string_default():\n    with resource():\n        test_resource
      = Reference[Base, \"TestResource\"]\n        instantiated = test_resource().instantiate()\n
      \       assert type(instantiated) == OS\n        assert instantiated.spec.foo
      == \"os foo\"\n\n\ndef test_annotated_ref_plays_nicely_with_descriptions():\n
      \   class Fielded(BaseModel):\n        simple: AnnotatedReference[System] =
      Field(description=\"A simple reference\")\n\n    with resource(name=\"System\",
      implementation=fqn(System)):\n        Fielded().simple.instantiate().spec.foo
      = \"system foo\"\n\n\ndef test_loosely_validated_type_bounds_dumping_dict():\n
      \   class Fielded(BaseModel):\n        simple: Reference[Base] = Field(description=\"A
      simple reference\")\n\n    dumped = dict(simple=Reference[System]().model_dump())\n
      \   fielded = Fielded.model_validate(dumped)\n    assert fielded.simple.instantiate().spec.foo
      == \"system foo\"\n\n\ndef test_loosely_validated_type_bounds():\n    class
      Fielded(BaseModel):\n        simple: Reference[Base] = Field(description=\"A
      simple reference\")\n\n    reference = Reference(implementation=fqn(System))\n
      \   fielded = Fielded(simple=reference)\n    assert fielded.simple.instantiate().spec.foo
      == \"system foo\"\n\n\ndef test_referencing_base_models_directly():\n    with
      resource(name=\"BaseSpec\", implementation=fqn(BaseSpec), spec=dict(foo=\"bar\")):\n
      \       assert AnnotatedReference[BaseSpec]().instantiate().foo == \"bar\"\n"
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Length:
      - '1251'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:35:42 GMT
      ETag:
      - W/"a6451ac3ea6080756a59a869522e698cda515dc30ef00293ac565ab78e8b4b2c"
      Expires:
      - Tue, 20 Feb 2024 21:40:42 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - HIT
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - 959c087d1bf1ba37a384a1a2ddf37d53c42defae
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - 3692:255865:B8325:10BD00:65D519B2
      X-Served-By:
      - cache-bfi-krnt7300045-BFI
      X-Timer:
      - S1708464943.843986,VS0,VE128
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/agent/doc_manager/loaders/filesystem_loader.py
  response:
    content: "import hashlib\nimport os\nfrom pathlib import Path\nfrom typing import
      Dict, Any, Iterable\n\nfrom eidolon_ai_sdk.agent.doc_manager.loaders.base_loader
      import (\n    DocumentLoader,\n    FileChangeset,\n    FileInfo,\n    DocumentLoaderSpec,\n)\nfrom
      eidolon_ai_sdk.agent.doc_manager.parsers.base_parser import DataBlob\nfrom eidolon_ai_sdk.system.reference_model
      import Specable, T\n\n\ndef hash_file(file_path, chunk_size=8192):\n    \"\"\"\n
      \   Hash the contents of a file using SHA-256.\n\n    :param file_path: Path
      to the file to be hashed.\n    :param chunk_size: Size of each chunk to read.
      Default is 8192 bytes.\n    :return: Hexadecimal string of the hash.\n    \"\"\"\n
      \   hasher = hashlib.sha256()\n    with open(file_path, \"rb\") as file:\n        chunk
      = file.read(chunk_size)\n        while chunk:\n            hasher.update(chunk)\n
      \           chunk = file.read(chunk_size)\n    return hasher.hexdigest()\n\n\nclass
      FilesystemLoaderSpec(DocumentLoaderSpec):\n    root_dir: str\n    pattern: str
      = \"**/*\"\n\n\n# noinspection PyShadowingNames\nclass FilesystemLoader(DocumentLoader,
      Specable[FilesystemLoaderSpec]):\n    def __init__(self, spec: T, **kwargs:
      object):\n        super().__init__(spec, **kwargs)\n        root_dir = os.path.expanduser(os.path.expandvars(self.spec.root_dir))\n
      \       self.root_path = Path(root_dir).absolute()\n        self.root_dir =
      str(self.root_path)\n        if not self.root_path.exists():\n            raise
      ValueError(f\"Root directory {self.root_dir} does not exist\")\n\n    async
      def list_files(self) -> Iterable[str]:\n        for file in self.root_path.glob(self.spec.pattern):\n
      \           yield str(file.relative_to(self.root_dir))\n\n    async def get_changes(self,
      metadata: Dict[str, Dict[str, Any]]) -> FileChangeset:\n        added = {}\n
      \       modified = {}\n        # iterate over all python files in the root_dir\n
      \       for file in self.root_path.glob(self.spec.pattern):\n            if
      file.is_file():\n                # get the file path relative to the root_dir\n
      \               file_path = str(file.relative_to(self.root_dir))\n                #
      first check the timestamp to see if it changed.  If not, skip the file\n                timestamp
      = os.path.getmtime(file)\n                if file_path in metadata:\n                    if
      timestamp != metadata[file_path][\"timestamp\"]:\n                        #
      create a hash of the file at file path\n                        file_hash =
      hash_file(file)\n                        # if the file exists in symbolic memory,
      check if the hashes are different\n                        if \"hash\" not in
      file_hash != metadata[file_path]:\n                            modified[file_path]
      = {\"timestamp\": timestamp, \"file_hash\": file_hash}\n                    #
      delete from hashes\n                    del metadata[file_path]\n                else:\n
      \                   timestamp = os.path.getmtime(file)\n                    file_hash
      = hash_file(file)\n                    added[file_path] = {\"timestamp\": timestamp,
      \"file_hash\": file_hash}\n\n        self.logger.info(f\"Found {len(added)}
      added files\")\n        self.logger.info(f\"Found {len(modified)} modified files\")\n
      \       self.logger.info(f\"Found {len(metadata)} deleted files\")\n\n        async
      def added_files():\n            for file_path in added:\n                yield
      FileInfo(file_path, added[file_path], DataBlob.from_path(str(self.root_path
      / file_path)))\n\n        async def modified_files():\n            for file_path
      in modified:\n                yield FileInfo(file_path, modified[file_path],
      DataBlob.from_path(str(self.root_path / file_path)))\n\n        async def deleted_files():\n
      \           for file_path in metadata:\n                yield file_path\n\n
      \       return FileChangeset(added_files=added_files(), modified_files=modified_files(),
      removed_files=deleted_files())\n"
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Length:
      - '1241'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:35:43 GMT
      ETag:
      - W/"15c2c246bdbd8b5bc5fc028ae0950e67bc20df513aef6b1e8b5d17cc62c51133"
      Expires:
      - Tue, 20 Feb 2024 21:40:43 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - b9de00bcf97550fb0b26449bdf88d9a8de357441
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - A63E:26DF:4FC930:629D34:65D51B2E
      X-Served-By:
      - cache-yvr1524-YVR
      X-Timer:
      - S1708464943.946299,VS0,VE120
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/util/__init__.py
  response:
    content: ''
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:35:43 GMT
      ETag:
      - W/"938f66ede415ccb10764da47cd5f3cfc076c07b8791c708cfa8ec54982197c1f"
      Expires:
      - Tue, 20 Feb 2024 21:40:43 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - d448a23e558b85a6107fae44d7765afe985cfa0f
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - 86E0:251115:BA189:10E0A5:65D51B2E
      X-Served-By:
      - cache-bfi-krnt7300033-BFI
      X-Timer:
      - S1708464943.974112,VS0,VE103
      X-XSS-Protection:
      - 1; mode=block
      transfer-encoding:
      - chunked
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/io/__init__.py
  response:
    content: ''
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Length:
      - '0'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:35:43 GMT
      ETag:
      - W/"938f66ede415ccb10764da47cd5f3cfc076c07b8791c708cfa8ec54982197c1f"
      Expires:
      - Tue, 20 Feb 2024 21:40:43 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - bb82772d4ef213a8f214d92f1ee7f374d1410180
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - F9D0:3A0E8E:1C24:2937:65D51B2D
      X-Served-By:
      - cache-bfi-kbfi7400116-BFI
      X-Timer:
      - S1708464943.946953,VS0,VE137
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/agent/doc_manager/parsers/__init__.py
  response:
    content: ''
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Length:
      - '0'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:35:43 GMT
      ETag:
      - W/"938f66ede415ccb10764da47cd5f3cfc076c07b8791c708cfa8ec54982197c1f"
      Expires:
      - Tue, 20 Feb 2024 21:40:43 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - 50c31587dab2db5bbc4bb0ba9eccf4d18db4fac2
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - AACC:2945D3:4E2D29:613D2E:65D51B2E
      X-Served-By:
      - cache-yvr1521-YVR
      X-Timer:
      - S1708464943.946287,VS0,VE134
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/cpu/llm/__init__.py
  response:
    content: ''
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Length:
      - '0'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:35:43 GMT
      ETag:
      - W/"938f66ede415ccb10764da47cd5f3cfc076c07b8791c708cfa8ec54982197c1f"
      Expires:
      - Tue, 20 Feb 2024 21:40:43 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - 98dd4c141e0a25801713069e49557e71b541ee29
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - 7F52:2B2E:4C6ECB:5F4356:65D51B2D
      X-Served-By:
      - cache-yvr1523-YVR
      X-Timer:
      - S1708464943.980675,VS0,VE124
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/agent/tot_agent/controller.py
  response:
    content: "from typing import List\n\nfrom eidolon_ai_sdk.agent.tot_agent.memory
      import ToTDFSMemory\nfrom eidolon_ai_sdk.agent.tot_agent.thought import Thought\n\n\nclass
      ToTController:\n    \"\"\"\n    Tree of Thought (ToT) controller.\n\n    This
      is a version of a ToT controller, dubbed in the paper as a \"Simple Controller\".\n\n
      \   It has one parameter `c` which is the number of children to explore for
      each\n    thought.\n    \"\"\"\n\n    def __init__(self, c: int = 3):\n        \"\"\"\n
      \       Initialize the controller.\n\n        Args:\n            c: The number
      of children to explore at each node.\n        \"\"\"\n        self.c = c\n\n
      \   def thoughts(self, memory: ToTDFSMemory) -> List[str]:\n        next_thought
      = memory.top()\n        parent_thought = memory.top_parent()\n        validity
      = \"INTERMEDIATE\" if next_thought is None else next_thought.validity\n\n        #
      1 if the current partial solution is invalid, backtrack to the parent\n        #
      thought.\n        if validity == \"INVALID\":\n            memory.pop()\n            next_thought
      = memory.top()\n            if next_thought and len(next_thought.children) >=
      self.c:\n                memory.pop()\n\n        # 2 if the current partial
      solution is valid but C children were\n        # explored and yet failed to
      find a final solution, backtrack to the\n        # parent thought.\n        elif
      validity == \"INTERMEDIATE\" and parent_thought and len(parent_thought.children)
      >= self.c:\n            memory.pop(2)\n\n        return [t.text for t in memory.current_path()]\n\n
      \   def exploration_synopsis(self, memory: ToTDFSMemory) -> dict:\n        \"\"\"\n
      \       Return the remaining intermediate paths in the ToT and the number of
      unexplored branches per thought.\n\n        An intermediate path is remaining
      if it has not yet been explored to the\n        maximum depth and has INTERMEDIATE
      validity.\n        \"\"\"\n\n        def recurse(path: List[Thought]) -> dict:\n
      \           rtn = {}\n            unexplored_branch_count = self.c - len(path)\n
      \           if unexplored_branch_count > 0:\n                rtn[\"UNEXPLORED_BRANCHES\"]
      = unexplored_branch_count\n            for child in path:\n                if
      child.validity != \"INVALID\":\n                    recursed_child = recurse(child.children)\n
      \                   if recursed_child:\n                        rtn[child.text]
      = recursed_child\n            return rtn\n\n        if not memory.stack:\n            return
      {}\n        else:\n            return {memory.stack[0].text: recurse(memory.stack[0].children)}\n"
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Length:
      - '891'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:35:43 GMT
      ETag:
      - W/"977899914dcb75db8206f911c84dc345a2e1831cabfd97481fa762089e6b4f2f"
      Expires:
      - Tue, 20 Feb 2024 21:40:43 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - da0f095b80acfd2161b4c6acc9e7ccd5f462cd10
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - 4F3C:2517D9:BA3E5:10E2DF:65D51B2D
      X-Served-By:
      - cache-bfi-krnt7300045-BFI
      X-Timer:
      - S1708464943.080247,VS0,VE124
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/util/test_class_utils.py
  response:
    content: "import importlib\nimport sys\nfrom importlib.util import module_from_spec\n\nimport
      pytest\n\nfrom eidolon_ai_sdk.util.class_utils import for_name\n\n\n# Test class
      for grouping the tests\nclass TestForName:\n    # Setup method to create a sample
      module with classes for testing\n    @classmethod\n    def setup_class(cls):\n
      \       # Create a temporary module with classes for testing\n        cls.temp_module_name
      = \"temp_test_module\"\n        cls.temp_module = module_from_spec(importlib.util.spec_from_loader(cls.temp_module_name,
      loader=None))\n        cls.base_class = type(\"BaseClass\", (object,), {})\n
      \       cls.sub_class = type(\"SubClass\", (cls.base_class,), {})\n        cls.non_sub_class
      = type(\"NonSubClass\", (object,), {})\n        setattr(cls.temp_module, \"BaseClass\",
      cls.base_class)\n        setattr(cls.temp_module, \"SubClass\", cls.sub_class)\n
      \       setattr(cls.temp_module, \"NonSubClass\", cls.non_sub_class)\n        sys.modules[cls.temp_module_name]
      = cls.temp_module\n\n    # Teardown method to clean up the temporary module\n
      \   @classmethod\n    def teardown_class(cls):\n        del sys.modules[cls.temp_module_name]\n\n
      \   def test_successful_import_and_subclass_check(self):\n        \"\"\"Test
      successful dynamic import and subclass check.\"\"\"\n        result = for_name(f\"{self.temp_module_name}.SubClass\",
      self.base_class)\n        assert result is self.sub_class\n\n    def test_implementation_fqn_not_provided(self):\n
      \       \"\"\"Test error when the fully qualified name is not provided.\"\"\"\n
      \       with pytest.raises(ValueError) as exc_info:\n            for_name(\"\",
      self.base_class)\n        assert \"Implementation not provided\" in str(exc_info.value)\n\n
      \   def test_implementation_fqn_incorrect(self):\n        \"\"\"Test error when
      the fully qualified name is incorrect.\"\"\"\n        with pytest.raises(ValueError)
      as exc_info:\n            for_name(f\"{self.temp_module_name}.NonExistentClass\",
      self.base_class)\n        assert \"Unable to import\" in str(exc_info.value)\n\n
      \   def test_implementation_class_not_subclass(self):\n        \"\"\"Test error
      when the class is not a subclass of the specified type.\"\"\"\n        with
      pytest.raises(ValueError) as exc_info:\n            for_name(f\"{self.temp_module_name}.NonSubClass\",
      self.sub_class)\n        assert \"not found or is not a subclass\" in str(exc_info.value)\n\n\n#
      You can run these tests by executing the command `pytest test_dynamic_importer.py`\n#
      in your terminal, assuming `test_dynamic_importer.py` is the name of the file
      containing these tests.\n"
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Length:
      - '782'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:35:43 GMT
      ETag:
      - W/"9b5fc3cd36f6057e7b773b54193f54284657b41efab1389950a0c9d1ab7fd212"
      Expires:
      - Tue, 20 Feb 2024 21:40:43 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - 77584c19715b945993f8030342099e15f43799fd
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - AACC:2945D3:4E2D2E:613D36:65D51B2F
      X-Served-By:
      - cache-yvr1534-YVR
      X-Timer:
      - S1708464943.085304,VS0,VE128
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/system/cassettes/test_generic_agent?ref=main
  response:
    content: '[{"name":"TestAgentsWithReferences.test_can_communicate.yaml","path":"sdk/tests/system/cassettes/test_generic_agent/TestAgentsWithReferences.test_can_communicate.yaml","sha":"354c81e5143c3b1a7a1cc80a0f59d393a73bb46d","size":15449,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/system/cassettes/test_generic_agent/TestAgentsWithReferences.test_can_communicate.yaml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/system/cassettes/test_generic_agent/TestAgentsWithReferences.test_can_communicate.yaml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/354c81e5143c3b1a7a1cc80a0f59d393a73bb46d","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/system/cassettes/test_generic_agent/TestAgentsWithReferences.test_can_communicate.yaml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/system/cassettes/test_generic_agent/TestAgentsWithReferences.test_can_communicate.yaml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/354c81e5143c3b1a7a1cc80a0f59d393a73bb46d","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/system/cassettes/test_generic_agent/TestAgentsWithReferences.test_can_communicate.yaml"}},{"name":"TestAgentsWithReferences.test_can_replay_tool_calls.yaml","path":"sdk/tests/system/cassettes/test_generic_agent/TestAgentsWithReferences.test_can_replay_tool_calls.yaml","sha":"c794267bdc75713ee11019ce960cab67942a1cb8","size":23422,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/system/cassettes/test_generic_agent/TestAgentsWithReferences.test_can_replay_tool_calls.yaml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/system/cassettes/test_generic_agent/TestAgentsWithReferences.test_can_replay_tool_calls.yaml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/c794267bdc75713ee11019ce960cab67942a1cb8","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/system/cassettes/test_generic_agent/TestAgentsWithReferences.test_can_replay_tool_calls.yaml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/system/cassettes/test_generic_agent/TestAgentsWithReferences.test_can_replay_tool_calls.yaml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/c794267bdc75713ee11019ce960cab67942a1cb8","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/system/cassettes/test_generic_agent/TestAgentsWithReferences.test_can_replay_tool_calls.yaml"}},{"name":"TestAgentsWithReferences.test_list_body.yaml","path":"sdk/tests/system/cassettes/test_generic_agent/TestAgentsWithReferences.test_list_body.yaml","sha":"070b0b53ba52b08157513131e60487aa2d1191a9","size":15763,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/system/cassettes/test_generic_agent/TestAgentsWithReferences.test_list_body.yaml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/system/cassettes/test_generic_agent/TestAgentsWithReferences.test_list_body.yaml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/070b0b53ba52b08157513131e60487aa2d1191a9","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/system/cassettes/test_generic_agent/TestAgentsWithReferences.test_list_body.yaml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/system/cassettes/test_generic_agent/TestAgentsWithReferences.test_list_body.yaml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/070b0b53ba52b08157513131e60487aa2d1191a9","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/system/cassettes/test_generic_agent/TestAgentsWithReferences.test_list_body.yaml"}},{"name":"TestAgentsWithReferences.test_passes_context.yaml","path":"sdk/tests/system/cassettes/test_generic_agent/TestAgentsWithReferences.test_passes_context.yaml","sha":"8891567302dc38f85d6effea6d972e8e2208cd7e","size":38403,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/system/cassettes/test_generic_agent/TestAgentsWithReferences.test_passes_context.yaml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/system/cassettes/test_generic_agent/TestAgentsWithReferences.test_passes_context.yaml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/8891567302dc38f85d6effea6d972e8e2208cd7e","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/system/cassettes/test_generic_agent/TestAgentsWithReferences.test_passes_context.yaml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/system/cassettes/test_generic_agent/TestAgentsWithReferences.test_passes_context.yaml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/8891567302dc38f85d6effea6d972e8e2208cd7e","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/system/cassettes/test_generic_agent/TestAgentsWithReferences.test_passes_context.yaml"}},{"name":"TestAgentsWithReferences.test_respond_after_tool_call.yaml","path":"sdk/tests/system/cassettes/test_generic_agent/TestAgentsWithReferences.test_respond_after_tool_call.yaml","sha":"740a149dc3ca29906efca2a67f36074bd5cfe436","size":15448,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/system/cassettes/test_generic_agent/TestAgentsWithReferences.test_respond_after_tool_call.yaml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/system/cassettes/test_generic_agent/TestAgentsWithReferences.test_respond_after_tool_call.yaml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/740a149dc3ca29906efca2a67f36074bd5cfe436","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/system/cassettes/test_generic_agent/TestAgentsWithReferences.test_respond_after_tool_call.yaml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/system/cassettes/test_generic_agent/TestAgentsWithReferences.test_respond_after_tool_call.yaml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/740a149dc3ca29906efca2a67f36074bd5cfe436","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/system/cassettes/test_generic_agent/TestAgentsWithReferences.test_respond_after_tool_call.yaml"}},{"name":"TestAgentsWithReferences.test_string_only_body.yaml","path":"sdk/tests/system/cassettes/test_generic_agent/TestAgentsWithReferences.test_string_only_body.yaml","sha":"749f6687f4e4e1088b8091b63c5b6fd703a02dab","size":14810,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/system/cassettes/test_generic_agent/TestAgentsWithReferences.test_string_only_body.yaml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/system/cassettes/test_generic_agent/TestAgentsWithReferences.test_string_only_body.yaml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/749f6687f4e4e1088b8091b63c5b6fd703a02dab","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/system/cassettes/test_generic_agent/TestAgentsWithReferences.test_string_only_body.yaml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/system/cassettes/test_generic_agent/TestAgentsWithReferences.test_string_only_body.yaml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/749f6687f4e4e1088b8091b63c5b6fd703a02dab","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/system/cassettes/test_generic_agent/TestAgentsWithReferences.test_string_only_body.yaml"}},{"name":"TestGenericAgent.test_continued_conversation.yaml","path":"sdk/tests/system/cassettes/test_generic_agent/TestGenericAgent.test_continued_conversation.yaml","sha":"2cc7f4ce5c038e79201e1c4bcf81463a7c25ed64","size":20989,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/system/cassettes/test_generic_agent/TestGenericAgent.test_continued_conversation.yaml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/system/cassettes/test_generic_agent/TestGenericAgent.test_continued_conversation.yaml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/2cc7f4ce5c038e79201e1c4bcf81463a7c25ed64","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/system/cassettes/test_generic_agent/TestGenericAgent.test_continued_conversation.yaml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/system/cassettes/test_generic_agent/TestGenericAgent.test_continued_conversation.yaml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/2cc7f4ce5c038e79201e1c4bcf81463a7c25ed64","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/system/cassettes/test_generic_agent/TestGenericAgent.test_continued_conversation.yaml"}},{"name":"TestGenericAgent.test_deletes_conversational_memory.yaml","path":"sdk/tests/system/cassettes/test_generic_agent/TestGenericAgent.test_deletes_conversational_memory.yaml","sha":"f74ad51fa45c43b33d223f713d70be5189fac87e","size":5579,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/system/cassettes/test_generic_agent/TestGenericAgent.test_deletes_conversational_memory.yaml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/system/cassettes/test_generic_agent/TestGenericAgent.test_deletes_conversational_memory.yaml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/f74ad51fa45c43b33d223f713d70be5189fac87e","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/system/cassettes/test_generic_agent/TestGenericAgent.test_deletes_conversational_memory.yaml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/system/cassettes/test_generic_agent/TestGenericAgent.test_deletes_conversational_memory.yaml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/f74ad51fa45c43b33d223f713d70be5189fac87e","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/system/cassettes/test_generic_agent/TestGenericAgent.test_deletes_conversational_memory.yaml"}},{"name":"TestGenericAgent.test_llm_calls.yaml","path":"sdk/tests/system/cassettes/test_generic_agent/TestGenericAgent.test_llm_calls.yaml","sha":"4b3a99a55784903d651d22c8b027cf0aa0f9bb5d","size":4914,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/system/cassettes/test_generic_agent/TestGenericAgent.test_llm_calls.yaml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/system/cassettes/test_generic_agent/TestGenericAgent.test_llm_calls.yaml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/4b3a99a55784903d651d22c8b027cf0aa0f9bb5d","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/system/cassettes/test_generic_agent/TestGenericAgent.test_llm_calls.yaml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/system/cassettes/test_generic_agent/TestGenericAgent.test_llm_calls.yaml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/4b3a99a55784903d651d22c8b027cf0aa0f9bb5d","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/system/cassettes/test_generic_agent/TestGenericAgent.test_llm_calls.yaml"}},{"name":"TestGenericAgentWithToolCalls.test_normal_tool_call.yaml","path":"sdk/tests/system/cassettes/test_generic_agent/TestGenericAgentWithToolCalls.test_normal_tool_call.yaml","sha":"2d56cf74f0fd06b103d1850ae5fbbe35ebbf0d7d","size":10835,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/system/cassettes/test_generic_agent/TestGenericAgentWithToolCalls.test_normal_tool_call.yaml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/system/cassettes/test_generic_agent/TestGenericAgentWithToolCalls.test_normal_tool_call.yaml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/2d56cf74f0fd06b103d1850ae5fbbe35ebbf0d7d","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/system/cassettes/test_generic_agent/TestGenericAgentWithToolCalls.test_normal_tool_call.yaml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/system/cassettes/test_generic_agent/TestGenericAgentWithToolCalls.test_normal_tool_call.yaml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/2d56cf74f0fd06b103d1850ae5fbbe35ebbf0d7d","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/system/cassettes/test_generic_agent/TestGenericAgentWithToolCalls.test_normal_tool_call.yaml"}},{"name":"TestOutputTests.test_can_replay_llm_requests.yaml","path":"sdk/tests/system/cassettes/test_generic_agent/TestOutputTests.test_can_replay_llm_requests.yaml","sha":"98a5cbe2c90e05785835a6efad0e9b3f79dac038","size":26529,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/system/cassettes/test_generic_agent/TestOutputTests.test_can_replay_llm_requests.yaml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/system/cassettes/test_generic_agent/TestOutputTests.test_can_replay_llm_requests.yaml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/98a5cbe2c90e05785835a6efad0e9b3f79dac038","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/system/cassettes/test_generic_agent/TestOutputTests.test_can_replay_llm_requests.yaml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/system/cassettes/test_generic_agent/TestOutputTests.test_can_replay_llm_requests.yaml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/98a5cbe2c90e05785835a6efad0e9b3f79dac038","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/system/cassettes/test_generic_agent/TestOutputTests.test_can_replay_llm_requests.yaml"}},{"name":"TestOutputTests.test_generic_agent_cleans_up_images.yaml","path":"sdk/tests/system/cassettes/test_generic_agent/TestOutputTests.test_generic_agent_cleans_up_images.yaml","sha":"73355877daf5b06f90f71fe2772b83de92bba10f","size":19013,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/system/cassettes/test_generic_agent/TestOutputTests.test_generic_agent_cleans_up_images.yaml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/system/cassettes/test_generic_agent/TestOutputTests.test_generic_agent_cleans_up_images.yaml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/73355877daf5b06f90f71fe2772b83de92bba10f","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/system/cassettes/test_generic_agent/TestOutputTests.test_generic_agent_cleans_up_images.yaml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/system/cassettes/test_generic_agent/TestOutputTests.test_generic_agent_cleans_up_images.yaml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/73355877daf5b06f90f71fe2772b83de92bba10f","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/system/cassettes/test_generic_agent/TestOutputTests.test_generic_agent_cleans_up_images.yaml"}},{"name":"TestOutputTests.test_generic_agent_supports_image.yaml","path":"sdk/tests/system/cassettes/test_generic_agent/TestOutputTests.test_generic_agent_supports_image.yaml","sha":"105b4e47fb767cffd6d106d5a2b5506081f37d59","size":18313,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/system/cassettes/test_generic_agent/TestOutputTests.test_generic_agent_supports_image.yaml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/system/cassettes/test_generic_agent/TestOutputTests.test_generic_agent_supports_image.yaml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/105b4e47fb767cffd6d106d5a2b5506081f37d59","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/system/cassettes/test_generic_agent/TestOutputTests.test_generic_agent_supports_image.yaml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/system/cassettes/test_generic_agent/TestOutputTests.test_generic_agent_supports_image.yaml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/105b4e47fb767cffd6d106d5a2b5506081f37d59","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/system/cassettes/test_generic_agent/TestOutputTests.test_generic_agent_supports_image.yaml"}},{"name":"TestOutputTests.test_generic_agent_supports_multiple_images.yaml","path":"sdk/tests/system/cassettes/test_generic_agent/TestOutputTests.test_generic_agent_supports_multiple_images.yaml","sha":"e05588c763f343346307077a347f6583afd654c9","size":75999,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/system/cassettes/test_generic_agent/TestOutputTests.test_generic_agent_supports_multiple_images.yaml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/system/cassettes/test_generic_agent/TestOutputTests.test_generic_agent_supports_multiple_images.yaml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e05588c763f343346307077a347f6583afd654c9","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/system/cassettes/test_generic_agent/TestOutputTests.test_generic_agent_supports_multiple_images.yaml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/system/cassettes/test_generic_agent/TestOutputTests.test_generic_agent_supports_multiple_images.yaml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e05588c763f343346307077a347f6583afd654c9","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/system/cassettes/test_generic_agent/TestOutputTests.test_generic_agent_supports_multiple_images.yaml"}},{"name":"TestOutputTests.test_generic_agent_supports_object_output.yaml","path":"sdk/tests/system/cassettes/test_generic_agent/TestOutputTests.test_generic_agent_supports_object_output.yaml","sha":"78ecfee3334157aa9cdc4468d86c96b2d07e27f3","size":7591,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/system/cassettes/test_generic_agent/TestOutputTests.test_generic_agent_supports_object_output.yaml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/system/cassettes/test_generic_agent/TestOutputTests.test_generic_agent_supports_object_output.yaml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/78ecfee3334157aa9cdc4468d86c96b2d07e27f3","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/system/cassettes/test_generic_agent/TestOutputTests.test_generic_agent_supports_object_output.yaml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/system/cassettes/test_generic_agent/TestOutputTests.test_generic_agent_supports_object_output.yaml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/78ecfee3334157aa9cdc4468d86c96b2d07e27f3","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/system/cassettes/test_generic_agent/TestOutputTests.test_generic_agent_supports_object_output.yaml"}},{"name":"TestOutputTests.test_generic_agent_supports_object_output_with_stream.yaml","path":"sdk/tests/system/cassettes/test_generic_agent/TestOutputTests.test_generic_agent_supports_object_output_with_stream.yaml","sha":"7f59cfe087b0aeb9582ebad4f4f99883528a39ef","size":7593,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/system/cassettes/test_generic_agent/TestOutputTests.test_generic_agent_supports_object_output_with_stream.yaml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/system/cassettes/test_generic_agent/TestOutputTests.test_generic_agent_supports_object_output_with_stream.yaml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/7f59cfe087b0aeb9582ebad4f4f99883528a39ef","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/system/cassettes/test_generic_agent/TestOutputTests.test_generic_agent_supports_object_output_with_stream.yaml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/system/cassettes/test_generic_agent/TestOutputTests.test_generic_agent_supports_object_output_with_stream.yaml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/7f59cfe087b0aeb9582ebad4f4f99883528a39ef","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/system/cassettes/test_generic_agent/TestOutputTests.test_generic_agent_supports_object_output_with_stream.yaml"}},{"name":"TestOutputTests.test_generic_agent_supports_string_stream.yaml","path":"sdk/tests/system/cassettes/test_generic_agent/TestOutputTests.test_generic_agent_supports_string_stream.yaml","sha":"b35abd23caf7048fe4293ec48446128f58a3a529","size":7817,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/system/cassettes/test_generic_agent/TestOutputTests.test_generic_agent_supports_string_stream.yaml?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/system/cassettes/test_generic_agent/TestOutputTests.test_generic_agent_supports_string_stream.yaml","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/b35abd23caf7048fe4293ec48446128f58a3a529","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/system/cassettes/test_generic_agent/TestOutputTests.test_generic_agent_supports_string_stream.yaml","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/tests/system/cassettes/test_generic_agent/TestOutputTests.test_generic_agent_supports_string_stream.yaml?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/b35abd23caf7048fe4293ec48446128f58a3a529","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/tests/system/cassettes/test_generic_agent/TestOutputTests.test_generic_agent_supports_string_stream.yaml"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:35:43 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E59A:253F79:165758:1FC718:65D51B2E
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4495'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '505'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/cpu/llm/open_ai_llm_unit.py
  response:
    content: "import base64\nimport json\nimport logging\nfrom io import BytesIO\nfrom
      typing import List, Optional, Union, Literal, Dict, Any, AsyncIterator, cast\n\nimport
      yaml\nfrom PIL import Image\nfrom openai import AsyncOpenAI, AsyncStream\nfrom
      openai.types.chat import ChatCompletionToolParam, ChatCompletionChunk, ChatCompletionMessage\nfrom
      openai.types.chat.chat_completion import ChatCompletion\nfrom openai.types.chat.chat_completion_chunk
      import ChoiceDelta\nfrom openai.types.chat.completion_create_params import ResponseFormat\nfrom
      pydantic import Field, BaseModel\n\nfrom eidolon_ai_sdk.agent_os import AgentOS\nfrom
      eidolon_ai_sdk.cpu.call_context import CallContext\nfrom eidolon_ai_sdk.cpu.llm_message
      import (\n    LLMMessage,\n    AssistantMessage,\n    ToolCall,\n    ToolResponseMessage,\n
      \   UserMessage,\n    SystemMessage,\n)\nfrom eidolon_ai_sdk.cpu.llm_unit import
      LLMUnit, LLMCallFunction\nfrom eidolon_ai_sdk.io.events import (\n    StringOutputEvent,\n
      \   ObjectOutputEvent,\n    LLMToolCallRequestEvent,\n)\nfrom eidolon_ai_sdk.system.reference_model
      import Specable\nfrom eidolon_ai_sdk.util.logger import logger as eidolon_logger\nfrom
      eidolon_ai_sdk.util.replay import replayable\n\nlogger = eidolon_logger.getChild(\"llm_unit\")\n\n\ndef
      scale_dimensions(width, height, max_size=2048, min_size=768):\n    # Check if
      the dimensions are less than or equal to max_size.\n    # If so, adjust the
      dimensions according to the max_size.\n    if width > max_size or height > max_size:\n
      \       # Calculate the scaling ratio\n        scale_ratio = max_size / max(width,
      height)\n\n        # Calculate the new dimensions while keeping aspect ratio\n
      \       width = int(width * scale_ratio)\n        height = int(height * scale_ratio)\n\n
      \   # Check if the minimum dimension is still greater than the min_size.\n    #
      If so, adjust the dimensions according to the min_size.\n    if min(width, height)
      > min_size:\n        # Calculate the scaling ratio\n        scale_ratio = min_size
      / min(width, height)\n\n        # Calculate the new dimensions\n        width
      = int(width * scale_ratio)\n        height = int(height * scale_ratio)\n\n    return
      width, height\n\n\ndef scale_image(image_bytes):\n    # Load the image from
      bytes\n    image = Image.open(BytesIO(image_bytes))\n\n    # Get the dimensions
      of the image\n    width, height = image.size\n\n    logger.info(f\"Original
      image size: {width}x{height}\")\n    new_width, new_height = scale_dimensions(width,
      height)\n    logger.info(f\"New image size: {new_width}x{new_height}\")\n\n
      \   # Resize and return the image\n    scaled_image = image.resize((new_width,
      new_height))\n    output = BytesIO()\n    scaled_image.save(output, format=\"PNG\")\n
      \   return output.getvalue()\n\n\nasync def convert_to_openai(message: LLMMessage):\n
      \   if isinstance(message, SystemMessage):\n        return {\"role\": \"system\",
      \"content\": message.content}\n    elif isinstance(message, UserMessage):\n
      \       content = message.content\n        if not isinstance(content, str):\n
      \           content = []\n            for part in message.content:\n                if
      part.type == \"text\":\n                    content.append({\"type\": \"text\",
      \"text\": part.text})\n                else:\n                    # retrieve
      the image from the file system\n                    data = await AgentOS.file_memory.read_file(part.image_url)\n
      \                   # scale the image such that the max size of the shortest
      size is at most 768px\n                    data = scale_image(data)\n                    #
      base64 encode the data\n                    base64_image = base64.b64encode(data).decode(\"utf-8\")\n
      \                   content.append(\n                        {\n                            \"type\":
      \"image_url\",\n                            \"image_url\": {\"url\": f\"data:image/jpeg;base64,{base64_image}\"},\n
      \                       }\n                    )\n\n        return {\"role\":
      \"user\", \"content\": content}\n    elif isinstance(message, AssistantMessage):\n
      \       ret = {\"role\": \"assistant\", \"content\": str(message.content)}\n
      \       if message.tool_calls and len(message.tool_calls) > 0:\n            ret[\"tool_calls\"]
      = [\n                {\n                    \"id\": tool_call.tool_call_id,\n
      \                   \"type\": \"function\",\n                    \"function\":
      {\n                        \"name\": tool_call.name,\n                        \"arguments\":
      str(tool_call.arguments),\n                    },\n                }\n                for
      tool_call in message.tool_calls\n            ]\n        return ret\n    elif
      isinstance(message, ToolResponseMessage):\n        # tool_call_id, content\n
      \       return {\n            \"role\": \"tool\",\n            \"tool_call_id\":
      message.tool_call_id,\n            \"content\": json.dumps(message.result),\n
      \       }\n    else:\n        raise ValueError(f\"Unknown message type {message.type}\")\n\n\nclass
      OpenAiGPTSpec(BaseModel):\n    model: str = Field(default=\"gpt-4-turbo-preview\",
      description=\"The model to use for the LLM.\")\n    temperature: float = 0.3\n
      \   force_json: bool = True\n    max_tokens: Optional[int] = None\n\n\nclass
      OpenAIGPT(LLMUnit, Specable[OpenAiGPTSpec]):\n    model: str\n    temperature:
      float\n\n    def __init__(self, **kwargs):\n        LLMUnit.__init__(self, **kwargs)\n
      \       Specable.__init__(self, **kwargs)\n\n        self.model = self.spec.model\n
      \       self.temperature = self.spec.temperature\n\n    async def execute_llm(\n
      \       self,\n        call_context: CallContext,\n        messages: List[LLMMessage],\n
      \       tools: List[LLMCallFunction],\n        output_format: Union[Literal[\"str\"],
      Dict[str, Any]],\n    ) -> AsyncIterator[AssistantMessage]:\n        can_stream_message,
      request = await self._build_request(messages, tools, output_format)\n        request[\"stream\"]
      = True\n\n        logger.info(\"executing open ai llm request\", extra=request)\n
      \       if logger.isEnabledFor(logging.DEBUG):\n            logger.debug(\"request
      content:\\n\" + yaml.dump(request))\n        llm_request = replayable(fn=_openai_completion,
      name_override=\"openai_completion\", parser=_raw_parser)\n        llm_response
      = await llm_request(**request)\n        complete_message = \"\"\n        tools_to_call
      = []\n        async for m_chunk in llm_response:\n            chunk = cast(ChatCompletionChunk,
      m_chunk)\n            message = chunk.choices[0].delta\n\n            logger.debug(\n
      \               f\"open ai llm response\\ntool calls: {len(message.tool_calls
      or [])}\\ncontent:\\n{message.content}\",\n                extra=dict(content=message.content,
      tool_calls=message.tool_calls),\n            )\n\n            for tool_call
      in message.tool_calls or []:\n                index = tool_call.index\n                if
      index == len(tools_to_call):\n                    tools_to_call.append({\"id\":
      \"\", \"name\": \"\", \"arguments\": \"\"})\n                if tool_call.id:\n
      \                   tools_to_call[index][\"id\"] = tool_call.id\n                if
      tool_call.function:\n                    if tool_call.function.name:\n                        tools_to_call[index][\"name\"]
      = tool_call.function.name\n                    if tool_call.function.arguments:\n
      \                       tools_to_call[index][\"arguments\"] += tool_call.function.arguments\n\n
      \           if message.content:\n                if can_stream_message:\n                    logger.debug(f\"open
      ai llm stream response: {message.content}\", extra=dict(content=message.content))\n
      \                   yield StringOutputEvent(content=message.content)\n                else:\n
      \                   complete_message += message.content\n\n        logger.info(f\"open
      ai llm tool calls: {json.dumps(tools_to_call)}\", extra=dict(tool_calls=tools_to_call))\n
      \       if len(tools_to_call) > 0:\n            for tool in tools_to_call:\n
      \               tool_call = _convert_tool_call(tool)\n                yield
      LLMToolCallRequestEvent(tool_call=tool_call)\n        if not can_stream_message:\n
      \           logger.debug(f\"open ai llm object response: {complete_message}\",
      extra=dict(content=complete_message))\n            if not self.spec.force_json:\n
      \               # message format looks like json```{...}```, parse content and
      pull out the json\n                complete_message = complete_message[complete_message.find(\"{\")
      : complete_message.rfind(\"}\") + 1]\n\n            content = json.loads(complete_message)
      if complete_message else {}\n            yield ObjectOutputEvent(content=content)\n\n
      \   async def _build_request(self, inMessages, inTools, output_format):\n        tools
      = await self._build_tools(inTools)\n        messages = [await convert_to_openai(message)
      for message in inMessages]\n        request = {\n            \"messages\": messages,\n
      \           \"model\": self.model,\n            \"temperature\": self.temperature,\n
      \       }\n        if output_format == \"str\" or output_format[\"type\"] ==
      \"string\":\n            is_string = True\n        else:\n            is_string
      = False\n            force_json_msg = (\n                f\"Your response MUST
      be valid JSON satisfying the following JSON schema:\\n{json.dumps(output_format)}\"\n
      \           )\n            if not self.spec.force_json:\n                force_json_msg
      += \"\\nThe response will be wrapped in a json section json```{...}```\\nRemember
      to use double quotes for strings and properties.\"\n            else:\n                request[\"response_format\"]
      = ResponseFormat(type=\"json_object\")\n\n            # add response rules to
      original system message for this call only\n            if messages[0][\"role\"]
      == \"system\":\n                messages[0][\"content\"] += f\"\\n\\n{force_json_msg}\"\n
      \           else:\n                messages.insert(0, {\"role\": \"system\",
      \"content\": force_json_msg})\n        logger.debug(messages)\n        if len(tools)
      > 0:\n            request[\"tools\"] = tools\n        if self.spec.max_tokens:\n
      \           request[\"max_tokens\"] = self.spec.max_tokens\n        return is_string,
      request\n\n    async def _build_tools(self, inTools):\n        tools = []\n
      \       for tool in inTools:\n            tools.append(\n                ChatCompletionToolParam(\n
      \                   **{\n                        \"type\": \"function\",\n                        \"function\":
      {\n                            \"name\": tool.name,\n                            \"description\":
      tool.description,\n                            \"parameters\": tool.parameters,\n
      \                       },\n                    }\n                )\n            )\n
      \       return tools\n\n\ndef _convert_tool_call(tool: Dict[str, any]) -> ToolCall:\n
      \   name = tool[\"name\"]\n    try:\n        loads = json.loads(tool[\"arguments\"])\n
      \   except json.JSONDecodeError as e:\n        raise RuntimeError(f\"Error decoding
      response function arguments for tool {name}\") from e\n    return ToolCall(tool_call_id=tool[\"id\"],
      name=name, arguments=loads)\n\n\nasync def _openai_completion(*args, **kwargs):\n
      \   return await AsyncOpenAI().chat.completions.create(*args, **kwargs)\n\n\nasync
      def _raw_parser(resp):\n    \"\"\"\n    Parses responses from openai and yield
      strings to accumulate to a human-readable message.\n\n    Makes assumptions
      around tool calls. These are currently true, but may change as openai mutates
      their API\n    1. Tool call functions names are always in a complete message\n
      \   2. Tool calls are ordered (No chunk for tool #2 until #1 is complete)\n
      \   \"\"\"\n    calling_tools = False\n    prefix = \"\"\n    async for message
      in _normalize_openai(resp):\n        if message.tool_calls:\n            calling_tools
      = True\n            for i, tool_call in enumerate(message.tool_calls):\n                if
      tool_call.function.name:\n                    yield prefix + f\"Tool Call: {tool_call.function.name}\\nArguments:
      \"\n                    prefix = \"\\n\"\n                if tool_call.function.arguments:\n
      \                   yield tool_call.function.arguments\n        elif calling_tools:\n
      \           yield \"\\n\"\n        if message.content:\n            yield message.content\n
      \           prefix = \"\\n\"\n\n\nasync def _normalize_openai(resp) -> AsyncIterator[ChoiceDelta
      | ChatCompletionMessage]:\n    \"\"\"\n    Normalizes different types of responses
      from openai depending on how the request was made.\n    This is important since
      arguments like streaming can be mutated when replaying requests.\n    \"\"\"\n
      \   if isinstance(resp, AsyncStream):\n        async for m_chunk in resp:\n
      \           yield cast(ChatCompletionChunk, m_chunk).choices[0].delta\n    elif
      isinstance(resp, ChatCompletion):\n        yield resp.choices[0].message\n    else:\n
      \       raise ValueError(f\"Unknown response type {type(resp)}\")\n"
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Length:
      - '3597'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:35:43 GMT
      ETag:
      - W/"dad61059a0b9ff809132bcaf4de09dbfb7a162f144ae9c11c8f8b08bbc29f046"
      Expires:
      - Tue, 20 Feb 2024 21:40:43 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - HIT
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - 364de58667faa9d0995cf51f082beebf2175166a
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - D30A:255533:BBC2F:10F64F:65D519B2
      X-Served-By:
      - cache-bfi-krnt7300033-BFI
      X-Timer:
      - S1708464943.115597,VS0,VE154
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/agent/doc_manager/parsers/test_pdf_parser.py
  response:
    content: "import os\n\nfrom eidolon_ai_sdk.agent.doc_manager.parsers.base_parser
      import DataBlob\nfrom eidolon_ai_sdk.agent.doc_manager.parsers.pdf_parsers import
      PyPDFParser, PyPDFParserSpec\n\n\nclass TestPDFParser:\n    def test_parse(self):\n
      \       data = DataBlob.from_path(os.path.dirname(os.path.abspath(__file__))
      + \"/AgentXOS.pdf\")\n        parser = PyPDFParser(PyPDFParserSpec())\n        docs
      = list(parser.parse(data))\n        assert len(docs) == 24\n        doc = docs[0]\n
      \       assert doc.metadata[\"source\"] == os.path.dirname(os.path.abspath(__file__))
      + \"/AgentXOS.pdf\"\n        assert doc.metadata[\"mime_type\"] == \"application/pdf\"\n
      \       assert (\n            doc.page_content\n            == \"\"\" Agent
      \ X  OS \n Overview \n LLM Agents have been shown capable of solving a wide
      variety of tasks. \n For example, in the paper  \u201CGenerative Agents: Interactive
      Simulacra of Human Behavior\u201D  a group \n of LLM agents were set up to mimic
      a town in the style of the video game \u201CThe SIMS\u201D. In the \n paper
      \ \u201CGhost in the Minecraft: Generally Capable Agents for Open-World Environments
      via Large \n Language Models with Text-based Knowledge and Memory\u201D  a series
      of generally capable \n agents were prompted to \uFB01nd and craft items in
      the Minecraft world using a series of actions \n and rewards for those actions.
      Finally in the paper  \u201CVOYAGER: An Open-Ended Embodied Agent \n with Large
      Language Models\u201D  a group of LLMs work in concert to learn new code and
      \n dynamically update their prompting strategies as they explore a Minecraft
      world. \n Each of these papers implement their own framework to run, manage,
      and evaluate the multiple \n agents running in these systems. They each have
      their own way to record memories, their own \n way to abstract the LLM, and
      their own way to manage the agent runtime environment. \n We propose a new system,
      \ AgentXOS  , that introduces a series of abstractions for single or \n multi-agent
      systems. \n Goals \n 1.  Lorem ipsum dolor sit amet:  Duis autem vel eum iriure
      \ dolor in hendrerit in vulputate \n velit esse molestie consequat, vel illum
      dolore eu feugiat nulla facilisis at vero eros et \n accumsan. \n 2.  Sed diam
      nonummy nibh euismod:  Nam liber tempor cum soluta nobis eleifend option \n
      congue nihil imperdiet doming id quod mazim placerat facer possim assum. \n
      What is an Agent? \n\"\"\"\n        )\n"
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Length:
      - '1162'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:35:43 GMT
      ETag:
      - W/"f0b6b38875f20926c6938de01321ffb1c743e99e1eda5092366e38f1cbde0a70"
      Expires:
      - Tue, 20 Feb 2024 21:40:43 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - ce5f280d488bb3dd11b25afb3de1702af4cbc131
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - 5466:80B8:51C9D0:64D82C:65D51B2D
      X-Served-By:
      - cache-yvr1534-YVR
      X-Timer:
      - S1708464943.076357,VS0,VE193
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/agent/doc_manager/parsers/test_text_parser.py
  response:
    content: "import pytest\n\nfrom eidolon_ai_sdk.agent.doc_manager.parsers.base_parser
      import DataBlob, DocumentParserSpec\nfrom eidolon_ai_sdk.agent.doc_manager.parsers.text_parsers
      import TextParser\n\n\nclass TestTextParser:\n    @pytest.fixture()\n    def
      text_parser(self):\n        return TextParser(DocumentParserSpec())\n\n    def
      test_parse_simple_string(self, text_parser: TextParser):\n        data = DataBlob(path=\"path/file.txt\",
      mimetype=\"text/plain\", data=\"data\")\n        docs = list(text_parser.parse(data))\n
      \       assert len(docs) == 1\n        doc = docs[0]\n        assert doc.page_content
      == \"data\"\n        assert doc.metadata[\"source\"] == \"path/file.txt\"\n
      \       assert doc.metadata[\"mime_type\"] == \"text/plain\"\n\n    def test_parse_large_string(self,
      text_parser: TextParser):\n        string = ((\"1234567890 \" * 10) + \"\\n\")
      * 100\n        data = DataBlob(path=\"path/file.txt\", mimetype=\"text/plain\",
      data=string)\n        docs = list(text_parser.parse(data))\n        assert len(docs)
      == 1\n        doc = docs[0]\n        assert doc.page_content == string\n        assert
      doc.metadata[\"source\"] == \"path/file.txt\"\n        assert doc.metadata[\"mime_type\"]
      == \"text/plain\"\n"
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Length:
      - '388'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:35:43 GMT
      ETag:
      - W/"27a23d8f61c4346725177438587468472b2b78067f7974e6cb4d35b2193d77e9"
      Expires:
      - Tue, 20 Feb 2024 21:40:43 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - 393410b331dc7bdfe195fcd95cc7c2823d2273b7
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - 7F52:2B2E:4C6ED0:5F435E:65D51B2F
      X-Served-By:
      - cache-yvr1523-YVR
      X-Timer:
      - S1708464943.150515,VS0,VE133
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/agent/doc_manager/parsers/__init__.py
  response:
    content: ''
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Length:
      - '0'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:35:43 GMT
      ETag:
      - W/"938f66ede415ccb10764da47cd5f3cfc076c07b8791c708cfa8ec54982197c1f"
      Expires:
      - Tue, 20 Feb 2024 21:40:43 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - 1a73a9bfbafa6b97a47226398b3178b16c2f01eb
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - 2FE8:741B:4D5392:6061DD:65D51B2E
      X-Served-By:
      - cache-yvr1524-YVR
      X-Timer:
      - S1708464943.168599,VS0,VE143
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/cpu/llm/open_ai_speech.py
  response:
    content: "from typing import Optional, Literal\n\nfrom openai import AsyncOpenAI\nfrom
      pydantic import Field, BaseModel\n\nfrom eidolon_ai_sdk.system.reference_model
      import Specable\n\n\nclass OpenAiSpeechSpec(BaseModel):\n    text_to_speech_model:
      Literal[\"tts-1\", \"tts-1-hd\"] = Field(\n        default=\"tts-1-hd\", description=\"The
      model to use for text to speech.\"\n    )\n    text_to_speech_voice: Literal[\"alloy\",
      \"echo\", \"fable\", \"onyx\", \"nova\", \"shimmer\"] = Field(\n        default=\"alloy\",
      description=\"The voice to use for text to speech.\"\n    )\n    speech_to_text_model:
      Literal[\"whisper-1\"] = Field(\n        default=\"whisper-1\", description=\"The
      model to use for speech to text.\"\n    )\n    speech_to_text_temperature: float
      = Field(\n        default=0.3,\n        description=\"The sampling temperature,
      between 0 and 1. Higher values like 0.8 will make the output more random, while
      lower values like 0.2 will make it more focused and deterministic. If set to
      0, the model will use log probability to automatically increase the temperature
      until certain thresholds are hit.\",\n    )\n\n\nclass OpenAiSpeech(Specable[OpenAiSpeechSpec]):\n
      \   model: str\n    temperature: float\n    llm: AsyncOpenAI = None\n\n    def
      __init__(self, spec: OpenAiSpeechSpec, **kwargs):\n        super().__init__(spec,
      **kwargs)\n\n    async def text_to_speech(self, text: str) -> bytes:\n        \"\"\"\n
      \       Converts text to speech.\n\n        Args:\n            text (str): The
      text to convert to speech.\n\n        Returns:\n            bytes: The audio
      data.\n        \"\"\"\n        if not self.llm:\n            self.llm = AsyncOpenAI()\n\n
      \       response = await self.llm.audio.speech.create(\n            model=self.spec.text_to_speech_model,\n
      \           voice=self.spec.text_to_speech_voice,\n            input=text,\n
      \       )\n\n        return response.content\n\n    async def speech_to_text(self,
      audio: bytes, prompt: Optional[str] = None, language: Optional[str] = None)
      -> str:\n        \"\"\"\n        Converts speech to text.\n\n        Args:\n
      \           audio (bytes): The audio data.\n            prompt (Optional[str],
      optional): An optional text to guide the model's style or continue a previous
      audio segment. Defaults to None.\n            language (Optional[str], optional):
      The language of the input audio. Supplying the input language in ISO-639-1 format
      will improve accuracy and latency.\n        Returns:\n            str: The text.\n
      \       \"\"\"\n        if not self.llm:\n            self.llm = AsyncOpenAI()\n\n
      \       request = {\n            \"file\": audio,\n            \"model\": self.spec.speech_to_text_model,\n
      \           \"temperature\": self.spec.speech_to_text_temperature,\n        }\n\n
      \       if language:\n            request[\"language\"] = language\n\n        if
      prompt:\n            request[\"prompt\"] = prompt\n\n        response = await
      self.llm.audio.transcriptions.create(**request)\n\n        return response.text\n"
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Length:
      - '1023'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:35:43 GMT
      ETag:
      - W/"ce13c28d4728b640c40893b6597630ed92f19691ec892da094dde1ad1e2156a1"
      Expires:
      - Tue, 20 Feb 2024 21:40:43 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - 5cdb7a6f80ae49f6afa90c6dc78c53c50589fbcb
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - 2E90:255865:B8FDB:10CEA1:65D51B2F
      X-Served-By:
      - cache-bfi-kbfi7400116-BFI
      X-Timer:
      - S1708464943.230682,VS0,VE120
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/agent/tot_agent/memory.py
  response:
    content: "from __future__ import annotations\n\nfrom typing import List, Optional\n\nfrom
      eidolon_ai_sdk.agent.tot_agent.thought import Thought\n\n\nclass ToTDFSMemory:\n
      \   \"\"\"\n    Memory for the Tree of Thought (ToT) chain. Implemented as a
      stack of\n    thoughts. This allows for a depth first search (DFS) of the ToT.\n
      \   \"\"\"\n\n    def __init__(self, stack: Optional[List[Thought]] = None):\n
      \       self.stack: List[Thought] = stack or []\n\n    def top(self) -> Optional[Thought]:\n
      \       \"\"\"Get the top of the stack without popping it.\"\"\"\n        return
      self.stack[-1] if len(self.stack) > 0 else None\n\n    def pop(self, n: int
      = 1) -> Optional[Thought]:\n        node = None\n        \"Pop the top n elements
      of the stack and return the last one.\"\n        if len(self.stack) < n:\n            return
      None\n        for _ in range(n):\n            node = self.stack.pop()\n        return
      node\n\n    def top_parent(self) -> Optional[Thought]:\n        \"\"\"Get the
      parent of the top of the stack without popping it.\"\"\"\n        return self.stack[-2]
      if len(self.stack) > 1 else None\n\n    def store(self, node: Thought) -> None:\n
      \       \"\"\"Add a node on the top of the stack.\"\"\"\n        if len(self.stack)
      > 0:\n            self.stack[-1].children.append(node)\n        self.stack.append(node)\n\n
      \   @property\n    def level(self) -> int:\n        \"\"\"Return the current
      level of the stack.\"\"\"\n        return len(self.stack)\n\n    def current_path(self)
      -> List[Thought]:\n        \"\"\"Return the thoughts path.\"\"\"\n        return
      self.stack[:]\n"
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Length:
      - '560'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:35:43 GMT
      ETag:
      - W/"4ed1465a72c1b13b70d91f10d0cc869bd807aeb27d0f91a6756398e83cd51320"
      Expires:
      - Tue, 20 Feb 2024 21:40:43 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - HIT
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - 0993c5652503928aeda9d2ca119595fd04d4144f
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - 142C:256A3D:ADDCE:1017C1:65D519B2
      X-Served-By:
      - cache-bfi-krnt7300045-BFI
      X-Timer:
      - S1708464943.285345,VS0,VE118
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/util/test_str_utils.py
  response:
    content: "import os\n\nimport pytest\n\nfrom eidolon_ai_sdk.util.str_utils import
      replace_env_var_in_string\n\n\nclass TestStrUtils:\n    # Test fixture to set
      environment variables\n    @pytest.fixture(autouse=True)\n    def set_env_vars(self):\n
      \       os.environ[\"FOO\"] = \"/somepath\"\n        os.environ[\"BAR\"] = \"/anotherpath\"\n
      \       yield  # this line is where the testing happens\n        # Teardown
      (if necessary)\n        del os.environ[\"FOO\"]\n        del os.environ[\"BAR\"]\n\n
      \   def test_single_replacement(self):\n        assert replace_env_var_in_string(\"Path:
      ${FOO}/app\") == \"Path: /somepath/app\"\n\n    def test_no_replacement(self):\n
      \       assert replace_env_var_in_string(\"Path: /not_an_env_var/app\") == \"Path:
      /not_an_env_var/app\"\n\n    def test_multiple_replacements_same_var(self):\n
      \       assert replace_env_var_in_string(\"${FOO}/app and ${FOO}/bin\") == \"/somepath/app
      and /somepath/bin\"\n\n    def test_multiple_replacements_different_vars(self):\n
      \       assert replace_env_var_in_string(\"${FOO}/app and ${BAR}/bin\") == \"/somepath/app
      and /anotherpath/bin\"\n\n    def test_no_variables(self):\n        assert replace_env_var_in_string(\"Just
      a normal string.\") == \"Just a normal string.\"\n\n    def test_empty_string(self):\n
      \       assert replace_env_var_in_string(\"\") == \"\"\n\n    def test_only_variable(self):\n
      \       assert replace_env_var_in_string(\"${FOO}\") == \"/somepath\"\n\n    def
      test_nonexistent_variable(self):\n        assert replace_env_var_in_string(\"Path:
      ${NONEXISTENT}/app\") == \"Path: ${NONEXISTENT}/app\"\n\n    def test_variable_surrounded_by_text(self):\n
      \       assert replace_env_var_in_string(\"Path: pre_${FOO}_post/app\") == \"Path:
      pre_/somepath_post/app\"\n"
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Length:
      - '515'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:35:43 GMT
      ETag:
      - W/"cfb2b34fbbf7c39e9031a90f3bc656de9e9e244c0a02d2a80144e729b7d73954"
      Expires:
      - Tue, 20 Feb 2024 21:40:43 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - HIT
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - d6615e5afb0fb5f7f729af2ef73e7c2175720e05
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - 2836:256179:B31BC:106BAA:65D519B0
      X-Served-By:
      - cache-bfi-krnt7300033-BFI
      X-Timer:
      - S1708464943.311857,VS0,VE152
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/agent/doc_manager/parsers/auto_parser.py
  response:
    content: "from typing import Iterable\n\nfrom eidolon_ai_sdk.agent.doc_manager.parsers.base_parser
      import DocumentParser, DataBlob, DocumentParserSpec\nfrom eidolon_ai_sdk.agent.doc_manager.parsers.code_ast_parsers.programing_language_parser
      import LanguageParserSpec\nfrom eidolon_ai_sdk.agent.doc_manager.parsers.pdf_parsers
      import PyPDFParserSpec\nfrom eidolon_ai_sdk.agent.doc_manager.parsers.text_parsers
      import BS4HTMLParserSpec\nfrom eidolon_ai_sdk.memory.document import Document\n\n\nclass
      AutoParser(DocumentParser):\n    def parse(self, blob: DataBlob) -> Iterable[Document]:\n
      \       if blob.mimetype == \"application/pdf\":\n            from eidolon_ai_sdk.agent.doc_manager.parsers.pdf_parsers
      import PyPDFParser\n\n            yield from PyPDFParser(PyPDFParserSpec()).parse(blob)\n
      \       elif (\n            blob.mimetype == \"application/msword\"\n            or
      blob.mimetype == \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\"\n
      \       ):\n            from eidolon_ai_sdk.agent.doc_manager.parsers.ms_word_parser
      import MsWordParser\n\n            yield from MsWordParser(DocumentParserSpec()).parse(blob)\n
      \       elif blob.mimetype == \"text/html\":\n            from eidolon_ai_sdk.agent.doc_manager.parsers.text_parsers
      import BS4HTMLParser\n\n            yield from BS4HTMLParser(BS4HTMLParserSpec()).parse(blob)\n
      \       elif blob.mimetype == \"text/x-python\":\n            from eidolon_ai_sdk.agent.doc_manager.parsers.code_ast_parsers.programing_language_parser
      import (\n                LanguageParser,\n            )\n\n            yield
      from LanguageParser(LanguageParserSpec(language=\"python\")).parse(blob)\n        elif
      blob.mimetype == \"application/javascript\":\n            from eidolon_ai_sdk.agent.doc_manager.parsers.code_ast_parsers.programing_language_parser
      import (\n                LanguageParser,\n            )\n\n            yield
      from LanguageParser(LanguageParserSpec(language=\"javascript\")).parse(blob)\n
      \       elif blob.mimetype == \"text/x-cobol\":\n            from eidolon_ai_sdk.agent.doc_manager.parsers.code_ast_parsers.programing_language_parser
      import (\n                LanguageParser,\n            )\n\n            yield
      from LanguageParser(LanguageParserSpec(language=\"cobol\")).parse(blob)\n        elif
      (\n            blob.mimetype.startswith(\"text/\")\n            or blob.mimetype
      == \"application/json\"\n            or blob.mimetype == \"application/xml\"\n
      \           or blob.mimetype == \"application/yaml\"\n            or blob.mimetype
      == \"application/x-yaml\"\n            or blob.mimetype == \"application/x-yml\"\n
      \       ):\n            from eidolon_ai_sdk.agent.doc_manager.parsers.text_parsers
      import TextParser\n\n            yield from TextParser(DocumentParserSpec()).parse(blob)\n
      \       else:\n            raise ValueError(f\"Unsupported mimetype: {blob.mimetype}\")\n"
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Length:
      - '568'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:35:43 GMT
      ETag:
      - W/"5a1c9e2ec9c5d2c28d2870d0eaabb9733e3b825166aea6cebb35781b82f3146f"
      Expires:
      - Tue, 20 Feb 2024 21:40:43 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - ffadeaa5699fc9f9e09d434d104b44d21a1e805d
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - FA0C:46E8:5890E1:6B817E:65D51B2F
      X-Served-By:
      - cache-yvr1523-YVR
      X-Timer:
      - S1708464943.336527,VS0,VE147
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/agent/doc_manager/transformer/test_RecursiveCharacterTextSplitter.py
  response:
    content: "import pytest\n\nfrom eidolon_ai_sdk.agent.doc_manager.parsers.base_parser
      import DocumentParserSpec, DataBlob\nfrom eidolon_ai_sdk.agent.doc_manager.parsers.text_parsers
      import TextParser\nfrom eidolon_ai_sdk.agent.doc_manager.transformer.text_splitters
      import (\n    RecursiveCharacterTextSplitter,\n    RecursiveCharacterTextSplitterSpec,\n)\n\n\nclass
      TestRecursiveCharacterTextSplitter:\n    @pytest.fixture()\n    def small_data(self):\n
      \       data = \"1234567890\"\n        return TextParser(DocumentParserSpec()).parse(DataBlob(path=\"path/file.txt\",
      mimetype=\"text/plain\", data=data))\n\n    @pytest.fixture()\n    def large_data(self):\n
      \       data = ((\"1234567890 \" * 10) + \"\\n\") * 100\n        return TextParser(DocumentParserSpec()).parse(DataBlob(path=\"path/file.txt\",
      mimetype=\"text/plain\", data=data))\n\n    @pytest.fixture()\n    def splitter(self):\n
      \       return RecursiveCharacterTextSplitter(RecursiveCharacterTextSplitterSpec(chunk_size=220))\n\n
      \   def test_transform_documents_small_text(self, small_data, splitter):\n        split_docs
      = list(splitter.transform_documents(small_data))\n        assert len(split_docs)
      == 1\n        doc = split_docs[0]\n        assert doc.page_content == \"1234567890\"\n
      \       assert doc.metadata[\"source\"] == \"path/file.txt\"\n        assert
      doc.metadata[\"mime_type\"] == \"text/plain\"\n\n    def test_transform_documents_large_text(self,
      large_data, splitter):\n        split_docs = list(splitter.transform_documents(large_data))\n
      \       assert len(split_docs) == 100\n        doc = split_docs[0]\n        assert
      (\n            doc.page_content\n            == \"1234567890 1234567890 1234567890
      1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890\"\n
      \       )\n        assert doc.metadata[\"source\"] == \"path/file.txt\"\n        assert
      doc.metadata[\"mime_type\"] == \"text/plain\"\n"
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Length:
      - '517'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:35:43 GMT
      ETag:
      - W/"73f434dee77b805c858b3fa16bbec0e01e89072800428d3aba999b717c11ce5d"
      Expires:
      - Tue, 20 Feb 2024 21:40:43 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - 6a523b5e18a37e4776a64358726a5563474054f9
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - 710E:1FD7:4E31D0:610669:65D51B2E
      X-Served-By:
      - cache-yvr1524-YVR
      X-Timer:
      - S1708464943.356153,VS0,VE128
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/io/events.py
  response:
    content: "from __future__ import annotations\n\nfrom abc import ABC\nfrom enum
      import Enum\nfrom pydantic import BaseModel, TypeAdapter, field_serializer\nfrom
      typing import List, TypeVar, Generic, Any, AsyncIterator, Type, Literal, Dict,
      Optional\n\nfrom eidolon_ai_sdk.cpu.llm_message import ToolCall\n\n\nclass Category(Enum):\n
      \   START = \"start\"\n    INPUT = \"input\"\n    END = \"end\"\n    OUTPUT
      = \"output\"\n    TRANSFORM = \"transform\"\n\n\nT = TypeVar(\"T\")\n\n\nclass
      BaseStreamEvent(BaseModel, ABC):\n    stream_context: Optional[str] = None\n
      \   category: Category\n    event_type: str\n\n    def is_root_event(self):\n
      \       return self.stream_context is None\n\n    def is_root_and_type(self,
      event_type: type):\n        return self.stream_context is None and isinstance(self,
      event_type)\n\n    def is_root_end_event(self):\n        return self.is_root_and_type(EndStreamEvent)\n\n
      \   @classmethod\n    def from_dict(cls, event_dict: Dict[str, Any]):\n        #
      remove fields that are set automatically\n        event_type = event_dict.pop(\"event_type\")\n
      \       if \"category\" in event_dict:\n            del event_dict[\"category\"]\n
      \       if event_dict.get(\"stream_context\", ...) is None:\n            del
      event_dict[\"stream_context\"]\n\n        return _type_mapping[event_type](**event_dict)\n\n\nclass
      UserInputEvent(BaseStreamEvent):\n    category: Literal[Category.INPUT] = Category.INPUT\n
      \   event_type: Literal[\"user_input\"] = \"user_input\"\n    input: Dict[str,
      Any]\n\n\nclass StartStreamContextEvent(BaseStreamEvent):\n    category: Literal[Category.START]
      = Category.START\n    event_type: Literal[\"context_start\"] = \"context_start\"\n
      \   context_id: str\n\n    def get_nested_context(self):\n        context =
      self.stream_context + \".\" if self.stream_context else \"\"\n        return
      context + self.context_id\n\n\nclass EndStreamContextEvent(BaseStreamEvent):\n
      \   category: Literal[Category.START] = Category.END\n    event_type: Literal[\"context_end\"]
      = \"context_end\"\n    context_id: str\n\n\nclass ToolCallStartEvent(StartStreamContextEvent):\n
      \   event_type: Literal[\"tool_call_start\"] = \"tool_call_start\"\n    tool_call:
      ToolCall\n    title: str\n    sub_title: str = \"\"\n    is_agent_call: bool
      = False\n\n\nclass StartAgentCallEvent(BaseStreamEvent):\n    category: Literal[Category.START]
      = Category.START\n    event_type: Literal[\"agent_call\"] = \"agent_call\"\n
      \   machine: str\n    agent_name: str\n    call_name: str\n    process_id: str\n\n\nclass
      OutputEvent(BaseStreamEvent, ABC):\n    category: Literal[Category.OUTPUT] =
      Category.OUTPUT\n    content: Any\n\n    @staticmethod\n    def get(content:
      T, **kwargs):\n        if isinstance(content, str):\n            return StringOutputEvent(content=content,
      **kwargs)\n        else:\n            return ObjectOutputEvent[T](content=content,
      **kwargs)\n\n\nclass LLMToolCallRequestEvent(BaseStreamEvent):\n    category:
      Literal[Category.OUTPUT] = Category.OUTPUT\n    event_type: Literal[\"llm_tool_call_request\"]
      = \"llm_tool_call_request\"\n    tool_call: ToolCall\n\n\nclass StringOutputEvent(OutputEvent):\n
      \   event_type: Literal[\"string\"] = \"string\"\n    content: str\n\n\nclass
      ObjectOutputEvent(OutputEvent, Generic[T]):\n    event_type: Literal[\"object\"]
      = \"object\"\n    content: T\n\n\n# note EndStreamEvent does not need to reference
      the type of event it ends since this is captured by context\nclass EndStreamEvent(BaseStreamEvent,
      ABC):\n    category: Literal[Category.END] = Category.END\n    event_type: Literal[\"error\",
      \"success\", \"canceled\"]\n\n\nclass SuccessEvent(EndStreamEvent):\n    event_type:
      Literal[\"success\"] = \"success\"\n\n\nclass CanceledEvent(EndStreamEvent):\n
      \   event_type: Literal[\"canceled\"] = \"canceled\"\n\n\nclass ErrorEvent(EndStreamEvent):\n
      \   event_type: Literal[\"error\"] = \"error\"\n    reason: Any\n\n    @field_serializer(\"reason\")\n
      \   def serialize_reason(self, reason: Any):\n        if isinstance(reason,
      Exception):\n            return f\"{type(reason).__name__}: {reason}\"\n        else:\n
      \           return reason\n\n\nclass AgentStateEvent(BaseStreamEvent):\n    category:
      Literal[Category.TRANSFORM] = Category.TRANSFORM\n    event_type: Literal[\"agent_state\"]
      = \"agent_state\"\n    state: str\n    available_actions: List[str] = None  #
      this is filled in by the server, agents should leave the default\n\n\nStreamEvent
      = (\n    StartAgentCallEvent  # todo, this smells like UserInputEvent and StartAgentCallEvent\n
      \   | ToolCallStartEvent\n    | StartStreamContextEvent\n    | EndStreamContextEvent\n
      \   | LLMToolCallRequestEvent\n    | StringOutputEvent\n    | ObjectOutputEvent\n
      \   | SuccessEvent\n    | CanceledEvent\n    | ErrorEvent\n    | AgentStateEvent\n
      \   | UserInputEvent\n)\n\n_type_mapping = {c.model_fields[\"event_type\"].annotation.__args__[0]:
      c for c in StreamEvent.__args__}\n\n\nasync def convert_output_object(it: AsyncIterator[StreamEvent],
      output_format: Type[T]) -> AsyncIterator[StreamEvent]:\n    model = TypeAdapter(output_format)\n
      \   async for event in it:\n        if event.is_root_and_type(ObjectOutputEvent):\n
      \           event.content = model.validate_python(event.content)\n        yield
      event\n"
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Length:
      - '1513'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:35:43 GMT
      ETag:
      - W/"cb57330926d8874ad32ef571ad7f21c42d91f81a9ce9a552a98f0ebb77a127ff"
      Expires:
      - Tue, 20 Feb 2024 21:40:43 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - HIT
      X-Cache-Hits:
      - '1'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - 1c853e8a2f510d328dc9addbc3f49371a0ca2b03
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - 55B6:2E1949:11FDE:19816:65D519B1
      X-Served-By:
      - cache-bfi-kbfi7400116-BFI
      X-Timer:
      - S1708464943.385534,VS0,VE123
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/agent/tot_agent/prompts.py
  response:
    content: "from textwrap import dedent\n\nPREAMBLE = \"You are an intelligent agent
      that is generating one thought at a time in a tree of thoughts setting.\"\nTHOUGHTS
      = dedent(\n    \"\"\"\n    {% if thoughts %}\n    THOUGHTS\n    \n    {% for
      thought in thoughts %}\n    {{ thought }}\n    {% endfor %}\n    {% endif %}\n
      \   \"\"\"\n).strip()\nPOST_AMBLE = \"Let's think step by step.\"\nPOST_AMBLE_MULTI
      = dedent(\n    \"\"\"\n    {% if thoughts %}\n    Please generate {{ n }} valid
      thoughts based on the last valid thought\n    {% else %}\n    Please generate
      {{ n }} valid thoughts based on the question\n    {%- endif -%}\n    \"\"\"\n).strip()\n\nCHECKER_PROMPT
      = dedent(\n    \"\"\"\n    You are an intelligent agent, validating thoughts
      of another intelligent agent.\n\n    Evaluate the thoughts and question and
      respond with one word.\n\n    - Respond VALID if the thoughts contain the information
      needed so answer the question\n    - Respond INVALID if the last thought is
      invalid or does not make progress from previous thoughts.\n    - Respond INTERMEDIATE
      if the last thought is valid but not the final solution to the question.\n    \n
      \   {% if examples %}\n    <EXAMPLEs>\n    {{ examples }}\n    </EXAMPLE>\n
      \   {% endif %}\n    \n    {% if problem %}\n    <QUESTION>\n    {{ problem
      }}\n    </QUESTION>\n    {% endif %}\n    \n    {% if thoughts %}\n    {% for
      thought in thoughts %}\n    <THOUGHT>\n    {{ thought }}\n    </THOUGHT>\n    {%
      endfor %}\n    {% endif %}\n    \"\"\"\n).strip()\n"
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Length:
      - '560'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:35:43 GMT
      ETag:
      - W/"2702338f6ed8f18cf0d76edad222c3b10801d869789823604d1f9e8b21adced0"
      Expires:
      - Tue, 20 Feb 2024 21:40:43 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - 3e164a46255c4ebcc97bd102d0bd9f2aac905746
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - 3A30:1D17:52C6C1:65D400:65D51B2E
      X-Served-By:
      - cache-yvr1534-YVR
      X-Timer:
      - S1708464943.409319,VS0,VE135
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/util/test_schema_to_model.py
  response:
    content: "import jsonref\nimport pytest\nfrom fastapi import UploadFile\nfrom
      pydantic import BaseModel, ValidationError, Field\n\nfrom eidolon_ai_sdk.util.schema_to_model
      import schema_to_model\n\n\nclass NestedObject(BaseModel):\n    int_field: int
      = None\n\n\nclass ComplexInput(BaseModel):\n    nested_object: NestedObject
      = Field(default=None, description=\"A nested object\")\n    optional_nested_object:
      NestedObject = Field(default=None, description=\"A nested object\")\n    optional_array_of_strings:
      list[str] = Field(default=None, description=\"An array of strings\")\n    array_of_objects:
      list[NestedObject] = Field(default=None, description=\"An array of objects\")\n
      \   multiple_files: list[UploadFile] = Field(default=None, description=\"A list
      of files\")\n    optional_file: UploadFile = Field(default=None, description=\"A
      single file\")\n    optional_multiple_files: list[UploadFile] = Field(default=None,
      description=\"A list of files\")\n\n\n# Define a pytest class for grouping the
      tests\nclass TestSchemaToModel:\n    def test_complex_model(self):\n        schema
      = ComplexInput.model_json_schema()\n        duped = schema_to_model(jsonref.replace_refs(schema),
      \"Dupe\")\n        assert duped.model_validate(dict(nested_object=dict(int_field=1))).nested_object.int_field
      == 1\n\n    def test_simple_model_creation(self):\n        \"\"\"Test creation
      of a simple model with primitive types.\"\"\"\n        json_schema = {\n            \"type\":
      \"object\",\n            \"properties\": {\"name\": {\"type\": \"string\"},
      \"age\": {\"type\": \"integer\"}},\n            \"required\": [\"name\"],\n
      \       }\n        SimpleModel = schema_to_model(json_schema, \"SimpleModel\")\n
      \       assert issubclass(SimpleModel, BaseModel)\n        model = SimpleModel(name=\"John
      Doe\", age=30)\n        assert model.name == \"John Doe\"\n        assert model.age
      == 30\n\n    def test_nested_model_creation(self):\n        \"\"\"Test creation
      of a model with nested objects.\"\"\"\n        json_schema = {\n            \"type\":
      \"object\",\n            \"properties\": {\n                \"user\": {\n                    \"type\":
      \"object\",\n                    \"properties\": {\n                        \"name\":
      {\"type\": \"string\"},\n                        \"age\": {\"type\": \"integer\"},\n
      \                   },\n                    \"required\": [\"name\"],\n                }\n
      \           },\n        }\n        NestedModel = schema_to_model(json_schema,
      \"NestedModel\")\n        assert issubclass(NestedModel, BaseModel)\n        nested_model
      = NestedModel(user={\"name\": \"Jane Doe\", \"age\": 25})\n        assert nested_model.user.name
      == \"Jane Doe\"\n        assert nested_model.user.age == 25\n\n    def test_array_model_creation(self):\n
      \       \"\"\"Test creation of a model with array properties.\"\"\"\n        json_schema
      = {\n            \"type\": \"object\",\n            \"properties\": {\"tags\":
      {\"type\": \"array\", \"items\": {\"type\": \"string\"}}},\n        }\n        ArrayModel
      = schema_to_model(json_schema, \"ArrayModel\")\n        assert issubclass(ArrayModel,
      BaseModel)\n        array_model = ArrayModel(tags=[\"tag1\", \"tag2\"])\n        assert
      array_model.tags == [\"tag1\", \"tag2\"]\n\n    def test_required_fields(self):\n
      \       \"\"\"Test that required fields are correctly identified and enforced.\"\"\"\n
      \       json_schema = {\n            \"type\": \"object\",\n            \"properties\":
      {\"name\": {\"type\": \"string\"}, \"age\": {\"type\": \"integer\"}},\n            \"required\":
      [\"name\"],\n        }\n        RequiredFieldModel = schema_to_model(json_schema,
      \"RequiredFieldModel\")\n        with pytest.raises(ValidationError):\n            RequiredFieldModel(age=30)
      \ # 'name' is required\n\n    def test_default_values(self):\n        \"\"\"Test
      that default values are correctly assigned.\"\"\"\n        json_schema = {\n
      \           \"type\": \"object\",\n            \"properties\": {\n                \"name\":
      {\"type\": \"string\", \"default\": \"Anonymous\"},\n                \"age\":
      {\"type\": \"integer\"},\n            },\n        }\n        DefaultModel =
      schema_to_model(json_schema, \"DefaultModel\")\n        model = DefaultModel(age=30)\n
      \       assert model.name == \"Anonymous\"\n        assert model.age == 30\n\n
      \       model = DefaultModel()\n        assert model.name == \"Anonymous\"\n
      \       assert model.age is None\n\n    def test_required_values(self):\n        \"\"\"Test
      that default values are correctly assigned.\"\"\"\n        json_schema = {\n
      \           \"type\": \"object\",\n            \"properties\": {\n                \"name\":
      {\"type\": \"string\", \"default\": \"Anonymous\"},\n                \"age\":
      {\"type\": \"integer\"},\n            },\n            \"required\": [\"age\"],\n
      \       }\n        DefaultModel = schema_to_model(json_schema, \"DefaultModel\")\n
      \       with pytest.raises(ValueError) as exc_info:\n            DefaultModel()\n
      \       assert (\n            \"1 validation error for DefaultModel\\n\"\n            \"age\\n\"\n
      \           \"  Field required [type=missing, input_value={}, input_type=dict]\\n\"\n
      \       ) in str(exc_info.value)\n\n    def test_invalid_schema(self):\n        \"\"\"Test
      that an invalid schema raises the appropriate error.\"\"\"\n        json_schema
      = {\"properties\": {\"name\": {\"type\": \"string\"}, \"age\": {\"type\": \"integer\"}}}\n
      \       with pytest.raises(ValueError) as exc_info:\n            schema_to_model(json_schema,
      \"InvalidModel\")\n        assert \"Schema must be an object with properties.\"
      in str(exc_info.value)\n\n    def test_unsupported_type(self):\n        \"\"\"Test
      that an unsupported type raises the appropriate error.\"\"\"\n        json_schema
      = {\n            \"type\": \"object\",\n            \"properties\": {\"name\":
      {\"type\": \"unsupported\"}},\n        }\n        with pytest.raises(ValueError)
      as exc_info:\n            schema_to_model(json_schema, \"UnsupportedModel\")\n
      \       assert \"Error creating field 'name'\" in str(exc_info.value)\n"
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Length:
      - '1256'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:35:43 GMT
      ETag:
      - W/"08a384cac2419c6d4ea804bee36786eb7ab22429dcef87fed6db96da25987421"
      Expires:
      - Tue, 20 Feb 2024 21:40:43 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - dc4369ee794446667e4531143382db53941d5255
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - 1240:5D6A:4F4661:6236C4:65D51B2F
      X-Served-By:
      - cache-yvr1521-YVR
      X-Timer:
      - S1708464943.197537,VS0,VE353
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/agent/doc_manager/parsers/base_parser.py
  response:
    content: "import mimetypes\n\nimport contextlib\nimport logging\nfrom abc import
      ABC, abstractmethod\nfrom dataclasses import dataclass\nfrom io import BufferedReader,
      BytesIO, IOBase\nfrom typing import Union, Optional, Generator, Iterable\n\nfrom
      pydantic import BaseModel\n\nfrom eidolon_ai_sdk.memory.document import Document\nfrom
      eidolon_ai_sdk.system.reference_model import Specable\n\n\n@dataclass\nclass
      DataBlob:\n    data: Union[bytes, IOBase, str, None]\n    mimetype: Optional[str]
      = None\n    encoding: str = \"utf-8\"\n    path: Optional[str] = None\n\n    @contextlib.contextmanager\n
      \   def as_bytes(self) -> Generator[Union[BytesIO, BufferedReader], None, None]:\n
      \       if isinstance(self.data, bytes):\n            yield BytesIO(self.data)\n
      \       elif isinstance(self.data, IOBase):\n            yield self.data\n        elif
      isinstance(self.data, str):\n            yield BytesIO(self.data.encode(self.encoding))\n
      \       elif self.data is None and self.path:\n            with open(str(self.path),
      \"rb\") as f:\n                yield f\n        else:\n            raise TypeError(\"DataBlob.data
      must be bytes or str\")\n\n    def as_string(self) -> str:\n        if self.data
      is None and self.path:\n            with open(str(self.path), \"r\", encoding=self.encoding)
      as f:\n                self.data = f.read()\n                return self.data\n
      \       elif isinstance(self.data, bytes):\n            return self.data.decode(self.encoding)\n
      \       elif isinstance(self.data, str):\n            return self.data\n        else:\n
      \           raise TypeError(\"DataBlob.data must be bytes or str\")\n\n    @classmethod\n
      \   def from_path(\n        cls,\n        path: str,\n        *,\n        encoding:
      str = \"utf-8\",\n        mimetype: Optional[str] = None,\n        guess_type:
      bool = True,\n    ) -> \"DataBlob\":\n        \"\"\"Load the blob from a path
      like object.\n\n        Args:\n            path: path like object to file to
      be read\n            encoding: Encoding to use if decoding the bytes into a
      string\n            mimetype: if provided, will be set as the mime-type of the
      data\n            guess_type: If True, the mimetype will be guessed from the
      contents of the file,\n                        if a mime-type was not provided\n\n
      \       Returns:\n            Blob instance\n        \"\"\"\n        if guess_type
      and mimetype is None:\n            import filetype\n\n            mimetype =
      filetype.guess_mime(path)\n            if mimetype is None and path is not None:\n
      \               mimetype = mimetypes.guess_type(path)[0]\n            if mimetype
      is None:\n                if path.endswith(\".md\"):\n                    mimetype
      = \"text/x-markdown\"\n                else:\n                    mimetype =
      \"text/plain\"\n\n        return cls(\n            data=None,\n            path=path,\n
      \           encoding=encoding,\n            mimetype=mimetype,\n        )\n\n
      \   @classmethod\n    def from_bytes(\n        cls,\n        data: bytes,\n
      \       *,\n        path: Optional[str],\n        mimetype: Optional[str] =
      None,\n        encoding: str = \"utf-8\",\n        guess_type: bool = True,\n
      \   ) -> \"DataBlob\":\n        \"\"\"Load the blob from a bytes object.\n\n
      \       Args:\n            data: bytes object to be read\n            path:
      path to file that the bytes object was read from or None if not applicable\n
      \           mimetype: if provided, will be set as the mime-type of the data\n
      \           encoding: Encoding to use if decoding the bytes into a string\n
      \           guess_type: If True, the mimetype will be guessed from the contents
      of the data,\n                        if a mime-type was not provided\n\n        Returns:\n
      \           Blob instance\n        \"\"\"\n        if guess_type and mimetype
      is None:\n            import filetype\n\n            mimetype = filetype.guess_mime(data)\n
      \           if mimetype is None and path is not None:\n                mimetype
      = mimetypes.guess_type(path)[0]\n            if mimetype is None:\n                if
      path.endswith(\".md\"):\n                    mimetype = \"text/x-markdown\"\n
      \               else:\n                    mimetype = \"text/plain\"\n\n        return
      cls(\n            data=data,\n            path=path,\n            encoding=encoding,\n
      \           mimetype=mimetype,\n        )\n\n\nclass DocumentParserSpec(BaseModel):\n
      \   pass\n\n\nclass DocumentParser(ABC, Specable[DocumentParserSpec]):\n    def
      __init__(self, spec: DocumentParserSpec):\n        super().__init__(spec)\n
      \       self.spec = spec\n        self.logger = logging.getLogger(\"eidolon\")\n\n
      \   @abstractmethod\n    def parse(self, blob: DataBlob) -> Iterable[Document]:\n
      \       pass\n"
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Length:
      - '1144'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:35:43 GMT
      ETag:
      - W/"be05bfb77789e14a7bd2c87243eb8f7aefc43825959b956b767cfba5edd18d54"
      Expires:
      - Tue, 20 Feb 2024 21:40:43 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - HIT
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - f752496c43aa1a4d91c3aa19ff49ab8ee8789308
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - 18D8:25522C:AA6FF:FE124:65D519B2
      X-Served-By:
      - cache-bfi-krnt7300045-BFI
      X-Timer:
      - S1708464943.437715,VS0,VE144
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/tests/agent/doc_manager/transformer/__init__.py
  response:
    content: ''
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Length:
      - '0'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:35:43 GMT
      ETag:
      - W/"938f66ede415ccb10764da47cd5f3cfc076c07b8791c708cfa8ec54982197c1f"
      Expires:
      - Tue, 20 Feb 2024 21:40:43 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - f5cabe0b6d6199227a6c68131592b30c05b996f8
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - 9E00:8206:4A9217:5DA0E5:65D51B2F
      X-Served-By:
      - cache-yvr1534-YVR
      X-Timer:
      - S1708464943.254654,VS0,VE345
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/memory/__init__.py
  response:
    content: ''
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:35:43 GMT
      ETag:
      - W/"938f66ede415ccb10764da47cd5f3cfc076c07b8791c708cfa8ec54982197c1f"
      Expires:
      - Tue, 20 Feb 2024 21:40:43 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - HIT
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - 1c5d576f3cc4f1792d63e306924c38646d892e3d
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - 5D26:254203:B5C53:109675:65D519AF
      X-Served-By:
      - cache-bfi-krnt7300055-BFI
      X-Timer:
      - S1708464943.460628,VS0,VE147
      X-XSS-Protection:
      - 1; mode=block
      transfer-encoding:
      - chunked
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/agent/tot_agent/thought.py
  response:
    content: "from __future__ import annotations\n\nfrom typing import Literal, List\n\nfrom
      pydantic import BaseModel, Field\n\n\nclass ThoughtValidity(BaseModel):\n    validity:
      Literal[\"INTERMEDIATE\", \"VALID\", \"INVALID\"]\n\n\nclass Thought(ThoughtValidity):\n
      \   text: str\n    children: List[Thought] = Field(default_factory=list)\n\n
      \   def __hash__(self) -> int:\n        return id(self)\n"
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Length:
      - '246'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:35:43 GMT
      ETag:
      - W/"b35e8d2ea5c3598824e24aae0184b4d565a466c6fb8e01780eb06cf8fade5d03"
      Expires:
      - Tue, 20 Feb 2024 21:40:43 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - c7dc2c921c3f12505e09e785625cf3c317ce11ae
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - B95E:251816:B4800:108711:65D51B2E
      X-Served-By:
      - cache-bfi-kbfi7400023-BFI
      X-Timer:
      - S1708464943.485959,VS0,VE139
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/memory/agent_memory.py
  response:
    content: "from eidolon_ai_sdk.memory.file_memory import FileMemory\nfrom eidolon_ai_sdk.memory.semantic_memory
      import SymbolicMemory\nfrom eidolon_ai_sdk.memory.similarity_memory import SimilarityMemory\n\n\nclass
      AgentMemory:\n    file_memory: FileMemory\n    symbolic_memory: SymbolicMemory\n
      \   similarity_memory: SimilarityMemory\n\n    def __init__(\n        self,\n
      \       file_memory: FileMemory = None,\n        symbolic_memory: SymbolicMemory
      = None,\n        similarity_memory: SimilarityMemory = None,\n    ):\n        self.file_memory
      = file_memory\n        self.symbolic_memory = symbolic_memory\n        self.similarity_memory
      = similarity_memory\n\n    async def start(self):\n        if self.file_memory:\n
      \           await self.file_memory.start()\n        if self.symbolic_memory:\n
      \           await self.symbolic_memory.start()\n        if self.similarity_memory:\n
      \           await self.similarity_memory.start()\n\n    async def stop(self):\n
      \       if self.file_memory:\n            await self.file_memory.stop()\n        if
      self.symbolic_memory:\n            await self.symbolic_memory.stop()\n        if
      self.similarity_memory:\n            await self.similarity_memory.stop()\n"
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Length:
      - '274'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:35:43 GMT
      ETag:
      - W/"1d18912b8089cd69274479097eaae10455a78c0fe0271cf9d27ef4fcc665a158"
      Expires:
      - Tue, 20 Feb 2024 21:40:43 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - 98f6621d5f972a9233286badd376f9fe85be5f98
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - 6888:25435F:B1904:105816:65D51B2E
      X-Served-By:
      - cache-bfi-krnt7300033-BFI
      X-Timer:
      - S1708464944.512088,VS0,VE122
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/agent/doc_manager/parsers/ms_word_parser.py
  response:
    content: "from typing import Iterable\n\nfrom eidolon_ai_sdk.agent.doc_manager.parsers.base_parser
      import DocumentParser, DataBlob\nfrom eidolon_ai_sdk.memory.document import
      Document\n\n\nclass MsWordParser(DocumentParser):\n    def parse(self, blob:
      DataBlob) -> Iterable[Document]:\n        try:\n            from unstructured.partition.doc
      import partition_doc\n            from unstructured.partition.docx import partition_docx\n
      \       except ImportError as e:\n            raise ImportError(\"Could not
      import unstructured, please install with `pip install \" \"unstructured`.\")
      from e\n\n        mime_type_parser = {\n            \"application/msword\":
      partition_doc,\n            \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\":
      partition_docx,\n        }\n        if blob.mimetype not in (\n            \"application/msword\",\n
      \           \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\",\n
      \       ):\n            raise ValueError(\"This blob type is not supported for
      this parser.\")\n        with blob.as_bytes() as word_document:\n            elements
      = mime_type_parser[blob.mimetype](file=word_document)\n            text = \"\\n\\n\".join([str(el)
      for el in elements])\n            metadata = {\"source\": blob.path, \"mime_type\":
      blob.mimetype}\n            yield Document(page_content=text, metadata=metadata)\n"
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Length:
      - '542'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:35:43 GMT
      ETag:
      - W/"8c48e44e83f9228a17f3aa51f95216d2d5f8b382dea9f97be5422192a2340028"
      Expires:
      - Tue, 20 Feb 2024 21:40:43 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - 4e7f8d8aee36d7f8c6f1f79c97bb91658a1eb335
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - AAFA:667D:5483E5:679233:65D51B2F
      X-Served-By:
      - cache-yvr1524-YVR
      X-Timer:
      - S1708464944.599094,VS0,VE126
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/agent/tot_agent/thought_generators.py
  response:
    content: "\"\"\"\nWe provide two strategies for generating thoughts in the Tree
      of Thoughts (ToT)\nframework to avoid repetition:\n\nThese strategies ensure
      that the language model generates diverse and\nnon-repeating thoughts, which
      are crucial for problem-solving tasks that require\nexploration.\n\"\"\"\nfrom
      abc import abstractmethod\nfrom typing import Any, Dict, List, Callable, Awaitable\n\nfrom
      jinja2 import StrictUndefined, Environment\nfrom pydantic import Field, BaseModel\n\nfrom
      eidolon_ai_sdk.cpu.agent_io import SystemCPUMessage, UserTextCPUMessage, CPUMessageTypes\nfrom
      eidolon_ai_sdk.cpu.llm_message import UserMessage, LLMMessage\nfrom eidolon_ai_sdk.agent.tot_agent.prompts
      import (\n    POST_AMBLE,\n    THOUGHTS,\n    PREAMBLE,\n    POST_AMBLE_MULTI,\n)\nfrom
      eidolon_ai_sdk.system.reference_model import Specable\n\n\nclass TGSConfig(BaseModel):\n
      \   preamble: str = PREAMBLE\n    thoughts: str = THOUGHTS\n    post_amble:
      str = POST_AMBLE\n    num_children: int = Field(3, description=\"The number
      of thoughts to generate.\")\n\n\nclass ThoughtGenerationStrategy(Specable[TGSConfig]):\n
      \   \"\"\"\n    Base class for a thought generation strategy.\n    \"\"\"\n\n
      \   spec: TGSConfig\n    env = Environment(undefined=StrictUndefined)\n\n    def
      __init__(self, spec):\n        super().__init__(spec)\n        self.spec = spec\n\n
      \   def build_prompt(self, user_message, thoughts_path: List[str]) -> (List[CPUMessageTypes],
      List[CPUMessageTypes]):\n        thoughts_tuple = tuple(thoughts_path)\n        preamble_txt
      = self.env.from_string(self.spec.preamble).render(thoughts=thoughts_tuple, n=self.spec.num_children)\n
      \       thoughts_txt = self.env.from_string(self.spec.thoughts).render(thoughts=thoughts_tuple,
      n=self.spec.num_children)\n        post_amble_txt = self.env.from_string(self.spec.post_amble).render(\n
      \           thoughts=thoughts_tuple, n=self.spec.num_children\n        )\n        return
      (\n            [SystemCPUMessage(prompt=preamble_txt)],\n            [\n                UserTextCPUMessage(prompt=user_message),\n
      \               UserTextCPUMessage(prompt=thoughts_txt),\n                UserTextCPUMessage(prompt=post_amble_txt),\n
      \           ],\n        )\n\n    @abstractmethod\n    async def next_thought(\n
      \       self,\n        user_message: str,\n        llm_call: Callable[\n            [List[LLMMessage],
      List[LLMMessage], Dict[str, Any]],\n            Awaitable[Dict[str, Any]],\n
      \       ],\n        thoughts_path: List[str] = Field(default_factory=list),\n
      \   ) -> str:\n        \"\"\"\n        Generate the next thought given the problem
      description and the thoughts\n        generated so far.\n        \"\"\"\n\n\nclass
      SampleCoTStrategyOutput(BaseModel):\n    thought: str\n\n\nclass SampleCoTStrategy(ThoughtGenerationStrategy):\n
      \   \"\"\"\n    Sample thoughts from a Chain-of-Thought (CoT) prompt.\n\n    This
      strategy works better when the thought space is rich, such as when each\n    thought
      is a paragraph. Independent and identically distributed samples\n    lead to
      diversity, which helps to avoid repetition.\n    \"\"\"\n\n    async def next_thought(\n
      \       self,\n        user_message: UserMessage,\n        llm_call: Callable[\n
      \           [List[LLMMessage], List[LLMMessage], Dict[str, Any]],\n            Awaitable[Dict[str,
      Any]],\n        ],\n        thoughts_path: List[str] = Field(default_factory=list),\n
      \   ) -> str:\n        system_messages, messages = self.build_prompt(user_message,
      thoughts_path)\n        next_thought = await llm_call(system_messages, messages,
      SampleCoTStrategyOutput.model_json_schema())\n        return next_thought[\"thought\"]\n\n\nclass
      ProposeOutputFormat(BaseModel):\n    thoughts: List[str]\n\n\nclass ProposePromptStrategyConfig(TGSConfig):\n
      \   post_amble: str = POST_AMBLE_MULTI\n\n\nclass ProposePromptStrategy(ThoughtGenerationStrategy,
      Specable[ProposePromptStrategyConfig]):\n    \"\"\"\n    Propose thoughts sequentially
      using a \"propose prompt\".\n\n    This strategy works better when the thought
      space is more constrained, such\n    as when each thought is just a word or
      a line. Proposing different thoughts\n    in the same prompt completion helps
      to avoid duplication.\n    \"\"\"\n\n    tot_memory: Dict[tuple, List[str]]\n\n
      \   def __init__(self, **kwargs):\n        super().__init__(**kwargs)\n        self.tot_memory
      = {}\n\n    async def next_thought(\n        self,\n        user_message: UserMessage,\n
      \       llm_call: Callable[\n            [List[LLMMessage], List[LLMMessage],
      Dict[str, Any]],\n            Awaitable[Dict[str, Any]],\n        ],\n        thoughts_path:
      List[str] = Field(default_factory=list),\n    ) -> str:\n        thoughts_tuple
      = tuple(thoughts_path)\n        if thoughts_tuple not in self.tot_memory or
      not self.tot_memory[thoughts_tuple]:\n            system_messages, messages
      = self.build_prompt(user_message, thoughts_path)\n            next_thought_msg
      = await llm_call(system_messages, messages, ProposeOutputFormat.model_json_schema())\n
      \           self.tot_memory[thoughts_tuple] = next_thought_msg[\"thoughts\"]\n
      \       return self.tot_memory[thoughts_tuple].pop()\n"
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Length:
      - '1456'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:35:43 GMT
      ETag:
      - W/"f331d0ce59609e85be2f5250ed5db6f8349ac221c24bfe8a5c4e0fa3a1bc5f34"
      Expires:
      - Tue, 20 Feb 2024 21:40:43 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - 33c2724d3e85d311f04bca143d8cb29c4c7b2d18
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - 5466:80B8:51C9F0:64D84F:65D51B2F
      X-Served-By:
      - cache-yvr1523-YVR
      X-Timer:
      - S1708464944.626086,VS0,VE127
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/memory/chroma_vector_store.py
  response:
    content: "try:\n    __import__(\"pysqlite3\")\n    import sys\n\n    sys.modules[\"sqlite3\"]
      = sys.modules.pop(\"pysqlite3\")\nexcept ImportError:\n    pass\nimport chromadb\nfrom
      chromadb import Include, QueryResult\nfrom chromadb.api.models.Collection import
      Collection\nfrom pathlib import Path\nfrom pydantic import Field, field_validator\nfrom
      typing import List, Dict, Any, Optional\nfrom urllib.parse import urlparse,
      parse_qs\n\nfrom eidolon_ai_sdk.memory.document import EmbeddedDocument\nfrom
      eidolon_ai_sdk.memory.file_system_vector_store import FileSystemVectorStore,
      FileSystemVectorStoreSpec\nfrom eidolon_ai_sdk.memory.vector_store import QueryItem\nfrom
      eidolon_ai_sdk.system.reference_model import Specable\nfrom eidolon_ai_sdk.util.str_utils
      import replace_env_var_in_string\n\n\nclass ChromaVectorStoreConfig(FileSystemVectorStoreSpec):\n
      \   url: str = Field(\n        \"file://${EIDOLON_DATA_DIR}/doc_producer\",\n
      \       description=\"The url of the chroma database. \"\n        + \"Use http(s)://$HOST:$PORT?header1=value1&header2=value2
      to pass headers to the database.\"\n        + \"Use file://$PATH to use a local
      file database.\",\n        validate_default=True,\n    )\n\n    # noinspection
      PyMethodParameters,HttpUrlsUsage\n    @field_validator(\"url\")\n    def validate_url(cls,
      url):\n        if url.startswith(\"file://\"):\n            if len(url) < 8:\n
      \               raise ValueError(\"file:// must be followed by a path\")\n\n
      \           path = url[7:]\n            if len(path) == 0:\n                raise
      ValueError(\"file:// must be followed by a path\")\n\n            # validate
      path is a file on disk\n            value = replace_env_var_in_string(path,
      EIDOLON_DATA_DIR=\"/tmp/eidolon_data_dir\")\n            # Convert the string
      to a Path object\n            path = Path(value).resolve()\n\n            #
      Check if the path is absolute\n            if not path.is_absolute():\n                raise
      ValueError(f\"The root_dir must be an absolute path. Received: {path}->{value}\")\n\n
      \           return f\"file://{path.absolute()}\"\n        if not (url.startswith(\"http://\")
      or url.startswith(\"https://\")):\n            raise ValueError(\"url must start
      with file://, http://, or https://\")\n\n\nclass ChromaVectorStore(FileSystemVectorStore,
      Specable[ChromaVectorStoreConfig]):\n    spec: ChromaVectorStoreConfig\n    client:
      chromadb.Client\n\n    def __init__(self, spec: ChromaVectorStoreConfig):\n
      \       super().__init__(spec)\n        self.spec = spec\n        self.client
      = None\n\n    async def start(self):\n        self.connect()\n\n    def connect(self):\n
      \       url = urlparse(self.spec.url)\n        if url.scheme == \"file\":\n
      \           path = url.path\n            self.client = chromadb.PersistentClient(path)\n
      \       else:\n            host = url.hostname\n            port = url.port
      or \"8000\"\n            ssl = url.scheme == \"https\"\n            if url.query
      and len(url.query) > 0:\n                headers = parse_qs(url.query)\n            else:\n
      \               headers = None\n            self.client = chromadb.HttpClient(host=host,
      port=port, ssl=ssl, headers=headers)\n\n    async def stop(self):\n        pass\n\n
      \   def _get_collection(self, name: str) -> Collection:\n        if not self.client:\n
      \           self.connect()\n\n        try:\n            return self.client.get_or_create_collection(name=name)\n
      \       except BaseException as e:\n            raise RuntimeError(f\"Failed
      to get collection {name}\") from e\n\n    async def add_embedding(self, collection:
      str, docs: List[EmbeddedDocument], **add_kwargs: Any):\n        collection =
      self._get_collection(name=collection)\n        doc_ids = [doc.id for doc in
      docs]\n        embeddings = [doc.embedding for doc in docs]\n        metadata
      = [doc.metadata for doc in docs]\n        collection.upsert(embeddings=embeddings,
      ids=doc_ids, metadatas=metadata, **add_kwargs)\n\n    async def delete_embedding(self,
      collection: str, doc_ids: List[str], **delete_kwargs: Any):\n        collection
      = self._get_collection(name=collection)\n        collection.delete(ids=doc_ids,
      **delete_kwargs)\n\n    async def get_metadata(self, collection: str, doc_ids:
      List[str]):\n        collection = self._get_collection(name=collection)\n        return
      collection.get(ids=doc_ids, include=[\"metadatas\"])[\"metadatas\"]\n\n    async
      def query_embedding(\n        self,\n        collection: str,\n        query:
      List[float],\n        num_results: int,\n        metadata_where: Optional[Dict[str,
      str]] = None,\n        include_embeddings=False,\n    ) -> List[QueryItem]:\n
      \       collection = self._get_collection(name=collection)\n        thingsToInclude:
      Include = [\"metadatas\", \"distances\"]\n        if include_embeddings:\n            thingsToInclude.append(\"embeddings\")\n\n
      \       results: QueryResult = collection.query(\n            query_embeddings=[query],\n
      \           n_results=num_results,\n            where=metadata_where,\n            include=thingsToInclude,\n
      \       )\n\n        ret = []\n        for i, doc_id in enumerate(results[\"ids\"][0]):\n
      \           embedding = results[\"embeddings\"][0][i] if include_embeddings
      else None\n            ret.append(\n                QueryItem(\n                    id=doc_id,\n
      \                   score=results[\"distances\"][0][i],\n                    embedding=embedding,\n
      \                   metadata=results[\"metadatas\"][0][i],\n                )\n
      \           )\n\n        return ret\n"
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Length:
      - '1760'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:35:43 GMT
      ETag:
      - W/"7d2b21dfc04a3c507b5cf636519990e28360cae92bec81b04cbfaead20448773"
      Expires:
      - Tue, 20 Feb 2024 21:40:43 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - ffa91c06c08466ca863c8d779d3350ed92e68ed0
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - 5B9E:252418:B0E87:104D97:65D51B2E
      X-Served-By:
      - cache-bfi-kbfi7400116-BFI
      X-Timer:
      - S1708464944.603649,VS0,VE177
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/agent/doc_manager/parsers/pdf_parsers.py
  response:
    content: "import numpy as np\nimport pypdf\nfrom typing import Optional, Iterable,
      Union\n\nfrom eidolon_ai_sdk.agent.doc_manager.parsers.base_parser import DocumentParser,
      DocumentParserSpec, DataBlob\nfrom eidolon_ai_sdk.memory.document import Document\nfrom
      eidolon_ai_sdk.system.reference_model import Specable\n\n_PDF_FILTER_WITH_LOSS
      = [\"DCTDecode\", \"DCT\", \"JPXDecode\"]\n_PDF_FILTER_WITHOUT_LOSS = [\n    \"LZWDecode\",\n
      \   \"LZW\",\n    \"FlateDecode\",\n    \"Fl\",\n    \"ASCII85Decode\",\n    \"A85\",\n
      \   \"ASCIIHexDecode\",\n    \"AHx\",\n    \"RunLengthDecode\",\n    \"RL\",\n
      \   \"CCITTFaxDecode\",\n    \"CCF\",\n    \"JBIG2Decode\",\n]\n\n\ndef extract_from_images_with_rapidocr(\n
      \   images: Iterable[Union[Iterable[np.ndarray], bytes]],\n) -> str:\n    \"\"\"Extract
      text from images with RapidOCR.\n\n    Args:\n        images: Images to extract
      text from.\n\n    Returns:\n        Text extracted from images.\n\n    Raises:\n
      \       ImportError: If `rapidocr-onnxruntime` package is not installed.\n    \"\"\"\n
      \   try:\n        from rapidocr_onnxruntime import RapidOCR\n    except ImportError:\n
      \       raise ImportError(\n            \"`rapidocr-onnxruntime` package not
      found, please install it with \" \"`pip install rapidocr-onnxruntime`\"\n        )\n
      \   ocr = RapidOCR()\n    text = \"\"\n    for img in images:\n        result,
      _ = ocr(img)\n        if result:\n            result = [text[1] for text in
      result]\n            text += \"\\n\".join(result)\n    return text\n\n\nclass
      PyPDFParserSpec(DocumentParserSpec):\n    password: Optional[Union[str, bytes]]
      = None\n    extract_images: bool = False\n\n\nclass PyPDFParser(DocumentParser,
      Specable[PyPDFParserSpec]):\n    def __init__(self, spec: PyPDFParserSpec):\n
      \       super().__init__(spec)\n        self.password = spec.password\n        self.extract_images
      = spec.extract_images\n\n    def parse(self, blob: DataBlob) -> Iterable[Document]:\n
      \       with blob.as_bytes() as pdf_file_obj:\n            pdf_reader = pypdf.PdfReader(pdf_file_obj,
      password=self.password)\n            yield from [\n                Document(\n
      \                   page_content=page.extract_text() + self._extract_images_from_page(page),\n
      \                   metadata={\"source\": blob.path, \"page\": page_number,
      \"mime_type\": blob.mimetype},\n                )\n                for page_number,
      page in enumerate(pdf_reader.pages)\n            ]\n\n    # noinspection PyProtectedMember\n
      \   def _extract_images_from_page(self, page: pypdf._page.PageObject) -> str:\n
      \       \"\"\"Extract images from page and get the text with RapidOCR.\"\"\"\n
      \       # noinspection PyUnresolvedReferences\n        if not self.extract_images
      or \"/XObject\" not in page[\"/Resources\"].keys():\n            return \"\"\n\n
      \       xObject = page[\"/Resources\"][\"/XObject\"].get_object()  # type: ignore\n
      \       images = []\n        for obj in xObject:\n            if xObject[obj][\"/Subtype\"]
      == \"/Image\":\n                if xObject[obj][\"/Filter\"][1:] in _PDF_FILTER_WITHOUT_LOSS:\n
      \                   height, width = xObject[obj][\"/Height\"], xObject[obj][\"/Width\"]\n\n
      \                   images.append(np.frombuffer(xObject[obj].get_data(), dtype=np.uint8).reshape(height,
      width, -1))\n                elif xObject[obj][\"/Filter\"][1:] in _PDF_FILTER_WITH_LOSS:\n
      \                   images.append(xObject[obj].get_data())\n                else:\n
      \                   self.logger.warn(\"Unknown PDF Filter!\")\n        return
      extract_from_images_with_rapidocr(images)\n"
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Length:
      - '1297'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:35:43 GMT
      ETag:
      - W/"8479f01f29242e13c4fbef96bb0dbbc75e28ef16eb0ed3b2c79526617b110b27"
      Expires:
      - Tue, 20 Feb 2024 21:40:43 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - cbbaf23aaf82041ada198b1f7c07b0a39c35d000
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - 612A:255865:B8FE6:10CEAB:65D51B2F
      X-Served-By:
      - cache-bfi-krnt7300055-BFI
      X-Timer:
      - S1708464944.651808,VS0,VE138
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/memory/embeddings.py
  response:
    content: "from abc import ABC, abstractmethod\nfrom typing import Sequence, Any,
      Literal, AsyncGenerator, Optional, List\n\nfrom openai import AsyncOpenAI\nfrom
      pydantic import BaseModel, Field\n\nfrom eidolon_ai_sdk.system.reference_model
      import Specable\nfrom eidolon_ai_sdk.memory.document import Document, EmbeddedDocument\n\n\nclass
      EmbeddingSpec(BaseModel):\n    pass\n\n\nclass Embedding(ABC, Specable[EmbeddingSpec]):\n
      \   def __init__(self, spec: EmbeddingSpec):\n        super().__init__(spec)\n
      \       self.spec = spec\n\n    @abstractmethod\n    async def embed_text(self,
      text: str, **kwargs: Any) -> List[float]:\n        \"\"\"Create an embedding
      for a single piece of text.\n\n        Args:\n            text: The text to
      be encoded.\n\n        Returns:\n            An embedding for the text.\n        \"\"\"\n\n
      \   async def embed(self, documents: Sequence[Document], **kwargs: Any) -> AsyncGenerator[EmbeddedDocument,
      None]:\n        \"\"\"Create embeddings for a list of documents.\n\n        Args:\n
      \           documents: A sequence of Documents to be encoded.\n\n        Returns:\n
      \           A sequence of EmbeddedDocuments.\n        \"\"\"\n        for document
      in documents:\n            text = await self.embed_text(document.page_content,
      **kwargs)\n            yield EmbeddedDocument(\n                id=document.id,\n
      \               embedding=text,\n                metadata=document.metadata,\n
      \           )\n\n    async def start(self):\n        pass\n\n    async def stop(self):\n
      \       pass\n\n\nclass NoopEmbedding(Embedding, Specable[EmbeddingSpec]):\n
      \   async def embed_text(self, text: str, **kwargs: Any) -> Sequence[float]:\n
      \       return []\n\n\nclass OpenAIEmbeddingSpec(EmbeddingSpec):\n    model:
      Literal[\n        \"text-embedding-davinci-001\",\n        \"text-embedding-babbage-001\",\n
      \       \"text-embedding-curie-001\",\n        \"text-embedding-ada-002\",\n
      \   ] = Field(default=\"text-embedding-ada-002\", description=\"The name of
      the model to use.\")\n\n\nclass OpenAIEmbedding(Embedding, Specable[OpenAIEmbeddingSpec]):\n
      \   llm: Optional[AsyncOpenAI] = None\n\n    def __init__(self, spec: OpenAIEmbeddingSpec):\n
      \       super().__init__(spec)\n        self.spec = spec\n\n    async def start(self):\n
      \       await super().start()\n        self.llm = AsyncOpenAI()\n\n    async
      def stop(self):\n        await super().stop()\n        await self.llm.close()\n
      \       self.llm = None\n\n    async def embed_text(self, text: str, **kwargs:
      Any) -> Sequence[float]:\n        response = await self.llm.embeddings.create(\n
      \           input=text,\n            model=self.spec.model,  # Choose the model
      as per your requirement\n        )\n\n        embedding_vector = response.data[0].embedding\n
      \       return embedding_vector\n"
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Length:
      - '844'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:35:43 GMT
      ETag:
      - W/"bd1cff1a02a7c529947059aeb030bec721f140d070089c2112707cb96a95883b"
      Expires:
      - Tue, 20 Feb 2024 21:40:43 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - HIT
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - eb0e21d7f52aaf613494804974f8d41b384e0c8b
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - 3692:255865:B8326:10BD01:65D519B2
      X-Served-By:
      - cache-bfi-krnt7300033-BFI
      X-Timer:
      - S1708464944.685461,VS0,VE105
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/agent/tot_agent/tot_agent.py
  response:
    content: "from __future__ import annotations\n\nfrom textwrap import indent\nfrom
      typing import List, Dict, Any, Literal, Optional, Type, Union\n\nfrom fastapi
      import HTTPException\nfrom jinja2 import StrictUndefined, Environment\nfrom
      pydantic import Field, BaseModel\n\nfrom eidolon_ai_sdk.agent.agent import register_program,
      Agent, AgentSpec\nfrom eidolon_ai_sdk.system.fn_handler import FnHandler\nfrom
      eidolon_ai_sdk.agent.tot_agent.checker import ToTChecker\nfrom eidolon_ai_sdk.agent.tot_agent.controller
      import ToTController\nfrom eidolon_ai_sdk.agent.tot_agent.memory import ToTDFSMemory\nfrom
      eidolon_ai_sdk.agent.tot_agent.thought import Thought\nfrom eidolon_ai_sdk.agent.tot_agent.thought_generators
      import (\n    ThoughtGenerationStrategy,\n)\nfrom eidolon_ai_sdk.cpu.agent_io
      import UserTextCPUMessage\nfrom eidolon_ai_sdk.cpu.llm_message import LLMMessage\nfrom
      eidolon_ai_sdk.system.reference_model import Specable, AnnotatedReference\nfrom
      eidolon_ai_sdk.util.logger import logger\nfrom eidolon_ai_sdk.util.schema_to_model
      import schema_to_model\n\n\nclass ToTAgentConfig(AgentSpec):\n    description:
      str\n    num_iterations: int = Field(\n        10,\n        description=\"The
      maximum number of iterations to run the tree of thoughts algorithm.\",\n    )\n
      \   user_prompt: str = Field(description=\"The prompt to use when asking the
      user for a question.\")\n    input_schema: Dict[str, Any] = Field(description=\"The
      json schema for the question input model.\")\n    output_schema: Union[Literal[\"str\"],
      Dict[str, Any]] = Field(\n        description=\"The json schema for the output
      model or the literal 'str' for text output.\"\n    )\n    thought_generator:
      AnnotatedReference[ThoughtGenerationStrategy] = Field(\n        description=\"The
      thought generation strategy to use.\"\n    )\n    checker: AnnotatedReference[ToTChecker]
      = Field(description=\"The checker to use to evaluate thoughts.\")\n    fallback:
      Literal[\"ERROR\", \"LLM\"] = \"ERROR\"\n    init_description: Optional[str]
      = Field(default=None, description=\"Overrides the description of the INIT endpoint.\")\n\n\ndef
      make_description(agent: object, _handler: FnHandler) -> str:\n    # noinspection
      PyUnresolvedReferences\n    spec = agent.spec\n    return spec.description\n\n\ndef
      make_input_schema(agent: object, handler: FnHandler) -> Type[BaseModel]:\n    #
      noinspection PyUnresolvedReferences\n    spec = agent.spec\n    properties:
      Dict[str, Any] = {}\n    if spec.input_schema:\n        properties[\"body\"]
      = dict(\n            type=\"object\",\n            properties=spec.input_schema,\n
      \       )\n    required = [\"body\"]\n    schema = {\"type\": \"object\", \"properties\":
      properties, \"required\": required}\n    return schema_to_model(schema, f\"{handler.name.capitalize()}InputModel\")\n\n\ndef
      make_output_schema(agent: object, handler: FnHandler) -> Type[Any]:\n    # noinspection
      PyUnresolvedReferences\n    spec = agent.spec\n    if spec.output_schema ==
      \"str\":\n        return str\n    elif spec.output_schema:\n        return schema_to_model(spec.output_schema,
      f\"{handler.name.capitalize()}OutputModel\")\n    else:\n        raise ValueError(\"output_schema
      must be specified\")\n\n\nclass TotResponse(BaseModel):\n    answer: Any\n    thoughts:
      List[str]\n\n\nclass TreeOfThoughtsAgent(Agent, Specable[ToTAgentConfig]):\n
      \   thought_generator: ThoughtGenerationStrategy\n    tot_memory: ToTDFSMemory\n
      \   tot_controller: ToTController\n    checker: ToTChecker\n\n    def __init__(self,
      **kwargs):\n        super().__init__(**kwargs)\n        self.thought_generator
      = self.spec.thought_generator.instantiate()\n        self.checker = self.spec.checker.instantiate(cpu=self.cpu)\n
      \       self.tot_memory = ToTDFSMemory()\n        self.tot_controller = ToTController()\n
      \       if self.spec.init_description:\n            handlers = getattr(self.question,
      \"eidolon_handlers\")\n            for handler in handlers:\n                handler.description
      = self.spec.description\n\n    def log_thought(\n        self,\n        thought:
      Thought,\n        level: int,\n    ) -> None:\n        text = indent(f\"Thought
      ({thought.validity}): {thought.text}\", prefix=\"    \" * level)\n        logger.info(text)\n\n
      \   @register_program(\n        input_model=make_input_schema,\n        output_model=make_output_schema,\n
      \       description=make_description,\n    )\n    async def question(self, process_id,
      body) -> TotResponse:\n        \"\"\"\n        Answers a question using the
      tree of thoughts algorithm. This is computationally expensive, but will provide\n
      \       better results than standard llm calls for some problems. Specializes
      in questions which need to make initial\n        assumptions which may not be
      accurate. The tree of thoughts algorithm will explore many possible assumptions\n
      \       and solutions and trim branches when they are found to be invalid.\n
      \       \"\"\"\n\n        # override to run the tree of thoughts algorithm in
      a separate thread\n        thoughts_path: List[str] = []\n        level = 0\n
      \       question = Environment(undefined=StrictUndefined).from_string(self.spec.user_prompt).render(**body.model_dump())\n\n
      \       async def exec_request(\n            _boot_messages: List[LLMMessage],\n
      \           _messages: List[LLMMessage],\n            _output_format: Dict[str,
      Any],\n        ) -> Dict[str, Any]:\n            t2 = await self.cpu.new_thread(process_id)\n
      \           await t2.set_boot_messages(prompts=_boot_messages)\n            return
      await t2.run_request(_messages, _output_format)\n\n        for i in range(self.spec.num_iterations):\n
      \           thought_text = await self.thought_generator.next_thought(question,
      exec_request, thoughts_path)\n            thought_validity = await self.checker.evaluate(\n
      \               process_id,\n                problem_description=question,\n
      \               thoughts=thoughts_path + [thought_text],\n            )\n            thought
      = Thought(text=thought_text, validity=thought_validity.validity)\n            self.tot_memory.store(thought)\n
      \           self.log_thought(thought, level)\n            if thought.validity
      == \"VALID\":\n                mainThread = await self.cpu.main_thread(process_id)\n
      \               # go back to llm now with the tree of thoughts and the requested
      output format\n                conversation = [\n                    UserTextCPUMessage(prompt=question),\n
      \                   UserTextCPUMessage(prompt=\"THOUGHTS\\n\\n\" + (\"\\n\".join(thoughts_path
      + [thought_text]))),\n                ]\n                resp = await mainThread.run_request(conversation,
      self.spec.output_schema)\n                return TotResponse(answer=resp, thoughts=thoughts_path)\n
      \           thoughts_path = self.tot_controller.thoughts(self.tot_memory)\n\n
      \       synopsis = self.tot_controller.exploration_synopsis(self.tot_memory)\n
      \       if self.spec.fallback == \"ERROR\":\n            raise HTTPException(\n
      \               status_code=400,\n                detail=dict(\n                    error=f\"Could
      not find a valid thought within {self.spec.num_iterations} iterations.\",\n
      \                   remaining_thoughts=synopsis,\n                ),\n            )\n
      \       elif self.spec.fallback == \"LLM\":\n            conversation = [\n
      \               UserTextCPUMessage(prompt=question),\n                UserTextCPUMessage(\n
      \                   prompt=\"You have had some helpful thoughts on the question.
      Please use them to provide an answer\\n\\n\"\n                    + str(synopsis)\n
      \               ),\n            ]\n            thread = await self.cpu.new_thread(process_id)\n
      \           resp = await thread.run_request(conversation, self.spec.output_schema)\n
      \           return TotResponse(answer=resp, thoughts=thoughts_path)\n        else:\n
      \           raise ValueError(f\"Unknown fallback type: {self.spec.fallback}\")\n"
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Length:
      - '2373'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:35:43 GMT
      ETag:
      - W/"61d24242e1c5f727fb46cae9794b4061edc81689f53e722989994c413c092f61"
      Expires:
      - Tue, 20 Feb 2024 21:40:43 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - HIT
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - 95d41654f2544e8e73f972d6213320a3d21c8e20
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - 4F64:25354E:B8C1B:10C648:65D519B2
      X-Served-By:
      - cache-bfi-kbfi7400023-BFI
      X-Timer:
      - S1708464944.711734,VS0,VE114
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/memory/file_memory.py
  response:
    content: "from abc import ABC, abstractmethod\n\n\nclass FileMemory(ABC):\n    \"\"\"\n
      \   Abstract base class representing the file memory interface for an agent.\n\n
      \   This class defines the essential file operations that an agent's memory
      component\n    must support. It includes starting and stopping the file memory
      processes,\n    reading from a file, and writing to a file within the agent's
      operational context.\n\n    All methods in this class are abstract and must
      be implemented by a subclass\n    that provides the specific logic for handling
      file operations related to the\n    agent's memory.\n    \"\"\"\n\n    @abstractmethod\n
      \   async def start(self):\n        \"\"\"\n        Starts the memory implementation.\n
      \       \"\"\"\n        pass\n\n    @abstractmethod\n    async def stop(self):\n
      \       \"\"\"\n        Stops the memory implementation.\n        \"\"\"\n        pass\n\n
      \   @abstractmethod\n    async def read_file(self, file_path: str) -> bytes:\n
      \       \"\"\"\n            Reads the contents of a file specified by `file_path`
      within the context\n            of an agent call. The context of the call provides
      additional information\n            that may influence how the file is read.\n
      \       :param file_path: The path to the file to be read.\n        :return:
      bytes: The contents of the file as a bytes object.\n        \"\"\"\n        pass\n\n
      \   @abstractmethod\n    async def write_file(self, file_path: str, file_contents:
      bytes) -> None:\n        \"\"\"\n            Writes the given `file_contents`
      to the file specified by `file_path`\n            within the context of an agent
      call. This method ensures that the file is\n            written in the appropriate
      location and manner as dictated by the call context.\n\n        :param file_path:
      The path to the file where the contents should be written.\n        :param file_contents:
      The contents to write to the file.\n        \"\"\"\n        pass\n\n    @abstractmethod\n
      \   async def delete_file(self, file_path: str) -> None:\n        \"\"\"\n            Deletes
      the file specified by `file_path` within the context of an agent call.\n            This
      method ensures that the file is deleted in the appropriate location and\n            manner
      as dictated by the call context.\n\n        :param file_path: The path to the
      file to be deleted.\n        \"\"\"\n        pass\n\n    @abstractmethod\n    async
      def mkdir(self, directory: str, exist_ok: bool = False):\n        pass\n\n    @abstractmethod\n
      \   async def exists(self, file_name: str):\n        pass\n\n    @abstractmethod\n
      \   async def glob(self, pattern: str):\n        pass\n"
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Length:
      - '757'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:35:43 GMT
      ETag:
      - W/"ae7bcf51aa946d7b82fa0716c438521074ff88da017f4ed900b73fd346a77818"
      Expires:
      - Tue, 20 Feb 2024 21:40:43 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - HIT
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - 031ac52a6dcb57d6d12244055fc0ad12665a623c
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - 18D8:25522C:AA6FE:FE11E:65D519B2
      X-Served-By:
      - cache-bfi-krnt7300045-BFI
      X-Timer:
      - S1708464944.734743,VS0,VE107
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/memory/document.py
  response:
    content: "from pydantic import BaseModel, Field\nfrom typing import List\n\n\nclass
      Document(BaseModel):\n    id: str = Field(default=None, description=\"The unique
      identifier for the document\")\n    page_content: str = Field(..., description=\"The
      content of the document.\")\n    metadata: dict = Field(default_factory=dict,
      description=\"The metadata of the document.\")\n\n\nclass EmbeddedDocument(BaseModel):\n
      \   id: str = Field(description=\"The unique identifier for the document\")\n
      \   embedding: List[float] = Field(..., description=\"The content of the document.\")\n
      \   metadata: dict = Field(default_factory=dict, description=\"The metadata
      of the document.\")\n"
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Length:
      - '240'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:35:43 GMT
      ETag:
      - W/"06beea091262a1f928cc6d97978447b41f777dc850388780f37486d1a133e289"
      Expires:
      - Tue, 20 Feb 2024 21:40:43 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - 38596e3e18ac0831489e0a6ab53bd243149ed0c9
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - 2FE8:741B:4D53B0:6061FE:65D51B2F
      X-Served-By:
      - cache-yvr1531-YVR
      X-Timer:
      - S1708464944.701992,VS0,VE143
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/agent/doc_manager/parsers/text_parsers.py
  response:
    content: "from typing import Iterable, Dict, Union, Sequence\n\nfrom bs4 import
      BeautifulSoup\n\nfrom eidolon_ai_sdk.system.reference_model import Specable\nfrom
      eidolon_ai_sdk.agent.doc_manager.parsers.base_parser import DocumentParser,
      DataBlob, DocumentParserSpec\nfrom eidolon_ai_sdk.memory.document import Document\n\n\nclass
      TextParser(DocumentParser):\n    def parse(self, blob: DataBlob) -> Sequence[Document]:\n
      \       yield Document(page_content=blob.as_string(), metadata={\"source\":
      blob.path, \"mime_type\": blob.mimetype})\n\n\nclass BS4HTMLParserSpec(DocumentParserSpec):\n
      \   features: str = \"lxml\"\n    text_separator: str = \"\"\n\n\nclass BS4HTMLParser(DocumentParser,
      Specable[BS4HTMLParserSpec]):\n    \"\"\"Pparse HTML files using `Beautiful
      Soup`.\"\"\"\n\n    def __init__(self, spec: BS4HTMLParserSpec):\n        super().__init__(spec)\n
      \       self.bs_kwargs = {\"features\": spec.features}\n        self.text_separator
      = spec.text_separator\n\n    def parse(self, blob: DataBlob) -> Iterable[Document]:\n
      \       with blob.as_bytes() as f:\n            soup = BeautifulSoup(f, **self.bs_kwargs)\n\n
      \       text = soup.get_text(self.text_separator)\n\n        if soup.title:\n
      \           title = str(soup.title.string)\n        else:\n            title
      = \"\"\n\n        metadata: Dict[str, Union[str, None]] = {\"source\": blob.path,
      \"title\": title, \"mime_type\": blob.mimetype}\n        yield Document(page_content=text,
      metadata=metadata)\n"
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Length:
      - '575'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:35:43 GMT
      ETag:
      - W/"2aa565bd34bd6913f43c6a03e3bacb45df648fb75e4e920ffa301c3dc4e40f17"
      Expires:
      - Tue, 20 Feb 2024 21:40:43 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - a1976c071901cd6be3c45fee89dc01ad965f6c79
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - FA16:1352:5338A2:660CC3:65D51B2F
      X-Served-By:
      - cache-yvr1534-YVR
      X-Timer:
      - S1708464944.767689,VS0,VE119
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/doc_manager/parsers/code_ast_parsers?ref=main
  response:
    content: '[{"name":"__init__.py","path":"sdk/eidolon_ai_sdk/agent/doc_manager/parsers/code_ast_parsers/__init__.py","sha":"e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/doc_manager/parsers/code_ast_parsers/__init__.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/doc_manager/parsers/code_ast_parsers/__init__.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/agent/doc_manager/parsers/code_ast_parsers/__init__.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/doc_manager/parsers/code_ast_parsers/__init__.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/doc_manager/parsers/code_ast_parsers/__init__.py"}},{"name":"base_ast_generator.py","path":"sdk/eidolon_ai_sdk/agent/doc_manager/parsers/code_ast_parsers/base_ast_generator.py","sha":"0a1635679bdbe78e0b0084e18d276cbdf0358095","size":448,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/doc_manager/parsers/code_ast_parsers/base_ast_generator.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/doc_manager/parsers/code_ast_parsers/base_ast_generator.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/0a1635679bdbe78e0b0084e18d276cbdf0358095","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/agent/doc_manager/parsers/code_ast_parsers/base_ast_generator.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/doc_manager/parsers/code_ast_parsers/base_ast_generator.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/0a1635679bdbe78e0b0084e18d276cbdf0358095","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/doc_manager/parsers/code_ast_parsers/base_ast_generator.py"}},{"name":"cobol.py","path":"sdk/eidolon_ai_sdk/agent/doc_manager/parsers/code_ast_parsers/cobol.py","sha":"2000ccac2cb3d55566e709ff16cccb3eec140be0","size":3699,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/doc_manager/parsers/code_ast_parsers/cobol.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/doc_manager/parsers/code_ast_parsers/cobol.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/2000ccac2cb3d55566e709ff16cccb3eec140be0","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/agent/doc_manager/parsers/code_ast_parsers/cobol.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/doc_manager/parsers/code_ast_parsers/cobol.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/2000ccac2cb3d55566e709ff16cccb3eec140be0","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/doc_manager/parsers/code_ast_parsers/cobol.py"}},{"name":"javascript.py","path":"sdk/eidolon_ai_sdk/agent/doc_manager/parsers/code_ast_parsers/javascript.py","sha":"94a11072ce9de0d899855a3577b14c4479b91b2a","size":2053,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/doc_manager/parsers/code_ast_parsers/javascript.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/doc_manager/parsers/code_ast_parsers/javascript.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/94a11072ce9de0d899855a3577b14c4479b91b2a","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/agent/doc_manager/parsers/code_ast_parsers/javascript.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/doc_manager/parsers/code_ast_parsers/javascript.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/94a11072ce9de0d899855a3577b14c4479b91b2a","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/doc_manager/parsers/code_ast_parsers/javascript.py"}},{"name":"programing_language_parser.py","path":"sdk/eidolon_ai_sdk/agent/doc_manager/parsers/code_ast_parsers/programing_language_parser.py","sha":"82b200dc49b5d30802855a6a6379d8175354e652","size":3212,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/doc_manager/parsers/code_ast_parsers/programing_language_parser.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/doc_manager/parsers/code_ast_parsers/programing_language_parser.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/82b200dc49b5d30802855a6a6379d8175354e652","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/agent/doc_manager/parsers/code_ast_parsers/programing_language_parser.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/doc_manager/parsers/code_ast_parsers/programing_language_parser.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/82b200dc49b5d30802855a6a6379d8175354e652","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/doc_manager/parsers/code_ast_parsers/programing_language_parser.py"}},{"name":"python.py","path":"sdk/eidolon_ai_sdk/agent/doc_manager/parsers/code_ast_parsers/python.py","sha":"59633e32d7df961152bf61bc00b4c71a831b51ac","size":1647,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/doc_manager/parsers/code_ast_parsers/python.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/doc_manager/parsers/code_ast_parsers/python.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/59633e32d7df961152bf61bc00b4c71a831b51ac","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/agent/doc_manager/parsers/code_ast_parsers/python.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/agent/doc_manager/parsers/code_ast_parsers/python.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/59633e32d7df961152bf61bc00b4c71a831b51ac","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/agent/doc_manager/parsers/code_ast_parsers/python.py"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:35:43 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E59A:253F79:165771:1FC737:65D51B2F
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4494'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '506'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/memory/file_system_vector_store.py
  response:
    content: "from abc import abstractmethod\nfrom pydantic import Field, BaseModel\nfrom
      typing import List, Dict, Optional, Sequence, Any, Iterable\n\nfrom eidolon_ai_sdk.agent_os
      import AgentOS\nfrom eidolon_ai_sdk.memory.document import Document, EmbeddedDocument\nfrom
      eidolon_ai_sdk.memory.vector_store import QueryItem, VectorStore\nfrom eidolon_ai_sdk.system.reference_model
      import Specable\n\n\nclass FileSystemVectorStoreSpec(BaseModel):\n    root_document_directory:
      str = Field(\n        default=\"vector_memory\",\n        description=\"The
      root directory where the vector memory will store documents.\",\n    )\n\n\nclass
      FileSystemVectorStore(VectorStore, Specable[FileSystemVectorStoreSpec]):\n    def
      __init__(self, spec: FileSystemVectorStoreSpec):\n        super().__init__(spec)\n
      \       self.spec = spec\n\n    async def start(self):\n        await AgentOS.file_memory.mkdir(self.spec.root_document_directory,
      exist_ok=True)\n\n    async def stop(self):\n        pass\n\n    @abstractmethod\n
      \   async def add_embedding(self, collection: str, docs: List[EmbeddedDocument],
      **add_kwargs: Any):\n        pass\n\n    @abstractmethod\n    async def delete_embedding(self,
      collection: str, doc_ids: List[str], **delete_kwargs: Any):\n        pass\n\n
      \   @abstractmethod\n    async def get_metadata(self, collection: str, doc_ids:
      List[str]):\n        pass\n\n    @abstractmethod\n    async def query_embedding(\n
      \       self,\n        collection: str,\n        query: List[float],\n        num_results:
      int,\n        metadata_where: Optional[Dict[str, str]] = None,\n        include_embeddings:
      bool = False,\n    ) -> List[QueryItem]:\n        pass\n\n    async def add(self,
      collection: str, docs: Sequence[Document]):\n        await AgentOS.file_memory.mkdir(self.spec.root_document_directory
      + \"/\" + collection, exist_ok=True)\n        # Asynchronously collect embedded
      documents\n        embeddedDocs = []\n        async for embeddedDoc in AgentOS.similarity_memory.embedder.embed(docs):\n
      \           embeddedDocs.append(embeddedDoc)\n        await self.add_embedding(collection,
      embeddedDocs)\n        for doc in docs:\n            await AgentOS.file_memory.write_file(\n
      \               self.spec.root_document_directory + \"/\" + collection + \"/\"
      + doc.id,\n                doc.page_content.encode(),\n            )\n\n    async
      def delete(self, collection: str, doc_ids: List[str]):\n        await self.delete_embedding(collection,
      doc_ids)\n        for doc_id in doc_ids:\n            await AgentOS.file_memory.delete_file(self.spec.root_document_directory
      + \"/\" + collection + \"/\" + doc_id)\n\n    async def query(\n        self,\n
      \       collection: str,\n        query: str,\n        num_results: int,\n        metadata_where:
      Optional[Dict[str, str]] = None,\n    ) -> List[Document]:\n        text = await
      AgentOS.similarity_memory.embedder.embed_text(query)\n        results = await
      self.query_embedding(collection, text, num_results, metadata_where, False)\n
      \       returnDocuments = []\n        for result in results:\n            returnDocuments.append(\n
      \               Document(\n                    id=result.id,\n                    metadata=result.metadata,\n
      \                   page_content=await AgentOS.file_memory.read_file(\n                        self.spec.root_document_directory
      + \"/\" + collection + \"/\" + result.id\n                    ).decode(),\n
      \               )\n            )\n        return returnDocuments\n\n    async
      def raw_query(\n        self,\n        collection: str,\n        query: List[float],\n
      \       num_results: int,\n        metadata_where: Optional[Dict[str, str]]
      = None,\n        include_embeddings: bool = False,\n    ) -> List[QueryItem]:\n
      \       return await self.query_embedding(collection, query, num_results, metadata_where,
      include_embeddings)\n\n    async def get_docs(self, collection: str, doc_ids:
      List[str]) -> Iterable[Document]:\n        metadatas = await self.get_metadata(collection,
      doc_ids)\n        for i, doc_id in enumerate(doc_ids):\n            content
      = await AgentOS.file_memory.read_file(\n                self.spec.root_document_directory
      + \"/\" + collection + \"/\" + doc_id\n            )\n            yield Document(\n
      \               id=doc_id,\n                metadata=metadatas[i],\n                page_content=content.decode(),\n
      \           )\n"
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Length:
      - '1054'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:35:43 GMT
      ETag:
      - W/"2337c64d36aaf7ccf3b743f457b3398af48728cd0d9b514c8a39d09941ded052"
      Expires:
      - Tue, 20 Feb 2024 21:40:43 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - 9d5847eee2365b4577b16d1072d7a6c41041cd25
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - 4DEE:9520:560F2F:691E85:65D51B2F
      X-Served-By:
      - cache-yvr1523-YVR
      X-Timer:
      - S1708464944.813708,VS0,VE128
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/agent/doc_manager/transformer/__init__.py
  response:
    content: ''
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:35:43 GMT
      ETag:
      - W/"938f66ede415ccb10764da47cd5f3cfc076c07b8791c708cfa8ec54982197c1f"
      Expires:
      - Tue, 20 Feb 2024 21:40:43 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - HIT
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - 35579129d00a6c550f7c62ad1a1007d0736ebdf8
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - 4414:283009:73010:AAF20:65D519B1
      X-Served-By:
      - cache-bfi-krnt7300033-BFI
      X-Timer:
      - S1708464944.839790,VS0,VE115
      X-XSS-Protection:
      - 1; mode=block
      transfer-encoding:
      - chunked
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/memory/in_memory_file_memory.py
  response:
    content: "from pathlib import Path\n\nfrom pydantic import Field, BaseModel\n\nfrom
      eidolon_ai_sdk.memory.file_memory import FileMemory\nfrom eidolon_ai_sdk.system.reference_model
      import Specable\n\n\nclass InMemoryFileMemoryConfig(BaseModel):\n    pass\n\n\nclass
      InMemoryFileMemory(FileMemory, Specable[InMemoryFileMemoryConfig]):\n    def
      __init__(self, spec: InMemoryFileMemoryConfig):\n        super().__init__(spec)\n
      \       self.root_dir = Path(\"/\").resolve()\n        self.files = {}\n        self.spec
      = spec\n\n    \"\"\"\n    A FileMemory implementation that stores files on the
      local filesystem.\n    \"\"\"\n    root_dir: Path = Field(..., description=\"The
      root directory to store files in.\")\n\n    def resolve(self, *paths):\n        \"\"\"\n
      \       Resolves file paths relative to the root directory and ensures that
      they do not escape the root directory.\n\n        Args:\n            *paths
      (str): A variable number of path components to be joined and resolved.\n\n        Returns:\n
      \           Path: The resolved path as a Path object.\n\n        Raises:\n            ValueError:
      If the resulting path is outside the root directory.\n        \"\"\"\n        #
      Resolve the combined path\n        resolved_path = self.root_dir.joinpath(*paths).resolve()\n\n
      \       # Check that the resolved path is a subpath of root_dir\n        if
      not resolved_path.is_relative_to(self.root_dir):\n            raise ValueError(\"Attempted
      to access a path outside the root directory\")\n\n        return resolved_path\n\n
      \   async def read_file(self, file_path: str) -> bytes:\n        \"\"\"\n        Reads
      and returns the contents of the file specified by the file_path within the root
      directory.\n\n        Args:\n            file_path (str): The path to the file
      to be read, relative to the root directory.\n\n        Returns:\n            bytes:
      The contents of the file as a bytes object.\n        \"\"\"\n        # Resolve
      the safe path\n        safe_file_path = self.resolve(file_path)\n\n        #
      Read the file and return its contents\n        return self.files[safe_file_path]\n\n
      \   async def write_file(self, file_path: str, file_contents: bytes) -> None:\n
      \       \"\"\"\n        Writes the given file_contents to the file specified
      by the file_path within the root directory.\n\n        Args:\n            file_path
      (str): The path to the file where contents are to be written, relative to the
      root directory.\n            file_contents (bytes): The contents to write to
      the file.\n\n        Returns:\n            None\n        \"\"\"\n        # Resolve
      the safe path\n        safe_file_path = self.resolve(file_path)\n\n        #
      Write the contents to the file\n        self.files[safe_file_path] = file_contents\n\n
      \   async def delete_file(self, file_path: str) -> None:\n        # Resolve
      the safe path\n        safe_file_path = self.resolve(file_path)\n\n        #
      Delete the file\n        del self.files[safe_file_path]\n\n    async def mkdir(self,
      directory: str, exist_ok: bool = False):\n        safe_file_path = self.resolve(directory)\n
      \       self.files[safe_file_path] = {}\n        print(f\"Created directory
      {safe_file_path}\")\n\n    async def exists(self, file_name: str):\n        \"\"\"\n
      \       Checks if a file exists at the specified path relative to the root directory.\n\n
      \       Args:\n            file_name (str): The path to the file to check, relative
      to the root directory.\n\n        Returns:\n            bool: True if the file
      exists, False otherwise.\n        \"\"\"\n        # Resolve the safe path\n
      \       safe_file_path = self.resolve(file_name)\n\n        print(f\"Checking
      if {safe_file_path} exists\")\n        print(f\"Files: {self.files}\")\n        #
      Check if the file exists\n        return self.files.get(safe_file_path) is not
      None\n\n    async def start(self):\n        \"\"\"\n        Starts the memory
      implementation. Noop for this implementation.\n        \"\"\"\n        pass\n\n
      \   async def stop(self):\n        \"\"\"\n        Stops the memory implementation.
      Noop for this implementation.\n        \"\"\"\n        pass\n"
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Length:
      - '1103'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:35:44 GMT
      ETag:
      - W/"25a21da603ec701f3cb617b0b07130d61f3564ce3a33b6a8ef01f4e805e4c2b6"
      Expires:
      - Tue, 20 Feb 2024 21:40:44 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - HIT
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - 6ddb6facf4c7de523a72566a5c30d07b5777a0d5
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - BC1C:254E0F:C0CB8:11469B:65D519B0
      X-Served-By:
      - cache-bfi-kbfi7400023-BFI
      X-Timer:
      - S1708464944.868715,VS0,VE149
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/agent/doc_manager/transformer/auto_transformer.py
  response:
    content: "import json\nfrom typing import Any, Iterable\n\nfrom eidolon_ai_sdk.agent.doc_manager.transformer.document_transformer
      import DocumentTransformer\nfrom eidolon_ai_sdk.agent.doc_manager.transformer.text_splitters
      import (\n    Language,\n    RecursiveCharacterTextSplitter,\n    RecursiveCharacterTextSplitterSpec,\n)\nfrom
      eidolon_ai_sdk.memory.document import Document\n\n\ndef is_json_nl(text: str)
      -> bool:\n    endOfLine = text.find(\"\\n\")\n    if endOfLine == -1:\n        return
      False\n    elif endOfLine == 0 or endOfLine > 7000:\n        return False\n
      \   else:\n        try:\n            json.loads(text[:endOfLine])\n            return
      True\n        except json.JSONDecodeError:\n            return False\n\n\nclass
      AutoTransformer(DocumentTransformer):\n    def transform_documents(self, documents:
      Iterable[Document], **kwargs: Any) -> Iterable[Document]:\n        for document
      in documents:\n            progLang = Language.from_mimetype(document.metadata[\"mime_type\"])\n
      \           # if progLang is none then we will use the defaults\n            if
      progLang is None:\n                spec = RecursiveCharacterTextSplitterSpec()\n
      \           else:\n                spec = RecursiveCharacterTextSplitterSpec(\n
      \                   separators=RecursiveCharacterTextSplitter.get_separators_for_language(progLang)\n
      \               )\n            yield from RecursiveCharacterTextSplitter(spec).transform_documents([document])\n"
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Length:
      - '538'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:35:44 GMT
      ETag:
      - W/"f4ec5748eb00c09bc59c3579b4e00ed1b4492d16a45afc00c8cee0e11942b173"
      Expires:
      - Tue, 20 Feb 2024 21:40:44 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - HIT
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - 279f10bd3298162f50c15ab50abdab8ebb78e32b
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - A43E:255713:BA761:10E182:65D519B2
      X-Served-By:
      - cache-bfi-krnt7300045-BFI
      X-Timer:
      - S1708464944.895463,VS0,VE127
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/agent/doc_manager/transformer/text_splitters.py
  response:
    content: "from __future__ import annotations\n\nimport pathlib\nimport re\nfrom
      dataclasses import dataclass\nfrom enum import Enum\nfrom io import BytesIO,
      StringIO\nfrom typing import (\n    Any,\n    Callable,\n    Dict,\n    List,\n
      \   Literal,\n    Optional,\n    Tuple,\n    TypedDict,\n    TypeVar,\n    Union,\n
      \   cast,\n    Iterable,\n)\n\nimport requests\nfrom pydantic import Field\n\nfrom
      eidolon_ai_sdk.agent.doc_manager.transformer.document_transformer import TextSplitterSpec,
      TextSplitter\nfrom eidolon_ai_sdk.system.reference_model import Specable\nfrom
      eidolon_ai_sdk.memory.document import Document\n\nTS = TypeVar(\"TS\", bound=\"TextSplitter\")\n\n\ndef
      _make_spacy_pipeline_for_splitting(pipeline: str, *, max_length: int = 1_000_000)
      -> Any:  # avoid importing spacy\n    try:\n        import spacy\n    except
      ImportError:\n        raise ImportError(\"Spacy is not installed, please install
      it with `pip install spacy`.\")\n    if pipeline == \"sentencizer\":\n        from
      spacy.lang.en import English\n\n        sentencizer = English()\n        sentencizer.add_pipe(\"sentencizer\")\n
      \   else:\n        sentencizer = spacy.load(pipeline, exclude=[\"ner\", \"tagger\"])\n
      \       sentencizer.max_length = max_length\n    return sentencizer\n\n\ndef
      _split_text_with_regex(text: str, separator: str, keep_separator: bool) -> List[str]:\n
      \   # Now that we have the separator, split the text\n    if separator:\n        if
      keep_separator:\n            # The parentheses in the pattern keep the delimiters
      in the result.\n            _splits = re.split(f\"({separator})\", text)\n            splits
      = [_splits[i] + _splits[i + 1] for i in range(1, len(_splits), 2)]\n            if
      len(_splits) % 2 == 0:\n                splits += _splits[-1:]\n            splits
      = [_splits[0]] + splits\n        else:\n            splits = re.split(separator,
      text)\n    else:\n        splits = list(text)\n    return [s for s in splits
      if s != \"\"]\n\n\nclass CharacterTextSplitterSpec(TextSplitterSpec):\n    separator:
      str = Field(default=\"\\n\\n\", description=\"Separator to split on\")\n    is_separator_regex:
      bool = Field(default=False, description=\"Whether the separator is a regex\")\n\n\nclass
      CharacterTextSplitter(TextSplitter, Specable[CharacterTextSplitterSpec]):\n
      \   \"\"\"Splitting text that looks at characters.\"\"\"\n\n    def __init__(self,
      spec: CharacterTextSplitterSpec, **kwargs: Any) -> None:\n        \"\"\"Create
      a new TextSplitter.\"\"\"\n        super().__init__(**kwargs)\n        self._separator
      = spec.separator\n        self._is_separator_regex = spec.is_separator_regex\n\n
      \   def split_text(self, text: str) -> Iterable[str]:\n        \"\"\"Split incoming
      text and return chunks.\"\"\"\n        # First we naively split the large input
      into a bunch of smaller ones.\n        separator = self._separator if self._is_separator_regex
      else re.escape(self._separator)\n        splits = _split_text_with_regex(text,
      separator, self._keep_separator)\n        _separator = \"\" if self._keep_separator
      else self._separator\n        return self._merge_splits(splits, _separator,
      len)\n\n\nclass LineType(TypedDict):\n    \"\"\"Line type as typed dict.\"\"\"\n\n
      \   metadata: Dict[str, str]\n    content: str\n\n\nclass HeaderType(TypedDict):\n
      \   \"\"\"Header type as typed dict.\"\"\"\n\n    level: int\n    name: str\n
      \   data: str\n\n\ndef aggregate_lines_to_chunks(lines: List[LineType]) -> List[Document]:\n
      \   \"\"\"Combine lines with common metadata into chunks\n    Args:\n        lines:
      Line of text / associated header metadata\n    \"\"\"\n    aggregated_chunks:
      List[LineType] = []\n\n    for line in lines:\n        if aggregated_chunks
      and aggregated_chunks[-1][\"metadata\"] == line[\"metadata\"]:\n            #
      If the last line in the aggregated list\n            # has the same metadata
      as the current line,\n            # append the current content to the last lines's
      content\n            aggregated_chunks[-1][\"content\"] += \"  \\n\" + line[\"content\"]\n
      \       else:\n            # Otherwise, append the current line to the aggregated
      list\n            aggregated_chunks.append(line)\n\n    return [Document(page_content=chunk[\"content\"],
      metadata=chunk[\"metadata\"]) for chunk in aggregated_chunks]\n\n\nclass MarkdownHeaderTextSplitterSpec(TextSplitterSpec):\n
      \   headers_to_split_on: List[Tuple[str, str]] = Field(\n        description=\"Headers
      we want to track, e.g., #, ##, etc.\",\n    )\n    return_each_line: bool =
      Field(\n        default=False,\n        description=\"Return each line w/ associated
      headers\",\n    )\n\n\nclass MarkdownHeaderTextSplitter(TextSplitter, Specable[MarkdownHeaderTextSplitterSpec]):\n
      \   \"\"\"Splitting markdown files based on specified headers.\"\"\"\n\n    def
      __init__(self, spec: MarkdownHeaderTextSplitterSpec, **kwargs: Any):\n        \"\"\"Create
      a new MarkdownHeaderTextSplitter.\n\n        Args:\n            headers_to_split_on:
      Headers we want to track\n            return_each_line: Return each line w/
      associated headers\n        \"\"\"\n        super().__init__(**kwargs)\n        #
      Output line-by-line or aggregated into chunks w/ common headers\n        self.return_each_line
      = spec.return_each_line\n        # Given the headers we want to split on,\n
      \       # (e.g., \"#, ##, etc\") order by length\n        self.headers_to_split_on
      = sorted(spec.headers_to_split_on, key=lambda split: len(split[0]), reverse=True)\n\n
      \   def split_text(self, text: str) -> List[Document]:\n        \"\"\"Split
      markdown file\n        Args:\n            text: Markdown file\"\"\"\n\n        #
      Split the input text by newline character (\"\\n\").\n        lines = text.split(\"\\n\")\n
      \       # Final output\n        lines_with_metadata: List[LineType] = []\n        #
      Content and metadata of the chunk currently being processed\n        current_content:
      List[str] = []\n        current_metadata: Dict[str, str] = {}\n        # Keep
      track of the nested header structure\n        # header_stack: List[Dict[str,
      Union[int, str]]] = []\n        header_stack: List[HeaderType] = []\n        initial_metadata:
      Dict[str, str] = {}\n\n        in_code_block = False\n        opening_fence
      = \"\"\n\n        for line in lines:\n            stripped_line = line.strip()\n\n
      \           if not in_code_block:\n                # Exclude inline code spans\n
      \               if stripped_line.startswith(\"```\") and stripped_line.count(\"```\")
      == 1:\n                    in_code_block = True\n                    opening_fence
      = \"```\"\n                elif stripped_line.startswith(\"~~~\"):\n                    in_code_block
      = True\n                    opening_fence = \"~~~\"\n            else:\n                if
      stripped_line.startswith(opening_fence):\n                    in_code_block
      = False\n                    opening_fence = \"\"\n\n            if in_code_block:\n
      \               current_content.append(stripped_line)\n                continue\n\n
      \           # Check each line against each of the header types (e.g., #, ##)\n
      \           for sep, name in self.headers_to_split_on:\n                # Check
      if line starts with a header that we intend to split on\n                if
      stripped_line.startswith(sep) and (\n                    # Header with no text
      OR header is followed by space\n                    # Both are valid conditions
      that sep is being used a header\n                    len(stripped_line) == len(sep)
      or stripped_line[len(sep)] == \" \"\n                ):\n                    #
      Ensure we are tracking the header as metadata\n                    if name is
      not None:\n                        # Get the current header level\n                        current_header_level
      = sep.count(\"#\")\n\n                        # Pop out headers of lower or
      same level from the stack\n                        while header_stack and header_stack[-1][\"level\"]
      >= current_header_level:\n                            # We have encountered
      a new header\n                            # at the same or higher level\n                            popped_header
      = header_stack.pop()\n                            # Clear the metadata for the\n
      \                           # popped header in initial_metadata\n                            if
      popped_header[\"name\"] in initial_metadata:\n                                initial_metadata.pop(popped_header[\"name\"])\n\n
      \                       # Push the current header to the stack\n                        header:
      HeaderType = {\n                            \"level\": current_header_level,\n
      \                           \"name\": name,\n                            \"data\":
      stripped_line[len(sep) :].strip(),\n                        }\n                        header_stack.append(header)\n
      \                       # Update initial_metadata with the current header\n
      \                       initial_metadata[name] = header[\"data\"]\n\n                    #
      Add the previous line to the lines_with_metadata\n                    # only
      if current_content is not empty\n                    if current_content:\n                        lines_with_metadata.append(\n
      \                           {\n                                \"content\":
      \"\\n\".join(current_content),\n                                \"metadata\":
      current_metadata.copy(),\n                            }\n                        )\n
      \                       current_content.clear()\n\n                    break\n
      \           else:\n                if stripped_line:\n                    current_content.append(stripped_line)\n
      \               elif current_content:\n                    lines_with_metadata.append(\n
      \                       {\n                            \"content\": \"\\n\".join(current_content),\n
      \                           \"metadata\": current_metadata.copy(),\n                        }\n
      \                   )\n                    current_content.clear()\n\n            current_metadata
      = initial_metadata.copy()\n\n        if current_content:\n            lines_with_metadata.append({\"content\":
      \"\\n\".join(current_content), \"metadata\": current_metadata})\n\n        #
      lines_with_metadata has each line with associated header metadata\n        #
      aggregate these into chunks based on common metadata\n        if not self.return_each_line:\n
      \           return aggregate_lines_to_chunks(lines_with_metadata)\n        else:\n
      \           return [Document(page_content=chunk[\"content\"], metadata=chunk[\"metadata\"])
      for chunk in lines_with_metadata]\n\n\nclass ElementType(TypedDict):\n    \"\"\"Element
      type as typed dict.\"\"\"\n\n    url: str\n    xpath: str\n    content: str\n
      \   metadata: Dict[str, str]\n\n\nclass HTMLHeaderTextSplitterSpec(TextSplitterSpec):\n
      \   headers_to_split_on: List[Tuple[str, str]] = Field(\n        description=\"Headers
      we want to track, e.g., h1, h2, etc.\",\n    )\n    return_each_element: bool
      = Field(\n        default=False,\n        description=\"Return each element
      w/ associated headers\",\n    )\n\n\nclass HTMLHeaderTextSplitter(TextSplitter,
      Specable[HTMLHeaderTextSplitterSpec]):\n    \"\"\"\n    Splitting HTML files
      based on specified headers.\n    Requires lxml package.\n    \"\"\"\n\n    def
      __init__(self, spec: HTMLHeaderTextSplitterSpec, **kwargs: Any):\n        \"\"\"Create
      a new HTMLHeaderTextSplitter.\n\n        Args:\n            headers_to_split_on:
      list of tuples of headers we want to track mapped to\n                (arbitrary)
      keys for metadata. Allowed header values: h1, h2, h3, h4,\n                h5,
      h6 e.g. [(\"h1\", \"Header 1\"), (\"h2\", \"Header 2)].\n            return_each_element:
      Return each element w/ associated headers.\n        \"\"\"\n        # Output
      element-by-element or aggregated into chunks w/ common headers\n        super().__init__(**kwargs)\n
      \       self.return_each_element = spec.return_each_element\n        self.headers_to_split_on
      = sorted(spec.headers_to_split_on)\n\n    def split_text_from_url(self, url:
      str) -> List[Document]:\n        \"\"\"Split HTML from web URL\n\n        Args:\n
      \           url: web URL\n        \"\"\"\n        r = requests.get(url)\n        return
      self.split_text_from_file(BytesIO(r.content))\n\n    def split_text(self, text:
      str) -> List[Document]:\n        \"\"\"Split HTML text string\n\n        Args:\n
      \           text: HTML text\n        \"\"\"\n        return self.split_text_from_file(StringIO(text))\n\n
      \   def split_text_from_file(self, file: Any) -> List[Document]:\n        \"\"\"Split
      HTML file\n\n        Args:\n            file: HTML file\n        \"\"\"\n        try:\n
      \           from lxml import etree\n        except ImportError as e:\n            raise
      ImportError(\"Unable to import lxml, please install with `pip install lxml`.\")
      from e\n        # use lxml library to parse html document and return xml ElementTree\n
      \       parser = etree.HTMLParser()\n        tree = etree.parse(file, parser)\n\n
      \       # document transformation for \"structure-aware\" chunking is handled
      with xsl.\n        # see comments in html_chunks_with_headers.xslt for more
      detailed information.\n        xslt_path = pathlib.Path(__file__).parent / \"document_transformers/xsl/html_chunks_with_headers.xslt\"\n
      \       xslt_tree = etree.parse(xslt_path)\n        transform = etree.XSLT(xslt_tree)\n
      \       result = transform(tree)\n        result_dom = etree.fromstring(str(result))\n\n
      \       # create filter and mapping for header metadata\n        header_filter
      = [header[0] for header in self.headers_to_split_on]\n        header_mapping
      = dict(self.headers_to_split_on)\n\n        # map xhtml namespace prefix\n        ns_map
      = {\"h\": \"http://www.w3.org/1999/xhtml\"}\n\n        # build list of elements
      from DOM\n        elements = []\n        for element in result_dom.findall(\"*//*\",
      ns_map):\n            if element.findall(\"*[@class='headers']\") or element.findall(\"*[@class='chunk']\"):\n
      \               elements.append(\n                    ElementType(\n                        url=file,\n
      \                       xpath=\"\".join([node.text for node in element.findall(\"*[@class='xpath']\",
      ns_map)]),\n                        content=\"\".join([node.text for node in
      element.findall(\"*[@class='chunk']\", ns_map)]),\n                        metadata={\n
      \                           # Add text of specified headers to metadata using
      header\n                            # mapping.\n                            header_mapping[node.tag]:
      node.text\n                            for node in filter(\n                                lambda
      x: x.tag in header_filter,\n                                element.findall(\"*[@class='headers']/*\",
      ns_map),\n                            )\n                        },\n                    )\n
      \               )\n\n        if not self.return_each_element:\n            return
      aggregate_lines_to_chunks(elements)\n        else:\n            return [Document(page_content=chunk[\"content\"],
      metadata=chunk[\"metadata\"]) for chunk in elements]\n\n\n@dataclass(frozen=True,
      kw_only=True, slots=True)\nclass Tokenizer:\n    \"\"\"Tokenizer data class.\"\"\"\n\n
      \   chunk_overlap: int\n    \"\"\"Overlap in tokens between chunks\"\"\"\n    tokens_per_chunk:
      int\n    \"\"\"Maximum number of tokens per chunk\"\"\"\n    decode: Callable[[List[int]],
      str]\n    \"\"\" Function to decode a list of token ids to a string\"\"\"\n
      \   encode: Callable[[str], List[int]]\n    \"\"\" Function to encode a string
      to a list of token ids\"\"\"\n\n\ndef split_text_on_tokens(*, text: str, tokenizer:
      Tokenizer) -> List[str]:\n    \"\"\"Split incoming text and return chunks using
      tokenizer.\"\"\"\n    splits: List[str] = []\n    input_ids = tokenizer.encode(text)\n
      \   start_idx = 0\n    cur_idx = min(start_idx + tokenizer.tokens_per_chunk,
      len(input_ids))\n    chunk_ids = input_ids[start_idx:cur_idx]\n    while start_idx
      < len(input_ids):\n        splits.append(tokenizer.decode(chunk_ids))\n        start_idx
      += tokenizer.tokens_per_chunk - tokenizer.chunk_overlap\n        cur_idx = min(start_idx
      + tokenizer.tokens_per_chunk, len(input_ids))\n        chunk_ids = input_ids[start_idx:cur_idx]\n
      \   return splits\n\n\nclass TokenTextSplitterSpec(TextSplitterSpec):\n    encoding_name:
      str = Field(default=\"gpt2\", description=\"Encoding name\")\n    model: Optional[str]
      = Field(default=None, description=\"Model name\")\n    allowed_special: Union[Literal[\"all\"],
      List[str]] = Field(default=set(), description=\"Allowed special tokens\")\n
      \   disallowed_special: Union[Literal[\"all\"], List[str]] = Field(default=\"all\",
      description=\"Disallowed special tokens\")\n\n\nclass TokenTextSplitter(TextSplitter,
      Specable[TokenTextSplitterSpec]):\n    \"\"\"Splitting text to tokens using
      model tokenizer.\"\"\"\n\n    def __init__(\n        self,\n        spec: TokenTextSplitterSpec,\n
      \       **kwargs: Any,\n    ) -> None:\n        \"\"\"Create a new TextSplitter.\"\"\"\n
      \       super().__init__(**kwargs)\n        try:\n            import tiktoken\n
      \       except ImportError:\n            raise ImportError(\n                \"Could
      not import tiktoken python package. \"\n                \"This is needed in
      order to for TokenTextSplitter. \"\n                \"Please install it with
      `pip install tiktoken`.\"\n            )\n\n        if spec.model is not None:\n
      \           enc = tiktoken.encoding_for_model(spec.model)\n        else:\n            enc
      = tiktoken.get_encoding(spec.encoding_name)\n        self._tokenizer = enc\n
      \       self._allowed_special = spec.allowed_special\n        self._disallowed_special
      = spec.disallowed_special\n\n    def split_text(self, text: str) -> List[str]:\n
      \       def _encode(_text: str) -> List[int]:\n            return self._tokenizer.encode(\n
      \               _text,\n                allowed_special=self._allowed_special,\n
      \               disallowed_special=self._disallowed_special,\n            )\n\n
      \       tokenizer = Tokenizer(\n            chunk_overlap=self._chunk_overlap,\n
      \           tokens_per_chunk=self._chunk_size,\n            decode=self._tokenizer.decode,\n
      \           encode=_encode,\n        )\n\n        return split_text_on_tokens(text=text,
      tokenizer=tokenizer)\n\n\nclass SentenceTransformersTokenTextSplitterSpec(TextSplitterSpec):\n
      \   model: str = Field(\n        default=\"sentence-transformers/all-mpnet-base-v2\",\n
      \       description=\"Model name\",\n    )\n    tokens_per_chunk: Optional[int]
      = Field(\n        default=None,\n        description=\"Number of tokens per
      chunk\",\n    )\n    chunk_overlap: int = 50\n\n\nclass SentenceTransformersTokenTextSplitter(TextSplitter,
      Specable[SentenceTransformersTokenTextSplitterSpec]):\n    \"\"\"Splitting text
      to tokens using sentence model tokenizer.\"\"\"\n\n    def __init__(\n        self,\n
      \       spec: SentenceTransformersTokenTextSplitterSpec,\n        **kwargs:
      Any,\n    ) -> None:\n        \"\"\"Create a new TextSplitter.\"\"\"\n        super().__init__(**kwargs)\n\n
      \       try:\n            from sentence_transformers import SentenceTransformer\n
      \       except ImportError:\n            raise ImportError(\n                \"Could
      not import sentence_transformer python package. \"\n                \"This is
      needed in order to for SentenceTransformersTokenTextSplitter. \"\n                \"Please
      install it with `pip install sentence-transformers`.\"\n            )\n\n        self.model_name
      = spec.model\n        self._model = SentenceTransformer(self.model_name)\n        self.tokenizer
      = self._model.tokenizer\n        self._initialize_chunk_configuration(tokens_per_chunk=spec.tokens_per_chunk)\n\n
      \   def _initialize_chunk_configuration(self, *, tokens_per_chunk: Optional[int])
      -> None:\n        self.maximum_tokens_per_chunk = cast(int, self._model.max_seq_length)\n\n
      \       if tokens_per_chunk is None:\n            self.tokens_per_chunk = self.maximum_tokens_per_chunk\n
      \       else:\n            self.tokens_per_chunk = tokens_per_chunk\n\n        if
      self.tokens_per_chunk > self.maximum_tokens_per_chunk:\n            raise ValueError(\n
      \               f\"The token limit of the models '{self.model_name}'\"\n                f\"
      is: {self.maximum_tokens_per_chunk}.\"\n                f\" Argument tokens_per_chunk={self.tokens_per_chunk}\"\n
      \               f\" > maximum token limit.\"\n            )\n\n    def split_text(self,
      text: str) -> List[str]:\n        def encode_strip_start_and_stop_token_ids(s_text:
      str) -> List[int]:\n            return self._encode(s_text)[1:-1]\n\n        tokenizer
      = Tokenizer(\n            chunk_overlap=self._chunk_overlap,\n            tokens_per_chunk=self.tokens_per_chunk,\n
      \           decode=self.tokenizer.decode,\n            encode=encode_strip_start_and_stop_token_ids,\n
      \       )\n\n        return split_text_on_tokens(text=text, tokenizer=tokenizer)\n\n
      \   def count_tokens(self, *, text: str) -> int:\n        return len(self._encode(text))\n\n
      \   _max_length_equal_32_bit_integer: int = 2**32\n\n    def _encode(self, text:
      str) -> List[int]:\n        token_ids_with_start_and_end_token_ids = self.tokenizer.encode(\n
      \           text,\n            max_length=self._max_length_equal_32_bit_integer,\n
      \           truncation=\"do_not_truncate\",\n        )\n        return token_ids_with_start_and_end_token_ids\n\n\nclass
      Language(str, Enum):\n    \"\"\"Enum of the programming languages.\"\"\"\n\n
      \   CPP = \"cpp\"\n    GO = \"go\"\n    JAVA = \"java\"\n    KOTLIN = \"kotlin\"\n
      \   JS = \"js\"\n    TS = \"ts\"\n    PHP = \"php\"\n    PROTO = \"proto\"\n
      \   PYTHON = \"python\"\n    RST = \"rst\"\n    RUBY = \"ruby\"\n    RUST =
      \"rust\"\n    SCALA = \"scala\"\n    SWIFT = \"swift\"\n    MARKDOWN = \"markdown\"\n
      \   JSON = \"json\"\n    LATEX = \"latex\"\n    HTML = \"html\"\n    SOL = \"sol\"\n
      \   CSHARP = \"csharp\"\n    COBOL = \"cobol\"\n\n    @classmethod\n    def
      from_mimetype(cls, mimetype: str) -> Optional[Language]:\n        if mimetype
      == \"text/x-python\" or mimetype == \"text/x-python-code\":\n            return
      cls.PYTHON\n        elif mimetype == \"application/javascript\":\n            return
      cls.JS\n        elif mimetype == \"text/x-cobol\":\n            return cls.COBOL\n
      \       elif (\n            mimetype == \"text/x-c++src\"\n            or mimetype
      == \"text/x-c++hdr\"\n            or mimetype == \"text/x-csrc\"\n            or
      mimetype == \"text/x-chdr\"\n        ):\n            return cls.CPP\n        elif
      mimetype == \"text/x-csharp\":\n            return cls.CSHARP\n        elif
      mimetype == \"text/x-go\":\n            return cls.GO\n        elif mimetype
      == \"text/x-java-source\":\n            return cls.JAVA\n        elif mimetype
      == \"text/x-kotlin\":\n            return cls.KOTLIN\n        elif mimetype
      == \"text/x-php\":\n            return cls.PHP\n        elif mimetype == \"text/x-protobuf\":\n
      \           return cls.PROTO\n        elif mimetype == \"text/x-ruby\":\n            return
      cls.RUBY\n        elif mimetype == \"text/x-rust\":\n            return cls.RUST\n
      \       elif mimetype == \"text/x-scala\":\n            return cls.SCALA\n        elif
      mimetype == \"text/x-swift\":\n            return cls.SWIFT\n        elif mimetype
      == \"text/x-markdown\":\n            return cls.MARKDOWN\n        elif mimetype
      == \"text/x-latex\":\n            return cls.LATEX\n        elif mimetype ==
      \"text/html\":\n            return cls.HTML\n        elif mimetype == \"text/x-solidity\":\n
      \           return cls.SOL\n        elif mimetype == \"application/json\":\n
      \           return cls.JSON\n        else:\n            return None\n\n\nclass
      RecursiveCharacterTextSplitterSpec(TextSplitterSpec):\n    separators: Optional[List[str]]
      = Field(\n        default=None,\n        description=\"Separators to split on\",\n
      \   )\n    is_separator_regex: bool = Field(\n        default=False,\n        description=\"Whether
      the separator is a regex\",\n    )\n\n\nclass RecursiveCharacterTextSplitter(TextSplitter,
      Specable[RecursiveCharacterTextSplitterSpec]):\n    \"\"\"Splitting text by
      recursively look at characters.\n\n    Recursively tries to split by different
      characters to find one\n    that works.\n    \"\"\"\n\n    def __init__(\n        self,\n
      \       spec: RecursiveCharacterTextSplitterSpec,\n        **kwargs: Any,\n
      \   ) -> None:\n        \"\"\"Create a new TextSplitter.\"\"\"\n        super().__init__(spec,
      **kwargs)\n        self._separators = spec.separators or [\"\\n\\n\", \"\\n\",
      \" \", \"\"]\n        self._is_separator_regex = spec.is_separator_regex\n        self._length_function
      = len\n\n    def _split_text(self, text: str, separators: List[str]) -> List[str]:\n
      \       \"\"\"Split incoming text and return chunks.\"\"\"\n        final_chunks
      = []\n        # Get appropriate separator to use\n        separator = separators[-1]\n
      \       new_separators = []\n        for i, _s in enumerate(separators):\n            _separator
      = _s if self._is_separator_regex else re.escape(_s)\n            if _s == \"\":\n
      \               separator = _s\n                break\n            if re.search(_separator,
      text):\n                separator = _s\n                new_separators = separators[i
      + 1 :]\n                break\n\n        _separator = separator if self._is_separator_regex
      else re.escape(separator)\n        splits = _split_text_with_regex(text, _separator,
      self._keep_separator)\n\n        # Now go merging things, recursively splitting
      longer texts.\n        _good_splits = []\n        _separator = \"\" if self._keep_separator
      else separator\n        for s in splits:\n            if self._length_function(s)
      < self._chunk_size:\n                _good_splits.append(s)\n            else:\n
      \               if _good_splits:\n                    merged_text = self._merge_splits(_good_splits,
      _separator, self._length_function)\n                    final_chunks.extend(merged_text)\n
      \                   _good_splits = []\n                if not new_separators:\n
      \                   final_chunks.append(s)\n                else:\n                    other_info
      = self._split_text(s, new_separators)\n                    final_chunks.extend(other_info)\n
      \       if _good_splits:\n            merged_text = self._merge_splits(_good_splits,
      _separator, self._length_function)\n            final_chunks.extend(merged_text)\n
      \       return final_chunks\n\n    def split_text(self, text: str) -> List[str]:\n
      \       return self._split_text(text, self._separators)\n\n    @staticmethod\n
      \   def get_separators_for_language(language: Language) -> List[str]:\n        if
      language == Language.CPP:\n            return [\n                # Split along
      class definitions\n                \"\\nclass \",\n                # Split along
      function definitions\n                \"\\nvoid \",\n                \"\\nint
      \",\n                \"\\nfloat \",\n                \"\\ndouble \",\n                #
      Split along control flow statements\n                \"\\nif \",\n                \"\\nfor
      \",\n                \"\\nwhile \",\n                \"\\nswitch \",\n                \"\\ncase
      \",\n                # Split by the normal type of lines\n                \"\\n\\n\",\n
      \               \"\\n\",\n                \" \",\n                \"\",\n            ]\n
      \       elif language == Language.GO:\n            return [\n                #
      Split along function definitions\n                \"\\nfunc \",\n                \"\\nvar
      \",\n                \"\\nconst \",\n                \"\\ntype \",\n                #
      Split along control flow statements\n                \"\\nif \",\n                \"\\nfor
      \",\n                \"\\nswitch \",\n                \"\\ncase \",\n                #
      Split by the normal type of lines\n                \"\\n\\n\",\n                \"\\n\",\n
      \               \" \",\n                \"\",\n            ]\n        elif language
      == Language.JAVA:\n            return [\n                # Split along class
      definitions\n                \"\\nclass \",\n                # Split along method
      definitions\n                \"\\npublic \",\n                \"\\nprotected
      \",\n                \"\\nprivate \",\n                \"\\nstatic \",\n                #
      Split along control flow statements\n                \"\\nif \",\n                \"\\nfor
      \",\n                \"\\nwhile \",\n                \"\\nswitch \",\n                \"\\ncase
      \",\n                # Split by the normal type of lines\n                \"\\n\\n\",\n
      \               \"\\n\",\n                \" \",\n                \"\",\n            ]\n
      \       elif language == Language.KOTLIN:\n            return [\n                #
      Split along class definitions\n                \"\\nclass \",\n                #
      Split along method definitions\n                \"\\npublic \",\n                \"\\nprotected
      \",\n                \"\\nprivate \",\n                \"\\ninternal \",\n                \"\\ncompanion
      \",\n                \"\\nfun \",\n                \"\\nval \",\n                \"\\nvar
      \",\n                # Split along control flow statements\n                \"\\nif
      \",\n                \"\\nfor \",\n                \"\\nwhile \",\n                \"\\nwhen
      \",\n                \"\\ncase \",\n                \"\\nelse \",\n                #
      Split by the normal type of lines\n                \"\\n\\n\",\n                \"\\n\",\n
      \               \" \",\n                \"\",\n            ]\n        elif language
      == Language.JS:\n            return [\n                # Split along function
      definitions\n                \"\\nfunction \",\n                \"\\nconst \",\n
      \               \"\\nlet \",\n                \"\\nvar \",\n                \"\\nclass
      \",\n                # Split along control flow statements\n                \"\\nif
      \",\n                \"\\nfor \",\n                \"\\nwhile \",\n                \"\\nswitch
      \",\n                \"\\ncase \",\n                \"\\ndefault \",\n                #
      Split by the normal type of lines\n                \"\\n\\n\",\n                \"\\n\",\n
      \               \" \",\n                \"\",\n            ]\n        elif language
      == Language.TS:\n            return [\n                \"\\nenum \",\n                \"\\ninterface
      \",\n                \"\\nnamespace \",\n                \"\\ntype \",\n                #
      Split along class definitions\n                \"\\nclass \",\n                #
      Split along function definitions\n                \"\\nfunction \",\n                \"\\nconst
      \",\n                \"\\nlet \",\n                \"\\nvar \",\n                #
      Split along control flow statements\n                \"\\nif \",\n                \"\\nfor
      \",\n                \"\\nwhile \",\n                \"\\nswitch \",\n                \"\\ncase
      \",\n                \"\\ndefault \",\n                # Split by the normal
      type of lines\n                \"\\n\\n\",\n                \"\\n\",\n                \"
      \",\n                \"\",\n            ]\n        elif language == Language.PHP:\n
      \           return [\n                # Split along function definitions\n                \"\\nfunction
      \",\n                # Split along class definitions\n                \"\\nclass
      \",\n                # Split along control flow statements\n                \"\\nif
      \",\n                \"\\nforeach \",\n                \"\\nwhile \",\n                \"\\ndo
      \",\n                \"\\nswitch \",\n                \"\\ncase \",\n                #
      Split by the normal type of lines\n                \"\\n\\n\",\n                \"\\n\",\n
      \               \" \",\n                \"\",\n            ]\n        elif language
      == Language.PROTO:\n            return [\n                # Split along message
      definitions\n                \"\\nmessage \",\n                # Split along
      service definitions\n                \"\\nservice \",\n                # Split
      along enum definitions\n                \"\\nenum \",\n                # Split
      along option definitions\n                \"\\noption \",\n                #
      Split along import statements\n                \"\\nimport \",\n                #
      Split along syntax declarations\n                \"\\nsyntax \",\n                #
      Split by the normal type of lines\n                \"\\n\\n\",\n                \"\\n\",\n
      \               \" \",\n                \"\",\n            ]\n        elif language
      == Language.PYTHON:\n            return [\n                # First, try to split
      along class definitions\n                \"\\nclass \",\n                \"\\ndef
      \",\n                \"\\n\\tdef \",\n                # Now split by the normal
      type of lines\n                \"\\n\\n\",\n                \"\\n\",\n                \"
      \",\n                \"\",\n            ]\n        elif language == Language.RST:\n
      \           return [\n                # Split along section titles\n                \"\\n=+\\n\",\n
      \               \"\\n-+\\n\",\n                \"\\n\\\\*+\\n\",\n                #
      Split along directive markers\n                \"\\n\\n.. *\\n\\n\",\n                #
      Split by the normal type of lines\n                \"\\n\\n\",\n                \"\\n\",\n
      \               \" \",\n                \"\",\n            ]\n        elif language
      == Language.RUBY:\n            return [\n                # Split along method
      definitions\n                \"\\ndef \",\n                \"\\nclass \",\n
      \               # Split along control flow statements\n                \"\\nif
      \",\n                \"\\nunless \",\n                \"\\nwhile \",\n                \"\\nfor
      \",\n                \"\\ndo \",\n                \"\\nbegin \",\n                \"\\nrescue
      \",\n                # Split by the normal type of lines\n                \"\\n\\n\",\n
      \               \"\\n\",\n                \" \",\n                \"\",\n            ]\n
      \       elif language == Language.RUST:\n            return [\n                #
      Split along function definitions\n                \"\\nfn \",\n                \"\\nconst
      \",\n                \"\\nlet \",\n                # Split along control flow
      statements\n                \"\\nif \",\n                \"\\nwhile \",\n                \"\\nfor
      \",\n                \"\\nloop \",\n                \"\\nmatch \",\n                \"\\nconst
      \",\n                # Split by the normal type of lines\n                \"\\n\\n\",\n
      \               \"\\n\",\n                \" \",\n                \"\",\n            ]\n
      \       elif language == Language.SCALA:\n            return [\n                #
      Split along class definitions\n                \"\\nclass \",\n                \"\\nobject
      \",\n                # Split along method definitions\n                \"\\ndef
      \",\n                \"\\nval \",\n                \"\\nvar \",\n                #
      Split along control flow statements\n                \"\\nif \",\n                \"\\nfor
      \",\n                \"\\nwhile \",\n                \"\\nmatch \",\n                \"\\ncase
      \",\n                # Split by the normal type of lines\n                \"\\n\\n\",\n
      \               \"\\n\",\n                \" \",\n                \"\",\n            ]\n
      \       elif language == Language.SWIFT:\n            return [\n                #
      Split along function definitions\n                \"\\nfunc \",\n                #
      Split along class definitions\n                \"\\nclass \",\n                \"\\nstruct
      \",\n                \"\\nenum \",\n                # Split along control flow
      statements\n                \"\\nif \",\n                \"\\nfor \",\n                \"\\nwhile
      \",\n                \"\\ndo \",\n                \"\\nswitch \",\n                \"\\ncase
      \",\n                # Split by the normal type of lines\n                \"\\n\\n\",\n
      \               \"\\n\",\n                \" \",\n                \"\",\n            ]\n
      \       elif language == Language.MARKDOWN:\n            return [\n                #
      First, try to split along Markdown headings (starting with level 2)\n                \"\\n#{1,6}
      \",\n                # Note the alternative syntax for headings (below) is not
      handled here\n                # Heading level 2\n                # ---------------\n
      \               # End of code block\n                \"```\\n\",\n                #
      Horizontal lines\n                \"\\n\\\\*\\\\*\\\\*+\\n\",\n                \"\\n---+\\n\",\n
      \               \"\\n___+\\n\",\n                # Note that this splitter doesn't
      handle horizontal lines defined\n                # by *three or more* of ***,
      ---, or ___, but this is not handled\n                \"\\n\\n\",\n                \"\\n\",\n
      \               \" \",\n                \"\",\n            ]\n        elif language
      == Language.JSON:\n            return [\n                # First, try to split
      along newlines to handle json-nl\n                \"\\n\\n\",\n                \"\\n\",\n
      \               # then by commas\n                \",\",\n                #
      then by spaces, which really, really sucks\n                \" \" \"\",\n            ]\n
      \       elif language == Language.LATEX:\n            return [\n                #
      First, try to split along Latex sections\n                \"\\n\\\\\\\\chapter{\",\n
      \               \"\\n\\\\\\\\section{\",\n                \"\\n\\\\\\\\subsection{\",\n
      \               \"\\n\\\\\\\\subsubsection{\",\n                # Now split
      by environments\n                \"\\n\\\\\\\\begin{enumerate}\",\n                \"\\n\\\\\\\\begin{itemize}\",\n
      \               \"\\n\\\\\\\\begin{description}\",\n                \"\\n\\\\\\\\begin{list}\",\n
      \               \"\\n\\\\\\\\begin{quote}\",\n                \"\\n\\\\\\\\begin{quotation}\",\n
      \               \"\\n\\\\\\\\begin{verse}\",\n                \"\\n\\\\\\\\begin{verbatim}\",\n
      \               # Now split by math environments\n                \"\\n\\\\\\begin{align}\",\n
      \               \"$$\",\n                \"$\",\n                # Now split
      by the normal type of lines\n                \" \",\n                \"\",\n
      \           ]\n        elif language == Language.HTML:\n            return [\n
      \               # First, try to split along HTML tags\n                \"<body\",\n
      \               \"<div\",\n                \"<p\",\n                \"<br\",\n
      \               \"<li\",\n                \"<h1\",\n                \"<h2\",\n
      \               \"<h3\",\n                \"<h4\",\n                \"<h5\",\n
      \               \"<h6\",\n                \"<span\",\n                \"<table\",\n
      \               \"<tr\",\n                \"<td\",\n                \"<th\",\n
      \               \"<ul\",\n                \"<ol\",\n                \"<header\",\n
      \               \"<footer\",\n                \"<nav\",\n                # Head\n
      \               \"<head\",\n                \"<style\",\n                \"<script\",\n
      \               \"<meta\",\n                \"<title\",\n                \"\",\n
      \           ]\n        elif language == Language.CSHARP:\n            return
      [\n                \"\\ninterface \",\n                \"\\nenum \",\n                \"\\nimplements
      \",\n                \"\\ndelegate \",\n                \"\\nevent \",\n                #
      Split along class definitions\n                \"\\nclass \",\n                \"\\nabstract
      \",\n                # Split along method definitions\n                \"\\npublic
      \",\n                \"\\nprotected \",\n                \"\\nprivate \",\n
      \               \"\\nstatic \",\n                \"\\nreturn \",\n                #
      Split along control flow statements\n                \"\\nif \",\n                \"\\ncontinue
      \",\n                \"\\nfor \",\n                \"\\nforeach \",\n                \"\\nwhile
      \",\n                \"\\nswitch \",\n                \"\\nbreak \",\n                \"\\ncase
      \",\n                \"\\nelse \",\n                # Split by exceptions\n
      \               \"\\ntry \",\n                \"\\nthrow \",\n                \"\\nfinally
      \",\n                \"\\ncatch \",\n                # Split by the normal type
      of lines\n                \"\\n\\n\",\n                \"\\n\",\n                \"
      \",\n                \"\",\n            ]\n        elif language == Language.SOL:\n
      \           return [\n                # Split along compiler information definitions\n
      \               \"\\npragma \",\n                \"\\nusing \",\n                #
      Split along contract definitions\n                \"\\ncontract \",\n                \"\\ninterface
      \",\n                \"\\nlibrary \",\n                # Split along method
      definitions\n                \"\\nconstructor \",\n                \"\\ntype
      \",\n                \"\\nfunction \",\n                \"\\nevent \",\n                \"\\nmodifier
      \",\n                \"\\nerror \",\n                \"\\nstruct \",\n                \"\\nenum
      \",\n                # Split along control flow statements\n                \"\\nif
      \",\n                \"\\nfor \",\n                \"\\nwhile \",\n                \"\\ndo
      while \",\n                \"\\nassembly \",\n                # Split by the
      normal type of lines\n                \"\\n\\n\",\n                \"\\n\",\n
      \               \" \",\n                \"\",\n            ]\n        elif language
      == Language.COBOL:\n            return [\n                # Split along divisions\n
      \               \"\\nIDENTIFICATION DIVISION.\",\n                \"\\nENVIRONMENT
      DIVISION.\",\n                \"\\nDATA DIVISION.\",\n                \"\\nPROCEDURE
      DIVISION.\",\n                # Split along sections within DATA DIVISION\n
      \               \"\\nWORKING-STORAGE SECTION.\",\n                \"\\nLINKAGE
      SECTION.\",\n                \"\\nFILE SECTION.\",\n                # Split
      along sections within PROCEDURE DIVISION\n                \"\\nINPUT-OUTPUT
      SECTION.\",\n                # Split along paragraphs and common statements\n
      \               \"\\nOPEN \",\n                \"\\nCLOSE \",\n                \"\\nREAD
      \",\n                \"\\nWRITE \",\n                \"\\nIF \",\n                \"\\nELSE
      \",\n                \"\\nMOVE \",\n                \"\\nPERFORM \",\n                \"\\nUNTIL
      \",\n                \"\\nVARYING \",\n                \"\\nACCEPT \",\n                \"\\nDISPLAY
      \",\n                \"\\nSTOP RUN.\",\n                # Split by the normal
      type of lines\n                \"\\n\",\n                \" \",\n                \"\",\n
      \           ]\n\n        else:\n            raise ValueError(f\"Language {language}
      is not supported! \" f\"Please choose from {list(Language)}\")\n\n\nclass NLTKTextSplitterSpec(TextSplitterSpec):\n
      \   separator: str = Field(\n        default=\"\\n\\n\",\n        description=\"Separator
      to split on\",\n    )\n    language: str = Field(\n        default=\"english\",\n
      \       description=\"Language to use for tokenization\",\n    )\n\n\nclass
      NLTKTextSplitter(TextSplitter, Specable[NLTKTextSplitterSpec]):\n    \"\"\"Splitting
      text using NLTK package.\"\"\"\n\n    def __init__(self, spec: NLTKTextSplitterSpec,
      **kwargs: Any) -> None:\n        \"\"\"Initialize the NLTK splitter.\"\"\"\n
      \       super().__init__(**kwargs)\n        try:\n            from nltk.tokenize
      import sent_tokenize\n\n            self._tokenizer = sent_tokenize\n        except
      ImportError:\n            raise ImportError(\"NLTK is not installed, please
      install it with `pip install nltk`.\")\n        self._separator = spec.separator\n
      \       self._language = spec.language\n\n    def split_text(self, text: str)
      -> List[str]:\n        \"\"\"Split incoming text and return chunks.\"\"\"\n
      \       # First we naively split the large input into a bunch of smaller ones.\n
      \       splits = self._tokenizer(text, language=self._language)\n        return
      self._merge_splits(splits, self._separator, len)\n\n\nclass SpacyTextSplitterSpec(TextSplitterSpec):\n
      \   separator: str = Field(\n        default=\"\\n\\n\",\n        description=\"Separator
      to split on\",\n    )\n    pipeline: str = Field(\n        default=\"en_core_web_sm\",\n
      \       description=\"Spacy pipeline to use\",\n    )\n    max_length: int =
      Field(\n        default=1_000_000,\n        description=\"Maximum length of
      characters to process\",\n    )\n\n\nclass SpacyTextSplitter(TextSplitter, Specable[SpacyTextSplitterSpec]):\n
      \   \"\"\"Splitting text using Spacy package.\n\n\n    Per default, Spacy's
      `en_core_web_sm` model is used and\n    its default max_length is 1000000 (it
      is the length of maximum character\n    this model takes which can be increased
      for large files). For a faster, but\n    potentially less accurate splitting,
      you can use `pipeline='sentencizer'`.\n    \"\"\"\n\n    def __init__(\n        self,\n
      \       spec: SpacyTextSplitterSpec,\n        **kwargs: Any,\n    ) -> None:\n
      \       \"\"\"Initialize the spacy text splitter.\"\"\"\n        super().__init__(**kwargs)\n
      \       self._tokenizer = _make_spacy_pipeline_for_splitting(spec.pipeline,
      max_length=spec.max_length)\n        self._separator = spec.separator\n\n    def
      split_text(self, text: str) -> List[str]:\n        \"\"\"Split incoming text
      and return chunks.\"\"\"\n        splits = (s.text for s in self._tokenizer(text).sents)\n
      \       return self._merge_splits(splits, self._separator, len)\n\n\n# For backwards
      compatibility\nclass PythonCodeTextSplitter(RecursiveCharacterTextSplitter):\n
      \   \"\"\"Attempts to split the text along Python syntax.\"\"\"\n\n    def __init__(self,
      **kwargs: Any) -> None:\n        \"\"\"Initialize a PythonCodeTextSplitter.\"\"\"\n
      \       super().__init__(**kwargs)\n        self._separators = self.get_separators_for_language(Language.PYTHON)\n\n\nclass
      MarkdownTextSplitter(RecursiveCharacterTextSplitter):\n    \"\"\"Attempts to
      split the text along Markdown-formatted headings.\"\"\"\n\n    def __init__(self,
      **kwargs: Any) -> None:\n        \"\"\"Initialize a MarkdownTextSplitter.\"\"\"\n
      \       super().__init__(**kwargs)\n        self._separators = self.get_separators_for_language(Language.MARKDOWN)\n\n\nclass
      LatexTextSplitter(RecursiveCharacterTextSplitter):\n    \"\"\"Attempts to split
      the text along Latex-formatted layout elements.\"\"\"\n\n    def __init__(self,
      **kwargs: Any) -> None:\n        \"\"\"Initialize a LatexTextSplitter.\"\"\"\n
      \       super().__init__(**kwargs)\n        self._separators = self.get_separators_for_language(Language.LATEX)\n"
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Length:
      - '8374'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:35:44 GMT
      ETag:
      - W/"90fbf92346d3098e794bfb02768b3cb86498530a3cca30911c6974b2ab40cb83"
      Expires:
      - Tue, 20 Feb 2024 21:40:44 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - HIT
      X-Cache-Hits:
      - '1'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - 685b6563f471db0370d82397f06843f5665adce3
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - 30CC:256179:B31CC:106BBA:65D519B2
      X-Served-By:
      - cache-bfi-kbfi7400116-BFI
      X-Timer:
      - S1708464944.999704,VS0,VE111
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/agent/doc_manager/transformer/document_transformer.py
  response:
    content: "from __future__ import annotations\n\nimport copy\nimport logging\nfrom
      abc import ABC, abstractmethod\nfrom typing import Any, List, Callable, Optional,
      Iterable\nfrom uuid import uuid4\n\nfrom pydantic import BaseModel, Field, field_validator\nfrom
      pydantic_core.core_schema import ValidationInfo\n\nfrom eidolon_ai_sdk.system.reference_model
      import Specable\nfrom eidolon_ai_sdk.memory.document import Document\n\nlogger
      = logging.getLogger(\"eidolon\")\n\n\nclass DocumentTransformer(ABC):\n    @abstractmethod\n
      \   def transform_documents(self, documents: Iterable[Document], **kwargs: Any)
      -> Iterable[Document]:\n        \"\"\"Transform a list of documents.\n\n        Args:\n
      \           documents: A sequence of Documents to be transformed.\n\n        Returns:\n
      \           A list of transformed Documents.\n        \"\"\"\n\n\nclass TextSplitterSpec(BaseModel):\n
      \   chunk_size: int = Field(default=4000, description=\"Maximum size of chunks
      to return\")\n    chunk_overlap: int = Field(default=200, description=\"Overlap
      in characters between chunks\")\n    keep_separator: bool = Field(default=False,
      description=\"Whether to keep the separator in the chunks\")\n    strip_whitespace:
      bool = Field(\n        default=True,\n        description=\"If `True`, strips
      whitespace from the start and end of every document\",\n    )\n\n    # noinspection
      PyMethodParameters\n    @field_validator(\"chunk_overlap\")\n    def validate_chunk_overlap(cls,
      chunk_overlap: int, info: ValidationInfo) -> None:\n        if chunk_overlap
      > info.data[\"chunk_size\"]:\n            raise ValueError(\n                f\"Got
      a larger chunk overlap ({chunk_overlap}) than chunk size \"\n                f\"({info.data['chunk_size']}),
      should be smaller.\"\n            )\n\n\nclass TextSplitter(DocumentTransformer,
      ABC, Specable[TextSplitterSpec]):\n    length_function: Callable[[str], int]
      = len\n\n    def __init__(self, spec: TextSplitterSpec) -> None:\n        super().__init__(spec)\n
      \       self._chunk_size = spec.chunk_size\n        self._chunk_overlap = spec.chunk_overlap\n
      \       self._keep_separator = spec.keep_separator\n        self._strip_whitespace
      = spec.strip_whitespace\n\n    @abstractmethod\n    def split_text(self, text:
      str) -> List[str]:\n        \"\"\"Split text into multiple components.\"\"\"\n\n
      \   def transform_documents(self, documents: Iterable[Document], **kwargs: Any)
      -> Iterable[Document]:\n        \"\"\"Transform sequence of documents by splitting
      them.\"\"\"\n        for doc in documents:\n            index = -1\n            for
      chunk in self.split_text(doc.page_content):\n                metadata = copy.deepcopy(doc.metadata)\n
      \               index = doc.page_content.find(chunk, index + 1)\n                metadata[\"start_index\"]
      = index\n                yield Document(id=uuid4().hex, page_content=chunk,
      metadata=metadata)\n\n    def _join_docs(self, docs: List[str], separator: str)
      -> Optional[str]:\n        text = separator.join(docs)\n        if self._strip_whitespace:\n
      \           text = text.strip()\n        if text == \"\":\n            return
      None\n        else:\n            return text\n\n    def _merge_splits(\n        self,\n
      \       splits: Iterable[str],\n        separator: str,\n        length_function:
      Callable[[str], int],\n    ) -> List[str]:\n        # We now want to combine
      these smaller pieces into medium size\n        # chunks to send to the LLM.\n
      \       separator_len = length_function(separator)\n\n        docs = []\n        current_doc:
      List[str] = []\n        total = 0\n        for d in splits:\n            _len
      = length_function(d)\n            if total + _len + (separator_len if len(current_doc)
      > 0 else 0) > self._chunk_size:\n                if total > self._chunk_size:\n
      \                   logger.warning(\n                        f\"Created a chunk
      of size {total}, \" f\"which is longer than the specified {self._chunk_size}\"\n
      \                   )\n                if len(current_doc) > 0:\n                    doc
      = self._join_docs(current_doc, separator)\n                    if doc is not
      None:\n                        docs.append(doc)\n                    # Keep
      on popping if:\n                    # - we have a larger chunk than in the chunk
      overlap\n                    # - or if we still have any chunks and the length
      is long\n                    while total > self._chunk_overlap or (\n                        total
      + _len + (separator_len if len(current_doc) > 0 else 0) > self._chunk_size and
      total > 0\n                    ):\n                        total -= length_function(current_doc[0])
      + (separator_len if len(current_doc) > 1 else 0)\n                        current_doc
      = current_doc[1:]\n            current_doc.append(d)\n            total += _len
      + (separator_len if len(current_doc) > 1 else 0)\n        doc = self._join_docs(current_doc,
      separator)\n        if doc is not None:\n            docs.append(doc)\n        return
      docs\n"
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Length:
      - '1564'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:35:44 GMT
      ETag:
      - W/"bb6147f95b9863d10a0126b760f814f6cb0dcbd875aee58821815e9bba8ca4bd"
      Expires:
      - Tue, 20 Feb 2024 21:40:44 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - 3d4b8fdd995b1a7840ed8241457814bdf398dd05
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - 5452:4A0A:551075:67E4DB:65D51B2F
      X-Served-By:
      - cache-yvr1534-YVR
      X-Timer:
      - S1708464944.996568,VS0,VE122
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/memory/local_file_memory.py
  response:
    content: "import glob\nfrom pathlib import Path\n\nfrom pydantic import Field,
      field_validator, BaseModel\n\nfrom eidolon_ai_sdk.memory.file_memory import
      FileMemory\nfrom eidolon_ai_sdk.system.reference_model import Specable\nfrom
      eidolon_ai_sdk.util.async_wrapper import make_async\nfrom eidolon_ai_sdk.util.logger
      import logger\nfrom eidolon_ai_sdk.util.str_utils import replace_env_var_in_string\n\n\nclass
      LocalFileMemoryConfig(BaseModel):\n    root_dir: str = Field(\"/tmp/eidolon/file_memory\",
      description=\"The root directory to store files in.\")\n\n    @field_validator(\"root_dir\",
      mode=\"before\")\n    def validate_root_dir(cls, inValue: str):\n        \"\"\"\n
      \       Validates that the provided root directory is an absolute path and exists.\n
      \       \"\"\"\n        value = replace_env_var_in_string(inValue)\n        #
      Convert the string to a Path object\n        path = Path(value).resolve()\n\n
      \       # Check if the path is absolute\n        if not path.is_absolute():\n
      \           raise ValueError(f\"The root_dir must be an absolute path. Received:
      {inValue}->{value}\")\n\n        # You could also check if path exists and is
      a directory if necessary\n        if path.is_file():\n            raise ValueError(f\"The
      root_dir must be a directory. Received: {inValue}->{value}\")\n\n        return
      inValue\n\n\nclass LocalFileMemory(FileMemory, Specable[LocalFileMemoryConfig]):\n
      \   def __init__(self, spec: LocalFileMemoryConfig):\n        super().__init__(spec)\n
      \       self.root_dir = Path(replace_env_var_in_string(spec.root_dir)).resolve()\n\n
      \   \"\"\"\n    A FileMemory implementation that stores files on the local filesystem.\n
      \   \"\"\"\n    root_dir: Path = Field(..., description=\"The root directory
      to store files in.\")\n\n    def resolve(self, *paths):\n        \"\"\"\n        Resolves
      file paths relative to the root directory and ensures that they do not escape
      the root directory.\n\n        Args:\n            *paths (str): A variable number
      of path components to be joined and resolved.\n\n        Returns:\n            Path:
      The resolved path as a Path object.\n\n        Raises:\n            ValueError:
      If the resulting path is outside the root directory.\n        \"\"\"\n        #
      Resolve the combined path\n        resolved_path = self.root_dir.joinpath(*paths).resolve()\n\n
      \       # Check that the resolved path is a subpath of root_dir\n        if
      not resolved_path.is_relative_to(self.root_dir):\n            raise ValueError(\"Attempted
      to access a path outside the root directory\")\n\n        return resolved_path\n\n
      \   @make_async\n    def read_file(self, file_path: str) -> bytes:\n        \"\"\"\n
      \       Reads and returns the contents of the file specified by the file_path
      within the root directory.\n\n        Args:\n            file_path (str): The
      path to the file to be read, relative to the root directory.\n\n        Returns:\n
      \           bytes: The contents of the file as a bytes object.\n        \"\"\"\n
      \       # Resolve the safe path\n        safe_file_path = self.resolve(file_path)\n\n
      \       # Read the file and return its contents\n        with open(safe_file_path,
      \"rb\") as file:\n            return file.read()\n\n    @make_async\n    def
      write_file(self, file_path: str, file_contents: bytes) -> None:\n        \"\"\"\n
      \       Writes the given file_contents to the file specified by the file_path
      within the root directory.\n\n        Args:\n            file_path (str): The
      path to the file where contents are to be written, relative to the root directory.\n
      \           file_contents (bytes): The contents to write to the file.\n\n        Returns:\n
      \           None\n        \"\"\"\n        # Resolve the safe path\n        safe_file_path
      = self.resolve(file_path)\n\n        # Write the contents to the file\n        with
      open(safe_file_path, \"wb\") as file:\n            file.write(file_contents)\n\n
      \   async def delete_file(self, file_path: str) -> None:\n        # Resolve
      the safe path\n        safe_file_path = self.resolve(file_path)\n\n        #
      Delete the file\n        try:\n            safe_file_path.unlink()\n        except
      FileNotFoundError:\n            logger.debug(\"Attempted to delete non-existent
      file\")\n            pass\n\n    async def mkdir(self, directory: str, exist_ok:
      bool = False):\n        \"\"\"\n        Creates a directory at the specified
      path relative to the root directory.\n\n        Args:\n            directory
      (str): The path to the directory to be created, relative to the root directory.\n
      \           exist_ok (bool): If True, do not raise an exception if the directory
      already exists.\n\n        Returns:\n            None\n        \"\"\"\n        #
      Resolve the safe path\n        safe_directory = self.resolve(directory)\n\n
      \       # Create the directory\n        safe_directory.mkdir(parents=True, exist_ok=exist_ok)\n\n
      \   async def exists(self, file_name: str):\n        \"\"\"\n        Checks
      if a file exists at the specified path relative to the root directory.\n\n        Args:\n
      \           file_name (str): The path to the file to check, relative to the
      root directory.\n\n        Returns:\n            bool: True if the file exists,
      False otherwise.\n        \"\"\"\n        # Resolve the safe path\n        safe_file_path
      = self.resolve(file_name)\n\n        # Check if the file exists\n        return
      safe_file_path.exists()\n\n    async def glob(self, pattern):\n        safe_file_path
      = self.resolve(pattern)\n        return glob.glob(str(safe_file_path))\n\n    async
      def start(self):\n        \"\"\"\n        Starts the memory implementation.
      Noop for this implementation.\n        \"\"\"\n        if not self.root_dir.exists():\n
      \           self.root_dir.mkdir(parents=True)\n\n    async def stop(self):\n
      \       \"\"\"\n        Stops the memory implementation. Noop for this implementation.\n
      \       \"\"\"\n        pass\n"
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Length:
      - '1544'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:35:44 GMT
      ETag:
      - W/"c00b3016fcb4394587f3f8bf51f53abb774071548ac1d863c975db9d54e1cd32"
      Expires:
      - Tue, 20 Feb 2024 21:40:44 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - HIT
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - ba880316311a13f4000abdeac49a73964cca1987
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - 7D1C:253EB0:B71F6:10AC28:65D519B1
      X-Served-By:
      - cache-bfi-krnt7300055-BFI
      X-Timer:
      - S1708464944.999572,VS0,VE129
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/memory/local_symbolic_memory.py
  response:
    content: "from copy import deepcopy\nfrom typing import Any, Union, List, Dict,
      AsyncIterable, Optional\n\nfrom bson import ObjectId\nfrom pymongo.errors import
      DuplicateKeyError\n\nfrom eidolon_ai_sdk.memory.semantic_memory import SymbolicMemory\n\n\nclass
      LocalSymbolicMemory(SymbolicMemory):\n    db = {}\n\n    async def start(self):\n
      \       LocalSymbolicMemory.db = {}\n\n    async def stop(self):\n        LocalSymbolicMemory.db
      = {}\n\n    async def count(self, symbol_collection: str, query: dict[str, Any])
      -> int:\n        if symbol_collection not in self.db:\n            return 0\n
      \       return sum(1 for doc in self.db[symbol_collection] if all(item in doc.items()
      for item in query.items()))\n\n    def _matches_query(self, doc: dict, query:
      dict) -> bool:\n        for key, value in query.items():\n            if key
      not in doc:\n                return False\n            if isinstance(value,
      dict):\n                if not self._matches_query(doc[key], value):\n                    return
      False\n            elif doc[key] != value:\n                return False\n        return
      True\n\n    @staticmethod\n    def _apply_projection(doc: dict, projection:
      dict) -> dict:\n        rtn = {field: doc[field] for field in doc if field in
      projection and projection[field] == 1}\n        if not rtn:\n            rtn
      = {k: v for k, v in doc.items() if projection.get(k, 1)}\n        return rtn\n\n
      \   async def find(\n        self,\n        symbol_collection: str,\n        query:
      dict[str, Any],\n        projection: Union[List[str], Dict[str, int]] = None,\n
      \       sort: dict = None,\n        skip: int = None,\n    ) -> AsyncIterable[dict[str,
      Any]]:\n        if symbol_collection not in self.db:\n            return\n        matching_docs
      = [doc for doc in self.db[symbol_collection] if self._matches_query(doc, query)]\n
      \       if sort:\n            for field, direction in reversed(sort.items()):\n
      \               matching_docs = sorted(matching_docs, key=lambda doc: doc.get(field,
      None), reverse=direction == -1)\n        if skip:\n            matching_docs
      = matching_docs[skip:]\n        for doc in matching_docs:\n            yield
      deepcopy(self._apply_projection(doc, projection) if projection else doc)\n\n
      \   async def find_one(\n        self, symbol_collection: str, query: dict[str,
      Any], sort: dict = None\n    ) -> Optional[dict[str, Any]]:\n        async for
      doc in self.find(symbol_collection, query, sort=sort, skip=0):\n            return
      doc\n\n    async def insert_one(self, symbol_collection: str, document: dict[str,
      Any]) -> None:\n        if symbol_collection not in self.db:\n            self.db[symbol_collection]
      = []\n        if any(doc.get(\"_id\") == document.get(\"_id\") for doc in self.db[symbol_collection]):\n
      \           raise DuplicateKeyError(f\"Duplicate key error: _id {document.get('_id')}
      already exists.\")\n        copied = deepcopy(document)\n        if \"_id\"
      not in copied:\n            copied[\"_id\"] = str(ObjectId())\n        self.db[symbol_collection].append(copied)\n\n
      \   async def insert(self, symbol_collection: str, documents: list[dict[str,
      Any]]) -> None:\n        if symbol_collection not in self.db:\n            self.db[symbol_collection]
      = []\n        for document in documents:\n            if \"_id\" not in document:\n
      \               document[\"_id\"] = str(ObjectId())\n            if any(doc.get(\"_id\")
      == document.get(\"_id\") for doc in self.db[symbol_collection]):\n                raise
      DuplicateKeyError(f\"Duplicate key error: _id {document.get('_id')} already
      exists.\")\n        self.db[symbol_collection].extend(deepcopy(documents))\n\n
      \   async def upsert_one(self, symbol_collection: str, document: dict[str, Any],
      query: dict[str, Any]) -> None:\n        if symbol_collection not in self.db:\n
      \           self.db[symbol_collection] = []\n        for i, doc in enumerate(self.db[symbol_collection]):\n
      \           if self._matches_query(doc, query):\n                doc.update(deepcopy(document))\n
      \               return\n        if not document.get(\"_id\"):\n            document[\"_id\"]
      = str(ObjectId())\n        if any(doc.get(\"_id\") == document.get(\"_id\")
      for doc in self.db[symbol_collection]):\n            raise DuplicateKeyError(f\"Duplicate
      key error: _id {document.get('_id')} already exists.\")\n        self.db[symbol_collection].append(deepcopy(document))\n\n
      \   async def update_many(self, symbol_collection: str, query: dict[str, Any],
      document: dict[str, Any]) -> None:\n        if symbol_collection not in self.db:\n
      \           return\n        for doc in self.db[symbol_collection]:\n            if
      self._matches_query(doc, query):\n                doc.update(deepcopy(document))\n\n
      \   async def delete(self, symbol_collection, query):\n        if symbol_collection
      not in self.db:\n            return\n        self.db[symbol_collection] = [\n
      \           doc for doc in self.db[symbol_collection] if not all(item in doc.items()
      for item in query.items())\n        ]\n"
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Length:
      - '1118'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:35:44 GMT
      ETag:
      - W/"da4503725047abe554f19fd9ff6fdb4dfb55e4e646d819a0290842754be1d38d"
      Expires:
      - Tue, 20 Feb 2024 21:40:44 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - c6fb8a56cb4ec99acff8f4462e6b7c1a958b0952
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - 5466:80B8:51CA08:64D869:65D51B2F
      X-Served-By:
      - cache-yvr1531-YVR
      X-Timer:
      - S1708464944.994945,VS0,VE139
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/memory/mongo_symbolic_memory.py
  response:
    content: "import os\n\n# noinspection PyPackageRequirements\nfrom contextvars
      import ContextVar\nfrom typing import Any, Optional, AsyncIterable, Union, Dict,
      List\n\nfrom motor.motor_asyncio import AsyncIOMotorDatabase, AsyncIOMotorClient\nfrom
      pydantic import Field, BaseModel\n\nfrom eidolon_ai_sdk.memory.semantic_memory
      import SymbolicMemory\nfrom eidolon_ai_sdk.system.reference_model import Specable\n\n\nclass
      MongoSymbolicMemoryConfig(BaseModel):\n    mongo_connection_string: Optional[str]
      = Field(\n        default=None, description=\"The connection string to the MongoDB
      instance.\"\n    )\n    mongo_database_name: str = Field(default=\"eidolon\",
      description=\"The name of the MongoDB database to use.\")\n\n\nclass MongoSymbolicMemory(SymbolicMemory,
      Specable[MongoSymbolicMemoryConfig]):\n    mongo_connection_string: Optional[str]\n
      \   mongo_database_name: str\n    _database: Optional[ContextVar]\n\n    def
      __init__(self, spec: MongoSymbolicMemoryConfig):\n        super().__init__(spec)\n
      \       self.mongo_connection_string = spec.mongo_connection_string\n        self.mongo_database_name
      = spec.mongo_database_name\n        self._database = None\n\n    @property\n
      \   def database(self) -> AsyncIOMotorDatabase:\n        if not self._database:\n
      \           self._database = ContextVar(\"database\")\n        try:\n            return
      self._database.get()\n        except LookupError:\n            client = AsyncIOMotorClient(self.mongo_connection_string)\n
      \           database = client.get_database(self.mongo_database_name)\n            self._database.set(database)\n
      \           return database\n\n    async def count(self, symbol_collection:
      str, query: dict[str, Any]) -> int:\n        return await self.database[symbol_collection].count_documents(query)\n\n
      \   async def find(\n        self,\n        symbol_collection: str,\n        query:
      dict[str, Any],\n        projection: Union[List[str], Dict[str, int]] = None,\n
      \       sort: dict = None,\n        skip: int = None,\n    ) -> AsyncIterable[dict[str,
      Any]]:\n        cursor = self.database[symbol_collection].find(query, projection=projection)\n
      \       if sort:\n            cursor = cursor.sort(sort)\n        if skip:\n
      \           cursor = cursor.skip(skip)\n        async for document in cursor:\n
      \           yield document\n\n    async def find_one(\n        self, symbol_collection:
      str, query: dict[str, Any], sort: dict = None\n    ) -> Optional[dict[str, Any]]:\n
      \       kwargs = dict(filter=query)\n        if sort:\n            kwargs[\"sort\"]
      = sort\n        return await self.database[symbol_collection].find_one(**kwargs)\n\n
      \   async def insert(self, symbol_collection: str, documents: list[dict[str,
      Any]]) -> None:\n        return await self.database[symbol_collection].insert_many(documents)\n\n
      \   async def insert_one(self, symbol_collection: str, document: dict[str, Any])
      -> None:\n        return await self.database[symbol_collection].insert_one(document)\n\n
      \   async def update_many(self, symbol_collection: str, query: dict[str, Any],
      document: dict[str, Any]) -> None:\n        return await self.database[symbol_collection].update_many(query,
      document)\n\n    async def upsert_one(self, symbol_collection: str, document:
      dict[str, Any], query: dict[str, Any]) -> None:\n        return await self.database[symbol_collection].update_one(query,
      {\"$set\": document}, upsert=True)\n\n    async def delete(self, symbol_collection,
      query):\n        return await self.database[symbol_collection].delete_many(query)\n\n
      \   async def start(self):\n        \"\"\"\n        Starts the memory implementation.
      Noop for this implementation.\n        \"\"\"\n        if self.database is None:\n
      \           if self.mongo_connection_string is None:\n                self.mongo_connection_string
      = os.getenv(\"MONGO_CONNECTION_STRING\")\n            if self.mongo_database_name
      is None:\n                self.mongo_database_name = os.getenv(\"MONGO_DATABASE_NAME\")\n\n
      \   async def stop(self):\n        \"\"\"\n        Stops the memory implementation.
      Noop for this implementation.\n        \"\"\"\n        if self.database is not
      None:\n            self.database.client.close()\n            self._database
      = None\n"
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Length:
      - '1110'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:35:44 GMT
      ETag:
      - W/"7e17e3a7c8127fccab2a759239a5092fb41828f281660f70b5da50b4d9ce6b53"
      Expires:
      - Tue, 20 Feb 2024 21:40:44 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - 2d7a7de1c618b08fb9c1e277ba39135d58af8233
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - 5464:2945D3:4E2D6B:613D77:65D51B2F
      X-Served-By:
      - cache-yvr1524-YVR
      X-Timer:
      - S1708464944.016313,VS0,VE133
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/memory/noop_memory.py
  response:
    content: "from typing import Optional, List, Dict, Sequence, Iterable\n\nfrom
      eidolon_ai_sdk.memory.document import Document\nfrom eidolon_ai_sdk.memory.vector_store
      import VectorStore, QueryItem\n\n\nclass NoopVectorStore(VectorStore):\n    async
      def start(self):\n        pass\n\n    async def stop(self):\n        pass\n\n
      \   async def add(self, collection: str, docs: Sequence[Document]):\n        pass\n\n
      \   async def delete(self, collection: str, doc_ids: List[str]):\n        pass\n\n
      \   async def query(\n        self, collection: str, query: str, num_results:
      int, metadata_where: Optional[Dict[str, str]] = None\n    ) -> List[Document]:\n
      \       return []\n\n    async def raw_query(\n        self,\n        collection:
      str,\n        query: List[float],\n        num_results: int,\n        metadata_where:
      Optional[Dict[str, str]] = None,\n        include_embeddings: bool = False,\n
      \   ) -> List[QueryItem]:\n        pass\n\n    async def get_docs(self, collection:
      str, doc_ids: List[str]) -> Iterable[Document]:\n        pass\n"
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Length:
      - '380'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:35:44 GMT
      ETag:
      - W/"6a0c382104f91e2085a6fa59a9cf3aa8aeed69db4c33d210f3688af0e74f7df4"
      Expires:
      - Tue, 20 Feb 2024 21:40:44 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - HIT
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - c021cb9706d34049441326ad3fccaa30c8446761
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - E6CA:256713:C0CE0:1146CA:65D519B0
      X-Served-By:
      - cache-bfi-krnt7300033-BFI
      X-Timer:
      - S1708464944.129597,VS0,VE132
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/memory/semantic_memory.py
  response:
    content: "from typing import Any, Union, List, Dict, AsyncIterable, Optional\n\nfrom
      abc import ABC, abstractmethod\n\n\nclass SymbolicMemory(ABC):\n    \"\"\"\n
      \   Abstract base class for a symbolic memory component within an agent.\n\n
      \   This class defines the contract for symbolic memory operations such as starting\n
      \   and stopping the memory service, and CRUD (Create, Read, Update, Delete)
      operations\n    on symbolic data. Implementations of this class are expected
      to manage collections\n    of symbols, providing a high-level interface to store
      and retrieve symbolic information.\n    \"\"\"\n\n    @abstractmethod\n    async
      def start(self):\n        \"\"\"\n        Prepares the symbolic memory for operation,
      which may include tasks like\n        allocating resources or initializing connections
      to databases.\n        \"\"\"\n        pass\n\n    @abstractmethod\n    async
      def stop(self):\n        \"\"\"\n        Properly shuts down the symbolic memory,
      ensuring that any resources are released\n        or any established connections
      are terminated.\n        \"\"\"\n        pass\n\n    @abstractmethod\n    async
      def count(self, symbol_collection: str, query: dict[str, Any]) -> int:\n        \"\"\"\n
      \       Searches for symbols within a specified collection that match the given
      query and returns the number matching.\n\n        Args:\n            symbol_collection
      (str): The name of the collection to search within.\n            query (dict[str,
      Any]): The search criteria used to filter symbols.\n\n        Returns:\n            int:
      The number of symbols that match the query.\n        \"\"\"\n        pass\n\n
      \   @abstractmethod\n    def find(\n        self,\n        symbol_collection:
      str,\n        query: dict[str, Any],\n        projection: Union[List[str], Dict[str,
      int]] = None,\n        sort: dict = None,\n        skip: int = None,\n    )
      -> AsyncIterable[dict[str, Any]]:\n        \"\"\"\n        Searches for symbols
      within a specified collection that match the given query.\n\n        Args:\n
      \           symbol_collection (str): The name of the collection to search within.\n
      \           query (dict[str, Any]): The search criteria used to filter symbols.\n
      \           projection (Union[List[str], Dict[str, int]]): The fields to include
      or exclude from the results. If a list,\n                the fields will be
      included. If a dictionary, the fields will be included or excluded based on
      the\n                value of the dictionary. A value of 1 will include the
      field, and a value of 0 will exclude it.\n            sort (dict): The fields
      to sort the results by. The key is the field to sort by, and the value is the
      direction\n                to sort by. A value of 1 will sort in ascending order,
      and a value of -1 will sort in descending order.\n            skip (int): The
      number of results to skip.\n\n        Returns:\n            Iterable[dict[str,
      Any]]: A list of symbols that match the query, each represented as a dictionary.\n
      \       \"\"\"\n        pass\n\n    @abstractmethod\n    async def find_one(\n
      \       self, symbol_collection: str, query: dict[str, Any], sort: dict[str,
      int] = None\n    ) -> Optional[dict[str, Any]]:\n        \"\"\"\n        Searches
      for a single symbol within a specified collection that matches the given query.\n\n
      \       Args:\n            symbol_collection (str): The name of the collection
      to search within.\n            query (dict[str, Any]): The search criteria used
      to filter symbols.\n            sort (dict[str, int]): The fields to sort the
      results by. The key is the field to sort by, and the value is the direction\n\n
      \       Returns:\n            Optional[dict[str, Any]]: A single symbol that
      matches the query, represented as a dictionary,\n            or None if no match
      is found.\n        \"\"\"\n        pass\n\n    @abstractmethod\n    async def
      insert(self, symbol_collection: str, documents: list[dict[str, Any]]) -> None:\n
      \       \"\"\"\n        Inserts multiple symbols into the specified collection.\n\n
      \       Args:\n            symbol_collection (str): The name of the collection
      where symbols will be inserted.\n            documents (list[dict[str, Any]]):
      A list of symbols to insert, each represented as a dictionary.\n\n        Returns:\n
      \           None\n        \"\"\"\n        pass\n\n    @abstractmethod\n    async
      def insert_one(self, symbol_collection: str, document: dict[str, Any]) -> None:\n
      \       \"\"\"\n        Inserts a single symbol into the specified collection.\n\n
      \       Args:\n            symbol_collection (str): The name of the collection
      where the symbol will be inserted.\n            document (dict[str, Any]): The
      symbol to insert, represented as a dictionary.\n\n        Returns:\n            None\n
      \       \"\"\"\n        pass\n\n    @abstractmethod\n    async def upsert_one(self,
      symbol_collection: str, document: dict[str, Any], query: dict[str, Any]) ->
      None:\n        \"\"\"\n        Updates a single symbol in the specified collection
      based on the query, or inserts it if it does not exist.\n\n        Args:\n            symbol_collection
      (str): The name of the collection where the symbol will be upserted.\n            document
      (dict[str, Any]): The symbol to upsert, represented as a dictionary.\n            query
      (dict[str, Any]): The search criteria used to find the symbol to update.\n\n
      \       Returns:\n            None\n        \"\"\"\n        pass\n\n    @abstractmethod\n
      \   async def update_many(self, symbol_collection: str, query: dict[str, Any],
      document: dict[str, Any]) -> None:\n        pass\n\n    @abstractmethod\n    async
      def delete(self, symbol_collection, query):\n        pass\n"
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Length:
      - '1285'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:35:44 GMT
      ETag:
      - W/"86638849f17c7592cea84c379b9961ac3067cde44209ed88af806973816192c5"
      Expires:
      - Tue, 20 Feb 2024 21:40:44 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - HIT
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - 3a0c1a99fc7ac36cc694e789fc9a3362ae04845f
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - D8C0:2587A7:B2D58:106783:65D519B0
      X-Served-By:
      - cache-bfi-kbfi7400023-BFI
      X-Timer:
      - S1708464944.128779,VS0,VE143
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/agent/doc_manager/parsers/code_ast_parsers/__init__.py
  response:
    content: ''
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:35:44 GMT
      ETag:
      - W/"938f66ede415ccb10764da47cd5f3cfc076c07b8791c708cfa8ec54982197c1f"
      Expires:
      - Tue, 20 Feb 2024 21:40:44 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - HIT
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - 6813fe49747b5db6cfdd1f73ba572d7934cc3482
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - 69A0:3A0E8E:0F70:17A4:65D519AD
      X-Served-By:
      - cache-bfi-krnt7300045-BFI
      X-Timer:
      - S1708464944.129476,VS0,VE146
      X-XSS-Protection:
      - 1; mode=block
      transfer-encoding:
      - chunked
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/memory/similarity_memory.py
  response:
    content: "from pydantic import BaseModel\n\nfrom eidolon_ai_sdk.memory.embeddings
      import Embedding\nfrom eidolon_ai_sdk.memory.vector_store import VectorStore\nfrom
      eidolon_ai_sdk.system.reference_model import Specable, AnnotatedReference\n\n\nclass
      SimilarityMemorySpec(BaseModel):\n    embedder: AnnotatedReference[Embedding]\n
      \   vector_store: AnnotatedReference[VectorStore]\n\n\nclass SimilarityMemory(Specable[SimilarityMemorySpec]):\n
      \   embedder: Embedding\n    vector_store: VectorStore\n\n    def __init__(self,
      **kwargs):\n        super().__init__(**kwargs)\n        self.embedder = self.spec.embedder.instantiate()\n
      \       self.vector_store = self.spec.vector_store.instantiate()\n\n    async
      def start(self):\n        await self.embedder.start()\n        await self.vector_store.start()\n\n
      \   async def stop(self):\n        await self.embedder.stop()\n        await
      self.vector_store.stop()\n"
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Length:
      - '323'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:35:44 GMT
      ETag:
      - W/"b03235c3411eef73eb405ecfb3f9751e9df5aeeda2d0bee8493ea26a085760d6"
      Expires:
      - Tue, 20 Feb 2024 21:40:44 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - eee7bed8eb93ebece8f79f6777865f160c671f5d
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - 3A3E:7A38:4EBBA0:61CAF3:65D51B2F
      X-Served-By:
      - cache-yvr1534-YVR
      X-Timer:
      - S1708464944.154887,VS0,VE134
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/agent/doc_manager/parsers/code_ast_parsers/base_ast_generator.py
  response:
    content: "from abc import ABC, abstractmethod\nfrom typing import List\n\n\nclass
      CodeASTGenerator(ABC):\n    def __init__(self, code: str):\n        self.code
      = code\n\n    def is_valid(self) -> bool:\n        return True\n\n    @abstractmethod\n
      \   def simplify_code(self) -> str:\n        raise NotImplementedError()  #
      pragma: no cover\n\n    @abstractmethod\n    def extract_functions_classes(self)
      -> List[str]:\n        raise NotImplementedError()  # pragma: no cover\n"
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Length:
      - '245'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:35:44 GMT
      ETag:
      - W/"c7f74bd506f10a4de4f8cd24c6c217062036349bae47e775d6ae8338d4055fda"
      Expires:
      - Tue, 20 Feb 2024 21:40:44 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - a061e9afbec3e236faeab3f0002433d42904567a
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - FA0C:46E8:58910D:6B81B0:65D51B2F
      X-Served-By:
      - cache-yvr1523-YVR
      X-Timer:
      - S1708464944.130191,VS0,VE169
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/agent/doc_manager/parsers/code_ast_parsers/cobol.py
  response:
    content: "import re\nfrom typing import Callable, List\n\nfrom eidolon_ai_sdk.agent.doc_manager.parsers.code_ast_parsers.base_ast_generator
      import CodeASTGenerator\n\n\nclass CobolASTGenerator(CodeASTGenerator):\n    PARAGRAPH_PATTERN
      = re.compile(r\"^[A-Z0-9\\-]+(\\s+.*)?\\.$\", re.IGNORECASE)\n    DIVISION_PATTERN
      = re.compile(r\"^\\s*(IDENTIFICATION|DATA|PROCEDURE|ENVIRONMENT)\\s+DIVISION.*$\",
      re.IGNORECASE)\n    SECTION_PATTERN = re.compile(r\"^\\s*[A-Z0-9\\-]+\\s+SECTION.$\",
      re.IGNORECASE)\n\n    def __init__(self, code: str):\n        super().__init__(code)\n
      \       self.source_lines: List[str] = self.code.splitlines()\n\n    def is_valid(self)
      -> bool:\n        # Identify presence of any division to validate COBOL code\n
      \       return any(self.DIVISION_PATTERN.match(line) for line in self.source_lines)\n\n
      \   def _extract_code(self, start_idx: int, end_idx: int) -> str:\n        return
      \"\\n\".join(self.source_lines[start_idx:end_idx]).rstrip(\"\\n\")\n\n    #
      noinspection PyMethodMayBeStatic\n    def _is_relevant_code(self, line: str)
      -> bool:\n        \"\"\"Check if a line is part of the procedure division or
      a relevant section.\"\"\"\n        if \"PROCEDURE DIVISION\" in line.upper():\n
      \           return True\n        # Add additional conditions for relevant sections
      if needed\n        return False\n\n    def _process_lines(self, func: Callable)
      -> List[str]:\n        \"\"\"A generic function to process COBOL lines based
      on provided func.\"\"\"\n        elements: List[str] = []\n        start_idx
      = None\n        inside_relevant_section = False\n\n        for i, line in enumerate(self.source_lines):\n
      \           if self._is_relevant_code(line):\n                inside_relevant_section
      = True\n\n            if inside_relevant_section and (\n                self.PARAGRAPH_PATTERN.match(line.strip().split(\"
      \")[0]) or self.SECTION_PATTERN.match(line.strip())\n            ):\n                if
      start_idx is not None:\n                    func(elements, start_idx, i)\n                start_idx
      = i\n\n        # Handle the last element if exists\n        if start_idx is
      not None:\n            func(elements, start_idx, len(self.source_lines))\n\n
      \       return elements\n\n    def extract_functions_classes(self) -> List[str]:\n
      \       def extract_func(elements: List[str], start_idx: int, end_idx: int)
      -> None:\n            elements.append(self._extract_code(start_idx, end_idx))\n\n
      \       return self._process_lines(extract_func)\n\n    def simplify_code(self)
      -> str:\n        simplified_lines: List[str] = []\n        inside_relevant_section
      = False\n        omitted_code_added = False  # To track if \"* OMITTED CODE
      *\" has been added after the last header\n\n        for line in self.source_lines:\n
      \           is_header = (\n                \"PROCEDURE DIVISION\" in line\n
      \               or \"DATA DIVISION\" in line\n                or \"IDENTIFICATION
      DIVISION\" in line\n                or self.PARAGRAPH_PATTERN.match(line.strip().split(\"
      \")[0])\n                or self.SECTION_PATTERN.match(line.strip())\n            )\n\n
      \           if is_header:\n                inside_relevant_section = True\n
      \               # Reset the flag since we're entering a new section/division
      or\n                # paragraph\n                omitted_code_added = False\n\n
      \           if inside_relevant_section:\n                if is_header:\n                    #
      Add header and reset the omitted code added flag\n                    simplified_lines.append(line)\n
      \               elif not omitted_code_added:\n                    # Add omitted
      code comment only if it hasn't been added directly\n                    # after
      the last header\n                    simplified_lines.append(\"* OMITTED CODE
      *\")\n                    omitted_code_added = True\n\n        return \"\\n\".join(simplified_lines)\n"
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Length:
      - '1202'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:35:44 GMT
      ETag:
      - W/"d6b4b98fc4738e1cffe6ccf5e9a4c9700c4150721d87ccc116cfc90d98ed7ecc"
      Expires:
      - Tue, 20 Feb 2024 21:40:44 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - HIT
      X-Cache-Hits:
      - '1'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - 9464596f0e9c040c2468ebafdf1cc9dbc73f5eb6
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - DF2C:252D29:B569A:109083:65D519B0
      X-Served-By:
      - cache-bfi-kbfi7400116-BFI
      X-Timer:
      - S1708464944.195080,VS0,VE119
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/memory/vector_store.py
  response:
    content: "from abc import ABC, abstractmethod\nfrom pydantic import BaseModel,
      Field\nfrom typing import Optional, List, Dict, Sequence, AsyncIterable\n\nfrom
      eidolon_ai_sdk.memory.document import Document\n\n\nclass QueryItem(BaseModel):\n
      \   id: str = Field(description=\"The unique identifier for the document\")\n
      \   metadata: dict = Field(default_factory=dict, description=\"The metadata
      of the document.\")\n    score: float = Field(description=\"The score of the
      document.\")\n    embedding: Optional[List[float]] = Field(description=\"The
      embedding of the document.\")\n\n\nclass VectorStore(ABC):\n    @abstractmethod\n
      \   async def start(self):\n        pass\n\n    @abstractmethod\n    async def
      stop(self):\n        pass\n\n    @abstractmethod\n    async def add(self, collection:
      str, docs: Sequence[Document]):\n        pass\n\n    @abstractmethod\n    async
      def delete(self, collection: str, doc_ids: List[str]):\n        pass\n\n    @abstractmethod\n
      \   async def query(\n        self,\n        collection: str,\n        query:
      str,\n        num_results: int,\n        metadata_where: Optional[Dict[str,
      str]] = None,\n    ) -> List[Document]:\n        pass\n\n    @abstractmethod\n
      \   async def raw_query(\n        self,\n        collection: str,\n        query:
      List[float],\n        num_results: int,\n        metadata_where: Optional[Dict[str,
      str]] = None,\n        include_embeddings: bool = False,\n    ) -> List[QueryItem]:\n
      \       pass\n\n    @abstractmethod\n    def get_docs(self, collection: str,
      doc_ids: List[str]) -> AsyncIterable[Document]:\n        pass\n"
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Length:
      - '504'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:35:44 GMT
      ETag:
      - W/"2a5cd23c98241fc0912315269d64974b4e6a7ea1549166d29731396a5f86ba3a"
      Expires:
      - Tue, 20 Feb 2024 21:40:44 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - 0b1498f9724ba4547038c162373c4082bdf63ac7
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - 9E12:46AB:55294D:681AC3:65D51B30
      X-Served-By:
      - cache-yvr1524-YVR
      X-Timer:
      - S1708464944.216575,VS0,VE118
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/agent/doc_manager/parsers/code_ast_parsers/javascript.py
  response:
    content: "from typing import Any, List\n\nfrom eidolon_ai_sdk.agent.doc_manager.parsers.code_ast_parsers.base_ast_generator
      import CodeASTGenerator\n\n\nclass JavaScriptASTGenerator(CodeASTGenerator):\n
      \   def __init__(self, code: str):\n        super().__init__(code)\n        self.source_lines
      = self.code.splitlines()\n\n        try:\n            import esprima  # noqa:
      F401\n        except ImportError:\n            raise ImportError(\n                \"Could
      not import esprima Python package. \" \"Please install it with `pip install
      esprima`.\"\n            )\n\n    def is_valid(self) -> bool:\n        import
      esprima\n\n        try:\n            esprima.parseScript(self.code)\n            return
      True\n        except esprima.Error:\n            return False\n\n    def _extract_code(self,
      node: Any) -> str:\n        start = node.loc.start.line - 1\n        end = node.loc.end.line\n
      \       return \"\\n\".join(self.source_lines[start:end])\n\n    def extract_functions_classes(self)
      -> List[str]:\n        import esprima\n\n        tree = esprima.parseScript(self.code,
      loc=True)\n        functions_classes = []\n\n        for node in tree.body:\n
      \           if isinstance(\n                node,\n                (esprima.nodes.FunctionDeclaration,
      esprima.nodes.ClassDeclaration),\n            ):\n                functions_classes.append(self._extract_code(node))\n\n
      \       return functions_classes\n\n    def simplify_code(self) -> str:\n        import
      esprima\n\n        tree = esprima.parseScript(self.code, loc=True)\n        simplified_lines
      = self.source_lines[:]\n\n        for node in tree.body:\n            if isinstance(\n
      \               node,\n                (esprima.nodes.FunctionDeclaration, esprima.nodes.ClassDeclaration),\n
      \           ):\n                start = node.loc.start.line - 1\n                simplified_lines[start]
      = f\"// Code for: {simplified_lines[start]}\"\n\n                for line_num
      in range(start + 1, node.loc.end.line):\n                    simplified_lines[line_num]
      = None  # type: ignore\n\n        return \"\\n\".join(line for line in simplified_lines
      if line is not None)\n"
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Length:
      - '690'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:35:44 GMT
      ETag:
      - W/"9c53f669eaa88f95108dfe97b89863c953a70557b8aae6c3aeb861b3b9a71f36"
      Expires:
      - Tue, 20 Feb 2024 21:40:44 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - 95278dbd0db30807cd5a9ad81ce75dd119b36564
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - A676:77B7:539BAD:66AA1A:65D51B30
      X-Served-By:
      - cache-yvr1531-YVR
      X-Timer:
      - S1708464944.240666,VS0,VE138
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/security/__init__.py
  response:
    content: ''
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Length:
      - '0'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:35:44 GMT
      ETag:
      - W/"938f66ede415ccb10764da47cd5f3cfc076c07b8791c708cfa8ec54982197c1f"
      Expires:
      - Tue, 20 Feb 2024 21:40:44 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - ad4443a3e813097a82ebcca6eda0ab63895df2fc
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - FA16:1352:5338B4:660CDA:65D51B30
      X-Served-By:
      - cache-yvr1534-YVR
      X-Timer:
      - S1708464944.268927,VS0,VE114
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/agent/doc_manager/parsers/code_ast_parsers/programing_language_parser.py
  response:
    content: "from typing import Dict, Any, Literal, Iterable, Optional\n\nfrom eidolon_ai_sdk.agent.doc_manager.parsers.base_parser
      import DocumentParserSpec, DocumentParser, DataBlob\nfrom eidolon_ai_sdk.agent.doc_manager.parsers.code_ast_parsers.cobol
      import CobolASTGenerator\nfrom eidolon_ai_sdk.agent.doc_manager.parsers.code_ast_parsers.javascript
      import JavaScriptASTGenerator\nfrom eidolon_ai_sdk.agent.doc_manager.parsers.code_ast_parsers.python
      import PythonASTGenerator\nfrom eidolon_ai_sdk.agent.doc_manager.transformer.text_splitters
      import Language\nfrom eidolon_ai_sdk.memory.document import Document\nfrom eidolon_ai_sdk.system.reference_model
      import Specable\n\nLANGUAGE_EXTENSIONS: Dict[str, str] = {\n    \"py\": Language.PYTHON,\n
      \   \"js\": Language.JS,\n    \"cobol\": Language.COBOL,\n}\n\nLANGUAGE_AST_GENERATORS:
      Dict[str, Any] = {\n    Language.PYTHON: PythonASTGenerator,\n    Language.JS:
      JavaScriptASTGenerator,\n    Language.COBOL: CobolASTGenerator,\n}\n\n\nclass
      LanguageParserSpec(DocumentParserSpec):\n    language: Optional[Literal[\"python\",
      \"javascript\", \"cobol\"]] = None\n    parser_threshold: int = 0\n\n\nclass
      LanguageParser(DocumentParser, Specable[LanguageParserSpec]):\n    def __init__(self,
      spec: LanguageParserSpec):\n        super().__init__(spec)\n        self.language
      = spec.language\n        self.parser_threshold = spec.parser_threshold\n\n    def
      parse(self, blob: DataBlob) -> Iterable[Document]:\n        code = blob.as_string()\n\n
      \       language = self.language or (\n            LANGUAGE_EXTENSIONS.get(blob.path.rsplit(\".\",
      1)[-1]) if isinstance(blob.path, str) else None\n        )\n\n        if language
      is None:\n            yield Document(\n                page_content=code,\n
      \               metadata={\n                    \"source\": blob.path,\n                    \"mime_type\":
      blob.mimetype,\n                },\n            )\n            return\n\n        if
      self.parser_threshold >= len(code.splitlines()):\n            yield Document(\n
      \               page_content=code,\n                metadata={\n                    \"source\":
      blob.path,\n                    \"language\": language,\n                    \"mime_type\":
      blob.mimetype,\n                },\n            )\n            return\n\n        generator
      = LANGUAGE_AST_GENERATORS[language](blob.as_string())\n        if not generator.is_valid():\n
      \           yield Document(\n                page_content=code,\n                metadata={\n
      \                   \"source\": blob.path,\n                    \"mime_type\":
      blob.mimetype,\n                },\n            )\n            return\n\n        for
      functions_classes in generator.extract_functions_classes():\n            yield
      Document(\n                page_content=functions_classes,\n                metadata={\n
      \                   \"source\": blob.path,\n                    \"content_type\":
      \"functions_classes\",\n                    \"language\": language,\n                    \"mime_type\":
      blob.mimetype,\n                },\n            )\n        yield Document(\n
      \           page_content=generator.simplify_code(),\n            metadata={\n
      \               \"source\": blob.path,\n                \"content_type\": \"simplified_code\",\n
      \               \"language\": language,\n                \"mime_type\": blob.mimetype,\n
      \           },\n        )\n"
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Length:
      - '842'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:35:44 GMT
      ETag:
      - W/"6779004c1c4c6d7d0c3df068dc26882b531d65c3925c691d1e43be8bec27e442"
      Expires:
      - Tue, 20 Feb 2024 21:40:44 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - HIT
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - 98d374d92bd80935de4c32f35765fe9128007234
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - 2ABE:254203:B5C64:10968A:65D519B2
      X-Served-By:
      - cache-bfi-krnt7300033-BFI
      X-Timer:
      - S1708464944.299873,VS0,VE119
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/security/google_authorizor.py
  response:
    content: "import httpx\nimport os\nfrom authlib.integrations.requests_client import
      OAuth2Session\nfrom pydantic import BaseModel, Field\nfrom typing import List,
      Optional, Any\n\nfrom eidolon_ai_sdk.security.jwt_middleware import BaseJWTMiddleware\nfrom
      eidolon_ai_sdk.system.reference_model import Specable\n\n\nclass GoogleJWTMiddlewareSpec(BaseModel):\n
      \   jwks_url: str = Field(\n        \"https://www.googleapis.com/oauth2/v3/certs\",\n
      \       description=\"The URL to fetch the JWKS from. Defaults to https://www.googleapis.com/oauth2/v3/certs\",\n
      \   )\n    audience: str = Field(\n        os.environ.get(\"GOOGLE_CLIENT_ID\"),\n
      \       description=\"Your google client ID. Defaults to the environment variable
      GOOGLE_CLIENT_ID\",\n    )\n    issuer: str = Field(\n        default=\"accounts.google.com\",
      description=\"The issuer of the JWT. Defaults to accounts.google.com\"\n    )\n\n\nclass
      GoogleJWTMiddleware(BaseJWTMiddleware, Specable[GoogleJWTMiddlewareSpec]):\n
      \   async def get_signing_keys(self):\n        async with httpx.AsyncClient()
      as client:\n            resp = await client.get(self.spec.jwks_url)\n            return
      resp.json()[\"keys\"]\n\n    async def get_audience_and_issuer(self):\n        return
      self.spec.audience, self.spec.issuer\n\n    def get_algorithms(self) -> List[str]:\n
      \       return [\"RS256\"]\n\n    async def process_token(self, token: str)
      -> Optional[Any]:\n        # need to call into google to exchange the token
      for a user info\n        authlib_session = OAuth2Session(self.spec.audience,
      token={\"access_token\": token, \"token_type\": \"Bearer\"})\n        response
      = authlib_session.get(\"https://openidconnect.googleapis.com/v1/userinfo\")\n
      \       if response.status_code == 200:\n            return response.json()\n
      \       else:\n            raise Exception(f\"Error fetching user info: {response.status_code}
      {response.text}\")\n"
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Length:
      - '795'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:35:44 GMT
      ETag:
      - W/"500989ee5e7df359d6e78048979f5cf0f904fad7dfc49b9f37c2d876c13aec8d"
      Expires:
      - Tue, 20 Feb 2024 21:40:44 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - HIT
      X-Cache-Hits:
      - '1'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - 8301166c5b35c8ad6a4302e37aa39503067494ab
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - 7504:66FB:5B3971:6DA7BE:65D519B2
      X-Served-By:
      - cache-yvr1534-YVR
      X-Timer:
      - S1708464944.325720,VS0,VE131
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/agent/doc_manager/parsers/code_ast_parsers/python.py
  response:
    content: "import ast\nfrom typing import Any, List\n\nfrom eidolon_ai_sdk.agent.doc_manager.parsers.code_ast_parsers.base_ast_generator
      import CodeASTGenerator\n\n\nclass PythonASTGenerator(CodeASTGenerator):\n    def
      __init__(self, code: str):\n        super().__init__(code)\n        self.source_lines
      = self.code.splitlines()\n\n    def is_valid(self) -> bool:\n        try:\n
      \           ast.parse(self.code)\n            return True\n        except SyntaxError:\n
      \           return False\n\n    def _extract_code(self, node: Any) -> str:\n
      \       start = node.lineno - 1\n        end = node.end_lineno\n        return
      \"\\n\".join(self.source_lines[start:end])\n\n    def extract_functions_classes(self)
      -> List[str]:\n        tree = ast.parse(self.code)\n        functions_classes
      = []\n\n        for node in ast.iter_child_nodes(tree):\n            if isinstance(node,
      (ast.FunctionDef, ast.AsyncFunctionDef, ast.ClassDef)):\n                functions_classes.append(self._extract_code(node))\n\n
      \       return functions_classes\n\n    def simplify_code(self) -> str:\n        tree
      = ast.parse(self.code)\n        simplified_lines = self.source_lines[:]\n\n
      \       for node in ast.iter_child_nodes(tree):\n            if isinstance(node,
      (ast.FunctionDef, ast.AsyncFunctionDef, ast.ClassDef)):\n                start
      = node.lineno - 1\n                simplified_lines[start] = f\"# Code for:
      {simplified_lines[start]}\"\n\n                assert isinstance(node.end_lineno,
      int)\n                for line_num in range(start + 1, node.end_lineno):\n                    simplified_lines[line_num]
      = None  # type: ignore\n\n        return \"\\n\".join(line for line in simplified_lines
      if line is not None)\n"
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Length:
      - '591'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:35:44 GMT
      ETag:
      - W/"2fa72ff57e072d388dfde4cc695e6815fc5bd0be96052db29be431e2981147c6"
      Expires:
      - Tue, 20 Feb 2024 21:40:44 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - HIT
      X-Cache-Hits:
      - '1'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - a75d395c64d7e0fcf4a221830dc3fd4afd6534c5
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - 2B34:2587A7:B2D5D:10678C:65D519B1
      X-Served-By:
      - cache-bfi-kbfi7400116-BFI
      X-Timer:
      - S1708464944.369837,VS0,VE117
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/security/jwt_middleware.py
  response:
    content: "from abc import ABC, abstractmethod\nfrom fastapi import Request, Response,
      FastAPI\nfrom authlib.jose import jwt, JoseError\n\n# noinspection PyPackageRequirements\nfrom
      pydantic import BaseModel\nfrom starlette.responses import JSONResponse\nfrom
      typing import List, Optional, Any\n\nfrom eidolon_ai_sdk.security.security_manager
      import BaseTokenProcessor\nfrom eidolon_ai_sdk.system.reference_model import
      Specable\nfrom eidolon_ai_sdk.system.request_context import RequestContext\n\n\nclass
      BaseJWTMiddlewareSpec(BaseModel):\n    pass\n\n\nclass BaseJWTMiddleware(BaseTokenProcessor,
      ABC, Specable[BaseJWTMiddlewareSpec]):\n    def __init__(self, **kwargs):\n
      \       super().__init__(**kwargs)\n\n    async def start(self, app: FastAPI):\n
      \       pass\n\n    @abstractmethod\n    async def get_signing_keys(self):\n
      \       pass\n\n    @abstractmethod\n    async def get_audience_and_issuer(self)
      -> tuple[str, str]:\n        pass\n\n    @abstractmethod\n    def get_algorithms(self)
      -> List[str]:\n        pass\n\n    async def process_token(self, token: str)
      -> Optional[Any]:\n        jwks = await self.get_signing_keys()\n        return
      jwt.decode(token, jwks)\n\n    async def dispatch(self, request: Request) ->
      Optional[Response]:\n        auth_header = request.headers.get(\"Authorization\")\n
      \       if not auth_header:\n            return JSONResponse(status_code=401,
      content={\"detail\": \"Authorization header missing\"})\n\n        token = auth_header[7:]\n\n
      \       try:\n            userInfo = await self.process_token(token)\n            RequestContext.set(\"Authorization\",
      auth_header, propagate=True)\n            RequestContext.set(\"jwt\", userInfo)\n\n
      \       except JoseError as e:\n            print(e)\n            return JSONResponse(status_code=401,
      content={\"detail\": str(e)})\n"
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Length:
      - '702'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:35:44 GMT
      ETag:
      - W/"da2fa82469da3f4f93273889df5af4cdf4bf912f9b5be79ee05d26dbb1493934"
      Expires:
      - Tue, 20 Feb 2024 21:40:44 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - HIT
      X-Cache-Hits:
      - '1'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - cfd1c4a7f53e9137b2cc462d15247e1039ff2958
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - BD70:4BE5:6AB95:84133:65D519B2
      X-Served-By:
      - cache-yvr1524-YVR
      X-Timer:
      - S1708464944.383034,VS0,VE141
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/security/okta_authorizor.py
  response:
    content: "import httpx\n\nfrom eidolon_ai_sdk.security.jwt_middleware import BaseJWTMiddleware\n\n\nclass
      OKTAAuth(BaseJWTMiddleware):\n    OKTA_DOMAIN = \"your_okta_domain\"\n    JWKS_URL
      = f\"https://{OKTA_DOMAIN}/oauth2/default/v1/keys\"\n    AUDIENCE = \"your_api_audience\"\n
      \   ISSUER = f\"https://{OKTA_DOMAIN}/oauth2/default\"\n\n    async def get_signing_keys(self):\n
      \       async with httpx.AsyncClient() as client:\n            resp = await
      client.get(self.JWKS_URL)\n            return resp.json()[\"keys\"]\n"
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Length:
      - '305'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:35:44 GMT
      ETag:
      - W/"4107f8ced90d4a50a64e6392f168bd26a4f3ea17998c016e4cb58d91e7ddac8d"
      Expires:
      - Tue, 20 Feb 2024 21:40:44 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - bc43c51d635349788bef31fb124e6d16638e2bd9
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - A676:77B7:539BB6:66AA22:65D51B30
      X-Served-By:
      - cache-yvr1523-YVR
      X-Timer:
      - S1708464944.412112,VS0,VE143
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/security/security_manager.py
  response:
    content: "from typing import Optional\n\nfrom abc import ABC, abstractmethod\nfrom
      fastapi import Request, Response, FastAPI\nfrom pydantic import BaseModel\nfrom
      starlette.middleware.base import BaseHTTPMiddleware\n\nfrom eidolon_ai_sdk.system.reference_model
      import Specable, AnnotatedReference\n\n\nclass BaseTokenProcessor(ABC):\n    @abstractmethod\n
      \   async def dispatch(self, request: Request) -> Optional[Response]:\n        pass\n\n\nclass
      NoopAuthProcessor(BaseTokenProcessor):\n    def add_login_route(self, app: FastAPI):\n
      \       pass\n\n    async def dispatch(self, request: Request):\n        return
      None\n\n\nclass SecurityManagerSpec(BaseModel):\n    authorization_processor:
      AnnotatedReference[BaseTokenProcessor, NoopAuthProcessor]\n\n\nclass SecurityManager(Specable[SecurityManagerSpec]):\n
      \   authorization_processor: BaseHTTPMiddleware\n\n    def __init__(self, **kwargs):\n
      \       super().__init__(**kwargs)\n        self.authorization_processor = self.spec.authorization_processor.instantiate()\n"
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Length:
      - '428'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:35:44 GMT
      ETag:
      - W/"ab8f2df967ced53322ed78c15fcdd862bff2efb0acd220549b46edaa98812b8f"
      Expires:
      - Tue, 20 Feb 2024 21:40:44 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - 904f6e7b45fac0083c16e21e14be421c857eeb6a
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - 7BC6:37C6:4EAA5E:617F01:65D51B2F
      X-Served-By:
      - cache-yvr1534-YVR
      X-Timer:
      - S1708464944.437191,VS0,VE123
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/system/__init__.py
  response:
    content: ''
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:35:44 GMT
      ETag:
      - W/"938f66ede415ccb10764da47cd5f3cfc076c07b8791c708cfa8ec54982197c1f"
      Expires:
      - Tue, 20 Feb 2024 21:40:44 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - HIT
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - 40adb04b66809a76cc3ef6ea46232222265a62ad
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - 8BFE:2590F7:BBC3F:10F632:65D519B0
      X-Served-By:
      - cache-bfi-krnt7300033-BFI
      X-Timer:
      - S1708464944.464559,VS0,VE117
      X-XSS-Protection:
      - 1; mode=block
      transfer-encoding:
      - chunked
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/system/agent_contract.py
  response:
    content: "from __future__ import annotations\n\nimport typing\n\nfrom pydantic
      import Field, BaseModel\n\n\nclass CreateProcessArgs(BaseModel):\n    title:
      typing.Optional[str] = Field(None, description=\"The title of the process\")\n\n\nclass
      DeleteProcessResponse(BaseModel):\n    process_id: str\n    deleted: int\n\n\nclass
      StateSummary(BaseModel):\n    process_id: str = Field(..., description=\"The
      ID of the conversation.\")\n    state: str = Field(..., description=\"The state
      of the conversation.\")\n    available_actions: typing.List[str] = Field(...,
      description=\"The actions available from the current state.\")\n\n\nclass SyncStateResponse(StateSummary):\n
      \   data: typing.Any = Field(..., description=\"The data returned by the last
      state change.\")\n\n\nclass ListProcessesResponse(BaseModel):\n    total: int
      = Field(..., description=\"The total number of processes.\")\n    processes:
      typing.List[StateSummary] = Field(..., description=\"The list of processes.\")\n
      \   next: typing.Optional[str] = Field(..., description=\"The next page of results,
      if any.\")\n"
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Length:
      - '394'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:35:44 GMT
      ETag:
      - W/"a2cbb2d8d7ecee1d335fde577d3d794d26e68aac9136f742527840251a6d500d"
      Expires:
      - Tue, 20 Feb 2024 21:40:44 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - 5a0066c0eac3b70f5cff9303acb244c180a035a8
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - 3A3E:7A38:4EBBB0:61CB07:65D51B30
      X-Served-By:
      - cache-yvr1531-YVR
      X-Timer:
      - S1708464944.483345,VS0,VE134
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/system/agent_machine.py
  response:
    content: "from contextlib import contextmanager\nfrom fastapi import FastAPI\nfrom
      pydantic import BaseModel, Field\nfrom typing import List, Optional\n\nfrom
      eidolon_ai_sdk.memory.agent_memory import AgentMemory\nfrom .agent_controller
      import AgentController\nfrom .reference_model import AnnotatedReference, Specable\nfrom
      .resources.agent_resource import AgentResource\nfrom .resources.resources_base
      import Resource\nfrom ..agent_os import AgentOS\nfrom ..memory.file_memory import
      FileMemory\nfrom ..memory.semantic_memory import SymbolicMemory\nfrom ..memory.similarity_memory
      import SimilarityMemory\nfrom ..security.security_manager import SecurityManager\n\n\nclass
      MachineSpec(BaseModel):\n    symbolic_memory: AnnotatedReference[SymbolicMemory]
      = Field(description=\"The Symbolic Memory implementation.\")\n    file_memory:
      AnnotatedReference[FileMemory] = Field(desciption=\"The File Memory implementation.\")\n
      \   similarity_memory: AnnotatedReference[SimilarityMemory] = Field(description=\"The
      Vector Memory implementation.\")\n    security_manager: AnnotatedReference[SecurityManager]
      = Field(description=\"The Security Manager implementation.\")\n\n    def get_agent_memory(self):\n
      \       file_memory = self.file_memory.instantiate()\n        symbolic_memory
      = self.symbolic_memory.instantiate()\n        vector_memory = self.similarity_memory.instantiate()\n
      \       return AgentMemory(\n            file_memory=file_memory,\n            symbolic_memory=symbolic_memory,\n
      \           similarity_memory=vector_memory,\n        )\n\n\nclass AgentMachine(Specable[MachineSpec]):\n
      \   memory: AgentMemory\n    security_manager: SecurityManager\n    agent_controllers:
      List[AgentController]\n    app: Optional[FastAPI]\n\n    def __init__(self,
      spec: MachineSpec):\n        super().__init__(spec)\n        agents = {}\n        for
      name, r in AgentOS.get_resources(AgentResource).items():\n            with _error_wrapper(r):\n
      \               agents[name] = r.spec.instantiate()\n\n        self.memory =
      self.spec.get_agent_memory()\n        self.agent_controllers = [AgentController(name,
      agent) for name, agent in agents.items()]\n        self.app = None\n        self.security_manager
      = self.spec.security_manager.instantiate()\n\n    async def start(self, app):\n
      \       if self.app:\n            raise Exception(\"Machine already started\")\n
      \       for program in self.agent_controllers:\n            await program.start(app)\n
      \       await self.memory.start()\n        self.app = app\n\n    async def stop(self):\n
      \       if self.app:\n            for program in self.agent_controllers:\n                await
      program.stop(self.app)\n            await self.memory.stop()\n            self.app
      = None\n\n\n@contextmanager\ndef error_logger(filename: str = None):\n    try:\n
      \       yield\n    except Exception as e:\n        raise ValueError(f\"Error
      building resource {filename}\") from e\n\n\ndef _error_wrapper(resource: Resource):\n
      \   return error_logger(AgentOS.get_resource_source(resource.kind, resource.metadata.name))\n"
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Length:
      - '906'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:35:44 GMT
      ETag:
      - W/"bbddddb814a32348444da5870979d88e64767dd3266e715a5cbf23ea75eed9c5"
      Expires:
      - Tue, 20 Feb 2024 21:40:44 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - HIT
      X-Cache-Hits:
      - '1'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - e7917c151cfd06f5c3b3bea54833f728b9ca7842
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - F74A:256713:C0CE8:1146D4:65D519B2
      X-Served-By:
      - cache-bfi-kbfi7400116-BFI
      X-Timer:
      - S1708464945.545972,VS0,VE123
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/system/agent_controller.py
  response:
    content: "from __future__ import annotations\n\nimport asyncio\nimport inspect\nimport
      logging\nimport typing\nimport uuid\nfrom collections.abc import AsyncIterator\nfrom
      inspect import Parameter\n\nfrom fastapi import FastAPI, Request, HTTPException\nfrom
      fastapi.params import Body, Param\nfrom pydantic import BaseModel, Field, create_model\nfrom
      pydantic_core import PydanticUndefined, to_jsonable_python\nfrom sse_starlette
      import EventSourceResponse, ServerSentEvent\nfrom starlette.responses import
      JSONResponse\n\nfrom eidolon_ai_sdk.agent.agent import AgentState\nfrom eidolon_ai_sdk.agent_os
      import AgentOS\nfrom eidolon_ai_sdk.cpu.agent_call_history import AgentCallHistory\nfrom
      eidolon_ai_sdk.io.events import (\n    StartAgentCallEvent,\n    AgentStateEvent,\n
      \   BaseStreamEvent,\n    ErrorEvent,\n    StringOutputEvent,\n    OutputEvent,\n
      \   SuccessEvent,\n    StreamEvent,\n    EndStreamEvent,\n    ObjectOutputEvent,\n
      \   UserInputEvent,\n    CanceledEvent,\n)\nfrom eidolon_ai_sdk.system.agent_contract
      import (\n    SyncStateResponse,\n    ListProcessesResponse,\n    StateSummary,\n
      \   DeleteProcessResponse,\n    CreateProcessArgs,\n)\nfrom eidolon_ai_sdk.system.fn_handler
      import FnHandler, get_handlers\nfrom eidolon_ai_sdk.system.processes import
      ProcessDoc, store_events, load_events\nfrom eidolon_ai_sdk.system.request_context
      import RequestContext\nfrom eidolon_ai_sdk.system.resources.agent_resource import
      AgentResource\nfrom eidolon_ai_sdk.system.resources.reference_resource import
      ReferenceResource\nfrom eidolon_ai_sdk.util.class_utils import for_name\nfrom
      eidolon_ai_sdk.util.logger import logger\n\n\n# todo, agent controller has become
      a mega impl, we should break up responsibilities\nclass AgentController:\n    name:
      str\n    agent: object\n    actions: typing.Dict[str, FnHandler]\n\n    def
      __init__(self, name, agent):\n        self.name = name\n        self.actions
      = {}\n        self.agent = agent\n        for handler in get_handlers(self.agent):\n
      \           if handler.name in self.actions:\n                self.actions[handler.name].extra[\"allowed_states\"]
      = (\n                    *self.actions[handler.name].extra[\"allowed_states\"],\n
      \                   *handler.extra[\"allowed_states\"],\n                )\n
      \           else:\n                self.actions[handler.name] = handler\n\n
      \   async def start(self, app: FastAPI):\n        logger.info(f\"Starting agent
      '{self.name}'\")\n        app.add_api_route(\n            f\"/agents/{self.name}/processes\",\n
      \           endpoint=self.list_processes,\n            methods=[\"GET\"],\n
      \           response_model=ListProcessesResponse,\n            tags=[self.name],\n
      \       )\n\n        app.add_api_route(\n            f\"/agents/{self.name}/processes\",\n
      \           endpoint=self.create_process,\n            methods=[\"POST\"],\n
      \           response_model=StateSummary,\n            tags=[self.name],\n        )\n\n
      \       app.add_api_route(\n            f\"/agents/{self.name}/processes/{{process_id}}\",\n
      \           endpoint=self.delete_process,\n            methods=[\"DELETE\"],\n
      \           response_model=DeleteProcessResponse,\n            tags=[self.name],\n
      \       )\n\n        added_actions = {}\n        for handler in [*self.actions.values().__reversed__()]:\n
      \           handler_name = handler.name\n            path = f\"/agents/{self.name}/processes/{{process_id}}/actions/{handler_name}\"\n
      \           if \"initialized\" in handler.extra[\"allowed_states\"]:\n                await
      self.add_route(app, handler, f\"/agents/{self.name}/programs/{handler_name}\",
      True)\n            if handler_name not in added_actions:\n                await
      self.add_route(app, handler, path, False)\n                added_actions[handler_name]
      = path\n            else:\n                logger.warning(\n                    f\"Action
      {handler_name} is already registered for path {added_actions[handler_name]}.
      \"\n                    f\"Skipping registration for path {path}\"\n                )\n\n
      \       app.add_api_route(\n            f\"/agents/{self.name}/processes/{{process_id}}/status\",\n
      \           endpoint=self.get_process_info,\n            methods=[\"GET\"],\n
      \           response_model=SyncStateResponse,\n            tags=[self.name],\n
      \       )\n\n        app.add_api_route(\n            f\"/agents/{self.name}/processes/{{process_id}}/events\",\n
      \           endpoint=self.get_process_events,\n            methods=[\"GET\"],\n
      \           response_model=typing.List[typing.Dict[str, typing.Any]],\n            tags=[self.name],\n
      \       )\n\n    async def add_route(self, app, handler, path, isEndpointAProgram:
      bool):\n        endpoint = self.process_action(handler, isEndpointAProgram)\n
      \       app.add_api_route(\n            path,\n            endpoint=endpoint,\n
      \           methods=[\"POST\"],\n            tags=[self.name],\n            responses={\n
      \               200: {\n                    \"model\": self.create_response_model(handler),\n
      \                   \"content\": {\"text/event-stream\": {\"schema\": {\"$ref\":
      \"#/components/schemas/EventTypes\"}}},\n                },\n            },\n
      \           description=handler.description(self.agent, handler),\n        )\n\n
      \   async def stop(self, app: FastAPI):\n        pass\n\n    async def run_program(\n
      \       self,\n        handler: FnHandler,\n        process_id: typing.Optional[str]
      = None,\n        **kwargs,\n    ):\n        request = typing.cast(Request, kwargs.pop(\"__request\"))\n
      \       if not process_id:\n            if \"initialized\" not in handler.extra[\"allowed_states\"]:\n
      \               raise HTTPException(\n                    status_code=400,\n
      \                   detail=f'Action \"{handler.name}\" is not an initializer,
      but no process_id was provided',\n                )\n            last_state
      = \"initialized\"\n            process = await self._create_process(state=\"processing\")\n
      \           process_id = process.record_id\n        else:\n            process
      = await self.get_latest_process_event(process_id)\n            if not process:\n
      \               raise HTTPException(status_code=404, detail=\"Process not found\")\n
      \           if process.state not in handler.extra[\"allowed_states\"]:\n                logger.warning(\n
      \                   f\"Action {handler.name} cannot process state {process.state}.
      Allowed states: {handler.extra['allowed_states']}\"\n                )\n                raise
      HTTPException(\n                    status_code=409,\n                    detail=f'Action
      \"{handler.name}\" cannot process state \"{process.state}\"',\n                )\n
      \           last_state = process.state\n            process = await process.update(\n
      \               agent=self.name, record_id=process_id, state=\"processing\",
      data=dict(action=handler.name)\n            )\n        RequestContext.set(\"process_id\",
      process_id)\n\n        if \"process_id\" in dict(inspect.signature(handler.fn).parameters):\n
      \           kwargs[\"process_id\"] = process_id\n\n        # get the accepted
      content types\n        accept_header = request.headers.get(\"Accept\")\n        media_types
      = accept_header.split(\",\") if accept_header else []\n        try:\n            event_stream_idx
      = media_types.index(\"text/event-stream\")\n        except ValueError:\n            event_stream_idx
      = -1\n\n        try:\n            app_json_idx = media_types.index(\"application/json\")\n
      \       except ValueError:\n            app_json_idx = -1\n\n        if event_stream_idx
      != -1 and (app_json_idx == -1 or event_stream_idx < app_json_idx):\n            #
      stream the results\n            async def with_sse(stream: AsyncIterator[BaseStreamEvent]):\n
      \               try:\n                    async for event in stream:\n                        yield
      ServerSentEvent(id=str(uuid.uuid4()), data=event.model_dump_json())\n                except
      Exception as e:\n                    logger.exception(f\"Server Error {e}\")\n
      \                   raise e\n\n            return EventSourceResponse(\n                with_sse(self.agent_event_stream(handler,
      process, last_state, **kwargs)), status_code=200\n            )\n        else:\n
      \           # run the program synchronously\n            return await self.send_response(handler,
      process, last_state, **kwargs)\n\n    async def _create_process(self, **kwargs):\n
      \       process = await ProcessDoc.create(agent=self.name, **kwargs)\n        if
      hasattr(self.agent, \"create_process\"):\n            await self.agent.create_process(process.record_id)\n
      \       return process\n\n    async def send_response(self, handler: FnHandler,
      process: ProcessDoc, last_state: str, **kwargs) -> JSONResponse:\n        state_change_event
      = None\n        final_event = None\n        result_object = None\n        string_result
      = \"\"\n        async for event in self.agent_event_stream(handler, process,
      last_state, **kwargs):\n            if event.is_root_and_type(StringOutputEvent):\n
      \               string_result += event.content\n            elif event.is_root_and_type(ObjectOutputEvent):\n
      \               result_object = event.content\n            elif event.is_root_and_type(AgentStateEvent):\n
      \               state_change_event = event\n            elif event.is_root_and_type(EndStreamEvent):\n
      \               final_event = event\n            else:\n                logger.debug(f\"ignored
      event {event}\")\n\n        if not state_change_event:\n            raise RuntimeError(f\"Did
      not receive state change event for {handler.name}\")\n        if not final_event:\n
      \           raise RuntimeError(f\"Did not receive final event for {handler.name}\")\n\n
      \       process.state = state_change_event.state\n        if final_event.is_root_and_type(ErrorEvent):\n
      \           process.error_info = final_event.reason\n            return self.doc_to_response(process,
      None)\n        else:\n            if result_object:\n                data =
      result_object\n            else:\n                data = string_result\n            return
      self.doc_to_response(process, data)\n\n    async def agent_event_stream(self,
      handler, process, last_state, **kwargs) -> AsyncIterator[StreamEvent]:\n        is_async_gen
      = inspect.isasyncgenfunction(handler.fn)\n        stream = handler.fn(self.agent,
      **kwargs) if is_async_gen else self.stream_agent_fn(handler, **kwargs)\n        events_to_store
      = []\n        ended = False\n        transitioned = False\n        try:\n            async
      for event in self.stream_agent_iterator(stream, process, handler.name, kwargs):\n
      \               if not ended:\n                    ended = event.is_root_end_event()\n
      \                   transitioned = event.is_root_and_type(AgentStateEvent)\n
      \                   if (\n                        isinstance(event, StringOutputEvent)\n
      \                       and events_to_store\n                        and isinstance(events_to_store[-1],
      StringOutputEvent)\n                        and event.stream_context == events_to_store[-1].stream_context\n
      \                   ):\n                        events_to_store[-1].content
      += event.content\n                    else:\n                        events_to_store.append(event)\n
      \                   yield event\n                else:\n                    logger.warning(f\"Received
      event after end event ({event.event_type}), ignoring\")\n        except asyncio.CancelledError:\n
      \           logger.info(f\"Process {process.record_id} was cancelled\")\n            if
      not ended:\n                if not transitioned:\n                    await
      process.update(state=last_state)\n                    actions = self.get_available_actions(last_state)\n
      \                   events_to_store.append(AgentStateEvent(state=last_state,
      available_actions=actions))\n                events_to_store.append(CanceledEvent())\n\n
      \           raise\n        finally:\n            await store_events(self.name,
      process.record_id, events_to_store)\n\n    async def stream_agent_iterator(\n
      \       self,\n        stream: AsyncIterator[StreamEvent],\n        process:
      ProcessDoc,\n        call_name,\n        user_input: typing.Dict[str, typing.Any],\n
      \   ) -> AsyncIterator[StreamEvent]:\n        state_change = None\n        seen_end
      = False\n        try:\n            yield UserInputEvent(input=to_jsonable_python(user_input,
      fallback=str))\n            yield StartAgentCallEvent(\n                machine=AgentOS.current_machine_url(),\n
      \               agent_name=self.name,\n                call_name=call_name,\n
      \               process_id=process.record_id,\n            )\n            async
      for event in stream:\n                if event.is_root_and_type(ErrorEvent):\n
      \                   logger.warning(\"Error event received\")\n                if
      not seen_end:\n                    seen_end = event.is_root_end_event()\n                    if
      event.is_root_and_type(AgentStateEvent):\n                        state_change
      = True\n                        event.available_actions = self.get_available_actions(event.state)\n
      \                       await process.update(state=event.state)\n                    yield
      event\n                else:\n                    logger.warning(f\"Received
      event after end event ({event.event_type}), ignoring\")\n            if not
      state_change:\n                await process.update(state=\"terminated\")\n
      \               yield AgentStateEvent(state=\"terminated\", available_actions=self.get_available_actions(\"terminated\"))\n
      \           if not seen_end:\n                yield SuccessEvent()\n        except
      HTTPException as e:\n            logger.warning(f\"HTTP Error {e}\", exc_info=logger.isEnabledFor(logging.DEBUG))\n
      \           if not seen_end:\n                await process.update(state=\"http_error\",
      error_info=dict(detail=e.detail, status_code=e.status_code))\n                yield
      AgentStateEvent(state=\"http_error\", available_actions=self.get_available_actions(\"http_error\"))\n
      \               yield ErrorEvent(reason=dict(detail=e.detail, status_code=e.status_code))\n
      \       except Exception as e:\n            logger.exception(f\"Unhandled Error
      {e}\")\n            if not seen_end:\n                await process.update(state=\"unhandled_error\",
      error_info=dict(detail=str(e), status_code=500))\n                yield AgentStateEvent(\n
      \                   state=\"unhandled_error\", available_actions=self.get_available_actions(\"unhandled_error\")\n
      \               )\n                yield ErrorEvent(reason=dict(detail=str(e),
      status_code=500))\n\n    async def stream_agent_fn(self, handler, **kwargs)
      -> AsyncIterator[StreamEvent]:\n        response = await handler.fn(self.agent,
      **kwargs)\n        if isinstance(response, AgentState):\n            yield OutputEvent.get(content=to_jsonable_python(response.data))\n
      \           yield AgentStateEvent(state=response.name, available_actions=self.get_available_actions(response.name))\n
      \       else:\n            yield OutputEvent.get(content=to_jsonable_python(to_jsonable_python(response)))\n\n
      \   def process_action(self, handler: FnHandler, isEndpointAProgram: bool):\n
      \       logger.debug(f\"Registering action {handler.name} for program {self.name}\")\n
      \       sig = inspect.signature(handler.fn)\n        params = dict(sig.parameters)\n
      \       model: typing.Type[BaseModel] = handler.input_model_fn(self.agent, handler)\n
      \       for field in model.model_fields:\n            kwargs = dict(annotation=model.model_fields[field].annotation)\n
      \           if isinstance(model.model_fields[field], Body) or isinstance(model.model_fields[field],
      Param):\n                kwargs[\"annotation\"] = typing.Annotated[model.model_fields[field].annotation,
      model.model_fields[field]]\n            if model.model_fields[field].default
      is not PydanticUndefined:\n                kwargs[\"default\"] = model.model_fields[field].default\n\n
      \           params[field] = Parameter(field, Parameter.KEYWORD_ONLY, **kwargs)\n
      \       if \"process_id\" in params:\n            if isEndpointAProgram:\n                del
      params[\"process_id\"]\n            else:\n                replace: Parameter
      = params[\"process_id\"].replace(annotation=str)\n                params[\"process_id\"]
      = replace\n        elif not isEndpointAProgram:\n            params[\"process_id\"]
      = Parameter(\"process_id\", Parameter.KEYWORD_ONLY, annotation=str)\n\n        del
      params[\"self\"]\n\n        params[\"__request\"] = Parameter(\"__request\",
      Parameter.KEYWORD_ONLY, annotation=Request)\n        params_values = [v for
      v in params.values() if v.kind != Parameter.VAR_KEYWORD]\n\n        async def
      _run_program(**_kwargs):\n            return await self.run_program(handler,
      **_kwargs)\n\n        _run_program.__signature__ = sig.replace(parameters=params_values,
      return_annotation=typing.Any)\n        return _run_program\n\n    async def
      get_process_info(self, process_id: str):\n        latest_record = await self.get_latest_process_event(process_id)\n
      \       if not latest_record:\n            return JSONResponse(dict(detail=\"Process
      not found\"), 404)\n        elif (\n            latest_record.state == \"unhandled_error\"\n
      \           or latest_record.state == \"http_error\"\n            or latest_record.state
      == \"error\"\n        ):\n            detail = latest_record.error_info\n            status_code
      = 500\n            if isinstance(latest_record.error_info, dict):\n                detail
      = latest_record.error_info.get(\"detail\", latest_record.error_info)\n                status_code
      = latest_record.error_info.get(\"status_code\", 500)\n            logger.info(f\"Successfully
      retrieved stored error response, status_code={status_code}\")\n            return
      JSONResponse(detail, status_code)\n        else:\n            return JSONResponse(\n
      \               StateSummary(\n                    process_id=latest_record.record_id,\n
      \                   state=latest_record.state,\n                    available_actions=self.get_available_actions(latest_record.state),\n
      \               ).model_dump(),\n                200,\n            )\n\n    async
      def get_process_events(self, process_id: str):\n        return await load_events(self.name,
      process_id)\n\n    async def create_process(self, args: CreateProcessArgs =
      CreateProcessArgs()):\n        process = await self._create_process(state=\"initialized\",
      title=args.title)\n        return JSONResponse(\n            StateSummary(\n
      \               process_id=process.record_id,\n                state=process.state,\n
      \               available_actions=self.get_available_actions(process.state),\n
      \           ).model_dump(),\n            200,\n        )\n\n    async def delete_process(self,
      process_id: str):\n        process_obj = await ProcessDoc.find_one(query={\"_id\":
      process_id})\n        num_delete = await self._delete_process(process_id) if
      process_obj else 0\n        return JSONResponse(\n            DeleteProcessResponse(process_id=process_id,
      deleted=num_delete).model_dump(), 200 if num_delete > 0 else 204\n        )\n\n
      \   async def _delete_process(self, process_id: str):\n        num_deleted =
      0\n        async for child in AgentCallHistory.get_children(process_id):\n            num_deleted
      += await self._delete_process(child)\n        await AgentCallHistory.delete(query={\"parent_process_id\":
      process_id})\n        logger.info(f\"Successfully deleted child processes for
      process {process_id}\")\n\n        references = AgentOS.get_resources(ReferenceResource).values()\n
      \       agents = AgentOS.get_resources(AgentResource).values()\n        for
      r in (*agents, *references):\n            implementation = to_jsonable_python(r.spec)[\"implementation\"]\n
      \           is_root = not AgentOS.get_resource(ReferenceResource, implementation,
      default=None)\n            if is_root:\n                resource_class = for_name(implementation)\n
      \               if hasattr(resource_class, \"delete_process\"):\n                    await
      resource_class.delete_process(process_id)\n                    logger.info(f\"Successfully
      {resource_class.__name__} records associated with process {process_id}\")\n
      \               else:\n                    logger.debug(f\"No deletion hook
      for {resource_class}\")\n            else:\n                logger.debug(f\"Skipping
      non root reference {r.metadata.name}\")\n\n        await ProcessDoc.delete(_id=process_id)\n
      \       return num_deleted + 1\n\n    async def list_processes(\n        self,\n
      \       request: Request,\n        limit: int = 20,\n        skip: int = 0,\n
      \       sort: typing.Literal[\"ascending\", \"descending\"] = \"ascending\",\n
      \   ):\n        query = dict(agent=self.name)\n        count = await AgentOS.symbolic_memory.count(ProcessDoc.collection,
      query)\n        cursor = AgentOS.symbolic_memory.find(\n            ProcessDoc.collection,
      query, sort=dict(updated=1 if sort == \"ascending\" else -1), skip=skip\n        )\n
      \       acc = []\n        async for doc in cursor:\n            process = ProcessDoc.model_validate(doc)\n
      \           acc.append(\n                StateSummary(\n                    process_id=process.record_id,\n
      \                   state=process.state,\n                    available_actions=self.get_available_actions(process.state),\n
      \               )\n            )\n            if len(acc) == limit:\n                break\n
      \       if len(acc) + skip <= count:\n            next_page_url = f\"{request.url}agents/{self.name}/processes/?limit={limit}&skip={skip
      + limit}\"\n        else:\n            next_page_url = None\n        return
      JSONResponse(\n            ListProcessesResponse(\n                total=count,\n
      \               processes=acc,\n                next=next_page_url,\n            ).model_dump(),\n
      \           200,\n        )\n\n    def doc_to_response(self, latest_record:
      ProcessDoc, data: typing.Any):\n        if not latest_record:\n            return
      JSONResponse(dict(detail=\"Process not found\"), 404)\n        elif (\n            latest_record.state
      == \"unhandled_error\"\n            or latest_record.state == \"http_error\"\n
      \           or latest_record.state == \"error\"\n        ):\n            detail
      = latest_record.error_info\n            status_code = 500\n            if isinstance(latest_record.error_info,
      dict):\n                detail = latest_record.error_info.get(\"detail\", latest_record.error_info)\n
      \               status_code = latest_record.error_info.get(\"status_code\",
      500)\n            return JSONResponse(detail, status_code)\n        else:\n
      \           return JSONResponse(\n                SyncStateResponse(\n                    process_id=latest_record.record_id,\n
      \                   state=latest_record.state,\n                    data=data,\n
      \                   available_actions=self.get_available_actions(latest_record.state),\n
      \               ).model_dump(),\n                200,\n            )\n\n    def
      get_available_actions(self, state):\n        return [action for action, handler
      in self.actions.items() if state in handler.extra[\"allowed_states\"]]\n\n    async
      def get_latest_process_event(self, process_id) -> ProcessDoc:\n        return
      await ProcessDoc.find_one(query=dict(_id=process_id, agent=self.name), sort=dict(updated=-1))\n\n
      \   def create_response_model(self, handler: FnHandler):\n        # if we want,
      we can calculate the literal state and allowed actions statically for most actions.
      Not for now though.\n        fields = {key: (fieldinfo.annotation, fieldinfo)
      for key, fieldinfo in SyncStateResponse.model_fields.items()}\n        return_type
      = handler.output_model_fn(self.agent, handler)\n        if inspect.isclass(return_type)
      and issubclass(return_type, AgentState):\n            return_type = return_type.model_fields[\"data\"].annotation\n
      \       fields[\"data\"] = (\n            return_type,\n            Field(...,
      description=fields[\"data\"][1].description),\n        )\n        return create_model(f\"{handler.name.capitalize()}ResponseModel\",
      **fields)\n"
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Length:
      - '5179'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:35:44 GMT
      ETag:
      - W/"5b33fe942ea35c7a18b27a1c4596a66859696762a92c8dc9dd02eceba2003b09"
      Expires:
      - Tue, 20 Feb 2024 21:40:44 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - 886b45b9d2867414f4c0a54ed1a18ed4a9d27986
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - FA0C:46E8:58912B:6B81D1:65D51B30
      X-Served-By:
      - cache-yvr1534-YVR
      X-Timer:
      - S1708464945.512802,VS0,VE207
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/system/reference_model.py
  response:
    content: "from __future__ import annotations\n\nimport copy\nimport logging\nfrom
      typing import TypeVar, Generic, Type, Annotated, Optional, ClassVar\n\nfrom
      pydantic import BaseModel, model_validator, Field, ConfigDict\n\nfrom eidolon_ai_sdk.agent_os
      import AgentOS\nfrom eidolon_ai_sdk.system.resources.reference_resource import
      ReferenceResource\nfrom eidolon_ai_sdk.util.class_utils import for_name, fqn\n\nT
      = TypeVar(\"T\", bound=BaseModel)\n\n\nclass Specable(Generic[T]):\n    \"\"\"\n
      \   A generic type which can be used to describe a specable type. Specable types
      are expected to accept \"spec\" in kwarg.\n    If Specable is not used, There
      will be no spec validation and the spec will be passed through as-is.\n    \"\"\"\n\n
      \   spec: T\n\n    def __init__(self, spec: T, **kwargs: object):\n        self.spec
      = spec\n\n\nB = TypeVar(\"B\")\nD = TypeVar(\"D\")\n\n\nclass Reference(BaseModel):\n
      \   \"\"\"\n    Used to create references to other classes. t is designed to
      be used with two type variables, `B` and `D` which are\n    the type bound and
      default type respectively. Neither are required, and if only one type is provided
      it is assumed\n    to be the bound. Bound is used as the default if no default
      is provided. default can also be a string which will be\n    looked up from
      the OS ReferenceResources.\n\n    Examples:\n        Reference(implementation=fqn(Foo)
      \                          # Returns an instance of Foo\n        Reference[FooBase](implementation=fqn(Foo)).instantiate()
      \  # Returns an instance of Foo\n        Reference[FooBase](implementation=fqn(Bar))
      \                # Raises ValueError\n        Reference[FooBase, Foo]().instantiate()
      \                    # Returns an instance of Foo\n        Reference[FooBase]().instantiate()
      \                         # Returns an instance of FooBase\n\n    Attributes:\n
      \       _bound: This is a type variable `B` that represents the bound type of
      the reference. It defaults to `object`.\n        _default: This is a type variable
      `D` that represents the default type of the reference. It defaults to `None`.\n
      \       implementation: This is a string that represents the fully qualified
      name of the class that the reference points to. It is optional and can be set
      to `None`.\n        **extra: This is a dictionary that can hold any additional
      specifications for the reference. It is optional and can be set to `None`.\n\n
      \   Methods:\n        instantiate: This method is used to create an instance
      of the class that the reference points to.\n    \"\"\"\n\n    _bound: ClassVar[Type[B]]
      = object\n    _default: ClassVar[Type[D] | str] = None\n    implementation:
      str = None\n\n    model_config = ConfigDict(\n        extra=\"allow\",\n    )\n\n
      \   def __class_getitem__(cls, params):\n        if not isinstance(params, tuple):\n
      \           params = (params, params)\n\n        class _Reference(cls):\n            _bound
      = params[0]\n            _default = params[1]\n\n            @model_validator(mode=\"before\")\n
      \           def _dump_ref(cls, value):\n                return value.model_dump(exclude_defaults=True)
      if isinstance(value, Reference) else value\n\n        return _Reference\n\n
      \   @model_validator(mode=\"before\")\n    def _transform(cls, value):\n        if
      isinstance(value, str):\n            impl = value\n            spec = {}\n        else:\n
      \           spec = value.model_dump(exclude_defaults=True) if isinstance(value,
      BaseModel) else copy.deepcopy(value)\n            impl = spec.pop(\"implementation\",
      fqn(cls._default) if isinstance(cls._default, type) else cls._default)\n            if
      not impl:\n                raise ValueError(f'Unable to determine implementation
      for \"{value}\"')\n\n        impl, spec = cls._expand(impl, spec)\n        return
      dict(implementation=impl, **spec)\n\n    @classmethod\n    def _merge(cls, d1,
      d2):\n        for k, v in d1.items():\n            if isinstance(v, dict):\n
      \               d2[k] = d2.get(k, {})\n                cls._merge(v, d2.get(k,
      {}))\n            else:\n                d2[k] = v\n\n    @classmethod\n    def
      _expand(cls, impl, extra):\n        ref = AgentOS.get_resource(ReferenceResource,
      impl, default=None)\n        if not ref:\n            return impl, extra\n        else:\n
      \           inner_spec = copy.deepcopy(ref.spec)\n            impl = inner_spec.pop(\"implementation\")\n
      \           cls._merge(extra or {}, inner_spec)\n            return cls._expand(impl,
      inner_spec)\n\n    @model_validator(mode=\"after\")\n    def _validate(self):\n
      \       reference_class = self._get_reference_class()\n        spec_type = self.get_spec_type(reference_class)\n
      \       if spec_type:\n            spec_type.model_validate(self.model_extra
      or {})\n        elif issubclass(reference_class, BaseModel):\n            reference_class.model_validate(self.model_extra
      or {})\n        return self\n\n    @staticmethod\n    def get_spec_type(reference_class)
      -> Optional[Type[BaseModel]]:\n        if issubclass(reference_class, Specable):\n
      \           bases = getattr(reference_class, \"__orig_bases__\", [])\n            specable
      = next(\n                (base for base in bases if getattr(base, \"__origin__\",
      None) is Specable),\n                None,\n            )\n            if specable:\n
      \               return specable.__args__[0]\n            else:\n                logging.warning(f'Unable
      to find Specable definition on \"{reference_class}\", skipping validation')\n
      \               return None\n        return None\n\n    def _get_reference_class(self):\n
      \       return for_name(self.implementation, self._bound or object)\n\n    def
      instantiate(self, *args, **kwargs):\n        reference_class = self._get_reference_class()\n
      \       spec_type = self.get_spec_type(reference_class)\n        if spec_type:\n
      \           kwargs[\"spec\"] = spec_type.model_validate(self.model_extra or
      {})\n        elif issubclass(reference_class, BaseModel):\n            for k,
      v in (self.model_extra or {}).items():\n                kwargs[k] = v\n        elif
      self.model_extra:\n            kwargs[\"spec\"] = self.model_extra\n\n        return
      self._get_reference_class()(*args, **kwargs)\n\n\nclass AnnotatedReference(Reference):\n
      \   \"\"\"\n    Helper class to manage References with defaults.\n\n    Default
      is set to the class name, which should be as a builtin pointing to the FQN of
      the class\n\n    Example:\n        class MySpec(BaseModel):\n            ref1:
      AnnotatedReference[MyBound] = Field(description=\"My description\")\n\n    Note:\n
      \       The description can still be added via a Field annotation without affecting
      default behavior\n    \"\"\"\n\n    def __class_getitem__(cls, params) -> Type[Reference]:\n
      \       if not isinstance(params, tuple):\n            params = (params, params.__name__)\n
      \       return Annotated[Reference[params], Field(default_factory=Reference[params])]\n"
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Length:
      - '2065'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:35:44 GMT
      ETag:
      - W/"3aa0bef36ee8a188f8e19da4d829f0ed54efbafec1c31c828bec6fc5acaa078c"
      Expires:
      - Tue, 20 Feb 2024 21:40:44 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - HIT
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - f1b26cb551cc47502e0d3945b195c5aadfe49226
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - C66C:30F250:17E89:21806:65D519B3
      X-Served-By:
      - cache-bfi-krnt7300045-BFI
      X-Timer:
      - S1708464945.652294,VS0,VE111
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/system/processes.py
  response:
    content: "import bson\nimport logging\nfrom datetime import datetime\nfrom pydantic
      import BaseModel\nfrom pymongo.errors import DuplicateKeyError\nfrom typing
      import ClassVar, Any, cast, AsyncIterable, Optional, Dict\n\nfrom eidolon_ai_sdk.agent_os
      import AgentOS\nfrom eidolon_ai_sdk.io.events import StreamEvent\n\n\nclass
      MongoDoc(BaseModel, extra=\"allow\"):\n    collection: ClassVar[str]\n    created:
      str = None\n    updated: str = None\n\n    @property\n    def record_id(self):\n
      \       return self._id\n\n    @classmethod\n    async def find_one(cls, **kwargs):\n
      \       doc = await AgentOS.symbolic_memory.find_one(cls.collection, **kwargs)\n
      \       if doc:\n            return cls.model_validate(doc)\n        else:\n
      \           return None\n\n    @classmethod\n    async def find(cls, **kwargs):\n
      \       docs = AgentOS.symbolic_memory.find(cls.collection, **kwargs)\n        async
      for doc in docs:\n            yield cls.model_validate(doc)\n\n    @classmethod\n
      \   async def create(cls, **data):\n        t = datetime.now().isoformat()\n
      \       if \"created\" not in data:\n            data[\"created\"] = t\n        if
      \"updated\" not in data:\n            data[\"updated\"] = t\n        if \"_id\"
      not in data:\n            data[\"_id\"] = str(bson.ObjectId())\n        doc
      = cls(**data)\n        await AgentOS.symbolic_memory.insert_one(cls.collection,
      doc.model_dump())\n        return doc\n\n    async def update(self, **data):\n
      \       data = dict(**data, updated=datetime.now().isoformat())\n        query
      = {\"_id\": self.record_id, \"updated\": self.updated}\n        try:\n            await
      AgentOS.symbolic_memory.upsert_one(self.collection, query=query, document=data)\n
      \       except DuplicateKeyError:\n            raise ValueError(f\"{self.__class__.__name__}
      record {self.record_id} has been updated since last read\")\n        dump =
      self.model_dump()\n        dump.update(**data)\n        return self.__class__.model_validate(dump)\n\n
      \   @classmethod\n    async def delete(cls, _id: str):\n        await AgentOS.symbolic_memory.delete(cls.collection,
      {\"_id\": _id})\n\n\nclass ProcessDoc(MongoDoc):\n    collection = \"processes\"\n
      \   metadata: dict = {}\n    agent: str\n    state: str\n    error_info: Optional[Any]
      = None\n    title: Optional[str] = None\n\n\nasync def store_events(agent: str,
      process_id: str, events: list[StreamEvent]):\n    try:\n        stored_events
      = []\n        for event_num, event in enumerate(events):\n            event_obj:
      Dict[str, Any] = {\n                **event.model_dump(),\n                \"__process_id\":
      process_id,\n                \"__agent\": agent,\n                \"__create_time\":
      datetime.now().timestamp(),\n                \"__event_id\": event_num,\n            }\n
      \           event_obj[\"category\"] = event_obj[\"category\"].value\n            if
      hasattr(event_obj[\"event_type\"], \"value\"):\n                event_obj[\"event_type\"]
      = event_obj[\"event_type\"].value\n            event_obj[\"category\"] = str(event_obj[\"category\"])\n
      \           stored_events.append(event_obj)\n\n        await AgentOS.symbolic_memory.insert(\"process_events\",
      stored_events)\n    except Exception as e:\n        # todo, depending on why
      this fails, we should try to store an error event. Connection vs parsing error\n
      \       logging.getLogger(\"eidolon\").exception(f\"Error storing events {e}\")\n\n\nasync
      def load_events(agent: str, process_id: str):\n    query = {\"__agent\": agent,
      \"__process_id\": process_id}\n    order = {\"__create_time\": 1, \"__event_id\":
      1}\n    events = cast(AsyncIterable[dict[str, Any]], AgentOS.symbolic_memory.find(\"process_events\",
      query, sort=order))\n\n    events_arr = [event async for event in events]\n
      \   for event in events_arr:\n        del event[\"_id\"]\n        del event[\"__process_id\"]\n
      \       del event[\"__create_time\"]\n        del event[\"__event_id\"]\n        del
      event[\"__agent\"]\n        if not event[\"stream_context\"]:\n            del
      event[\"stream_context\"]\n    return events_arr\n"
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Length:
      - '1259'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:35:44 GMT
      ETag:
      - W/"5d3adb6fb8565d54934e575e7ae0511c42bad2138a40ea25138612f89c9a1ba1"
      Expires:
      - Tue, 20 Feb 2024 21:40:44 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - HIT
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - 890c7f6b058702e8b643ec58fc72f702b2fc6acc
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - 4414:283009:73013:AAF24:65D519B3
      X-Served-By:
      - cache-bfi-kbfi7400023-BFI
      X-Timer:
      - S1708464945.651814,VS0,VE130
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/system/fn_handler.py
  response:
    content: "from __future__ import annotations\n\nimport inspect\nimport typing\nfrom
      dataclasses import dataclass\n\nfrom pydantic import BaseModel, Field, create_model\nfrom
      pydantic.fields import FieldInfo\n\n\n@dataclass\nclass FnHandler:\n    name:
      str\n    fn: callable\n    description: typing.Callable[[object, FnHandler],
      str]\n    input_model_fn: typing.Callable[[object, FnHandler], typing.Type[BaseModel]]\n
      \   output_model_fn: typing.Callable[[object, FnHandler], type]\n    extra:
      dict\n\n\ndef register_handler(\n    name: str = None,\n    description: str
      | typing.Optional[typing.Callable[[object, FnHandler], str]] = None,\n    input_model:
      typing.Optional[typing.Callable[[object, FnHandler], BaseModel]] = None,\n    output_model:
      typing.Optional[typing.Callable[[object, FnHandler], typing.Any]] = None,\n
      \   **extra,\n):\n    if isinstance(description, str):\n        docs_fn = lambda
      fn: lambda self, handler: description  # noqa: E731\n    elif description is
      None:\n        docs_fn = lambda fn: lambda self, handler: fn.__doc__  # noqa:
      E731\n    else:\n        docs_fn = lambda fn: description  # noqa: E731\n    return
      lambda fn: _add_handler(\n        fn,\n        FnHandler(\n            name=name
      or fn.__name__,\n            description=docs_fn(fn),\n            fn=fn,\n
      \           input_model_fn=input_model or get_input_model,\n            output_model_fn=output_model
      or get_output_model,\n            extra=extra,\n        ),\n    )\n\n\ndef _add_handler(fn,
      handler):\n    if not (inspect.iscoroutinefunction(fn) or inspect.isasyncgenfunction(fn)):\n
      \       raise ValueError(\"Handler must be an async function\")\n    try:\n
      \       handlers = getattr(fn, \"eidolon_handlers\")\n    except AttributeError:\n
      \       handlers = []\n        setattr(fn, \"eidolon_handlers\", handlers)\n
      \   handlers.append(handler)\n    return fn\n\n\ndef get_input_model(_obj, handler:
      FnHandler) -> typing.Type[BaseModel]:\n    sig = inspect.signature(handler.fn).parameters\n
      \   hints = typing.get_type_hints(handler.fn, include_extras=True)\n    fields
      = {}\n    for param, hint in filter(lambda tu: tu[0] != \"return\", hints.items()):\n
      \       if hasattr(hint, \"__metadata__\") and isinstance(hint.__metadata__[0],
      FieldInfo):\n            field: FieldInfo = hint.__metadata__[0]\n            if
      getattr(sig[param].default, \"__name__\", None) != \"_empty\":\n                field.default
      = sig[param].default\n            fields[param] = (hint.__origin__, field)\n
      \       elif isinstance(sig[param].default, FieldInfo):\n            fields[param]
      = (hint, sig[param].default)\n        else:\n            # _empty default isn't
      being handled by create_model properly (still optional when it should be required)\n
      \           field = (\n                Field()\n                if getattr(sig[param].default,
      \"__name__\", None) == \"_empty\"\n                else Field(default=sig[param].default)\n
      \           )\n            fields[param] = (hint, field)\n    input_model =
      create_model(f\"{handler.name.capitalize()}InputModel\", **fields)\n    return
      input_model\n\n\ndef get_output_model(_obj, handler: FnHandler):\n    return
      typing.get_type_hints(handler.fn, include_extras=True).get(\"return\", typing.Any)\n\n\ndef
      get_handlers(obj) -> typing.List[FnHandler]:\n    acc = []\n    for name in
      dir(obj):\n        if hasattr(getattr(obj, name), \"eidolon_handlers\"):\n            acc.extend(getattr(getattr(obj,
      name), \"eidolon_handlers\"))\n    return acc\n"
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Length:
      - '1078'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:35:44 GMT
      ETag:
      - W/"7e67cb5839d8b35bcd5115de49a1ee9d42b3b262d9ffff3fe336269c3f0e3b01"
      Expires:
      - Tue, 20 Feb 2024 21:40:44 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - de79114523f29f842dce61c1e5de38d7051808a5
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - F16C:2945D3:4E2D8A:613DA0:65D51B30
      X-Served-By:
      - cache-yvr1524-YVR
      X-Timer:
      - S1708464945.646830,VS0,VE136
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      authorization:
      - XXXXXX
      connection:
      - keep-alive
      host:
      - api.github.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/system/resources?ref=main
  response:
    content: '[{"name":"__init__.py","path":"sdk/eidolon_ai_sdk/system/resources/__init__.py","sha":"e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","size":0,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/system/resources/__init__.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/system/resources/__init__.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/system/resources/__init__.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/system/resources/__init__.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/system/resources/__init__.py"}},{"name":"agent_resource.py","path":"sdk/eidolon_ai_sdk/system/resources/agent_resource.py","sha":"3c3a478e2529956d087dce4f1c03813daa09bbae","size":282,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/system/resources/agent_resource.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/system/resources/agent_resource.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/3c3a478e2529956d087dce4f1c03813daa09bbae","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/system/resources/agent_resource.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/system/resources/agent_resource.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/3c3a478e2529956d087dce4f1c03813daa09bbae","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/system/resources/agent_resource.py"}},{"name":"machine_resource.py","path":"sdk/eidolon_ai_sdk/system/resources/machine_resource.py","sha":"5e0b827975c5af51b434bebbe9388dc90144d172","size":414,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/system/resources/machine_resource.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/system/resources/machine_resource.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/5e0b827975c5af51b434bebbe9388dc90144d172","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/system/resources/machine_resource.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/system/resources/machine_resource.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/5e0b827975c5af51b434bebbe9388dc90144d172","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/system/resources/machine_resource.py"}},{"name":"reference_resource.py","path":"sdk/eidolon_ai_sdk/system/resources/reference_resource.py","sha":"a9756f338876be53f64be89ad556ac306e7dd3c8","size":684,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/system/resources/reference_resource.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/system/resources/reference_resource.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/a9756f338876be53f64be89ad556ac306e7dd3c8","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/system/resources/reference_resource.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/system/resources/reference_resource.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/a9756f338876be53f64be89ad556ac306e7dd3c8","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/system/resources/reference_resource.py"}},{"name":"resources_base.py","path":"sdk/eidolon_ai_sdk/system/resources/resources_base.py","sha":"178164ab591fc3c493b21f60829df4805b950596","size":1471,"url":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/system/resources/resources_base.py?ref=main","html_url":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/system/resources/resources_base.py","git_url":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/178164ab591fc3c493b21f60829df4805b950596","download_url":"https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/system/resources/resources_base.py","type":"file","_links":{"self":"https://api.github.com/repos/eidolon-ai/eidolon/contents/sdk/eidolon_ai_sdk/system/resources/resources_base.py?ref=main","git":"https://api.github.com/repos/eidolon-ai/eidolon/git/blobs/178164ab591fc3c493b21f60829df4805b950596","html":"https://github.com/eidolon-ai/eidolon/blob/main/sdk/eidolon_ai_sdk/system/resources/resources_base.py"}}]'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 20 Feb 2024 21:35:44 GMT
      ETag:
      - W/"064e0a81d6dafea36f4c96a8e2042364540bb63d"
      Last-Modified:
      - Tue, 20 Feb 2024 17:44:26 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E59A:253F79:165789:1FC754:65D51B2F
      X-OAuth-Scopes:
      - read:project, repo:status
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4493'
      X-RateLimit-Reset:
      - '1708466020'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '507'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2024-05-20 20:12:56 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/system/request_context.py
  response:
    content: "from __future__ import annotations\n\nfrom contextvars import ContextVar\nfrom
      typing import Any, Dict\nfrom urllib.request import Request\n\nfrom pydantic
      import BaseModel\nfrom starlette.middleware.base import BaseHTTPMiddleware\n\nfrom
      eidolon_ai_sdk.util.logger import logger\n\n_request_context = ContextVar(\"request_context\")\n\n\nclass
      _Record(BaseModel):\n    key: str\n    value: str\n    propagate: bool\n\n\ndef
      _get_context() -> Dict[str, _Record]:\n    try:\n        return _request_context.get()\n
      \   except LookupError:\n        _request_context.set(dict())\n        return
      _request_context.get()\n\n\nclass _RequestContextMeta(type):\n    def __getitem__(self,
      key):\n        return _get_context()[key].value\n\n    def __repr__(self):\n
      \       return repr(_get_context())\n\n    def __delitem__(self, key):\n        del
      _get_context()[key]\n\n    @staticmethod\n    def set(key: str, value: str |
      Any, propagate=False):\n        logger.debug(f\"setting context {key}={value},
      propagate={propagate}\")\n\n        if propagate and not isinstance(value, str):\n
      \           raise ValueError(\"can only propagate string values\")\n        if
      \",\" in key:\n            raise ValueError(\"key cannot contain commas\")\n
      \       _get_context()[key] = _Record(key=key, value=value, propagate=propagate)\n\n
      \   def get(self, key, default=None):\n        context = _get_context()\n        if
      default is ... and key not in context:\n            raise KeyError(key)\n        return
      self[key] if key in context else default\n\n    @property\n    def headers(self):\n
      \       to_propagate = {v.key: v.value for v in _get_context().values() if v.propagate}\n
      \       if to_propagate:\n            to_propagate[\"X-Eidolon-Context\"] =
      \",\".join(f\"{k}\" for k in to_propagate.keys())\n        return to_propagate\n\n\nclass
      RequestContext(metaclass=_RequestContextMeta):\n    pass\n\n\nclass ContextMiddleware(BaseHTTPMiddleware):\n
      \   async def dispatch(self, request: Request, call_next):\n        context_headers
      = request.headers.get(\"X-Eidolon-Context\", \"\") or []\n        if context_headers:\n
      \           context_headers = context_headers.split(\",\")\n        for header
      in context_headers:\n            try:\n                RequestContext.set(header,
      request.headers[header], propagate=True)\n            except KeyError:\n                logger.warning(f\"Expected
      context header {header} not found\")\n\n        return await call_next(request)\n"
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Length:
      - '881'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:35:44 GMT
      ETag:
      - W/"38f97fdcbb7418526ddda91d40ad90020d9f757c5594f5aee9561e8d76ab9490"
      Expires:
      - Tue, 20 Feb 2024 21:40:44 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - HIT
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - 1a76483c45dac272b3084599a4f5577886d5fbf4
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - 96F0:257E5B:B7777:10B173:65D519B2
      X-Served-By:
      - cache-bfi-krnt7300055-BFI
      X-Timer:
      - S1708464945.682549,VS0,VE122
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/util/__init__.py
  response:
    content: ''
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Length:
      - '0'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:35:44 GMT
      ETag:
      - W/"938f66ede415ccb10764da47cd5f3cfc076c07b8791c708cfa8ec54982197c1f"
      Expires:
      - Tue, 20 Feb 2024 21:40:44 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - HIT
      X-Cache-Hits:
      - '1'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - 88299d39beb4159c62c52bf540ccc4e01392efeb
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - 2BE8:27706C:8C8B1:CE3D9:65D519B2
      X-Served-By:
      - cache-bfi-kbfi7400116-BFI
      X-Timer:
      - S1708464945.713743,VS0,VE123
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/util/aiohttp.py
  response:
    content: "from typing import Any, Dict, Optional\n\nimport json\n\nfrom httpx
      import Timeout, AsyncClient, HTTPStatusError, codes\nfrom httpx_sse import EventSource\nfrom
      pydantic_core import to_jsonable_python\n\nfrom eidolon_ai_sdk.io.events import
      BaseStreamEvent\nfrom eidolon_ai_sdk.system.request_context import RequestContext\nfrom
      eidolon_ai_sdk.util.logger import logger\n\n\n# noinspection PyShadowingNames\nasync
      def get_content(url: str, json: Optional[Dict[str, Any]] = None, **kwargs):\n
      \   async with AsyncClient(timeout=Timeout(5.0, read=600.0)) as client:\n        params
      = {\"url\": url, \"headers\": RequestContext.headers}\n        if json:\n            params[\"json\"]
      = json\n        response = await client.get(**params, **kwargs)\n        response.raise_for_status()\n
      \       return response.json()\n\n\n# noinspection PyShadowingNames\nasync def
      post_content(url, json: Optional[Any] = None, **kwargs):\n    params = {\"url\":
      url, \"headers\": RequestContext.headers}\n    if json:\n        params[\"json\"]
      = to_jsonable_python(json)\n    async with AsyncClient(timeout=Timeout(5.0,
      read=600.0)) as client:\n        response = await client.post(**params, **kwargs)\n
      \       response.raise_for_status()\n        return response.json()\n\n\n# noinspection
      PyShadowingNames\nasync def delete(url, **kwargs):\n    params = {\"url\": url,
      \"headers\": RequestContext.headers}\n    async with AsyncClient(timeout=Timeout(5.0,
      read=600.0)) as client:\n        response = await client.delete(**params, **kwargs)\n
      \       response.raise_for_status()\n        return response.json()\n\n\nasync
      def stream_content(url: str, body):\n    body = to_jsonable_python(body)\n    headers
      = {\n        **RequestContext.headers,\n        \"Accept\": \"text/event-stream\",\n
      \   }\n    request = {\"url\": url, \"json\": body, \"method\": \"POST\", \"headers\":
      headers}\n    async with AsyncClient(timeout=Timeout(5.0, read=600.0)) as client:\n
      \       async with client.stream(**request) as response:\n            try:\n
      \               response.raise_for_status()\n            except HTTPStatusError
      as e:\n                raise AgentError(e.response.status_code, \"\".join([b
      async for b in e.response.aiter_text()]))\n            async for sse_event in
      EventSource(response).aiter_sse():\n                if sse_event.data:\n                    data
      = json.loads(sse_event.data)\n                    event = BaseStreamEvent.from_dict(data)\n
      \                   yield event\n                else:\n                    logger.warning(\"Empty
      event from server\")\n\n\nclass AgentError(Exception):\n    def __init__(self,
      status_code: int, message: str):\n        super().__init__(f\"{status_code}
      ({codes.get_reason_phrase(status_code)}): {message}\")\n        self.message
      = message\n        self.status_code = status_code\n"
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Length:
      - '854'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:35:44 GMT
      ETag:
      - W/"a9f7768e2076ba4a936a394fbab407a0e99d661114422062c3695f0616e66f98"
      Expires:
      - Tue, 20 Feb 2024 21:40:44 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - HIT
      X-Cache-Hits:
      - '1'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - 7713e8cbed67bcafcc7c5d8b881553bfc5cadf85
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - 4A26:2E4C:620032:747029:65D519B1
      X-Served-By:
      - cache-yvr1531-YVR
      X-Timer:
      - S1708464945.734555,VS0,VE123
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/util/async_wrapper.py
  response:
    content: "import asyncio\nfrom functools import wraps, partial\n\n\ndef make_async(func):\n
      \   \"\"\"\n    Decorator to make a sync function async and non-blocking by
      running them in a thread.\n    \"\"\"\n\n    @wraps(func)\n    async def run(*args,
      **kwargs):\n        loop = asyncio.get_event_loop()\n        # use default ThreadPoolExecutor.
      Executor will be cached on event loop, so we don't want to manage it ourselves\n
      \       return await loop.run_in_executor(executor=None, func=(partial(func,
      *args, **kwargs)))\n\n    return run\n"
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Length:
      - '305'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:35:44 GMT
      ETag:
      - W/"dd56607644c810081e0c8432d7fabe202f0a0201c9ad4fdacd7e4da08f33659e"
      Expires:
      - Tue, 20 Feb 2024 21:40:44 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - HIT
      X-Cache-Hits:
      - '1'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - 71b44945462c4fcaecb3edcf797864a733de53e5
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - FFAA:4B35:62114C:747F87:65D519AF
      X-Served-By:
      - cache-yvr1534-YVR
      X-Timer:
      - S1708464945.766564,VS0,VE134
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/util/class_utils.py
  response:
    content: "import importlib\nfrom typing import Type\n\n\ndef for_name(implementation_fqn:
      str, sub_class: Type = object) -> Type:\n    \"\"\"\n    Dynamically imports
      a class and validates that it is a subclass of a specified type.\n\n    Given
      a fully qualified class name (FQN) and a subclass type, this function dynamically
      imports\n    the class from the FQN and checks whether it is a subclass of the
      specified subclass type. If the\n    class can be imported and is a verified
      subclass, the class itself is returned. Otherwise, an error\n    is raised.\n\n
      \   Parameters:\n    - implementation_fqn (str): The fully qualified name of
      the class to import, in the form 'module.ClassName'.\n    - sub_class (Type):
      The class type to check against the dynamically imported class.\n\n    Returns:\n
      \   - Type: The imported class type that is a subclass of the specified `sub_class`.\n\n
      \   Raises:\n    - ValueError: If the `implementation_fqn` is not provided,
      the class cannot be imported, the class\n                  does not exist, or
      the imported class is not a subclass of `sub_class`.\n\n    Note:\n    - The
      fully qualified name of the class is case-sensitive and must be correct.\n    \"\"\"\n\n
      \   if implementation_fqn:\n        try:\n            module_name, class_name
      = implementation_fqn.rsplit(\".\", 1)\n        except ValueError:\n            raise
      ValueError(f\"'{implementation_fqn}' is not a valid fully qualified class name.\")\n
      \       try:\n            module = importlib.import_module(module_name)\n            implementation_class
      = getattr(module, class_name)\n        except (ImportError, AttributeError)
      as e:\n            print(e)\n            raise ValueError(f\"Unable to import
      {implementation_fqn}\")\n        if implementation_class and issubclass(implementation_class,
      sub_class):\n            return implementation_class\n        else:\n            print(implementation_class)\n
      \           print(sub_class)\n            print(issubclass(implementation_class,
      sub_class))\n            raise ValueError(\n                f\"Implementation
      class '{implementation_fqn}' not found or is not a subclass of '{sub_class}'.\"\n
      \           )\n    raise ValueError(\"Implementation not provided.\")\n\n\ndef
      fqn(clazz=Type) -> str:\n    return clazz.__module__ + \".\" + clazz.__name__\n\n\ndef
      get_function_details(func):\n    function_name = func.__name__\n    owning_class
      = None\n\n    if hasattr(func, \"__self__\"):\n        # This is a bound method;
      it will have a '__self__' attribute.\n        owning_class = func.__self__.__class__.__name__\n
      \   elif hasattr(func, \"__qualname__\"):\n        # This is an unbound method
      or a function; try to parse the class name out of the __qualname__\n        qualname_parts
      = func.__qualname__.split(\".\")\n        if len(qualname_parts) > 1:\n            owning_class
      = qualname_parts[-2]\n\n    return function_name, owning_class\n"
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Length:
      - '968'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:35:44 GMT
      ETag:
      - W/"b38588cf01353c07a62540f1edaa24de195f73d0f7804d984bd4446b7a2b2d0d"
      Expires:
      - Tue, 20 Feb 2024 21:40:44 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - HIT
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - 2fed28d515d69f47acbdc4044e079342d3d72f62
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - 273E:2587A7:B2D5E:10678D:65D519B3
      X-Served-By:
      - cache-bfi-krnt7300033-BFI
      X-Timer:
      - S1708464945.798124,VS0,VE110
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - raw.githubusercontent.com
      user-agent:
      - python-httpx/0.26.0
    method: GET
    uri: https://raw.githubusercontent.com/eidolon-ai/eidolon/main/sdk/eidolon_ai_sdk/util/logger.py
  response:
    content: "import logging\nimport re\n\nlogger = logging.getLogger(\"eidolon\")\n\n\nclass
      CustomFormatter(logging.Formatter):\n    def format(self, record: logging.LogRecord)
      -> str:\n        arg_pattern = re.compile(r\"%\\((\\w+)\\)\")\n        arg_names
      = [x.group(1) for x in arg_pattern.finditer(self._fmt)]\n        for field in
      arg_names:\n            if field not in record.__dict__:\n                record.__dict__[field]
      = None\n\n        return super().format(record)\n"
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - max-age=300
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Length:
      - '262'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Cross-Origin-Resource-Policy:
      - cross-origin
      Date:
      - Tue, 20 Feb 2024 21:35:44 GMT
      ETag:
      - W/"f7cfc975ab2246c9f57444b49077fc89bb30be917c89efd637bef5a6c57834d5"
      Expires:
      - Tue, 20 Feb 2024 21:40:44 GMT
      Source-Age:
      - '0'
      Strict-Transport-Security:
      - max-age=31536000
      Vary:
      - Authorization,Accept-Encoding,Origin
      Via:
      - 1.1 varnish
      X-Cache:
      - HIT
      X-Cache-Hits:
      - '0'
      X-Content-Type-Options:
      - nosniff
      X-Fastly-Request-ID:
      - e598a7e760d57b27ed9942cea9fa72648e761fee
      X-Frame-Options:
      - deny
      X-GitHub-Request-Id:
      - 3F6A:30F250:17E8D:21807:65D519B3
      X-Served-By:
      - cache-bfi-krnt7300045-BFI
      X-Timer:
      - S1708464945.826702,VS0,VE122
      X-XSS-Protection:
      - 1; mode=block
    http_version: HTTP/1.1
    status_code: 200
version: 1
