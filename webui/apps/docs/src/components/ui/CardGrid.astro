---
import type { ItemGrid as Props } from '~/types';
import { twMerge } from 'tailwind-merge';
import Button from './Button.astro';
import { Icon } from 'astro-icon/components';

const { items = [], columns, defaultIcon = '', classes = {} } = Astro.props;

const {
  container: containerClass = '',
  panel: panelClass = '',
  title: titleClass = '',
  description: descriptionClass = '',
  icon: defaultIconClass = 'text-primary',
  action: actionClass = '',
} = classes;
---

{
  items && (
    <div
      class={twMerge(
        `grid mx-auto gap-8 md:gap-y-12 ${
          columns === 4
            ? 'lg:grid-cols-4 md:grid-cols-3 sm:grid-cols-2'
            : columns === 3
            ? 'lg:grid-cols-3 sm:grid-cols-2'
            : columns === 2
            ? 'sm:grid-cols-2 '
            : ''
        }`,
        containerClass
      )}
    >
      {items.map(({ title, description, icon, callToAction, slot, href, classes: itemClasses = {} }) => (
        <div class="w-full max-w-[550px] border-2 border-dotted rounded-lg p-6 max-w-4xl flex flex-col border-gray-200 dark:border-gray-500">
          {slot && (
            <div class="h-[230px] md:mb-4 md:mt-4">
              <div class="w-full h-full flex flex-col justify-center items-center" set:html={Astro.slots.render(slot)} />
            </div>
          )}
          <div class={twMerge('flex flex-row max-w-md mt-8', panelClass, itemClasses?.panel)}>
            <div class="flex justify-center">
              {(icon || defaultIcon) && (
                <Icon
                  name={icon || defaultIcon}
                  class={twMerge('w-7 h-7 mr-2 rtl:mr-0 rtl:ml-2', defaultIconClass, itemClasses?.icon)}
                />
              )}
            </div>
            <div class="mt-0.5">
              {title && (
                <h3 class={twMerge('text-xl font-bold', titleClass, itemClasses?.title)}>
                {href && <a href={href} class="hover:underline">{title}</a>}
                {!href && title}
                </h3>
              )}
              {description && (
                <p
                  class={twMerge(`${title ? 'mt-3' : ''} text-muted`, descriptionClass, itemClasses?.description)}
                  set:html={description}
                />
              )}
              {callToAction && (
                <div
                  class={twMerge(
                    `${title || description ? 'mt-3' : ''}`,
                    actionClass,
                    itemClasses?.actionClass
                  )}
                >
                  <Button variant="link" {...callToAction} />
                </div>
              )}
            </div>
          </div>
        </div>
      ))}
    </div>
  )
}
