---
import Layout from '~/layouts/PageLayout.astro';

import Steps from '~/components/widgets/Steps.astro';
import ContentWithTabs from "../components/widgets/ContentWithTabs.astro";
import MainTitle from "../components/widgets/MainTitle.astro";
import ContentWithTabs from "../components/widgets/ContentWithTabs.astro";
import ProductDescription from "../components/widgets/ProductDescription.astro";


const metadata = {
  title: 'Eidolon -- AI Agent Server for the Enterprise',
  ignoreTitleTemplate: true,
};

const bg = await Astro.slots.render("bg")
---

<Layout metadata={metadata}>
  <!-- Hero Widget ******************* -->
  <div class="overflow-x-hidden">
  <MainTitle>
    <Fragment slot="tagline">
      AI Agent Server for the Enterprise
    </Fragment>
    <Fragment slot="content">
        <span>An Enterprise-Grade, Open Source framework, Eidolon enables developers to 
          <span class="font-semibold">rapidly</span> build and deploy the most <span class="font-semibold">powerful</span> genAI applications.</span>
      <!--<br/>-->
      <!--<span class="text-xl font-semibold tracking-tighter md:text-3xl">Maintain control | Reduce complexity | Increase accuracy</span>-->
    </Fragment>
  </MainTitle>

  <ProductDescription/>
  <div class=" bg-white dark:bg-blue-950">
    <Steps
      title="Bring agents into production in 3 easy steps"
      horizontal
      classes={{container: "lg:pt-14 pt-6 md:pt-10 pb-0 md:pb-0 lg:pb-0 "}}
      items={[
        {
          title: '<span class="font-medium">1. Build</span>',
          icon: 'tabler:hammer',
          link: '#build'
        },
        {
          title: '<span class="font-medium">2. Deploy</span>',
          icon: 'tabler:package',
          link: '#deploy'
        },
        {
          title: '<span class="font-medium">3. Consume</span>',
          icon: 'tabler:rocket',
          link: '#consume'
        },
      ]}
    />
  </div>
  <ContentWithTabs
    id="build"
    height="550" 
    classes={{container: "pt-0 md:pt-0 lg:pt-0"}}
    bullets={[
      {
        title: 'Choose from a variety of pre-built agents or define your own',
        description:
          "Eidolon provides a variety of pre-built agents to get you started. You can also define your own agents using vanilla code or any other agent framework you like.",
      },
      {
        title: 'Define agents with declarative YAML',
        description: "Eidolon's simple declarative YAML syntax makes it easy to define agents. Agents can be as simple as a single line or as complex as needed.",
      },
      {
        title: 'Build agents that work together',
        description:
          "Add RAG storage to any application using simple services. Eidolon provides the flexibility to customize RAG to fit your needs.",
      },
    ]}
    tabs={[
      {
        title: "Multi-Model Chatbot",
        language: 'yaml',
        code: `apiVersion: server.eidolonai.com/v1alpha1
kind: Agent
metadata:
  name: multi-model-chatbot

spec:
  system_prompt:
    You are a helpful assistant. Output all multi-media content as embedded content including image, video, and audio. Only generate images or speech if directly asked by the user.
  apus:
    - { apu: GPT4-turbo, title: GPT4 Turbo, default: true }
    - { apu: MistralLarge, title: Mistral Large }
    - { apu: Llama3-8b, title: Llama3 8b }
    - { apu: ClaudeOpus, title: Claude Opus }
    - { apu: ClaudeSonnet, title: Claude Sonnet }
`
      },
      {
        title: "RAG",
        language: 'yaml',
        code: `---
apiVersion: server.eidolonai.com/v1alpha1
kind: Agent
metadata:
  name: agent

spec:
  description: An agent that searches the eidolon code and documentation
  agent_refs: ["doc-search"]
  system_prompt: You are a software expert responsible for answering questions about a code base.
---
apiVersion: server.eidolonai.com/v1alpha1
kind: Agent
metadata:
  name: doc-search

spec:
  implementation: RetrieverAgent
  description: "Search the Eidolon github repository for code, examples, and documentation"
  document_manager:
    loader:
      implementation: GitHubLoader
      owner: "eidolon-ai"
      repo: "eidolon"
      pattern: [ "**/*.md", "**/*.py" ]
      exclude: "**/test/**/*"
`
      },
      {
        title: "Agent-Agent Communication",
        language: 'yaml',
        code: `---
apiVersion: server.eidolonai.com/v1alpha1
kind: Agent
metadata:
  name: manager

spec:
  system_prompt:
    You are a tech manager servicing user requests. You manage a team of engineers and qa workers. Work with your team as needed to answer user questions.
  agent_refs: ["engineer", "qa"]
---
apiVersion: server.eidolonai.com/v1alpha1
kind: Agent
metadata:
  name: manager

spec:
  system_prompt:
    You are a tech manager servicing user requests. You manage a team of engineers and qa workers. Work with your team as needed to answer user questions.
  agent_refs: ["engineer", "qa"]
---
apiVersion: server.eidolonai.com/v1alpha1
kind: Agent
metadata:
  name: engineer

spec:
  system_prompt:
    You are an engineer. Your manager (user) will come to with questions. Work with the qa team as needed to answer user questions.
  agent_refs: ["qa"] 
---
apiVersion: server.eidolonai.com/v1alpha1
kind: Agent
metadata:
  name: qa

spec:
  system_prompt: You are a qa engineer. Quality is your top concern.
`
      }
    ]}
  >
    <Fragment slot="content">
      <h3 class="text-2xl font-bold tracking-tight dark:text-white sm:text-3xl mb-2">1. Build</h3>
      Defining agents is fast and easy.
    </Fragment>

    <Fragment slot="bg">
      <div class="absolute inset-0 dark:bg-blue-950 bg-gradient-to-b from-white to-gray-100 dark:bg-none"></div>
    </Fragment>
  </ContentWithTabs>

  <!-- Content Widget **************** -->
  <hr/>

  <ContentWithTabs
    id="deploy"
    isReversed
    bullets={[
      {
        title: 'Deploy directly to Kubernetes',
        description:
          'Agents are infrastructure and should be deployed as such. Deploy directly using your organizations Kubernetes management tools / pipeline.',
      },
      {
        title: 'Scale agents as needed',
        description:
          'Agents are stateless and scale horizontally to meet your needs.',
      },
      {
        title: 'Build safely with enforceable policies',
        description:
          'With kubernetes deployment, you can enforce policies to ensure your agents are deployed with access only to the resources they need.',
      },
    ]}
    tabs={[
      {
        title: "Kubernetes",
        language: 'bash',
        code: `
% helm repo add eidolon https://eidolonai.com/charts
... 
% helm install eidolon eidolon-operator/eidolon-operator-chart
...
% kubectl apply -f agent.yaml
agent.server.eidolonai.com/agent created
% kubectl get agents
NAME      AGE
chatbot   3s`
      },
      {
        title: "Local Dev",
        src: "~/assets/images/make_docker_serve.svg",
        alt: "CLI",
      }

    ]}
  >
    <Fragment slot="content">
      <h3 class="text-2xl font-bold tracking-tight dark:text-white sm:text-3xl mb-2">2. Deploy</h3>
      What good is an agent that can't be deployed?
    </Fragment>

    <Fragment slot="bg">
      <div class="absolute inset-0 bg-gradient-to-b from-white to-gray-100 dark:bg-transparent dark:bg-none"></div>
    </Fragment>
  </ContentWithTabs>
  <hr/>

  <ContentWithTabs
    id="consume"
    bullets={[
      {
        title: 'Build a GUI with React components',
        description:
          'Eidolon provides a set of React components to help you build a GUI to interact with your chatbot agents. The components are designed to be easy to use and extensible.',
      },
      {
        title: 'Run actions directly through HTTP REST API',
        description:
          'At the end of the day, agents are just http services. You can run actions directly through the REST API or use the Eidolon webui to interact with your agents.',
      },
      {
        title: 'Hack away with the CLI',
        description:
          'Eidolon provides a CLI to help you interact with your agents in a more ad-hoc manner. The CLI is a powerful tool to help you experiment with your agents quickly.',
      },
    ]}
    tabs={[
      {
        title: "WebUI",
        src: "~/assets/images/webui.gif",
        alt: "RAG",
      },
      {
        title: "CLI",
        src: "~/assets/images/cli.svg",
        alt: "CLI",
      },
      {
        title: "Python",
        language: 'py',
        code: `from eidolon_ai_client.client import Agent

agent = Agent.get("HelloWorld")
process = await agent.create_process()
body = "Why should I use Eidolon?"
response = await process.action("converse", body)

assert "fast iteration times" in response.data
assert "extensible agent mesh" in response.data
assert "supportive community" in response.data`
      },
      {
        title: "Typescript",
        language: 'ts',
        code: `import {EidolonClient} from "@eidolon-ai/client";

const client = new EidolonClient()
const {process: p1} = await client.createProcess("HelloWorld")
const process = client.process(p1.process_id)
const agent = process.agent("HelloWorld")
const body = "Why should I use Eidolon?"
const response = await agent.action("converse", body)

expect(response).toContain("fast iteration times")
expect(response).toContain("extensible agent mesh")
expect(response).toContain("supportive community")`,
      },
    ]}
  >
    <Fragment slot="content">
      <h3 class="text-2xl font-bold tracking-tight dark:text-white sm:text-3xl mb-2">3. Consume</h3>
      GenAI applications need to consume agents in a diverse set of ways.
    </Fragment>

    <Fragment slot="bg">
      <div class="absolute inset-0 bg-gradient-to-b from-white to-gray-100 dark:bg-none dark:bg-blue-950 "></div>
    </Fragment>
  </ContentWithTabs>

  <hr/>
    </div>
</Layout>
