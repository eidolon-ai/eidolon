---
import Headline from "../ui/Headline.astro";
import WidgetWrapper from "../ui/WidgetWrapper.astro";
import TabItem from "./TabItem.astro";

export interface TabItem {
  title: string
  icon?: string
  slot: string
}

export interface Props {
  title?: string
  subtitle?: string
  tagline?: string
  
  vertical?: boolean
  tabs: TabItem[]
  id?: string
  isDark?: boolean
  classes?: Record<string, string>
  bg?: string
}

let {
  title = await Astro.slots.render('title'),
  subtitle = await Astro.slots.render('subtitle'),
  tagline,

  vertical = false,
  tabs = [],

  id,
  isDark = false,
  classes = {},
  bg = await Astro.slots.render('bg'),
}: Props = Astro.props

if (!id) {
  id = `content-with-code-${Math.random().toString(36).substr(2, 9)}`;
}

const containerClasses = vertical ? "md:flex" : "border-b border-gray-200 dark:border-gray-700"
const ulClasses = vertical ? "flex-column space-y space-y-4" : "flex flex-wrap"
const tabClasses = vertical ? "rounded w-full text-xs p-2" : "rounded-t-lg p-2"
const activeClasses = vertical ? 
  "text-white bg-primary dark:bg-primary" : 
  "border-visible text-blue-600 hover:text-blue-600 dark:text-blue-500 dark:hover:text-blue-500 border-blue-600 dark:border-blue-500"
const inactiveClasses = vertical ? 
  "dark:bg-transparent text-gray-500 hover:text-gray-600 dark:text-gray-400 bg-gray-100 hover:bg-gray-300 dark:bg-gray-700 dark:hover:text-gray-300" : 
  "border-transparent dark:border-transparent text-gray-500 hover:text-gray-600 dark:text-gray-400 border-gray-100 hover:border-gray-300 dark:border-gray-700 dark:hover:text-gray-300"

const contentClasses = vertical ? "p-6 md:ml-8 bg-gray-50 text-medium text-gray-500 dark:text-gray-400 dark:bg-gray-800 rounded-xl w-full" : ""
---
<WidgetWrapper
  id={id}
  isDark={isDark}
  containerClass={`mx-auto pt-2 md:pt-4 lg:pt-8 ${classes?.container ?? ''}`}
  bg={bg}
>
  <Headline
    title={title}
    subtitle={subtitle}
    tagline={tagline}
    classes={{
      container: 'max-w-xl sm:mx-auto lg:max-w-2xl',
      title: 'text-3xl md:text-4xl font-bold leading-tighter tracking-tighter mt-4 font-heading mb-0',
      subtitle: 'max-w-3xl mx-auto sm:text-center text-xl text-muted dark:text-slate-400',
    }}
  />

  <div class=`mx-auto p-4 md:px-8 max-w-5xl ${containerClasses}`>
    <div class="mb-2">
      <ul class=`${ulClasses} text-sm font-medium text-center` 
          id=`${id}-tab` 
          data-tabs-toggle=`#${id}-tab-content` role="tablist"
          data-tabs-active-classes={activeClasses} 
          data-tabs-inactive-classes={inactiveClasses} 
      >
        {tabs.map((item, index) => (
          <li class="" role="presentation" style="cursor:pointer;">
            <a 
              id={`${id}-${index}-tab`} 
              data-tabs-target={`#${id}-${index}-content`} 
              class=`inline-flex items-center justify-center group ${tabClasses}`
              role="tab"
              aria-controls={item.title}
              aria-selected="false"
            >
              {item.icon && (
                <img class="w-4 h-4 me-2 text-gray-400 group-hover:text-gray-500 dark:text-gray-500 dark:group-hover:text-gray-300" src={item.icon} alt="" />
              )}
                {item.title}
            </a>
          </li>
        ))}
      </ul>
    </div>
    <div id=`#${id}-tab-content` class={contentClasses}>
      {tabs.map((item, index) => (
        <div class="hidden" id={`${id}-${index}-content`} role="tabpanel" aria-labelledby={`${id}-${index}-tab`}>
          <div class="relative m-auto">
            <div set:html={Astro.slots.render(item.slot)}></div>
          </div>
        </div>
      ))}
    </div>
  </div>
</WidgetWrapper>
