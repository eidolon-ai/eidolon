---
import type {CallToAction} from '~/types';
import Button from '~/components/ui/Button.astro';
import "./GridLines.css"

export interface Props {
  title?: string;
  subtitle?: string;
  tagline?: string;
  content?: string;
  actions?: string | CallToAction[];
  image?: string | any; // TODO: find HTMLElementProps
}

const {
  title = await Astro.slots.render('title'),
  subtitle = await Astro.slots.render('subtitle'),
  tagline = await Astro.slots.render('tagline'),
  content = await Astro.slots.render('content'),
  actions = await Astro.slots.render('actions'),
  image = await Astro.slots.render('image'),
} = Astro.props;

const githubIcon = `<svg preserveAspectRatio="xMidYMid meet" viewBox="0 0 98 96" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" clip-rule="evenodd" 
d="M48.854 0C21.839 0 0 22 0 49.217c0 21.756 13.993 40.172 33.405 46.69 2.427.49 3.316-1.059 3.316-2.362 0-1.141-.08-5.052-.08-9.127-13.59 2.934-16.42-5.867-16.42-5.867-2.184-5.704-5.42-7.17-5.42-7.17-4.448-3.015.324-3.015.324-3.015 4.934.326 7.523 5.052 7.523 5.052 4.367 7.496 11.404 5.378 14.235 4.074.404-3.178 1.699-5.378 3.074-6.6-10.839-1.141-22.243-5.378-22.243-24.283 0-5.378 1.94-9.778 5.014-13.2-.485-1.222-2.184-6.275.486-13.038 0 0 4.125-1.304 13.426 5.052a46.97 46.97 0 0 1 12.214-1.63c4.125 0 8.33.571 12.213 1.63 9.302-6.356 13.427-5.052 13.427-5.052 2.67 6.763.97 11.816.485 13.038 3.155 3.422 5.015 7.822 5.015 13.2 0 18.905-11.404 23.06-22.324 24.283 1.78 1.548 3.316 4.481 3.316 9.126 0 6.6-.08 11.897-.08 13.526 0 1.304.89 2.853 3.316 2.364 19.412-6.52 33.405-24.935 33.405-46.691C97.707 22 75.788 0 48.854 0z" 
fill="currentColor"/></svg>`

const githubText = `<div style="height: 16px; width: 16px">${githubIcon}</div>&nbsp;&nbsp;Star on GitHub`
---

<section id="main-title" class="relative not-prose flex pl-main pr-main md:pl-main-md md:pr-main-md lg:pl-main-lg lg:pr-main-lg justify-center mt-20 mb-20">
  <div class="relative w-[calc(100%-var(--line-offset-sm)*2)]  md:w-[calc(100%-var(--line-offset-md)*2)] lg:w-[calc(100%-var(--line-offset)*2)]">
    <div id="main-top-gutter" class="flex flex-row">
      <div class="w-full basis-1/4"></div>
      <div class="h-20 relative mx-auto w-full basis-1/2">
        <div class="grid-line-horizontal" data-fade=top data-side=left></div>
        <div class="grid-line-horizontal" data-fade=top data-side=right></div>
      </div>
      <div class="w-full basis-1/4"></div>
    </div>
    <div class="relative flex-col grid-line-top text-center">
      <div class="grid-line-horizontal" data-fade=both data-side=left data-offset></div>
      <div class="relative pointer-events-none grid-line-bottom pt-10 pb-10">
        {
          tagline && (
            <p
              class="font-bold leading-tighter tracking-tighter dark:text-gray-200 pl-4 pr-4" style="font-size: max(36px,min(4.5vw,84px))"
              set:html={tagline}
            />
          )
        }
      </div>
      <div class="relative pt-10 pb-10 grid-line-bottom pl-8 pr-8 md:pl-10 md:pr-10 lg:pl-20 lg:pr-20">
        <p
          class="text-gray-500 dark:text-gray-200 pointer-events-none"
          style="text-rendering: optimizeLegibility; font-size: max(15px,min(2vw,28px)) "
          set:html={content}
        />
      </div>
      <!--
      -->
      <div class="relative mx-auto max-w-none">
        <div class="flex flex-row flex-nowrap justify-evenly items-center ">
          <div class="w-full hidden md:visible md:basis-1/4"/>
          <div class="relative flex flex-nowrap flex-row justify-center items-center gap-4 m-0 w-full pt-8 pb-8 md:basis-1/2">
            <div class="h-full mx-auto w-full flex justify-evenly flex-row items-center align-middle">
              <div class="grid-line-horizontal hidden md:block" data-fade=none data-side=left></div>
              <div class="grid-line-horizontal hidden md:block" data-fade=none data-side=right></div>
              <div class="flex gap-5">
                <Button variant="primary" href="/docs/quickstart">Get Started</Button>
                <Button variant="secondary" href="https://github.com/eidolon-ai/eidolon">Star on GitHub ⭐️</Button>
              </div>
            </div>
          </div>
          <div class="w-full hidden md:visible md:basis-1/4"/>
        </div>
      </div>
      <div class="grid-line-horizontal" data-fade=both data-side=right data-offset></div>
    </div>
    <div id="main-bottom-gutter" class="relative flex flex-row">
      <div class="w-full grid-line-top basis-1/4"></div>
      <div class="h-20 relative mx-auto w-full basis-1/2">
        <div class="grid-line-horizontal" data-fade=bottom data-side=left></div>
        <div class="grid-line-horizontal" data-fade=bottom data-side=right></div>
      </div>
      <div class="w-full basis-1/4"></div>
    </div>
  </div>
</section>

<script>
  const addAnimation = (list: NodeListOf<Element>, selector: string, animation: string) => {
    list.forEach((element) => {
      const style = getComputedStyle(element, selector);
      style.setProperty('animation-name', animation);
    });
  }
  
  const removeAnimation = (list: NodeListOf<Element>, selector: string) => {
    list.forEach((element) => {
      const style = getComputedStyle(element, selector);
      style.removeProperty('animation-name');
    });
  }
  
  const observer = new IntersectionObserver(entries => {
  entries.forEach(entry => {
    const main_title_element = document.getElementById('main-title');

    if (entry.isIntersecting) {
      main_title_element.style.setProperty('--intro_width','intro_width');
      main_title_element.style.setProperty('--intro_height','intro_height');
      main_title_element.style.setProperty('--intro_height_auto','intro_height_auto');
    } else {
      // We're not intersecting, so remove the class!
      main_title_element.style.removeProperty('--intro_width');
      main_title_element.style.removeProperty('--intro_height');
      main_title_element.style.removeProperty('--intro_height_auto');
    }
  });
});

observer.observe(document.querySelector('.grid-line-top'));
</script>
