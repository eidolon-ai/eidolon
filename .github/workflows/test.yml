name: Test
on:
  push:
    branches: [main]
  pull_request:

jobs:
  examples-test:
    runs-on: ubuntu-latest
    services:
      mongodb:
        image: mongo:latest
        ports:
          - 27017:27017
    steps:
      - uses: actions/checkout@v4
      - name: Install poetry
        run: pipx install poetry
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'poetry'
      - run: poetry install
        working-directory: examples
      - run: poetry run ruff format .
        working-directory: examples
      - run: poetry run ruff check .
        working-directory: examples
      - run: mkdir -p /tmp/eidolon
        working-directory: examples
      - run: poetry run pytest
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          EIDOLON_DATA_DIR: /tmp/eidolon
          AZURE_CLIENT_ID: ${{ secrets.AZURE_AD_CLIENT_ID }}
          AZURE_CLIENT_SECRET: ${{ secrets.AZURE_AD_CLIENT_SECRET }}
          AZURE_TENANT_ID: ${{ secrets.AZURE_AD_TENANT_ID }}
          AZURE_AD_TEST_CLIENT_ID: ${{ secrets.AZURE_AD_TEST_CLIENT_ID }}
          AZURE_AD_TEST_CLIENT_SECRET: ${{ secrets.AZURE_AD_TEST_CLIENT_SECRET }}
        working-directory: examples
      - uses: actions/upload-artifact@v4
        if: ${{ !success() }}
        with:
          name: server-logs
          path: /tmp/eidolon_test_logs/

  test-quickstart-no-mongodb:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install poetry
        run: pipx install poetry
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'poetry'
      - run: poetry install
        working-directory: examples
      - run: poetry run pytest tests/test_quickstart.py
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        working-directory: examples

  sdk-test:
    runs-on: ubuntu-latest
    services:
      mongodb:
        image: mongo:latest
        ports:
          - 27017:27017
    steps:
      - uses: actions/checkout@v4
      - name: Install poetry
        run: pipx install poetry
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'poetry'
      - run: poetry install
        working-directory: sdk
      - run: poetry run ruff format .
        working-directory: sdk
      - run: poetry run ruff check .
        working-directory: sdk
      - run: poetry run pytest
        env:
          OPENAI_API_KEY: intentionally_unused
          CSE_ID: ${{ secrets.CLOUD_SEARCH_ENGINE_ID }}
          CSE_TOKEN: ${{ secrets.CLOUD_SEARCH_ENGINE_TOKEN }}
        working-directory: sdk

  sdk-test-local-memory:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install poetry
        run: pipx install poetry
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'poetry'
      - run: poetry install
        working-directory: sdk
      - run: poetry run pytest --symbolic_memory local
        env:
          OPENAI_API_KEY: intentionally_unused
          CSE_ID: ${{ secrets.CLOUD_SEARCH_ENGINE_ID }}
          CSE_TOKEN: ${{ secrets.CLOUD_SEARCH_ENGINE_TOKEN }}
        working-directory: sdk

  usage-service-test:
    runs-on: ubuntu-latest
    services:
      mongodb:
        image: mongo:latest
        ports:
          - 27017:27017
    steps:
      - uses: actions/checkout@v4
      - name: Install poetry
        run: pipx install poetry
      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'poetry'
      - run: poetry install
        working-directory: usage-service/usage-server
      - run: poetry run ruff format .
        working-directory: usage-service/usage-server
      - run: poetry run ruff check .
        working-directory: usage-service/usage-server
      - run: poetry run pytest
        working-directory: usage-service/usage-server

  test-webui:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 21.x
      - uses: pnpm/action-setup@v3
        name: Install pnpm
        with:
          version: 8
          run_install: false
      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
      - uses: actions/cache@v4
        name: Setup pnpm cache
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
      - name: Install dependencies
        run: pnpm install
        working-directory: webui
      - name: lint
        run: pnpm lint
        working-directory: webui
      - name: build
        run: pnpm build
        working-directory: webui
      - name: test
        run: pnpm test --if-present
        working-directory: webui
      - name: test docker build
        run: docker build -t docker.io/eidolonai/webui -t docker.io/eidolonai/webui:$(npm pkg get version | tr -d '"') .
        working-directory: webui